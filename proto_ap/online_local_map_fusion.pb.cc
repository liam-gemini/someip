// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/online_local_map_fusion.proto

#include "proto_ap/online_local_map_fusion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
namespace SRprotobuf {
class FeaturePointSequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeaturePointSequence> _instance;
} _FeaturePointSequence_default_instance_;
class BoundaryObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryObject> _instance;
} _BoundaryObject_default_instance_;
class RoadMarkingObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadMarkingObject> _instance;
} _RoadMarkingObject_default_instance_;
class RoadMarkingPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadMarkingPoint> _instance;
} _RoadMarkingPoint_default_instance_;
class OnlineLocalMapMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnlineLocalMapMsg> _instance;
} _OnlineLocalMapMsg_default_instance_;
}  // namespace SRprotobuf
static void InitDefaultsscc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_BoundaryObject_default_instance_;
    new (ptr) ::SRprotobuf::BoundaryObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::BoundaryObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_FeaturePointSequence_default_instance_;
    new (ptr) ::SRprotobuf::FeaturePointSequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::FeaturePointSequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_OnlineLocalMapMsg_default_instance_;
    new (ptr) ::SRprotobuf::OnlineLocalMapMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::OnlineLocalMapMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_RoadMarkingObject_default_instance_;
    new (ptr) ::SRprotobuf::RoadMarkingObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::RoadMarkingObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_RoadMarkingPoint_default_instance_;
    new (ptr) ::SRprotobuf::RoadMarkingPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::RoadMarkingPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FeaturePointSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FeaturePointSequence, x_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FeaturePointSequence, y_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FeaturePointSequence, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BoundaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BoundaryObject, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BoundaryObject, type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BoundaryObject, color_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BoundaryObject, feature_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingObject, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingObject, rsm_type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingObject, points_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingObject, stop_line_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingPoint, x_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingPoint, y_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingPoint, z_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RoadMarkingPoint, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OnlineLocalMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OnlineLocalMapMsg, boudary_object_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OnlineLocalMapMsg, road_mark_object_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OnlineLocalMapMsg, drivable_space_map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SRprotobuf::FeaturePointSequence)},
  { 8, -1, sizeof(::SRprotobuf::BoundaryObject)},
  { 17, -1, sizeof(::SRprotobuf::RoadMarkingObject)},
  { 26, -1, sizeof(::SRprotobuf::RoadMarkingPoint)},
  { 35, -1, sizeof(::SRprotobuf::OnlineLocalMapMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_FeaturePointSequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_BoundaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_RoadMarkingObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_RoadMarkingPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_OnlineLocalMapMsg_default_instance_),
};

const char descriptor_table_protodef_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&proto_ap/online_local_map_fusion.proto"
  "\022\nSRprotobuf\032\023proto_ap/base.proto\"7\n\024Fea"
  "turePointSequence\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022"
  "\t\n\001z\030\003 \001(\002\"s\n\016BoundaryObject\022\n\n\002id\030\001 \001(\004"
  "\022\014\n\004type\030\002 \001(\r\022\r\n\005color\030\003 \001(\r\0228\n\016feature"
  "_points\030\004 \003(\0132 .SRprotobuf.FeaturePointS"
  "equence\"x\n\021RoadMarkingObject\022\n\n\002id\030\001 \001(\002"
  "\022\020\n\010rsm_type\030\002 \001(\r\022,\n\006points\030\003 \003(\0132\034.SRp"
  "rotobuf.RoadMarkingPoint\022\027\n\017stop_line_co"
  "lor\030\004 \001(\r\"A\n\020RoadMarkingPoint\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004type\030\004 \001(\r\"\234\001\n"
  "\021OnlineLocalMapMsg\0222\n\016boudary_object\030\001 \003"
  "(\0132\032.SRprotobuf.BoundaryObject\0227\n\020road_m"
  "ark_object\030\002 \003(\0132\035.SRprotobuf.RoadMarkin"
  "gObject\022\032\n\022drivable_space_map\030\003 \003(\005*\377\003\n\014"
  "LaneLineType\022\025\n\021LINE_TYPE_UNKNOWN\020\000\022\032\n\026L"
  "INE_TYPE_SINGLE_SOLID\020\001\022\033\n\027LINE_TYPE_SIN"
  "GLE_DASHED\020\002\022\032\n\026LINE_TYPE_SHORT_DASHED\020\003"
  "\022\032\n\026LINE_TYPE_DOUBLE_SOLID\020\004\022\033\n\027LINE_TYP"
  "E_DOUBLE_DASHED\020\005\022%\n!LINE_TYPE_LEFT_SOLI"
  "D_RIGHT_DASHED\020\006\022%\n!LINE_TYPE_RIGHT_SOLI"
  "D_LEFT_DASHED\020\007\022\031\n\025LINE_TYPE_SHADED_AREA"
  "\020\010\022\025\n\021LINE_TYPE_VIRTUAL\020\t\022\"\n\036LINE_TYPE_I"
  "NTERSECTION_VIRTUAL\020\n\022\022\n\016LINE_TYPE_CURB\020"
  "\013\022\033\n\027LINE_TYPE_UNCLOSED_ROAD\020\014\022\022\n\016LINE_T"
  "YPE_BOLT\020\r\022\031\n\025LINE_TYPE_DASHED_SLOW\020\016\022\030\n"
  "\024LINE_TYPE_SOLID_SLOW\020\017\022\026\n\022LINE_TYPE_OBS"
  "TACLE\020\020\022\024\n\020LINE_TYPE_OTHERS\020\021*\217\002\n\017RoadMa"
  "rkingType\022\014\n\010STRAIGHT\020\000\022\r\n\tLEFT_TURN\020\001\022\016"
  "\n\nRIGHT_TURN\020\002\022\026\n\022STRAIGHT_LEFT_TURN\020\003\022\027"
  "\n\023STRAIGHT_RIGHT_TURN\020\004\022\034\n\030STRAIGHT_LEFT"
  "_RIGHT_TURN\020\005\022\023\n\017LEFT_RIGHT_TURN\020\006\022\017\n\013LE"
  "FT_U_TURN\020\007\022\020\n\014RIGHT_U_TURN\020\010\022\024\n\020LEFT_TU"
  "RN_U_TURN\020\t\022\025\n\021RIGHT_TURN_U_TURN\020\n\022\013\n\007UN"
  "KNOWN\020\013\022\016\n\nspeed_bump\020,b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto_deps[1] = {
  &::descriptor_table_proto_5fap_2fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto_sccs[5] = {
  &scc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto = {
  false, false, descriptor_table_protodef_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto, "proto_ap/online_local_map_fusion.proto", 1391,
  &descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto_once, descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto_sccs, descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto::offsets,
  file_level_metadata_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto, 5, file_level_enum_descriptors_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto, file_level_service_descriptors_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto)), true);
namespace SRprotobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto[0];
}
bool LaneLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarkingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto[1];
}
bool RoadMarkingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 44:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FeaturePointSequence::InitAsDefaultInstance() {
}
class FeaturePointSequence::_Internal {
 public:
};

FeaturePointSequence::FeaturePointSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.FeaturePointSequence)
}
FeaturePointSequence::FeaturePointSequence(const FeaturePointSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.FeaturePointSequence)
}

void FeaturePointSequence::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

FeaturePointSequence::~FeaturePointSequence() {
  // @@protoc_insertion_point(destructor:SRprotobuf.FeaturePointSequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeaturePointSequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeaturePointSequence::ArenaDtor(void* object) {
  FeaturePointSequence* _this = reinterpret_cast< FeaturePointSequence* >(object);
  (void)_this;
}
void FeaturePointSequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeaturePointSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeaturePointSequence& FeaturePointSequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeaturePointSequence_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void FeaturePointSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.FeaturePointSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeaturePointSequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeaturePointSequence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.FeaturePointSequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.FeaturePointSequence)
  return target;
}

size_t FeaturePointSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.FeaturePointSequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeaturePointSequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.FeaturePointSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturePointSequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeaturePointSequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.FeaturePointSequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.FeaturePointSequence)
    MergeFrom(*source);
  }
}

void FeaturePointSequence::MergeFrom(const FeaturePointSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.FeaturePointSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void FeaturePointSequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.FeaturePointSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturePointSequence::CopyFrom(const FeaturePointSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.FeaturePointSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturePointSequence::IsInitialized() const {
  return true;
}

void FeaturePointSequence::InternalSwap(FeaturePointSequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeaturePointSequence, z_)
      + sizeof(FeaturePointSequence::z_)
      - PROTOBUF_FIELD_OFFSET(FeaturePointSequence, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeaturePointSequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundaryObject::InitAsDefaultInstance() {
}
class BoundaryObject::_Internal {
 public:
};

BoundaryObject::BoundaryObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.BoundaryObject)
}
BoundaryObject::BoundaryObject(const BoundaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_points_(from.feature_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.BoundaryObject)
}

void BoundaryObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_));
}

BoundaryObject::~BoundaryObject() {
  // @@protoc_insertion_point(destructor:SRprotobuf.BoundaryObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundaryObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoundaryObject::ArenaDtor(void* object) {
  BoundaryObject* _this = reinterpret_cast< BoundaryObject* >(object);
  (void)_this;
}
void BoundaryObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryObject& BoundaryObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void BoundaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.BoundaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_points_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.FeaturePointSequence feature_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.BoundaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color(), target);
  }

  // repeated .SRprotobuf.FeaturePointSequence feature_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_feature_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.BoundaryObject)
  return target;
}

size_t BoundaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.BoundaryObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.FeaturePointSequence feature_points = 4;
  total_size += 1UL * this->_internal_feature_points_size();
  for (const auto& msg : this->feature_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.BoundaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.BoundaryObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.BoundaryObject)
    MergeFrom(*source);
  }
}

void BoundaryObject::MergeFrom(const BoundaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.BoundaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_points_.MergeFrom(from.feature_points_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void BoundaryObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.BoundaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryObject::CopyFrom(const BoundaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.BoundaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryObject::IsInitialized() const {
  return true;
}

void BoundaryObject::InternalSwap(BoundaryObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_points_.InternalSwap(&other->feature_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundaryObject, color_)
      + sizeof(BoundaryObject::color_)
      - PROTOBUF_FIELD_OFFSET(BoundaryObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadMarkingObject::InitAsDefaultInstance() {
}
class RoadMarkingObject::_Internal {
 public:
};

RoadMarkingObject::RoadMarkingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.RoadMarkingObject)
}
RoadMarkingObject::RoadMarkingObject(const RoadMarkingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_line_color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stop_line_color_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.RoadMarkingObject)
}

void RoadMarkingObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_line_color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stop_line_color_));
}

RoadMarkingObject::~RoadMarkingObject() {
  // @@protoc_insertion_point(destructor:SRprotobuf.RoadMarkingObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadMarkingObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadMarkingObject::ArenaDtor(void* object) {
  RoadMarkingObject* _this = reinterpret_cast< RoadMarkingObject* >(object);
  (void)_this;
}
void RoadMarkingObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadMarkingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadMarkingObject& RoadMarkingObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadMarkingObject_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void RoadMarkingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.RoadMarkingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_line_color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stop_line_color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadMarkingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 rsm_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rsm_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.RoadMarkingPoint points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 stop_line_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stop_line_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadMarkingObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.RoadMarkingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_id(), target);
  }

  // uint32 rsm_type = 2;
  if (this->rsm_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rsm_type(), target);
  }

  // repeated .SRprotobuf.RoadMarkingPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  // uint32 stop_line_color = 4;
  if (this->stop_line_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stop_line_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.RoadMarkingObject)
  return target;
}

size_t RoadMarkingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.RoadMarkingObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.RoadMarkingPoint points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 rsm_type = 2;
  if (this->rsm_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rsm_type());
  }

  // uint32 stop_line_color = 4;
  if (this->stop_line_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stop_line_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMarkingObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.RoadMarkingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarkingObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadMarkingObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.RoadMarkingObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.RoadMarkingObject)
    MergeFrom(*source);
  }
}

void RoadMarkingObject::MergeFrom(const RoadMarkingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.RoadMarkingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!(from.id() <= 0 && from.id() >= 0)) {
    _internal_set_id(from._internal_id());
  }
  if (from.rsm_type() != 0) {
    _internal_set_rsm_type(from._internal_rsm_type());
  }
  if (from.stop_line_color() != 0) {
    _internal_set_stop_line_color(from._internal_stop_line_color());
  }
}

void RoadMarkingObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.RoadMarkingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarkingObject::CopyFrom(const RoadMarkingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.RoadMarkingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarkingObject::IsInitialized() const {
  return true;
}

void RoadMarkingObject::InternalSwap(RoadMarkingObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadMarkingObject, stop_line_color_)
      + sizeof(RoadMarkingObject::stop_line_color_)
      - PROTOBUF_FIELD_OFFSET(RoadMarkingObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarkingObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadMarkingPoint::InitAsDefaultInstance() {
}
class RoadMarkingPoint::_Internal {
 public:
};

RoadMarkingPoint::RoadMarkingPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.RoadMarkingPoint)
}
RoadMarkingPoint::RoadMarkingPoint(const RoadMarkingPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.RoadMarkingPoint)
}

void RoadMarkingPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(type_));
}

RoadMarkingPoint::~RoadMarkingPoint() {
  // @@protoc_insertion_point(destructor:SRprotobuf.RoadMarkingPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadMarkingPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadMarkingPoint::ArenaDtor(void* object) {
  RoadMarkingPoint* _this = reinterpret_cast< RoadMarkingPoint* >(object);
  (void)_this;
}
void RoadMarkingPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadMarkingPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadMarkingPoint& RoadMarkingPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadMarkingPoint_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void RoadMarkingPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.RoadMarkingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadMarkingPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadMarkingPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.RoadMarkingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.RoadMarkingPoint)
  return target;
}

size_t RoadMarkingPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.RoadMarkingPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMarkingPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.RoadMarkingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarkingPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadMarkingPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.RoadMarkingPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.RoadMarkingPoint)
    MergeFrom(*source);
  }
}

void RoadMarkingPoint::MergeFrom(const RoadMarkingPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.RoadMarkingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RoadMarkingPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.RoadMarkingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarkingPoint::CopyFrom(const RoadMarkingPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.RoadMarkingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarkingPoint::IsInitialized() const {
  return true;
}

void RoadMarkingPoint::InternalSwap(RoadMarkingPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadMarkingPoint, type_)
      + sizeof(RoadMarkingPoint::type_)
      - PROTOBUF_FIELD_OFFSET(RoadMarkingPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarkingPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnlineLocalMapMsg::InitAsDefaultInstance() {
}
class OnlineLocalMapMsg::_Internal {
 public:
};

OnlineLocalMapMsg::OnlineLocalMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boudary_object_(arena),
  road_mark_object_(arena),
  drivable_space_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.OnlineLocalMapMsg)
}
OnlineLocalMapMsg::OnlineLocalMapMsg(const OnlineLocalMapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boudary_object_(from.boudary_object_),
      road_mark_object_(from.road_mark_object_),
      drivable_space_map_(from.drivable_space_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.OnlineLocalMapMsg)
}

void OnlineLocalMapMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
}

OnlineLocalMapMsg::~OnlineLocalMapMsg() {
  // @@protoc_insertion_point(destructor:SRprotobuf.OnlineLocalMapMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnlineLocalMapMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnlineLocalMapMsg::ArenaDtor(void* object) {
  OnlineLocalMapMsg* _this = reinterpret_cast< OnlineLocalMapMsg* >(object);
  (void)_this;
}
void OnlineLocalMapMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnlineLocalMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnlineLocalMapMsg& OnlineLocalMapMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void OnlineLocalMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.OnlineLocalMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boudary_object_.Clear();
  road_mark_object_.Clear();
  drivable_space_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnlineLocalMapMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .SRprotobuf.BoundaryObject boudary_object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boudary_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.RoadMarkingObject road_mark_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_mark_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 drivable_space_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_drivable_space_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnlineLocalMapMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.OnlineLocalMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SRprotobuf.BoundaryObject boudary_object = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boudary_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_boudary_object(i), target, stream);
  }

  // repeated .SRprotobuf.RoadMarkingObject road_mark_object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_mark_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_road_mark_object(i), target, stream);
  }

  // repeated int32 drivable_space_map = 3;
  {
    int byte_size = _drivable_space_map_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_drivable_space_map(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.OnlineLocalMapMsg)
  return target;
}

size_t OnlineLocalMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.OnlineLocalMapMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.BoundaryObject boudary_object = 1;
  total_size += 1UL * this->_internal_boudary_object_size();
  for (const auto& msg : this->boudary_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.RoadMarkingObject road_mark_object = 2;
  total_size += 1UL * this->_internal_road_mark_object_size();
  for (const auto& msg : this->road_mark_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 drivable_space_map = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->drivable_space_map_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _drivable_space_map_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnlineLocalMapMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.OnlineLocalMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlineLocalMapMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnlineLocalMapMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.OnlineLocalMapMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.OnlineLocalMapMsg)
    MergeFrom(*source);
  }
}

void OnlineLocalMapMsg::MergeFrom(const OnlineLocalMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.OnlineLocalMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boudary_object_.MergeFrom(from.boudary_object_);
  road_mark_object_.MergeFrom(from.road_mark_object_);
  drivable_space_map_.MergeFrom(from.drivable_space_map_);
}

void OnlineLocalMapMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.OnlineLocalMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineLocalMapMsg::CopyFrom(const OnlineLocalMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.OnlineLocalMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineLocalMapMsg::IsInitialized() const {
  return true;
}

void OnlineLocalMapMsg::InternalSwap(OnlineLocalMapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  boudary_object_.InternalSwap(&other->boudary_object_);
  road_mark_object_.InternalSwap(&other->road_mark_object_);
  drivable_space_map_.InternalSwap(&other->drivable_space_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnlineLocalMapMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SRprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SRprotobuf::FeaturePointSequence* Arena::CreateMaybeMessage< ::SRprotobuf::FeaturePointSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::FeaturePointSequence >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::BoundaryObject* Arena::CreateMaybeMessage< ::SRprotobuf::BoundaryObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::BoundaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::RoadMarkingObject* Arena::CreateMaybeMessage< ::SRprotobuf::RoadMarkingObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::RoadMarkingObject >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::RoadMarkingPoint* Arena::CreateMaybeMessage< ::SRprotobuf::RoadMarkingPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::RoadMarkingPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::OnlineLocalMapMsg* Arena::CreateMaybeMessage< ::SRprotobuf::OnlineLocalMapMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::OnlineLocalMapMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
