// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/WM_display_realtime.proto

#include "proto_ap/WM_display_realtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloorLevel_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Location_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2f_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose3f_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size3f_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Slot_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
namespace SRprotobuf {
class StripObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripObstacle> _instance;
} _StripObstacle_default_instance_;
class ApPathPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApPathPoint> _instance;
} _ApPathPoint_default_instance_;
class ApLaneLineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApLaneLineInfo> _instance;
} _ApLaneLineInfo_default_instance_;
class ApDynaObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApDynaObject> _instance;
} _ApDynaObject_default_instance_;
class ApTrajectoryDataTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApTrajectoryDataType> _instance;
} _ApTrajectoryDataType_default_instance_;
class BDistancePercentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BDistancePercent> _instance;
} _BDistancePercent_default_instance_;
class RTFStatusMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTFStatusMsg> _instance;
} _RTFStatusMsg_default_instance_;
class PkoutTerminationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PkoutTerminationInfo> _instance;
} _PkoutTerminationInfo_default_instance_;
class ApEssentialMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApEssentialMsg> _instance;
} _ApEssentialMsg_default_instance_;
class ApNaviMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApNaviMsg> _instance;
} _ApNaviMsg_default_instance_;
class TrainingSpdBumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainingSpdBump> _instance;
} _TrainingSpdBump_default_instance_;
class SlotIdMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlotIdMapping> _instance;
} _SlotIdMapping_default_instance_;
class Ap_StaticObjectPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ap_StaticObjectPoint> _instance;
} _Ap_StaticObjectPoint_default_instance_;
class Ap_StaticObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ap_StaticObject> _instance;
} _Ap_StaticObject_default_instance_;
class WallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wall> _instance;
} _Wall_default_instance_;
class BevPillarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BevPillar> _instance;
} _BevPillar_default_instance_;
class OccupancyNetParkingMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OccupancyNetParkingMsg> _instance;
} _OccupancyNetParkingMsg_default_instance_;
class ApDrivingDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApDrivingData> _instance;
} _ApDrivingData_default_instance_;
}  // namespace SRprotobuf
static void InitDefaultsscc_info_ApDrivingData_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApDrivingData_default_instance_;
    new (ptr) ::SRprotobuf::ApDrivingData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApDrivingData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_ApDrivingData_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_ApDrivingData_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Location_proto_5fap_2fbase_2eproto.base,
      &scc_info_Slot_proto_5fap_2fbase_2eproto.base,
      &scc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_OnlineLocalMapMsg_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApDynaObject_default_instance_;
    new (ptr) ::SRprotobuf::ApDynaObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApDynaObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Size3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_Pose3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApEssentialMsg_default_instance_;
    new (ptr) ::SRprotobuf::ApEssentialMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApEssentialMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
      &scc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApLaneLineInfo_default_instance_;
    new (ptr) ::SRprotobuf::ApLaneLineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApLaneLineInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApNaviMsg_default_instance_;
    new (ptr) ::SRprotobuf::ApNaviMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApNaviMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {}};

static void InitDefaultsscc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApPathPoint_default_instance_;
    new (ptr) ::SRprotobuf::ApPathPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApPathPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_ApTrajectoryDataType_default_instance_;
    new (ptr) ::SRprotobuf::ApTrajectoryDataType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::ApTrajectoryDataType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Ap_StaticObject_default_instance_;
    new (ptr) ::SRprotobuf::Ap_StaticObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Ap_StaticObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Ap_StaticObjectPoint_default_instance_;
    new (ptr) ::SRprotobuf::Ap_StaticObjectPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Ap_StaticObjectPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_BDistancePercent_default_instance_;
    new (ptr) ::SRprotobuf::BDistancePercent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::BDistancePercent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {}};

static void InitDefaultsscc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_BevPillar_default_instance_;
    new (ptr) ::SRprotobuf::BevPillar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::BevPillar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Point2f_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_OccupancyNetParkingMsg_default_instance_;
    new (ptr) ::SRprotobuf::OccupancyNetParkingMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::OccupancyNetParkingMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Point2f_proto_5fap_2fbase_2eproto.base,
      &scc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_PkoutTerminationInfo_default_instance_;
    new (ptr) ::SRprotobuf::PkoutTerminationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::PkoutTerminationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_RTFStatusMsg_default_instance_;
    new (ptr) ::SRprotobuf::RTFStatusMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::RTFStatusMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Location_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_SlotIdMapping_default_instance_;
    new (ptr) ::SRprotobuf::SlotIdMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::SlotIdMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {}};

static void InitDefaultsscc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_StripObstacle_default_instance_;
    new (ptr) ::SRprotobuf::StripObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::StripObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Size3f_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_TrainingSpdBump_default_instance_;
    new (ptr) ::SRprotobuf::TrainingSpdBump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::TrainingSpdBump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {}};

static void InitDefaultsscc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Wall_default_instance_;
    new (ptr) ::SRprotobuf::Wall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Wall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, segment_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, size_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, color_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::StripObstacle, attri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, confidence_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, base_point_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, theta_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, s_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, left_width_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, right_width_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, dkappa_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, ddkappa_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, lane_width_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, link_id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, floor_level_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApPathPoint, hill_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApLaneLineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApLaneLineInfo, attri_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApLaneLineInfo, path_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, size_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, pose_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, pt_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, color_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, signal_light_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, brake_light_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, is_in_blind_region_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, blind_region_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, is_static_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, is_straddling_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, is_light_on_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, local_linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDynaObject, local_linear_acceleration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApTrajectoryDataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApTrajectoryDataType, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApTrajectoryDataType, type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApTrajectoryDataType, trajectory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BDistancePercent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BDistancePercent, distance_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BDistancePercent, percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, rtf_st_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, rtf_tips_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, fail_reason_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, total_distance_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, remain_distance_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, percent_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::RTFStatusMsg, start_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::PkoutTerminationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::PkoutTerminationInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::PkoutTerminationInfo, theta_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::PkoutTerminationInfo, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, xputips_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, xpuabnormal_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, statusindicate_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, failreason_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, arrow_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, voice_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, remaindistance_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, bdistancepercent_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, parkstate_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, globaltrajectoryindex_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, mapposestate_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, silentfavoritestate_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, hdmapid_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, favoriteslotready_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, is_hdmap_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, trainingtips_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, trainingst_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, trainingfail_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, terminal_attr_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, terminal_floor_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, map_time_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, desktop_avl_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, enter_map_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, easy_get_off_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, rtf_status_msg_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, coveredvalid_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, pkout_direction_st_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, pkout_current_direction_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, pkout_termination_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, pkout_slot_shape_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApEssentialMsg, pkout_ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApNaviMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApNaviMsg, navi_state_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApNaviMsg, navi_tips_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApNaviMsg, dist_to_startpoint_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApNaviMsg, dist_to_feature_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApNaviMsg, hill_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, flag_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, x_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, y_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, z_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, theta_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::TrainingSpdBump, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::SlotIdMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::SlotIdMapping, avmslotid_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::SlotIdMapping, parkslotid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObjectPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObjectPoint, position_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObjectPoint, is_visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, is_with_hanging_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, is_mature_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, is_passable_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, size_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, local_pose_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, polygon_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Ap_StaticObject, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Wall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Wall, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Wall, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BevPillar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BevPillar, pos_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BevPillar, min_z_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::BevPillar, max_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OccupancyNetParkingMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OccupancyNetParkingMsg, pillar_2d_size_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::OccupancyNetParkingMsg, bev_pillar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, location_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, slot_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, obj_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, lanelines_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, curfloor_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, trajectory_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, dynobj_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, essentialmsg_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, slotavm_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, spdbump_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, slotidmapping_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, ap_staticobject_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, navimsg_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, online_local_map_msg_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, wall_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::ApDrivingData, occupancy_net_parking_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SRprotobuf::StripObstacle)},
  { 11, -1, sizeof(::SRprotobuf::ApPathPoint)},
  { 29, -1, sizeof(::SRprotobuf::ApLaneLineInfo)},
  { 36, -1, sizeof(::SRprotobuf::ApDynaObject)},
  { 56, -1, sizeof(::SRprotobuf::ApTrajectoryDataType)},
  { 64, -1, sizeof(::SRprotobuf::BDistancePercent)},
  { 71, -1, sizeof(::SRprotobuf::RTFStatusMsg)},
  { 83, -1, sizeof(::SRprotobuf::PkoutTerminationInfo)},
  { 91, -1, sizeof(::SRprotobuf::ApEssentialMsg)},
  { 127, -1, sizeof(::SRprotobuf::ApNaviMsg)},
  { 137, -1, sizeof(::SRprotobuf::TrainingSpdBump)},
  { 148, -1, sizeof(::SRprotobuf::SlotIdMapping)},
  { 155, -1, sizeof(::SRprotobuf::Ap_StaticObjectPoint)},
  { 162, -1, sizeof(::SRprotobuf::Ap_StaticObject)},
  { 176, -1, sizeof(::SRprotobuf::Wall)},
  { 183, -1, sizeof(::SRprotobuf::BevPillar)},
  { 191, -1, sizeof(::SRprotobuf::OccupancyNetParkingMsg)},
  { 198, -1, sizeof(::SRprotobuf::ApDrivingData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_StripObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApPathPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApLaneLineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApDynaObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApTrajectoryDataType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_BDistancePercent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_RTFStatusMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_PkoutTerminationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApEssentialMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApNaviMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_TrainingSpdBump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_SlotIdMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Ap_StaticObjectPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Ap_StaticObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Wall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_BevPillar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_OccupancyNetParkingMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_ApDrivingData_default_instance_),
};

const char descriptor_table_protodef_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"proto_ap/WM_display_realtime.proto\022\nSR"
  "protobuf\032\023proto_ap/base.proto\032&proto_ap/"
  "online_local_map_fusion.proto\"z\n\rStripOb"
  "stacle\022\017\n\007segment\030\001 \003(\002\022\014\n\004type\030\002 \001(\005\022 \n"
  "\004size\030\003 \001(\0132\022.SRprotobuf.Size3f\022\r\n\005color"
  "\030\004 \001(\005\022\n\n\002id\030\005 \001(\005\022\r\n\005attri\030\006 \001(\005\"\244\002\n\013Ap"
  "PathPoint\022\022\n\nconfidence\030\001 \001(\002\022\'\n\nbase_po"
  "int\030\002 \001(\0132\023.SRprotobuf.Point3f\022\r\n\005theta\030"
  "\003 \001(\002\022\r\n\005kappa\030\004 \001(\002\022\t\n\001s\030\005 \001(\002\022\022\n\nleft_"
  "width\030\006 \001(\002\022\023\n\013right_width\030\007 \001(\002\022\016\n\006dkap"
  "pa\030\010 \001(\002\022\017\n\007ddkappa\030\t \001(\002\022\022\n\nlane_width\030"
  "\n \001(\002\022\017\n\007link_id\030\013 \001(\r\022+\n\013floor_level\030\014 "
  "\001(\0132\026.SRprotobuf.FloorLevel\022\023\n\013hill_stat"
  "us\030\r \001(\005\"M\n\016ApLaneLineInfo\022\r\n\005attri\030\001 \001("
  "\005\022,\n\013path_points\030\002 \003(\0132\027.SRprotobuf.ApPa"
  "thPoint\"\311\003\n\014ApDynaObject\022\n\n\002id\030\001 \001(\r\022 \n\004"
  "size\030\002 \001(\0132\022.SRprotobuf.Size3f\022&\n\004type\030\003"
  " \001(\0162\030.SRprotobuf.ApObjectType\022 \n\004pose\030\004"
  " \001(\0132\022.SRprotobuf.Pose3f\022\037\n\002pt\030\005 \001(\0132\023.S"
  "Rprotobuf.Point3f\022\r\n\005color\030\006 \001(\005\022/\n\014sign"
  "al_light\030\007 \001(\0162\031.SRprotobuf.ApSignalLigh"
  "t\022-\n\013brake_light\030\010 \001(\0162\030.SRprotobuf.ApBr"
  "akeLight\022\032\n\022is_in_blind_region\030\t \001(\010\022\024\n\014"
  "blind_region\030\n \001(\r\022\021\n\tis_static\030\013 \001(\010\022\025\n"
  "\ris_straddling\030\014 \001(\010\022\023\n\013is_light_on\030\r \001("
  "\010\022\035\n\025local_linear_velocity\030\016 \003(\002\022!\n\031loca"
  "l_linear_acceleration\030\017 \003(\002\"\265\002\n\024ApTrajec"
  "toryDataType\022\n\n\002id\030\001 \001(\005\0229\n\004type\030\002 \001(\0162+"
  ".SRprotobuf.ApTrajectoryDataType.ApTrajT"
  "ype\022+\n\nTrajectory\030\003 \003(\0132\027.SRprotobuf.ApP"
  "athPoint\"\250\001\n\nApTrajType\022\027\n\023ApTraj_TYPE_U"
  "NKNOWN\020\000\022\021\n\rApTraj_TYPE_B\020\001\022\034\n\030ApTraj_TY"
  "PE_real_ap_plan\020\002\022\026\n\022ApTraj_TYPE_global\020"
  "\003\022\032\n\026ApTraj_TYPE_RTF_global\020\004\022\034\n\030ApTraj_"
  "TYPE_RTF_planning\020\005\"5\n\020BDistancePercent\022"
  "\020\n\010distance\030\001 \001(\002\022\017\n\007percent\030\002 \001(\002\"\265\001\n\014R"
  "TFStatusMsg\022\016\n\006rtf_st\030\001 \001(\005\022\020\n\010rtf_tips\030"
  "\002 \001(\005\022\023\n\013fail_reason\030\003 \001(\005\022\026\n\016total_dist"
  "ance\030\004 \001(\002\022\027\n\017remain_distance\030\005 \001(\002\022\017\n\007p"
  "ercent\030\006 \001(\002\022,\n\016start_location\030\007 \001(\0132\024.S"
  "Rprotobuf.Location\"T\n\024PkoutTerminationIn"
  "fo\022 \n\003pos\030\001 \001(\0132\023.SRprotobuf.Point3f\022\r\n\005"
  "theta\030\002 \001(\002\022\013\n\003len\030\003 \001(\002\"\243\006\n\016ApEssential"
  "Msg\022\017\n\007xputips\030\001 \001(\005\022\023\n\013xpuAbnormal\030\002 \001("
  "\005\022\026\n\016statusIndicate\030\003 \001(\005\022\022\n\nfailReason\030"
  "\004 \001(\005\022\r\n\005arrow\030\005 \001(\005\022\r\n\005voice\030\006 \001(\005\022\026\n\016r"
  "emainDistance\030\007 \001(\002\0226\n\020bdistancepercent\030"
  "\010 \001(\0132\034.SRprotobuf.BDistancePercent\022\021\n\tp"
  "arkState\030\t \001(\005\022\035\n\025globalTrajectoryIndex\030"
  "\n \001(\005\022\024\n\014mapPoseState\030\013 \001(\005\022\033\n\023silentFav"
  "oriteState\030\014 \001(\005\022\017\n\007hdmapId\030\r \001(\004\022\031\n\021fav"
  "oriteSlotReady\030\016 \001(\005\022\020\n\010is_hdmap\030\017 \001(\005\022\024"
  "\n\014trainingTips\030\020 \001(\005\022\022\n\ntrainingst\030\021 \001(\005"
  "\022\024\n\014trainingfail\030\022 \003(\005\022\025\n\rterminal_attr\030"
  "\023 \001(\005\022\026\n\016terminal_floor\030\024 \001(\005\022\020\n\010map_tim"
  "e\030\025 \001(\004\022\023\n\013desktop_avl\030\026 \001(\005\022\021\n\tenter_ma"
  "p\030\027 \001(\005\022\024\n\014easy_get_off\030\030 \001(\005\0220\n\016rtf_sta"
  "tus_msg\030\031 \001(\0132\030.SRprotobuf.RTFStatusMsg\022"
  "\024\n\014coveredValid\030\032 \001(\005\022\032\n\022pkout_direction"
  "_st\030\033 \003(\005\022\037\n\027pkout_current_direction\030\034 \001"
  "(\005\022;\n\021pkout_termination\030\035 \001(\0132 .SRprotob"
  "uf.PkoutTerminationInfo\022\030\n\020pkout_slot_sh"
  "ape\030\036 \001(\005\022\023\n\013pkout_ready\030\037 \001(\005\"|\n\tApNavi"
  "Msg\022\022\n\nnavi_state\030\001 \001(\005\022\021\n\tnavi_tips\030\002 \001"
  "(\005\022\032\n\022dist_to_startpoint\030\003 \001(\002\022\027\n\017dist_t"
  "o_feature\030\004 \001(\002\022\023\n\013hill_status\030\005 \001(\005\"Z\n\017"
  "TrainingSpdBump\022\014\n\004flag\030\001 \001(\005\022\t\n\001x\030\002 \001(\002"
  "\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\r\n\005theta\030\005 \001(\002\022\t\n"
  "\001s\030\006 \001(\002\"6\n\rSlotIdMapping\022\021\n\tavmSlotId\030\001"
  " \001(\005\022\022\n\nparkSlotId\030\002 \001(\005\"Q\n\024Ap_StaticObj"
  "ectPoint\022%\n\010position\030\001 \001(\0132\023.SRprotobuf."
  "Point3f\022\022\n\nis_visible\030\002 \001(\010\"\366\001\n\017Ap_Stati"
  "cObject\022\n\n\002id\030\001 \001(\r\022-\n\004type\030\002 \001(\0162\037.SRpr"
  "otobuf.AP_StaticObjectType\022\027\n\017is_with_ha"
  "nging\030\003 \001(\010\022\021\n\tis_mature\030\004 \001(\010\022\023\n\013is_pas"
  "sable\030\005 \001(\010\022\014\n\004size\030\006 \003(\002\022\022\n\nlocal_pose\030"
  "\007 \003(\001\0221\n\007polygon\030\010 \003(\0132 .SRprotobuf.Ap_S"
  "taticObjectPoint\022\022\n\nconfidence\030\t \001(\002\"7\n\004"
  "Wall\022\n\n\002id\030\001 \001(\r\022#\n\006points\030\002 \003(\0132\023.SRpro"
  "tobuf.Point3f\"K\n\tBevPillar\022 \n\003pos\030\001 \001(\0132"
  "\023.SRprotobuf.Point2f\022\r\n\005min_z\030\002 \001(\002\022\r\n\005m"
  "ax_z\030\003 \001(\002\"p\n\026OccupancyNetParkingMsg\022+\n\016"
  "pillar_2d_size\030\001 \001(\0132\023.SRprotobuf.Point2"
  "f\022)\n\nbev_pillar\030\002 \003(\0132\025.SRprotobuf.BevPi"
  "llar\"\327\005\n\rApDrivingData\022&\n\010location\030\001 \001(\013"
  "2\024.SRprotobuf.Location\022\036\n\004slot\030\002 \003(\0132\020.S"
  "Rprotobuf.Slot\022&\n\003obj\030\003 \003(\0132\031.SRprotobuf"
  ".StripObstacle\022-\n\tlanelines\030\004 \003(\0132\032.SRpr"
  "otobuf.ApLaneLineInfo\022\020\n\010curFloor\030\005 \003(\005\022"
  "4\n\nTrajectory\030\006 \003(\0132 .SRprotobuf.ApTraje"
  "ctoryDataType\022(\n\006dynObj\030\007 \003(\0132\030.SRprotob"
  "uf.ApDynaObject\0220\n\014essentialMsg\030\010 \001(\0132\032."
  "SRprotobuf.ApEssentialMsg\022!\n\007slotAvm\030\t \003"
  "(\0132\020.SRprotobuf.Slot\022,\n\007spdBump\030\n \003(\0132\033."
  "SRprotobuf.TrainingSpdBump\0220\n\rslotIdMapp"
  "ing\030\013 \003(\0132\031.SRprotobuf.SlotIdMapping\0224\n\017"
  "ap_StaticObject\030\014 \003(\0132\033.SRprotobuf.Ap_St"
  "aticObject\022&\n\007naviMsg\030\r \001(\0132\025.SRprotobuf"
  ".ApNaviMsg\022;\n\024online_local_map_msg\030\016 \001(\013"
  "2\035.SRprotobuf.OnlineLocalMapMsg\022\036\n\004wall\030"
  "\017 \003(\0132\020.SRprotobuf.Wall\022E\n\031occupancy_net"
  "_parking_msg\030\020 \001(\0132\".SRprotobuf.Occupanc"
  "yNetParkingMsg*\207\002\n\014ApObjectType\022\024\n\020OBJ_T"
  "YPE_UNKNOWN\020\000\022\023\n\017OBJ_TYPE_PERSON\020\001\022\023\n\017OB"
  "J_TYPE_ANIMAL\020\002\022\022\n\016OBJ_TYPE_SEDAN\020\003\022\020\n\014O"
  "BJ_TYPE_SUV\020\004\022\020\n\014OBJ_TYPE_VAN\020\005\022\024\n\020OBJ_T"
  "YPE_BICYCLE\020\006\022\025\n\021OBJ_TYPE_TRICYCLE\020\007\022\027\n\023"
  "OBJ_TYPE_MOTORCYCLE\020\010\022\022\n\016OBJ_TYPE_TRUCK\020"
  "\t\022\020\n\014OBJ_TYPE_BUS\020\n\022\023\n\017OBJ_TYPE_PICKUP\020\013"
  "*\212\001\n\rApSignalLight\022\030\n\024SIGNAL_LIGHT_UNKNO"
  "WN\020\000\022\025\n\021SIGNAL_LIGHT_LEFT\020\001\022\026\n\022SIGNAL_LI"
  "GHT_RIGHT\020\002\022\032\n\026SIGNAL_LIGHT_EMERGENCY\020\003\022"
  "\024\n\020SIGNAL_LIGHT_OFF\020\004*P\n\014ApBrakeLight\022\027\n"
  "\023BRAKE_LIGHT_UNKNOWN\020\000\022\022\n\016BRAKE_LIGHT_ON"
  "\020\001\022\023\n\017BRAKE_LIGHT_OFF\020\002*\347\001\n\023AP_StaticObj"
  "ectType\022\021\n\rkWheelStopper\020\000\022\013\n\007kPillar\020\001\022"
  "\t\n\005kWall\020\002\022\t\n\005kCurb\020\003\022\t\n\005kDoor\020\004\022\017\n\013kHyd"
  "rantBox\020\005\022\014\n\010kHydrant\020\006\022\020\n\014kBollardPost\020"
  "\007\022\020\n\014kTrafficCone\020\010\022\016\n\nkSpeedBump\020\t\022\r\n\tk"
  "Drainage\020\n\022\r\n\tkEntrance\020\013\022\020\n\014kBarrierGat"
  "e\020\014\022\014\n\010kUnknown\020\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto_deps[2] = {
  &::descriptor_table_proto_5fap_2fbase_2eproto,
  &::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto_sccs[18] = {
  &scc_info_ApDrivingData_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
  &scc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto = {
  false, false, descriptor_table_protodef_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto, "proto_ap/WM_display_realtime.proto", 4825,
  &descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto_once, descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto_sccs, descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto_deps, 18, 2,
  schemas, file_default_instances, TableStruct_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto::offsets,
  file_level_metadata_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto, 18, file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto, file_level_service_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto)), true);
namespace SRprotobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApTrajectoryDataType_ApTrajType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[0];
}
bool ApTrajectoryDataType_ApTrajType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTraj_TYPE_UNKNOWN;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTraj_TYPE_B;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTraj_TYPE_real_ap_plan;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTraj_TYPE_global;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTraj_TYPE_RTF_global;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTraj_TYPE_RTF_planning;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTrajType_MIN;
constexpr ApTrajectoryDataType_ApTrajType ApTrajectoryDataType::ApTrajType_MAX;
constexpr int ApTrajectoryDataType::ApTrajType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[1];
}
bool ApObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApSignalLight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[2];
}
bool ApSignalLight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApBrakeLight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[3];
}
bool ApBrakeLight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AP_StaticObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto[4];
}
bool AP_StaticObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StripObstacle::InitAsDefaultInstance() {
  ::SRprotobuf::_StripObstacle_default_instance_._instance.get_mutable()->size_ = const_cast< ::SRprotobuf::Size3f*>(
      ::SRprotobuf::Size3f::internal_default_instance());
}
class StripObstacle::_Internal {
 public:
  static const ::SRprotobuf::Size3f& size(const StripObstacle* msg);
};

const ::SRprotobuf::Size3f&
StripObstacle::_Internal::size(const StripObstacle* msg) {
  return *msg->size_;
}
void StripObstacle::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
StripObstacle::StripObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segment_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.StripObstacle)
}
StripObstacle::StripObstacle(const StripObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::SRprotobuf::Size3f(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&attri_) -
    reinterpret_cast<char*>(&type_)) + sizeof(attri_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.StripObstacle)
}

void StripObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attri_) -
      reinterpret_cast<char*>(&size_)) + sizeof(attri_));
}

StripObstacle::~StripObstacle() {
  // @@protoc_insertion_point(destructor:SRprotobuf.StripObstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StripObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void StripObstacle::ArenaDtor(void* object) {
  StripObstacle* _this = reinterpret_cast< StripObstacle* >(object);
  (void)_this;
}
void StripObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StripObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripObstacle& StripObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripObstacle_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void StripObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.StripObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attri_) -
      reinterpret_cast<char*>(&type_)) + sizeof(attri_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StripObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_segment(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_segment(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Size3f size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attri = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          attri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.StripObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float segment = 1;
  if (this->_internal_segment_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_segment(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // .SRprotobuf.Size3f size = 3;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  // int32 color = 4;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_color(), target);
  }

  // int32 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_id(), target);
  }

  // int32 attri = 6;
  if (this->attri() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_attri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.StripObstacle)
  return target;
}

size_t StripObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.StripObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float segment = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_segment_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segment_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SRprotobuf.Size3f size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // int32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 attri = 6;
  if (this->attri() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attri());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.StripObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const StripObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.StripObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.StripObstacle)
    MergeFrom(*source);
  }
}

void StripObstacle::MergeFrom(const StripObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.StripObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  if (from.has_size()) {
    _internal_mutable_size()->::SRprotobuf::Size3f::MergeFrom(from._internal_size());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.attri() != 0) {
    _internal_set_attri(from._internal_attri());
  }
}

void StripObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.StripObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripObstacle::CopyFrom(const StripObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.StripObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripObstacle::IsInitialized() const {
  return true;
}

void StripObstacle::InternalSwap(StripObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segment_.InternalSwap(&other->segment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StripObstacle, attri_)
      + sizeof(StripObstacle::attri_)
      - PROTOBUF_FIELD_OFFSET(StripObstacle, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StripObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApPathPoint::InitAsDefaultInstance() {
  ::SRprotobuf::_ApPathPoint_default_instance_._instance.get_mutable()->base_point_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
  ::SRprotobuf::_ApPathPoint_default_instance_._instance.get_mutable()->floor_level_ = const_cast< ::SRprotobuf::FloorLevel*>(
      ::SRprotobuf::FloorLevel::internal_default_instance());
}
class ApPathPoint::_Internal {
 public:
  static const ::SRprotobuf::Point3f& base_point(const ApPathPoint* msg);
  static const ::SRprotobuf::FloorLevel& floor_level(const ApPathPoint* msg);
};

const ::SRprotobuf::Point3f&
ApPathPoint::_Internal::base_point(const ApPathPoint* msg) {
  return *msg->base_point_;
}
const ::SRprotobuf::FloorLevel&
ApPathPoint::_Internal::floor_level(const ApPathPoint* msg) {
  return *msg->floor_level_;
}
void ApPathPoint::clear_base_point() {
  if (GetArena() == nullptr && base_point_ != nullptr) {
    delete base_point_;
  }
  base_point_ = nullptr;
}
void ApPathPoint::clear_floor_level() {
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
}
ApPathPoint::ApPathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApPathPoint)
}
ApPathPoint::ApPathPoint(const ApPathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_point()) {
    base_point_ = new ::SRprotobuf::Point3f(*from.base_point_);
  } else {
    base_point_ = nullptr;
  }
  if (from._internal_has_floor_level()) {
    floor_level_ = new ::SRprotobuf::FloorLevel(*from.floor_level_);
  } else {
    floor_level_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&hill_status_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(hill_status_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApPathPoint)
}

void ApPathPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&base_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hill_status_) -
      reinterpret_cast<char*>(&base_point_)) + sizeof(hill_status_));
}

ApPathPoint::~ApPathPoint() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApPathPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApPathPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_point_;
  if (this != internal_default_instance()) delete floor_level_;
}

void ApPathPoint::ArenaDtor(void* object) {
  ApPathPoint* _this = reinterpret_cast< ApPathPoint* >(object);
  (void)_this;
}
void ApPathPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApPathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApPathPoint& ApPathPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApPathPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApPathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_point_ != nullptr) {
    delete base_point_;
  }
  base_point_ = nullptr;
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hill_status_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(hill_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApPathPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f base_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kappa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float left_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          left_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          right_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dkappa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ddkappa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ddkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lane_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 link_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.FloorLevel floor_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hill_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hill_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApPathPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApPathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_confidence(), target);
  }

  // .SRprotobuf.Point3f base_point = 2;
  if (this->has_base_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base_point(this), target, stream);
  }

  // float theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_theta(), target);
  }

  // float kappa = 4;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_kappa(), target);
  }

  // float s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_s(), target);
  }

  // float left_width = 6;
  if (!(this->left_width() <= 0 && this->left_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_left_width(), target);
  }

  // float right_width = 7;
  if (!(this->right_width() <= 0 && this->right_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_right_width(), target);
  }

  // float dkappa = 8;
  if (!(this->dkappa() <= 0 && this->dkappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_dkappa(), target);
  }

  // float ddkappa = 9;
  if (!(this->ddkappa() <= 0 && this->ddkappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_ddkappa(), target);
  }

  // float lane_width = 10;
  if (!(this->lane_width() <= 0 && this->lane_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_lane_width(), target);
  }

  // uint32 link_id = 11;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_link_id(), target);
  }

  // .SRprotobuf.FloorLevel floor_level = 12;
  if (this->has_floor_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::floor_level(this), target, stream);
  }

  // int32 hill_status = 13;
  if (this->hill_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_hill_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApPathPoint)
  return target;
}

size_t ApPathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApPathPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SRprotobuf.Point3f base_point = 2;
  if (this->has_base_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_point_);
  }

  // .SRprotobuf.FloorLevel floor_level = 12;
  if (this->has_floor_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *floor_level_);
  }

  // float confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float theta = 3;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float kappa = 4;
  if (!(this->kappa() <= 0 && this->kappa() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_width = 6;
  if (!(this->left_width() <= 0 && this->left_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_width = 7;
  if (!(this->right_width() <= 0 && this->right_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float dkappa = 8;
  if (!(this->dkappa() <= 0 && this->dkappa() >= 0)) {
    total_size += 1 + 4;
  }

  // float ddkappa = 9;
  if (!(this->ddkappa() <= 0 && this->ddkappa() >= 0)) {
    total_size += 1 + 4;
  }

  // float lane_width = 10;
  if (!(this->lane_width() <= 0 && this->lane_width() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 link_id = 11;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_id());
  }

  // int32 hill_status = 13;
  if (this->hill_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hill_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApPathPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ApPathPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApPathPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApPathPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApPathPoint)
    MergeFrom(*source);
  }
}

void ApPathPoint::MergeFrom(const ApPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_point()) {
    _internal_mutable_base_point()->::SRprotobuf::Point3f::MergeFrom(from._internal_base_point());
  }
  if (from.has_floor_level()) {
    _internal_mutable_floor_level()->::SRprotobuf::FloorLevel::MergeFrom(from._internal_floor_level());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.kappa() <= 0 && from.kappa() >= 0)) {
    _internal_set_kappa(from._internal_kappa());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from.left_width() <= 0 && from.left_width() >= 0)) {
    _internal_set_left_width(from._internal_left_width());
  }
  if (!(from.right_width() <= 0 && from.right_width() >= 0)) {
    _internal_set_right_width(from._internal_right_width());
  }
  if (!(from.dkappa() <= 0 && from.dkappa() >= 0)) {
    _internal_set_dkappa(from._internal_dkappa());
  }
  if (!(from.ddkappa() <= 0 && from.ddkappa() >= 0)) {
    _internal_set_ddkappa(from._internal_ddkappa());
  }
  if (!(from.lane_width() <= 0 && from.lane_width() >= 0)) {
    _internal_set_lane_width(from._internal_lane_width());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (from.hill_status() != 0) {
    _internal_set_hill_status(from._internal_hill_status());
  }
}

void ApPathPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApPathPoint::CopyFrom(const ApPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApPathPoint::IsInitialized() const {
  return true;
}

void ApPathPoint::InternalSwap(ApPathPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApPathPoint, hill_status_)
      + sizeof(ApPathPoint::hill_status_)
      - PROTOBUF_FIELD_OFFSET(ApPathPoint, base_point_)>(
          reinterpret_cast<char*>(&base_point_),
          reinterpret_cast<char*>(&other->base_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApPathPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApLaneLineInfo::InitAsDefaultInstance() {
}
class ApLaneLineInfo::_Internal {
 public:
};

ApLaneLineInfo::ApLaneLineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApLaneLineInfo)
}
ApLaneLineInfo::ApLaneLineInfo(const ApLaneLineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_points_(from.path_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attri_ = from.attri_;
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApLaneLineInfo)
}

void ApLaneLineInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  attri_ = 0;
}

ApLaneLineInfo::~ApLaneLineInfo() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApLaneLineInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApLaneLineInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApLaneLineInfo::ArenaDtor(void* object) {
  ApLaneLineInfo* _this = reinterpret_cast< ApLaneLineInfo* >(object);
  (void)_this;
}
void ApLaneLineInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApLaneLineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApLaneLineInfo& ApLaneLineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApLaneLineInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApLaneLineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApLaneLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_points_.Clear();
  attri_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApLaneLineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 attri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          attri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.ApPathPoint path_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApLaneLineInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApLaneLineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attri = 1;
  if (this->attri() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_attri(), target);
  }

  // repeated .SRprotobuf.ApPathPoint path_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApLaneLineInfo)
  return target;
}

size_t ApLaneLineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApLaneLineInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.ApPathPoint path_points = 2;
  total_size += 1UL * this->_internal_path_points_size();
  for (const auto& msg : this->path_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 attri = 1;
  if (this->attri() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attri());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApLaneLineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApLaneLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ApLaneLineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApLaneLineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApLaneLineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApLaneLineInfo)
    MergeFrom(*source);
  }
}

void ApLaneLineInfo::MergeFrom(const ApLaneLineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApLaneLineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_points_.MergeFrom(from.path_points_);
  if (from.attri() != 0) {
    _internal_set_attri(from._internal_attri());
  }
}

void ApLaneLineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApLaneLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApLaneLineInfo::CopyFrom(const ApLaneLineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApLaneLineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApLaneLineInfo::IsInitialized() const {
  return true;
}

void ApLaneLineInfo::InternalSwap(ApLaneLineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_points_.InternalSwap(&other->path_points_);
  swap(attri_, other->attri_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApLaneLineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApDynaObject::InitAsDefaultInstance() {
  ::SRprotobuf::_ApDynaObject_default_instance_._instance.get_mutable()->size_ = const_cast< ::SRprotobuf::Size3f*>(
      ::SRprotobuf::Size3f::internal_default_instance());
  ::SRprotobuf::_ApDynaObject_default_instance_._instance.get_mutable()->pose_ = const_cast< ::SRprotobuf::Pose3f*>(
      ::SRprotobuf::Pose3f::internal_default_instance());
  ::SRprotobuf::_ApDynaObject_default_instance_._instance.get_mutable()->pt_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
}
class ApDynaObject::_Internal {
 public:
  static const ::SRprotobuf::Size3f& size(const ApDynaObject* msg);
  static const ::SRprotobuf::Pose3f& pose(const ApDynaObject* msg);
  static const ::SRprotobuf::Point3f& pt(const ApDynaObject* msg);
};

const ::SRprotobuf::Size3f&
ApDynaObject::_Internal::size(const ApDynaObject* msg) {
  return *msg->size_;
}
const ::SRprotobuf::Pose3f&
ApDynaObject::_Internal::pose(const ApDynaObject* msg) {
  return *msg->pose_;
}
const ::SRprotobuf::Point3f&
ApDynaObject::_Internal::pt(const ApDynaObject* msg) {
  return *msg->pt_;
}
void ApDynaObject::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
void ApDynaObject::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void ApDynaObject::clear_pt() {
  if (GetArena() == nullptr && pt_ != nullptr) {
    delete pt_;
  }
  pt_ = nullptr;
}
ApDynaObject::ApDynaObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  local_linear_velocity_(arena),
  local_linear_acceleration_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApDynaObject)
}
ApDynaObject::ApDynaObject(const ApDynaObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      local_linear_velocity_(from.local_linear_velocity_),
      local_linear_acceleration_(from.local_linear_acceleration_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::SRprotobuf::Size3f(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::SRprotobuf::Pose3f(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_pt()) {
    pt_ = new ::SRprotobuf::Point3f(*from.pt_);
  } else {
    pt_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_light_on_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_light_on_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApDynaObject)
}

void ApDynaObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_light_on_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_light_on_));
}

ApDynaObject::~ApDynaObject() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApDynaObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApDynaObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete pt_;
}

void ApDynaObject::ArenaDtor(void* object) {
  ApDynaObject* _this = reinterpret_cast< ApDynaObject* >(object);
  (void)_this;
}
void ApDynaObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApDynaObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApDynaObject& ApDynaObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApDynaObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApDynaObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApDynaObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_linear_velocity_.Clear();
  local_linear_acceleration_.Clear();
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && pt_ != nullptr) {
    delete pt_;
  }
  pt_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_light_on_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_light_on_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApDynaObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Size3f size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApObjectType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SRprotobuf::ApObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Pose3f pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f pt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApSignalLight signal_light = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signal_light(static_cast<::SRprotobuf::ApSignalLight>(val));
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApBrakeLight brake_light = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brake_light(static_cast<::SRprotobuf::ApBrakeLight>(val));
        } else goto handle_unusual;
        continue;
      // bool is_in_blind_region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_in_blind_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blind_region = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          blind_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_static = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_straddling = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_straddling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_light_on = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_light_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float local_linear_velocity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_local_linear_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          _internal_add_local_linear_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float local_linear_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_local_linear_acceleration(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          _internal_add_local_linear_acceleration(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApDynaObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApDynaObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .SRprotobuf.Size3f size = 2;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  // .SRprotobuf.ApObjectType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .SRprotobuf.Pose3f pose = 4;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pose(this), target, stream);
  }

  // .SRprotobuf.Point3f pt = 5;
  if (this->has_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pt(this), target, stream);
  }

  // int32 color = 6;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_color(), target);
  }

  // .SRprotobuf.ApSignalLight signal_light = 7;
  if (this->signal_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_signal_light(), target);
  }

  // .SRprotobuf.ApBrakeLight brake_light = 8;
  if (this->brake_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_brake_light(), target);
  }

  // bool is_in_blind_region = 9;
  if (this->is_in_blind_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_in_blind_region(), target);
  }

  // uint32 blind_region = 10;
  if (this->blind_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_blind_region(), target);
  }

  // bool is_static = 11;
  if (this->is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_static(), target);
  }

  // bool is_straddling = 12;
  if (this->is_straddling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_straddling(), target);
  }

  // bool is_light_on = 13;
  if (this->is_light_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_light_on(), target);
  }

  // repeated float local_linear_velocity = 14;
  if (this->_internal_local_linear_velocity_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_local_linear_velocity(), target);
  }

  // repeated float local_linear_acceleration = 15;
  if (this->_internal_local_linear_acceleration_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_local_linear_acceleration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApDynaObject)
  return target;
}

size_t ApDynaObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApDynaObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float local_linear_velocity = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_local_linear_velocity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _local_linear_velocity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float local_linear_acceleration = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_local_linear_acceleration_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _local_linear_acceleration_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SRprotobuf.Size3f size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .SRprotobuf.Pose3f pose = 4;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .SRprotobuf.Point3f pt = 5;
  if (this->has_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .SRprotobuf.ApObjectType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 color = 6;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // .SRprotobuf.ApSignalLight signal_light = 7;
  if (this->signal_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal_light());
  }

  // .SRprotobuf.ApBrakeLight brake_light = 8;
  if (this->brake_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_light());
  }

  // uint32 blind_region = 10;
  if (this->blind_region() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blind_region());
  }

  // bool is_in_blind_region = 9;
  if (this->is_in_blind_region() != 0) {
    total_size += 1 + 1;
  }

  // bool is_static = 11;
  if (this->is_static() != 0) {
    total_size += 1 + 1;
  }

  // bool is_straddling = 12;
  if (this->is_straddling() != 0) {
    total_size += 1 + 1;
  }

  // bool is_light_on = 13;
  if (this->is_light_on() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApDynaObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApDynaObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ApDynaObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApDynaObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApDynaObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApDynaObject)
    MergeFrom(*source);
  }
}

void ApDynaObject::MergeFrom(const ApDynaObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApDynaObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  local_linear_velocity_.MergeFrom(from.local_linear_velocity_);
  local_linear_acceleration_.MergeFrom(from.local_linear_acceleration_);
  if (from.has_size()) {
    _internal_mutable_size()->::SRprotobuf::Size3f::MergeFrom(from._internal_size());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::SRprotobuf::Pose3f::MergeFrom(from._internal_pose());
  }
  if (from.has_pt()) {
    _internal_mutable_pt()->::SRprotobuf::Point3f::MergeFrom(from._internal_pt());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.signal_light() != 0) {
    _internal_set_signal_light(from._internal_signal_light());
  }
  if (from.brake_light() != 0) {
    _internal_set_brake_light(from._internal_brake_light());
  }
  if (from.blind_region() != 0) {
    _internal_set_blind_region(from._internal_blind_region());
  }
  if (from.is_in_blind_region() != 0) {
    _internal_set_is_in_blind_region(from._internal_is_in_blind_region());
  }
  if (from.is_static() != 0) {
    _internal_set_is_static(from._internal_is_static());
  }
  if (from.is_straddling() != 0) {
    _internal_set_is_straddling(from._internal_is_straddling());
  }
  if (from.is_light_on() != 0) {
    _internal_set_is_light_on(from._internal_is_light_on());
  }
}

void ApDynaObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApDynaObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApDynaObject::CopyFrom(const ApDynaObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApDynaObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApDynaObject::IsInitialized() const {
  return true;
}

void ApDynaObject::InternalSwap(ApDynaObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  local_linear_velocity_.InternalSwap(&other->local_linear_velocity_);
  local_linear_acceleration_.InternalSwap(&other->local_linear_acceleration_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApDynaObject, is_light_on_)
      + sizeof(ApDynaObject::is_light_on_)
      - PROTOBUF_FIELD_OFFSET(ApDynaObject, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApDynaObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApTrajectoryDataType::InitAsDefaultInstance() {
}
class ApTrajectoryDataType::_Internal {
 public:
};

ApTrajectoryDataType::ApTrajectoryDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectory_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApTrajectoryDataType)
}
ApTrajectoryDataType::ApTrajectoryDataType(const ApTrajectoryDataType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApTrajectoryDataType)
}

void ApTrajectoryDataType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

ApTrajectoryDataType::~ApTrajectoryDataType() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApTrajectoryDataType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApTrajectoryDataType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApTrajectoryDataType::ArenaDtor(void* object) {
  ApTrajectoryDataType* _this = reinterpret_cast< ApTrajectoryDataType* >(object);
  (void)_this;
}
void ApTrajectoryDataType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApTrajectoryDataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApTrajectoryDataType& ApTrajectoryDataType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApTrajectoryDataType::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApTrajectoryDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApTrajectoryDataType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApTrajectoryDataType.ApTrajType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SRprotobuf::ApTrajectoryDataType_ApTrajType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.ApPathPoint Trajectory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApTrajectoryDataType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApTrajectoryDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .SRprotobuf.ApTrajectoryDataType.ApTrajType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .SRprotobuf.ApPathPoint Trajectory = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_trajectory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApTrajectoryDataType)
  return target;
}

size_t ApTrajectoryDataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApTrajectoryDataType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.ApPathPoint Trajectory = 3;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .SRprotobuf.ApTrajectoryDataType.ApTrajType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApTrajectoryDataType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApTrajectoryDataType)
  GOOGLE_DCHECK_NE(&from, this);
  const ApTrajectoryDataType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApTrajectoryDataType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApTrajectoryDataType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApTrajectoryDataType)
    MergeFrom(*source);
  }
}

void ApTrajectoryDataType::MergeFrom(const ApTrajectoryDataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApTrajectoryDataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ApTrajectoryDataType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApTrajectoryDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApTrajectoryDataType::CopyFrom(const ApTrajectoryDataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApTrajectoryDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApTrajectoryDataType::IsInitialized() const {
  return true;
}

void ApTrajectoryDataType::InternalSwap(ApTrajectoryDataType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectory_.InternalSwap(&other->trajectory_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApTrajectoryDataType, type_)
      + sizeof(ApTrajectoryDataType::type_)
      - PROTOBUF_FIELD_OFFSET(ApTrajectoryDataType, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApTrajectoryDataType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BDistancePercent::InitAsDefaultInstance() {
}
class BDistancePercent::_Internal {
 public:
};

BDistancePercent::BDistancePercent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.BDistancePercent)
}
BDistancePercent::BDistancePercent(const BDistancePercent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&percent_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(percent_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.BDistancePercent)
}

void BDistancePercent::SharedCtor() {
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(percent_));
}

BDistancePercent::~BDistancePercent() {
  // @@protoc_insertion_point(destructor:SRprotobuf.BDistancePercent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BDistancePercent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BDistancePercent::ArenaDtor(void* object) {
  BDistancePercent* _this = reinterpret_cast< BDistancePercent* >(object);
  (void)_this;
}
void BDistancePercent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BDistancePercent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BDistancePercent& BDistancePercent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BDistancePercent_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void BDistancePercent::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.BDistancePercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BDistancePercent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BDistancePercent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.BDistancePercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  // float percent = 2;
  if (!(this->percent() <= 0 && this->percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.BDistancePercent)
  return target;
}

size_t BDistancePercent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.BDistancePercent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float percent = 2;
  if (!(this->percent() <= 0 && this->percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BDistancePercent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.BDistancePercent)
  GOOGLE_DCHECK_NE(&from, this);
  const BDistancePercent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BDistancePercent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.BDistancePercent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.BDistancePercent)
    MergeFrom(*source);
  }
}

void BDistancePercent::MergeFrom(const BDistancePercent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.BDistancePercent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.percent() <= 0 && from.percent() >= 0)) {
    _internal_set_percent(from._internal_percent());
  }
}

void BDistancePercent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.BDistancePercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BDistancePercent::CopyFrom(const BDistancePercent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.BDistancePercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BDistancePercent::IsInitialized() const {
  return true;
}

void BDistancePercent::InternalSwap(BDistancePercent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BDistancePercent, percent_)
      + sizeof(BDistancePercent::percent_)
      - PROTOBUF_FIELD_OFFSET(BDistancePercent, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BDistancePercent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RTFStatusMsg::InitAsDefaultInstance() {
  ::SRprotobuf::_RTFStatusMsg_default_instance_._instance.get_mutable()->start_location_ = const_cast< ::SRprotobuf::Location*>(
      ::SRprotobuf::Location::internal_default_instance());
}
class RTFStatusMsg::_Internal {
 public:
  static const ::SRprotobuf::Location& start_location(const RTFStatusMsg* msg);
};

const ::SRprotobuf::Location&
RTFStatusMsg::_Internal::start_location(const RTFStatusMsg* msg) {
  return *msg->start_location_;
}
void RTFStatusMsg::clear_start_location() {
  if (GetArena() == nullptr && start_location_ != nullptr) {
    delete start_location_;
  }
  start_location_ = nullptr;
}
RTFStatusMsg::RTFStatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.RTFStatusMsg)
}
RTFStatusMsg::RTFStatusMsg(const RTFStatusMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_location()) {
    start_location_ = new ::SRprotobuf::Location(*from.start_location_);
  } else {
    start_location_ = nullptr;
  }
  ::memcpy(&rtf_st_, &from.rtf_st_,
    static_cast<size_t>(reinterpret_cast<char*>(&percent_) -
    reinterpret_cast<char*>(&rtf_st_)) + sizeof(percent_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.RTFStatusMsg)
}

void RTFStatusMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&start_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&start_location_)) + sizeof(percent_));
}

RTFStatusMsg::~RTFStatusMsg() {
  // @@protoc_insertion_point(destructor:SRprotobuf.RTFStatusMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RTFStatusMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_location_;
}

void RTFStatusMsg::ArenaDtor(void* object) {
  RTFStatusMsg* _this = reinterpret_cast< RTFStatusMsg* >(object);
  (void)_this;
}
void RTFStatusMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RTFStatusMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTFStatusMsg& RTFStatusMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTFStatusMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void RTFStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.RTFStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_location_ != nullptr) {
    delete start_location_;
  }
  start_location_ = nullptr;
  ::memset(&rtf_st_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percent_) -
      reinterpret_cast<char*>(&rtf_st_)) + sizeof(percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTFStatusMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rtf_st = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rtf_st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rtf_tips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rtf_tips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fail_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fail_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float total_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          total_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float remain_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          remain_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Location start_location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTFStatusMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.RTFStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rtf_st = 1;
  if (this->rtf_st() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rtf_st(), target);
  }

  // int32 rtf_tips = 2;
  if (this->rtf_tips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rtf_tips(), target);
  }

  // int32 fail_reason = 3;
  if (this->fail_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fail_reason(), target);
  }

  // float total_distance = 4;
  if (!(this->total_distance() <= 0 && this->total_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_total_distance(), target);
  }

  // float remain_distance = 5;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_remain_distance(), target);
  }

  // float percent = 6;
  if (!(this->percent() <= 0 && this->percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_percent(), target);
  }

  // .SRprotobuf.Location start_location = 7;
  if (this->has_start_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::start_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.RTFStatusMsg)
  return target;
}

size_t RTFStatusMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.RTFStatusMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SRprotobuf.Location start_location = 7;
  if (this->has_start_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_location_);
  }

  // int32 rtf_st = 1;
  if (this->rtf_st() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtf_st());
  }

  // int32 rtf_tips = 2;
  if (this->rtf_tips() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rtf_tips());
  }

  // int32 fail_reason = 3;
  if (this->fail_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fail_reason());
  }

  // float total_distance = 4;
  if (!(this->total_distance() <= 0 && this->total_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float remain_distance = 5;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float percent = 6;
  if (!(this->percent() <= 0 && this->percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTFStatusMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.RTFStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const RTFStatusMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTFStatusMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.RTFStatusMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.RTFStatusMsg)
    MergeFrom(*source);
  }
}

void RTFStatusMsg::MergeFrom(const RTFStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.RTFStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_location()) {
    _internal_mutable_start_location()->::SRprotobuf::Location::MergeFrom(from._internal_start_location());
  }
  if (from.rtf_st() != 0) {
    _internal_set_rtf_st(from._internal_rtf_st());
  }
  if (from.rtf_tips() != 0) {
    _internal_set_rtf_tips(from._internal_rtf_tips());
  }
  if (from.fail_reason() != 0) {
    _internal_set_fail_reason(from._internal_fail_reason());
  }
  if (!(from.total_distance() <= 0 && from.total_distance() >= 0)) {
    _internal_set_total_distance(from._internal_total_distance());
  }
  if (!(from.remain_distance() <= 0 && from.remain_distance() >= 0)) {
    _internal_set_remain_distance(from._internal_remain_distance());
  }
  if (!(from.percent() <= 0 && from.percent() >= 0)) {
    _internal_set_percent(from._internal_percent());
  }
}

void RTFStatusMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.RTFStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTFStatusMsg::CopyFrom(const RTFStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.RTFStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTFStatusMsg::IsInitialized() const {
  return true;
}

void RTFStatusMsg::InternalSwap(RTFStatusMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTFStatusMsg, percent_)
      + sizeof(RTFStatusMsg::percent_)
      - PROTOBUF_FIELD_OFFSET(RTFStatusMsg, start_location_)>(
          reinterpret_cast<char*>(&start_location_),
          reinterpret_cast<char*>(&other->start_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTFStatusMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PkoutTerminationInfo::InitAsDefaultInstance() {
  ::SRprotobuf::_PkoutTerminationInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
}
class PkoutTerminationInfo::_Internal {
 public:
  static const ::SRprotobuf::Point3f& pos(const PkoutTerminationInfo* msg);
};

const ::SRprotobuf::Point3f&
PkoutTerminationInfo::_Internal::pos(const PkoutTerminationInfo* msg) {
  return *msg->pos_;
}
void PkoutTerminationInfo::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
PkoutTerminationInfo::PkoutTerminationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.PkoutTerminationInfo)
}
PkoutTerminationInfo::PkoutTerminationInfo(const PkoutTerminationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::SRprotobuf::Point3f(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.PkoutTerminationInfo)
}

void PkoutTerminationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(len_));
}

PkoutTerminationInfo::~PkoutTerminationInfo() {
  // @@protoc_insertion_point(destructor:SRprotobuf.PkoutTerminationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PkoutTerminationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void PkoutTerminationInfo::ArenaDtor(void* object) {
  PkoutTerminationInfo* _this = reinterpret_cast< PkoutTerminationInfo* >(object);
  (void)_this;
}
void PkoutTerminationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PkoutTerminationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PkoutTerminationInfo& PkoutTerminationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PkoutTerminationInfo_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void PkoutTerminationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.PkoutTerminationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PkoutTerminationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Point3f pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PkoutTerminationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.PkoutTerminationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Point3f pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // float theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_theta(), target);
  }

  // float len = 3;
  if (!(this->len() <= 0 && this->len() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.PkoutTerminationInfo)
  return target;
}

size_t PkoutTerminationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.PkoutTerminationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SRprotobuf.Point3f pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // float theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float len = 3;
  if (!(this->len() <= 0 && this->len() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PkoutTerminationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.PkoutTerminationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PkoutTerminationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PkoutTerminationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.PkoutTerminationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.PkoutTerminationInfo)
    MergeFrom(*source);
  }
}

void PkoutTerminationInfo::MergeFrom(const PkoutTerminationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.PkoutTerminationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::SRprotobuf::Point3f::MergeFrom(from._internal_pos());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.len() <= 0 && from.len() >= 0)) {
    _internal_set_len(from._internal_len());
  }
}

void PkoutTerminationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.PkoutTerminationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkoutTerminationInfo::CopyFrom(const PkoutTerminationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.PkoutTerminationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkoutTerminationInfo::IsInitialized() const {
  return true;
}

void PkoutTerminationInfo::InternalSwap(PkoutTerminationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PkoutTerminationInfo, len_)
      + sizeof(PkoutTerminationInfo::len_)
      - PROTOBUF_FIELD_OFFSET(PkoutTerminationInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PkoutTerminationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApEssentialMsg::InitAsDefaultInstance() {
  ::SRprotobuf::_ApEssentialMsg_default_instance_._instance.get_mutable()->bdistancepercent_ = const_cast< ::SRprotobuf::BDistancePercent*>(
      ::SRprotobuf::BDistancePercent::internal_default_instance());
  ::SRprotobuf::_ApEssentialMsg_default_instance_._instance.get_mutable()->rtf_status_msg_ = const_cast< ::SRprotobuf::RTFStatusMsg*>(
      ::SRprotobuf::RTFStatusMsg::internal_default_instance());
  ::SRprotobuf::_ApEssentialMsg_default_instance_._instance.get_mutable()->pkout_termination_ = const_cast< ::SRprotobuf::PkoutTerminationInfo*>(
      ::SRprotobuf::PkoutTerminationInfo::internal_default_instance());
}
class ApEssentialMsg::_Internal {
 public:
  static const ::SRprotobuf::BDistancePercent& bdistancepercent(const ApEssentialMsg* msg);
  static const ::SRprotobuf::RTFStatusMsg& rtf_status_msg(const ApEssentialMsg* msg);
  static const ::SRprotobuf::PkoutTerminationInfo& pkout_termination(const ApEssentialMsg* msg);
};

const ::SRprotobuf::BDistancePercent&
ApEssentialMsg::_Internal::bdistancepercent(const ApEssentialMsg* msg) {
  return *msg->bdistancepercent_;
}
const ::SRprotobuf::RTFStatusMsg&
ApEssentialMsg::_Internal::rtf_status_msg(const ApEssentialMsg* msg) {
  return *msg->rtf_status_msg_;
}
const ::SRprotobuf::PkoutTerminationInfo&
ApEssentialMsg::_Internal::pkout_termination(const ApEssentialMsg* msg) {
  return *msg->pkout_termination_;
}
ApEssentialMsg::ApEssentialMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trainingfail_(arena),
  pkout_direction_st_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApEssentialMsg)
}
ApEssentialMsg::ApEssentialMsg(const ApEssentialMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trainingfail_(from.trainingfail_),
      pkout_direction_st_(from.pkout_direction_st_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bdistancepercent()) {
    bdistancepercent_ = new ::SRprotobuf::BDistancePercent(*from.bdistancepercent_);
  } else {
    bdistancepercent_ = nullptr;
  }
  if (from._internal_has_rtf_status_msg()) {
    rtf_status_msg_ = new ::SRprotobuf::RTFStatusMsg(*from.rtf_status_msg_);
  } else {
    rtf_status_msg_ = nullptr;
  }
  if (from._internal_has_pkout_termination()) {
    pkout_termination_ = new ::SRprotobuf::PkoutTerminationInfo(*from.pkout_termination_);
  } else {
    pkout_termination_ = nullptr;
  }
  ::memcpy(&xputips_, &from.xputips_,
    static_cast<size_t>(reinterpret_cast<char*>(&pkout_ready_) -
    reinterpret_cast<char*>(&xputips_)) + sizeof(pkout_ready_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApEssentialMsg)
}

void ApEssentialMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&bdistancepercent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkout_ready_) -
      reinterpret_cast<char*>(&bdistancepercent_)) + sizeof(pkout_ready_));
}

ApEssentialMsg::~ApEssentialMsg() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApEssentialMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApEssentialMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bdistancepercent_;
  if (this != internal_default_instance()) delete rtf_status_msg_;
  if (this != internal_default_instance()) delete pkout_termination_;
}

void ApEssentialMsg::ArenaDtor(void* object) {
  ApEssentialMsg* _this = reinterpret_cast< ApEssentialMsg* >(object);
  (void)_this;
}
void ApEssentialMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApEssentialMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApEssentialMsg& ApEssentialMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApEssentialMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApEssentialMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApEssentialMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trainingfail_.Clear();
  pkout_direction_st_.Clear();
  if (GetArena() == nullptr && bdistancepercent_ != nullptr) {
    delete bdistancepercent_;
  }
  bdistancepercent_ = nullptr;
  if (GetArena() == nullptr && rtf_status_msg_ != nullptr) {
    delete rtf_status_msg_;
  }
  rtf_status_msg_ = nullptr;
  if (GetArena() == nullptr && pkout_termination_ != nullptr) {
    delete pkout_termination_;
  }
  pkout_termination_ = nullptr;
  ::memset(&xputips_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkout_ready_) -
      reinterpret_cast<char*>(&xputips_)) + sizeof(pkout_ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApEssentialMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 xputips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xputips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xpuAbnormal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xpuabnormal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 statusIndicate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          statusindicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 failReason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          failreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arrow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          arrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 voice = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float remainDistance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          remaindistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.BDistancePercent bdistancepercent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bdistancepercent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parkState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          parkstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 globalTrajectoryIndex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          globaltrajectoryindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mapPoseState = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          mapposestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 silentFavoriteState = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          silentfavoritestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hdmapId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hdmapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 favoriteSlotReady = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          favoriteslotready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_hdmap = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_hdmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trainingTips = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          trainingtips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trainingst = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          trainingst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 trainingfail = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_trainingfail(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_trainingfail(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 terminal_attr = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          terminal_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 terminal_floor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          terminal_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 map_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          map_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 desktop_avl = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          desktop_avl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enter_map = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          enter_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 easy_get_off = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          easy_get_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.RTFStatusMsg rtf_status_msg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtf_status_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coveredValid = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          coveredvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pkout_direction_st = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pkout_direction_st(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216) {
          _internal_add_pkout_direction_st(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pkout_current_direction = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          pkout_current_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.PkoutTerminationInfo pkout_termination = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_pkout_termination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pkout_slot_shape = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          pkout_slot_shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pkout_ready = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          pkout_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApEssentialMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApEssentialMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xputips = 1;
  if (this->xputips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_xputips(), target);
  }

  // int32 xpuAbnormal = 2;
  if (this->xpuabnormal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xpuabnormal(), target);
  }

  // int32 statusIndicate = 3;
  if (this->statusindicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_statusindicate(), target);
  }

  // int32 failReason = 4;
  if (this->failreason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_failreason(), target);
  }

  // int32 arrow = 5;
  if (this->arrow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_arrow(), target);
  }

  // int32 voice = 6;
  if (this->voice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_voice(), target);
  }

  // float remainDistance = 7;
  if (!(this->remaindistance() <= 0 && this->remaindistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_remaindistance(), target);
  }

  // .SRprotobuf.BDistancePercent bdistancepercent = 8;
  if (this->has_bdistancepercent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bdistancepercent(this), target, stream);
  }

  // int32 parkState = 9;
  if (this->parkstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_parkstate(), target);
  }

  // int32 globalTrajectoryIndex = 10;
  if (this->globaltrajectoryindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_globaltrajectoryindex(), target);
  }

  // int32 mapPoseState = 11;
  if (this->mapposestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_mapposestate(), target);
  }

  // int32 silentFavoriteState = 12;
  if (this->silentfavoritestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_silentfavoritestate(), target);
  }

  // uint64 hdmapId = 13;
  if (this->hdmapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_hdmapid(), target);
  }

  // int32 favoriteSlotReady = 14;
  if (this->favoriteslotready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_favoriteslotready(), target);
  }

  // int32 is_hdmap = 15;
  if (this->is_hdmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_is_hdmap(), target);
  }

  // int32 trainingTips = 16;
  if (this->trainingtips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_trainingtips(), target);
  }

  // int32 trainingst = 17;
  if (this->trainingst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_trainingst(), target);
  }

  // repeated int32 trainingfail = 18;
  {
    int byte_size = _trainingfail_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_trainingfail(), byte_size, target);
    }
  }

  // int32 terminal_attr = 19;
  if (this->terminal_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_terminal_attr(), target);
  }

  // int32 terminal_floor = 20;
  if (this->terminal_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_terminal_floor(), target);
  }

  // uint64 map_time = 21;
  if (this->map_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_map_time(), target);
  }

  // int32 desktop_avl = 22;
  if (this->desktop_avl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_desktop_avl(), target);
  }

  // int32 enter_map = 23;
  if (this->enter_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_enter_map(), target);
  }

  // int32 easy_get_off = 24;
  if (this->easy_get_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_easy_get_off(), target);
  }

  // .SRprotobuf.RTFStatusMsg rtf_status_msg = 25;
  if (this->has_rtf_status_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::rtf_status_msg(this), target, stream);
  }

  // int32 coveredValid = 26;
  if (this->coveredvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_coveredvalid(), target);
  }

  // repeated int32 pkout_direction_st = 27;
  {
    int byte_size = _pkout_direction_st_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          27, _internal_pkout_direction_st(), byte_size, target);
    }
  }

  // int32 pkout_current_direction = 28;
  if (this->pkout_current_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_pkout_current_direction(), target);
  }

  // .SRprotobuf.PkoutTerminationInfo pkout_termination = 29;
  if (this->has_pkout_termination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::pkout_termination(this), target, stream);
  }

  // int32 pkout_slot_shape = 30;
  if (this->pkout_slot_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_pkout_slot_shape(), target);
  }

  // int32 pkout_ready = 31;
  if (this->pkout_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_pkout_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApEssentialMsg)
  return target;
}

size_t ApEssentialMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApEssentialMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 trainingfail = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->trainingfail_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _trainingfail_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pkout_direction_st = 27;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pkout_direction_st_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pkout_direction_st_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SRprotobuf.BDistancePercent bdistancepercent = 8;
  if (this->has_bdistancepercent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bdistancepercent_);
  }

  // .SRprotobuf.RTFStatusMsg rtf_status_msg = 25;
  if (this->has_rtf_status_msg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rtf_status_msg_);
  }

  // .SRprotobuf.PkoutTerminationInfo pkout_termination = 29;
  if (this->has_pkout_termination()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pkout_termination_);
  }

  // int32 xputips = 1;
  if (this->xputips() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xputips());
  }

  // int32 xpuAbnormal = 2;
  if (this->xpuabnormal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xpuabnormal());
  }

  // int32 statusIndicate = 3;
  if (this->statusindicate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statusindicate());
  }

  // int32 failReason = 4;
  if (this->failreason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_failreason());
  }

  // int32 arrow = 5;
  if (this->arrow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arrow());
  }

  // int32 voice = 6;
  if (this->voice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_voice());
  }

  // float remainDistance = 7;
  if (!(this->remaindistance() <= 0 && this->remaindistance() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 parkState = 9;
  if (this->parkstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parkstate());
  }

  // int32 globalTrajectoryIndex = 10;
  if (this->globaltrajectoryindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_globaltrajectoryindex());
  }

  // int32 mapPoseState = 11;
  if (this->mapposestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapposestate());
  }

  // uint64 hdmapId = 13;
  if (this->hdmapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hdmapid());
  }

  // int32 silentFavoriteState = 12;
  if (this->silentfavoritestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_silentfavoritestate());
  }

  // int32 favoriteSlotReady = 14;
  if (this->favoriteslotready() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_favoriteslotready());
  }

  // int32 is_hdmap = 15;
  if (this->is_hdmap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_hdmap());
  }

  // int32 trainingTips = 16;
  if (this->trainingtips() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trainingtips());
  }

  // int32 trainingst = 17;
  if (this->trainingst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trainingst());
  }

  // int32 terminal_attr = 19;
  if (this->terminal_attr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_terminal_attr());
  }

  // uint64 map_time = 21;
  if (this->map_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_map_time());
  }

  // int32 terminal_floor = 20;
  if (this->terminal_floor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_terminal_floor());
  }

  // int32 desktop_avl = 22;
  if (this->desktop_avl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_desktop_avl());
  }

  // int32 enter_map = 23;
  if (this->enter_map() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enter_map());
  }

  // int32 easy_get_off = 24;
  if (this->easy_get_off() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_easy_get_off());
  }

  // int32 coveredValid = 26;
  if (this->coveredvalid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coveredvalid());
  }

  // int32 pkout_current_direction = 28;
  if (this->pkout_current_direction() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pkout_current_direction());
  }

  // int32 pkout_slot_shape = 30;
  if (this->pkout_slot_shape() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pkout_slot_shape());
  }

  // int32 pkout_ready = 31;
  if (this->pkout_ready() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pkout_ready());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApEssentialMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApEssentialMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ApEssentialMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApEssentialMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApEssentialMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApEssentialMsg)
    MergeFrom(*source);
  }
}

void ApEssentialMsg::MergeFrom(const ApEssentialMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApEssentialMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trainingfail_.MergeFrom(from.trainingfail_);
  pkout_direction_st_.MergeFrom(from.pkout_direction_st_);
  if (from.has_bdistancepercent()) {
    _internal_mutable_bdistancepercent()->::SRprotobuf::BDistancePercent::MergeFrom(from._internal_bdistancepercent());
  }
  if (from.has_rtf_status_msg()) {
    _internal_mutable_rtf_status_msg()->::SRprotobuf::RTFStatusMsg::MergeFrom(from._internal_rtf_status_msg());
  }
  if (from.has_pkout_termination()) {
    _internal_mutable_pkout_termination()->::SRprotobuf::PkoutTerminationInfo::MergeFrom(from._internal_pkout_termination());
  }
  if (from.xputips() != 0) {
    _internal_set_xputips(from._internal_xputips());
  }
  if (from.xpuabnormal() != 0) {
    _internal_set_xpuabnormal(from._internal_xpuabnormal());
  }
  if (from.statusindicate() != 0) {
    _internal_set_statusindicate(from._internal_statusindicate());
  }
  if (from.failreason() != 0) {
    _internal_set_failreason(from._internal_failreason());
  }
  if (from.arrow() != 0) {
    _internal_set_arrow(from._internal_arrow());
  }
  if (from.voice() != 0) {
    _internal_set_voice(from._internal_voice());
  }
  if (!(from.remaindistance() <= 0 && from.remaindistance() >= 0)) {
    _internal_set_remaindistance(from._internal_remaindistance());
  }
  if (from.parkstate() != 0) {
    _internal_set_parkstate(from._internal_parkstate());
  }
  if (from.globaltrajectoryindex() != 0) {
    _internal_set_globaltrajectoryindex(from._internal_globaltrajectoryindex());
  }
  if (from.mapposestate() != 0) {
    _internal_set_mapposestate(from._internal_mapposestate());
  }
  if (from.hdmapid() != 0) {
    _internal_set_hdmapid(from._internal_hdmapid());
  }
  if (from.silentfavoritestate() != 0) {
    _internal_set_silentfavoritestate(from._internal_silentfavoritestate());
  }
  if (from.favoriteslotready() != 0) {
    _internal_set_favoriteslotready(from._internal_favoriteslotready());
  }
  if (from.is_hdmap() != 0) {
    _internal_set_is_hdmap(from._internal_is_hdmap());
  }
  if (from.trainingtips() != 0) {
    _internal_set_trainingtips(from._internal_trainingtips());
  }
  if (from.trainingst() != 0) {
    _internal_set_trainingst(from._internal_trainingst());
  }
  if (from.terminal_attr() != 0) {
    _internal_set_terminal_attr(from._internal_terminal_attr());
  }
  if (from.map_time() != 0) {
    _internal_set_map_time(from._internal_map_time());
  }
  if (from.terminal_floor() != 0) {
    _internal_set_terminal_floor(from._internal_terminal_floor());
  }
  if (from.desktop_avl() != 0) {
    _internal_set_desktop_avl(from._internal_desktop_avl());
  }
  if (from.enter_map() != 0) {
    _internal_set_enter_map(from._internal_enter_map());
  }
  if (from.easy_get_off() != 0) {
    _internal_set_easy_get_off(from._internal_easy_get_off());
  }
  if (from.coveredvalid() != 0) {
    _internal_set_coveredvalid(from._internal_coveredvalid());
  }
  if (from.pkout_current_direction() != 0) {
    _internal_set_pkout_current_direction(from._internal_pkout_current_direction());
  }
  if (from.pkout_slot_shape() != 0) {
    _internal_set_pkout_slot_shape(from._internal_pkout_slot_shape());
  }
  if (from.pkout_ready() != 0) {
    _internal_set_pkout_ready(from._internal_pkout_ready());
  }
}

void ApEssentialMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApEssentialMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApEssentialMsg::CopyFrom(const ApEssentialMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApEssentialMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApEssentialMsg::IsInitialized() const {
  return true;
}

void ApEssentialMsg::InternalSwap(ApEssentialMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trainingfail_.InternalSwap(&other->trainingfail_);
  pkout_direction_st_.InternalSwap(&other->pkout_direction_st_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApEssentialMsg, pkout_ready_)
      + sizeof(ApEssentialMsg::pkout_ready_)
      - PROTOBUF_FIELD_OFFSET(ApEssentialMsg, bdistancepercent_)>(
          reinterpret_cast<char*>(&bdistancepercent_),
          reinterpret_cast<char*>(&other->bdistancepercent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApEssentialMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApNaviMsg::InitAsDefaultInstance() {
}
class ApNaviMsg::_Internal {
 public:
};

ApNaviMsg::ApNaviMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApNaviMsg)
}
ApNaviMsg::ApNaviMsg(const ApNaviMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&navi_state_, &from.navi_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&hill_status_) -
    reinterpret_cast<char*>(&navi_state_)) + sizeof(hill_status_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApNaviMsg)
}

void ApNaviMsg::SharedCtor() {
  ::memset(&navi_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hill_status_) -
      reinterpret_cast<char*>(&navi_state_)) + sizeof(hill_status_));
}

ApNaviMsg::~ApNaviMsg() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApNaviMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApNaviMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApNaviMsg::ArenaDtor(void* object) {
  ApNaviMsg* _this = reinterpret_cast< ApNaviMsg* >(object);
  (void)_this;
}
void ApNaviMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApNaviMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApNaviMsg& ApNaviMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApNaviMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApNaviMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApNaviMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&navi_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hill_status_) -
      reinterpret_cast<char*>(&navi_state_)) + sizeof(hill_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApNaviMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 navi_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          navi_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 navi_tips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          navi_tips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dist_to_startpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          dist_to_startpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dist_to_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          dist_to_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 hill_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hill_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApNaviMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApNaviMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 navi_state = 1;
  if (this->navi_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_navi_state(), target);
  }

  // int32 navi_tips = 2;
  if (this->navi_tips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_navi_tips(), target);
  }

  // float dist_to_startpoint = 3;
  if (!(this->dist_to_startpoint() <= 0 && this->dist_to_startpoint() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dist_to_startpoint(), target);
  }

  // float dist_to_feature = 4;
  if (!(this->dist_to_feature() <= 0 && this->dist_to_feature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dist_to_feature(), target);
  }

  // int32 hill_status = 5;
  if (this->hill_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hill_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApNaviMsg)
  return target;
}

size_t ApNaviMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApNaviMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 navi_state = 1;
  if (this->navi_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_navi_state());
  }

  // int32 navi_tips = 2;
  if (this->navi_tips() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_navi_tips());
  }

  // float dist_to_startpoint = 3;
  if (!(this->dist_to_startpoint() <= 0 && this->dist_to_startpoint() >= 0)) {
    total_size += 1 + 4;
  }

  // float dist_to_feature = 4;
  if (!(this->dist_to_feature() <= 0 && this->dist_to_feature() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hill_status = 5;
  if (this->hill_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hill_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApNaviMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApNaviMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ApNaviMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApNaviMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApNaviMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApNaviMsg)
    MergeFrom(*source);
  }
}

void ApNaviMsg::MergeFrom(const ApNaviMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApNaviMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.navi_state() != 0) {
    _internal_set_navi_state(from._internal_navi_state());
  }
  if (from.navi_tips() != 0) {
    _internal_set_navi_tips(from._internal_navi_tips());
  }
  if (!(from.dist_to_startpoint() <= 0 && from.dist_to_startpoint() >= 0)) {
    _internal_set_dist_to_startpoint(from._internal_dist_to_startpoint());
  }
  if (!(from.dist_to_feature() <= 0 && from.dist_to_feature() >= 0)) {
    _internal_set_dist_to_feature(from._internal_dist_to_feature());
  }
  if (from.hill_status() != 0) {
    _internal_set_hill_status(from._internal_hill_status());
  }
}

void ApNaviMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApNaviMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApNaviMsg::CopyFrom(const ApNaviMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApNaviMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApNaviMsg::IsInitialized() const {
  return true;
}

void ApNaviMsg::InternalSwap(ApNaviMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApNaviMsg, hill_status_)
      + sizeof(ApNaviMsg::hill_status_)
      - PROTOBUF_FIELD_OFFSET(ApNaviMsg, navi_state_)>(
          reinterpret_cast<char*>(&navi_state_),
          reinterpret_cast<char*>(&other->navi_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApNaviMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrainingSpdBump::InitAsDefaultInstance() {
}
class TrainingSpdBump::_Internal {
 public:
};

TrainingSpdBump::TrainingSpdBump(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.TrainingSpdBump)
}
TrainingSpdBump::TrainingSpdBump(const TrainingSpdBump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.TrainingSpdBump)
}

void TrainingSpdBump::SharedCtor() {
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(s_));
}

TrainingSpdBump::~TrainingSpdBump() {
  // @@protoc_insertion_point(destructor:SRprotobuf.TrainingSpdBump)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrainingSpdBump::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrainingSpdBump::ArenaDtor(void* object) {
  TrainingSpdBump* _this = reinterpret_cast< TrainingSpdBump* >(object);
  (void)_this;
}
void TrainingSpdBump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainingSpdBump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainingSpdBump& TrainingSpdBump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainingSpdBump_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void TrainingSpdBump::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.TrainingSpdBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainingSpdBump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float theta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainingSpdBump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.TrainingSpdBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float theta = 5;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_theta(), target);
  }

  // float s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.TrainingSpdBump)
  return target;
}

size_t TrainingSpdBump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.TrainingSpdBump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float theta = 5;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float s = 6;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainingSpdBump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.TrainingSpdBump)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingSpdBump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainingSpdBump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.TrainingSpdBump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.TrainingSpdBump)
    MergeFrom(*source);
  }
}

void TrainingSpdBump::MergeFrom(const TrainingSpdBump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.TrainingSpdBump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
}

void TrainingSpdBump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.TrainingSpdBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingSpdBump::CopyFrom(const TrainingSpdBump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.TrainingSpdBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingSpdBump::IsInitialized() const {
  return true;
}

void TrainingSpdBump::InternalSwap(TrainingSpdBump* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingSpdBump, s_)
      + sizeof(TrainingSpdBump::s_)
      - PROTOBUF_FIELD_OFFSET(TrainingSpdBump, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingSpdBump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlotIdMapping::InitAsDefaultInstance() {
}
class SlotIdMapping::_Internal {
 public:
};

SlotIdMapping::SlotIdMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.SlotIdMapping)
}
SlotIdMapping::SlotIdMapping(const SlotIdMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&avmslotid_, &from.avmslotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parkslotid_) -
    reinterpret_cast<char*>(&avmslotid_)) + sizeof(parkslotid_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.SlotIdMapping)
}

void SlotIdMapping::SharedCtor() {
  ::memset(&avmslotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parkslotid_) -
      reinterpret_cast<char*>(&avmslotid_)) + sizeof(parkslotid_));
}

SlotIdMapping::~SlotIdMapping() {
  // @@protoc_insertion_point(destructor:SRprotobuf.SlotIdMapping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlotIdMapping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SlotIdMapping::ArenaDtor(void* object) {
  SlotIdMapping* _this = reinterpret_cast< SlotIdMapping* >(object);
  (void)_this;
}
void SlotIdMapping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlotIdMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlotIdMapping& SlotIdMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlotIdMapping_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void SlotIdMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.SlotIdMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avmslotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parkslotid_) -
      reinterpret_cast<char*>(&avmslotid_)) + sizeof(parkslotid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlotIdMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avmSlotId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avmslotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parkSlotId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parkslotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlotIdMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.SlotIdMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avmSlotId = 1;
  if (this->avmslotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avmslotid(), target);
  }

  // int32 parkSlotId = 2;
  if (this->parkslotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parkslotid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.SlotIdMapping)
  return target;
}

size_t SlotIdMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.SlotIdMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avmSlotId = 1;
  if (this->avmslotid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avmslotid());
  }

  // int32 parkSlotId = 2;
  if (this->parkslotid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parkslotid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlotIdMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.SlotIdMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const SlotIdMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlotIdMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.SlotIdMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.SlotIdMapping)
    MergeFrom(*source);
  }
}

void SlotIdMapping::MergeFrom(const SlotIdMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.SlotIdMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avmslotid() != 0) {
    _internal_set_avmslotid(from._internal_avmslotid());
  }
  if (from.parkslotid() != 0) {
    _internal_set_parkslotid(from._internal_parkslotid());
  }
}

void SlotIdMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.SlotIdMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotIdMapping::CopyFrom(const SlotIdMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.SlotIdMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotIdMapping::IsInitialized() const {
  return true;
}

void SlotIdMapping::InternalSwap(SlotIdMapping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlotIdMapping, parkslotid_)
      + sizeof(SlotIdMapping::parkslotid_)
      - PROTOBUF_FIELD_OFFSET(SlotIdMapping, avmslotid_)>(
          reinterpret_cast<char*>(&avmslotid_),
          reinterpret_cast<char*>(&other->avmslotid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlotIdMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ap_StaticObjectPoint::InitAsDefaultInstance() {
  ::SRprotobuf::_Ap_StaticObjectPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
}
class Ap_StaticObjectPoint::_Internal {
 public:
  static const ::SRprotobuf::Point3f& position(const Ap_StaticObjectPoint* msg);
};

const ::SRprotobuf::Point3f&
Ap_StaticObjectPoint::_Internal::position(const Ap_StaticObjectPoint* msg) {
  return *msg->position_;
}
void Ap_StaticObjectPoint::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
Ap_StaticObjectPoint::Ap_StaticObjectPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Ap_StaticObjectPoint)
}
Ap_StaticObjectPoint::Ap_StaticObjectPoint(const Ap_StaticObjectPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::SRprotobuf::Point3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  is_visible_ = from.is_visible_;
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Ap_StaticObjectPoint)
}

void Ap_StaticObjectPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_visible_) -
      reinterpret_cast<char*>(&position_)) + sizeof(is_visible_));
}

Ap_StaticObjectPoint::~Ap_StaticObjectPoint() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Ap_StaticObjectPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ap_StaticObjectPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void Ap_StaticObjectPoint::ArenaDtor(void* object) {
  Ap_StaticObjectPoint* _this = reinterpret_cast< Ap_StaticObjectPoint* >(object);
  (void)_this;
}
void Ap_StaticObjectPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ap_StaticObjectPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ap_StaticObjectPoint& Ap_StaticObjectPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ap_StaticObjectPoint_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void Ap_StaticObjectPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Ap_StaticObjectPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  is_visible_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ap_StaticObjectPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Point3f position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_visible = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ap_StaticObjectPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Ap_StaticObjectPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Point3f position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // bool is_visible = 2;
  if (this->is_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Ap_StaticObjectPoint)
  return target;
}

size_t Ap_StaticObjectPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Ap_StaticObjectPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SRprotobuf.Point3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // bool is_visible = 2;
  if (this->is_visible() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ap_StaticObjectPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Ap_StaticObjectPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Ap_StaticObjectPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ap_StaticObjectPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Ap_StaticObjectPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Ap_StaticObjectPoint)
    MergeFrom(*source);
  }
}

void Ap_StaticObjectPoint::MergeFrom(const Ap_StaticObjectPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Ap_StaticObjectPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::SRprotobuf::Point3f::MergeFrom(from._internal_position());
  }
  if (from.is_visible() != 0) {
    _internal_set_is_visible(from._internal_is_visible());
  }
}

void Ap_StaticObjectPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Ap_StaticObjectPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ap_StaticObjectPoint::CopyFrom(const Ap_StaticObjectPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Ap_StaticObjectPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ap_StaticObjectPoint::IsInitialized() const {
  return true;
}

void Ap_StaticObjectPoint::InternalSwap(Ap_StaticObjectPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ap_StaticObjectPoint, is_visible_)
      + sizeof(Ap_StaticObjectPoint::is_visible_)
      - PROTOBUF_FIELD_OFFSET(Ap_StaticObjectPoint, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ap_StaticObjectPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ap_StaticObject::InitAsDefaultInstance() {
}
class Ap_StaticObject::_Internal {
 public:
};

Ap_StaticObject::Ap_StaticObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  size_(arena),
  local_pose_(arena),
  polygon_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Ap_StaticObject)
}
Ap_StaticObject::Ap_StaticObject(const Ap_StaticObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      size_(from.size_),
      local_pose_(from.local_pose_),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Ap_StaticObject)
}

void Ap_StaticObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
}

Ap_StaticObject::~Ap_StaticObject() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Ap_StaticObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ap_StaticObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ap_StaticObject::ArenaDtor(void* object) {
  Ap_StaticObject* _this = reinterpret_cast< Ap_StaticObject* >(object);
  (void)_this;
}
void Ap_StaticObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ap_StaticObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ap_StaticObject& Ap_StaticObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ap_StaticObject_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void Ap_StaticObject::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Ap_StaticObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_.Clear();
  local_pose_.Clear();
  polygon_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ap_StaticObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.AP_StaticObjectType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SRprotobuf::AP_StaticObjectType>(val));
        } else goto handle_unusual;
        continue;
      // bool is_with_hanging = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_with_hanging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_mature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_mature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_passable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_passable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double local_pose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_local_pose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_local_pose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Ap_StaticObjectPoint polygon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // float confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ap_StaticObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Ap_StaticObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .SRprotobuf.AP_StaticObjectType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bool is_with_hanging = 3;
  if (this->is_with_hanging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_with_hanging(), target);
  }

  // bool is_mature = 4;
  if (this->is_mature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_mature(), target);
  }

  // bool is_passable = 5;
  if (this->is_passable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_passable(), target);
  }

  // repeated float size = 6;
  if (this->_internal_size_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_size(), target);
  }

  // repeated double local_pose = 7;
  if (this->_internal_local_pose_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_local_pose(), target);
  }

  // repeated .SRprotobuf.Ap_StaticObjectPoint polygon = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_polygon(i), target, stream);
  }

  // float confidence = 9;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Ap_StaticObject)
  return target;
}

size_t Ap_StaticObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Ap_StaticObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float size = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_size_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double local_pose = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_local_pose_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _local_pose_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SRprotobuf.Ap_StaticObjectPoint polygon = 8;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // .SRprotobuf.AP_StaticObjectType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_with_hanging = 3;
  if (this->is_with_hanging() != 0) {
    total_size += 1 + 1;
  }

  // bool is_mature = 4;
  if (this->is_mature() != 0) {
    total_size += 1 + 1;
  }

  // bool is_passable = 5;
  if (this->is_passable() != 0) {
    total_size += 1 + 1;
  }

  // float confidence = 9;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ap_StaticObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Ap_StaticObject)
  GOOGLE_DCHECK_NE(&from, this);
  const Ap_StaticObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ap_StaticObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Ap_StaticObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Ap_StaticObject)
    MergeFrom(*source);
  }
}

void Ap_StaticObject::MergeFrom(const Ap_StaticObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Ap_StaticObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  size_.MergeFrom(from.size_);
  local_pose_.MergeFrom(from.local_pose_);
  polygon_.MergeFrom(from.polygon_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_with_hanging() != 0) {
    _internal_set_is_with_hanging(from._internal_is_with_hanging());
  }
  if (from.is_mature() != 0) {
    _internal_set_is_mature(from._internal_is_mature());
  }
  if (from.is_passable() != 0) {
    _internal_set_is_passable(from._internal_is_passable());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Ap_StaticObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Ap_StaticObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ap_StaticObject::CopyFrom(const Ap_StaticObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Ap_StaticObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ap_StaticObject::IsInitialized() const {
  return true;
}

void Ap_StaticObject::InternalSwap(Ap_StaticObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  size_.InternalSwap(&other->size_);
  local_pose_.InternalSwap(&other->local_pose_);
  polygon_.InternalSwap(&other->polygon_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ap_StaticObject, confidence_)
      + sizeof(Ap_StaticObject::confidence_)
      - PROTOBUF_FIELD_OFFSET(Ap_StaticObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ap_StaticObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wall::InitAsDefaultInstance() {
}
class Wall::_Internal {
 public:
};

void Wall::clear_points() {
  points_.Clear();
}
Wall::Wall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Wall)
}
Wall::Wall(const Wall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Wall)
}

void Wall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  id_ = 0u;
}

Wall::~Wall() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Wall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Wall::ArenaDtor(void* object) {
  Wall* _this = reinterpret_cast< Wall* >(object);
  (void)_this;
}
void Wall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wall& Wall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wall_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void Wall::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Wall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Point3f points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Wall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .SRprotobuf.Point3f points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Wall)
  return target;
}

size_t Wall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Wall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.Point3f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Wall)
  GOOGLE_DCHECK_NE(&from, this);
  const Wall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Wall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Wall)
    MergeFrom(*source);
  }
}

void Wall::MergeFrom(const Wall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Wall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Wall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Wall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wall::CopyFrom(const Wall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Wall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wall::IsInitialized() const {
  return true;
}

void Wall::InternalSwap(Wall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BevPillar::InitAsDefaultInstance() {
  ::SRprotobuf::_BevPillar_default_instance_._instance.get_mutable()->pos_ = const_cast< ::SRprotobuf::Point2f*>(
      ::SRprotobuf::Point2f::internal_default_instance());
}
class BevPillar::_Internal {
 public:
  static const ::SRprotobuf::Point2f& pos(const BevPillar* msg);
};

const ::SRprotobuf::Point2f&
BevPillar::_Internal::pos(const BevPillar* msg) {
  return *msg->pos_;
}
void BevPillar::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
BevPillar::BevPillar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.BevPillar)
}
BevPillar::BevPillar(const BevPillar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::SRprotobuf::Point2f(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&min_z_, &from.min_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_z_) -
    reinterpret_cast<char*>(&min_z_)) + sizeof(max_z_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.BevPillar)
}

void BevPillar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_z_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(max_z_));
}

BevPillar::~BevPillar() {
  // @@protoc_insertion_point(destructor:SRprotobuf.BevPillar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BevPillar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void BevPillar::ArenaDtor(void* object) {
  BevPillar* _this = reinterpret_cast< BevPillar* >(object);
  (void)_this;
}
void BevPillar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BevPillar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BevPillar& BevPillar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BevPillar_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void BevPillar::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.BevPillar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&min_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_z_) -
      reinterpret_cast<char*>(&min_z_)) + sizeof(max_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BevPillar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Point2f pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          min_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BevPillar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.BevPillar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Point2f pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // float min_z = 2;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_z(), target);
  }

  // float max_z = 3;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.BevPillar)
  return target;
}

size_t BevPillar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.BevPillar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SRprotobuf.Point2f pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // float min_z = 2;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_z = 3;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BevPillar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.BevPillar)
  GOOGLE_DCHECK_NE(&from, this);
  const BevPillar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BevPillar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.BevPillar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.BevPillar)
    MergeFrom(*source);
  }
}

void BevPillar::MergeFrom(const BevPillar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.BevPillar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::SRprotobuf::Point2f::MergeFrom(from._internal_pos());
  }
  if (!(from.min_z() <= 0 && from.min_z() >= 0)) {
    _internal_set_min_z(from._internal_min_z());
  }
  if (!(from.max_z() <= 0 && from.max_z() >= 0)) {
    _internal_set_max_z(from._internal_max_z());
  }
}

void BevPillar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.BevPillar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BevPillar::CopyFrom(const BevPillar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.BevPillar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BevPillar::IsInitialized() const {
  return true;
}

void BevPillar::InternalSwap(BevPillar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BevPillar, max_z_)
      + sizeof(BevPillar::max_z_)
      - PROTOBUF_FIELD_OFFSET(BevPillar, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BevPillar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OccupancyNetParkingMsg::InitAsDefaultInstance() {
  ::SRprotobuf::_OccupancyNetParkingMsg_default_instance_._instance.get_mutable()->pillar_2d_size_ = const_cast< ::SRprotobuf::Point2f*>(
      ::SRprotobuf::Point2f::internal_default_instance());
}
class OccupancyNetParkingMsg::_Internal {
 public:
  static const ::SRprotobuf::Point2f& pillar_2d_size(const OccupancyNetParkingMsg* msg);
};

const ::SRprotobuf::Point2f&
OccupancyNetParkingMsg::_Internal::pillar_2d_size(const OccupancyNetParkingMsg* msg) {
  return *msg->pillar_2d_size_;
}
void OccupancyNetParkingMsg::clear_pillar_2d_size() {
  if (GetArena() == nullptr && pillar_2d_size_ != nullptr) {
    delete pillar_2d_size_;
  }
  pillar_2d_size_ = nullptr;
}
OccupancyNetParkingMsg::OccupancyNetParkingMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bev_pillar_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.OccupancyNetParkingMsg)
}
OccupancyNetParkingMsg::OccupancyNetParkingMsg(const OccupancyNetParkingMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bev_pillar_(from.bev_pillar_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pillar_2d_size()) {
    pillar_2d_size_ = new ::SRprotobuf::Point2f(*from.pillar_2d_size_);
  } else {
    pillar_2d_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.OccupancyNetParkingMsg)
}

void OccupancyNetParkingMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  pillar_2d_size_ = nullptr;
}

OccupancyNetParkingMsg::~OccupancyNetParkingMsg() {
  // @@protoc_insertion_point(destructor:SRprotobuf.OccupancyNetParkingMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OccupancyNetParkingMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pillar_2d_size_;
}

void OccupancyNetParkingMsg::ArenaDtor(void* object) {
  OccupancyNetParkingMsg* _this = reinterpret_cast< OccupancyNetParkingMsg* >(object);
  (void)_this;
}
void OccupancyNetParkingMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OccupancyNetParkingMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OccupancyNetParkingMsg& OccupancyNetParkingMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OccupancyNetParkingMsg_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void OccupancyNetParkingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.OccupancyNetParkingMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bev_pillar_.Clear();
  if (GetArena() == nullptr && pillar_2d_size_ != nullptr) {
    delete pillar_2d_size_;
  }
  pillar_2d_size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OccupancyNetParkingMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Point2f pillar_2d_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pillar_2d_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.BevPillar bev_pillar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bev_pillar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OccupancyNetParkingMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.OccupancyNetParkingMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Point2f pillar_2d_size = 1;
  if (this->has_pillar_2d_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pillar_2d_size(this), target, stream);
  }

  // repeated .SRprotobuf.BevPillar bev_pillar = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bev_pillar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bev_pillar(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.OccupancyNetParkingMsg)
  return target;
}

size_t OccupancyNetParkingMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.OccupancyNetParkingMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.BevPillar bev_pillar = 2;
  total_size += 1UL * this->_internal_bev_pillar_size();
  for (const auto& msg : this->bev_pillar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SRprotobuf.Point2f pillar_2d_size = 1;
  if (this->has_pillar_2d_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pillar_2d_size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyNetParkingMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.OccupancyNetParkingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyNetParkingMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OccupancyNetParkingMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.OccupancyNetParkingMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.OccupancyNetParkingMsg)
    MergeFrom(*source);
  }
}

void OccupancyNetParkingMsg::MergeFrom(const OccupancyNetParkingMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.OccupancyNetParkingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bev_pillar_.MergeFrom(from.bev_pillar_);
  if (from.has_pillar_2d_size()) {
    _internal_mutable_pillar_2d_size()->::SRprotobuf::Point2f::MergeFrom(from._internal_pillar_2d_size());
  }
}

void OccupancyNetParkingMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.OccupancyNetParkingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyNetParkingMsg::CopyFrom(const OccupancyNetParkingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.OccupancyNetParkingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyNetParkingMsg::IsInitialized() const {
  return true;
}

void OccupancyNetParkingMsg::InternalSwap(OccupancyNetParkingMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bev_pillar_.InternalSwap(&other->bev_pillar_);
  swap(pillar_2d_size_, other->pillar_2d_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OccupancyNetParkingMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApDrivingData::InitAsDefaultInstance() {
  ::SRprotobuf::_ApDrivingData_default_instance_._instance.get_mutable()->location_ = const_cast< ::SRprotobuf::Location*>(
      ::SRprotobuf::Location::internal_default_instance());
  ::SRprotobuf::_ApDrivingData_default_instance_._instance.get_mutable()->essentialmsg_ = const_cast< ::SRprotobuf::ApEssentialMsg*>(
      ::SRprotobuf::ApEssentialMsg::internal_default_instance());
  ::SRprotobuf::_ApDrivingData_default_instance_._instance.get_mutable()->navimsg_ = const_cast< ::SRprotobuf::ApNaviMsg*>(
      ::SRprotobuf::ApNaviMsg::internal_default_instance());
  ::SRprotobuf::_ApDrivingData_default_instance_._instance.get_mutable()->online_local_map_msg_ = const_cast< ::SRprotobuf::OnlineLocalMapMsg*>(
      ::SRprotobuf::OnlineLocalMapMsg::internal_default_instance());
  ::SRprotobuf::_ApDrivingData_default_instance_._instance.get_mutable()->occupancy_net_parking_msg_ = const_cast< ::SRprotobuf::OccupancyNetParkingMsg*>(
      ::SRprotobuf::OccupancyNetParkingMsg::internal_default_instance());
}
class ApDrivingData::_Internal {
 public:
  static const ::SRprotobuf::Location& location(const ApDrivingData* msg);
  static const ::SRprotobuf::ApEssentialMsg& essentialmsg(const ApDrivingData* msg);
  static const ::SRprotobuf::ApNaviMsg& navimsg(const ApDrivingData* msg);
  static const ::SRprotobuf::OnlineLocalMapMsg& online_local_map_msg(const ApDrivingData* msg);
  static const ::SRprotobuf::OccupancyNetParkingMsg& occupancy_net_parking_msg(const ApDrivingData* msg);
};

const ::SRprotobuf::Location&
ApDrivingData::_Internal::location(const ApDrivingData* msg) {
  return *msg->location_;
}
const ::SRprotobuf::ApEssentialMsg&
ApDrivingData::_Internal::essentialmsg(const ApDrivingData* msg) {
  return *msg->essentialmsg_;
}
const ::SRprotobuf::ApNaviMsg&
ApDrivingData::_Internal::navimsg(const ApDrivingData* msg) {
  return *msg->navimsg_;
}
const ::SRprotobuf::OnlineLocalMapMsg&
ApDrivingData::_Internal::online_local_map_msg(const ApDrivingData* msg) {
  return *msg->online_local_map_msg_;
}
const ::SRprotobuf::OccupancyNetParkingMsg&
ApDrivingData::_Internal::occupancy_net_parking_msg(const ApDrivingData* msg) {
  return *msg->occupancy_net_parking_msg_;
}
void ApDrivingData::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
void ApDrivingData::clear_slot() {
  slot_.Clear();
}
void ApDrivingData::clear_slotavm() {
  slotavm_.Clear();
}
void ApDrivingData::clear_online_local_map_msg() {
  if (GetArena() == nullptr && online_local_map_msg_ != nullptr) {
    delete online_local_map_msg_;
  }
  online_local_map_msg_ = nullptr;
}
ApDrivingData::ApDrivingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slot_(arena),
  obj_(arena),
  lanelines_(arena),
  curfloor_(arena),
  trajectory_(arena),
  dynobj_(arena),
  slotavm_(arena),
  spdbump_(arena),
  slotidmapping_(arena),
  ap_staticobject_(arena),
  wall_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.ApDrivingData)
}
ApDrivingData::ApDrivingData(const ApDrivingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slot_(from.slot_),
      obj_(from.obj_),
      lanelines_(from.lanelines_),
      curfloor_(from.curfloor_),
      trajectory_(from.trajectory_),
      dynobj_(from.dynobj_),
      slotavm_(from.slotavm_),
      spdbump_(from.spdbump_),
      slotidmapping_(from.slotidmapping_),
      ap_staticobject_(from.ap_staticobject_),
      wall_(from.wall_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::SRprotobuf::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_essentialmsg()) {
    essentialmsg_ = new ::SRprotobuf::ApEssentialMsg(*from.essentialmsg_);
  } else {
    essentialmsg_ = nullptr;
  }
  if (from._internal_has_navimsg()) {
    navimsg_ = new ::SRprotobuf::ApNaviMsg(*from.navimsg_);
  } else {
    navimsg_ = nullptr;
  }
  if (from._internal_has_online_local_map_msg()) {
    online_local_map_msg_ = new ::SRprotobuf::OnlineLocalMapMsg(*from.online_local_map_msg_);
  } else {
    online_local_map_msg_ = nullptr;
  }
  if (from._internal_has_occupancy_net_parking_msg()) {
    occupancy_net_parking_msg_ = new ::SRprotobuf::OccupancyNetParkingMsg(*from.occupancy_net_parking_msg_);
  } else {
    occupancy_net_parking_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.ApDrivingData)
}

void ApDrivingData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApDrivingData_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupancy_net_parking_msg_) -
      reinterpret_cast<char*>(&location_)) + sizeof(occupancy_net_parking_msg_));
}

ApDrivingData::~ApDrivingData() {
  // @@protoc_insertion_point(destructor:SRprotobuf.ApDrivingData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApDrivingData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete essentialmsg_;
  if (this != internal_default_instance()) delete navimsg_;
  if (this != internal_default_instance()) delete online_local_map_msg_;
  if (this != internal_default_instance()) delete occupancy_net_parking_msg_;
}

void ApDrivingData::ArenaDtor(void* object) {
  ApDrivingData* _this = reinterpret_cast< ApDrivingData* >(object);
  (void)_this;
}
void ApDrivingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApDrivingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApDrivingData& ApDrivingData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApDrivingData_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base);
  return *internal_default_instance();
}


void ApDrivingData::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.ApDrivingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_.Clear();
  obj_.Clear();
  lanelines_.Clear();
  curfloor_.Clear();
  trajectory_.Clear();
  dynobj_.Clear();
  slotavm_.Clear();
  spdbump_.Clear();
  slotidmapping_.Clear();
  ap_staticobject_.Clear();
  wall_.Clear();
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && essentialmsg_ != nullptr) {
    delete essentialmsg_;
  }
  essentialmsg_ = nullptr;
  if (GetArena() == nullptr && navimsg_ != nullptr) {
    delete navimsg_;
  }
  navimsg_ = nullptr;
  if (GetArena() == nullptr && online_local_map_msg_ != nullptr) {
    delete online_local_map_msg_;
  }
  online_local_map_msg_ = nullptr;
  if (GetArena() == nullptr && occupancy_net_parking_msg_ != nullptr) {
    delete occupancy_net_parking_msg_;
  }
  occupancy_net_parking_msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApDrivingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Location location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Slot slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.StripObstacle obj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obj(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.ApLaneLineInfo lanelines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 curFloor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_curfloor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_curfloor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.ApTrajectoryDataType Trajectory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.ApDynaObject dynObj = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dynobj(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApEssentialMsg essentialMsg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_essentialmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Slot slotAvm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slotavm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.TrainingSpdBump spdBump = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spdbump(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.SlotIdMapping slotIdMapping = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slotidmapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Ap_StaticObject ap_StaticObject = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ap_staticobject(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApNaviMsg naviMsg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_navimsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.OnlineLocalMapMsg online_local_map_msg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_online_local_map_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Wall wall = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wall(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.OccupancyNetParkingMsg occupancy_net_parking_msg = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupancy_net_parking_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApDrivingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.ApDrivingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Location location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // repeated .SRprotobuf.Slot slot = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slot(i), target, stream);
  }

  // repeated .SRprotobuf.StripObstacle obj = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obj_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_obj(i), target, stream);
  }

  // repeated .SRprotobuf.ApLaneLineInfo lanelines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_lanelines(i), target, stream);
  }

  // repeated int32 curFloor = 5;
  {
    int byte_size = _curfloor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_curfloor(), byte_size, target);
    }
  }

  // repeated .SRprotobuf.ApTrajectoryDataType Trajectory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_trajectory(i), target, stream);
  }

  // repeated .SRprotobuf.ApDynaObject dynObj = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dynobj_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_dynobj(i), target, stream);
  }

  // .SRprotobuf.ApEssentialMsg essentialMsg = 8;
  if (this->has_essentialmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::essentialmsg(this), target, stream);
  }

  // repeated .SRprotobuf.Slot slotAvm = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slotavm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_slotavm(i), target, stream);
  }

  // repeated .SRprotobuf.TrainingSpdBump spdBump = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spdbump_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_spdbump(i), target, stream);
  }

  // repeated .SRprotobuf.SlotIdMapping slotIdMapping = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slotidmapping_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_slotidmapping(i), target, stream);
  }

  // repeated .SRprotobuf.Ap_StaticObject ap_StaticObject = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ap_staticobject_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_ap_staticobject(i), target, stream);
  }

  // .SRprotobuf.ApNaviMsg naviMsg = 13;
  if (this->has_navimsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::navimsg(this), target, stream);
  }

  // .SRprotobuf.OnlineLocalMapMsg online_local_map_msg = 14;
  if (this->has_online_local_map_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::online_local_map_msg(this), target, stream);
  }

  // repeated .SRprotobuf.Wall wall = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_wall_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_wall(i), target, stream);
  }

  // .SRprotobuf.OccupancyNetParkingMsg occupancy_net_parking_msg = 16;
  if (this->has_occupancy_net_parking_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::occupancy_net_parking_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.ApDrivingData)
  return target;
}

size_t ApDrivingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.ApDrivingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.Slot slot = 2;
  total_size += 1UL * this->_internal_slot_size();
  for (const auto& msg : this->slot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.StripObstacle obj = 3;
  total_size += 1UL * this->_internal_obj_size();
  for (const auto& msg : this->obj_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.ApLaneLineInfo lanelines = 4;
  total_size += 1UL * this->_internal_lanelines_size();
  for (const auto& msg : this->lanelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 curFloor = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->curfloor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _curfloor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SRprotobuf.ApTrajectoryDataType Trajectory = 6;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.ApDynaObject dynObj = 7;
  total_size += 1UL * this->_internal_dynobj_size();
  for (const auto& msg : this->dynobj_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.Slot slotAvm = 9;
  total_size += 1UL * this->_internal_slotavm_size();
  for (const auto& msg : this->slotavm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.TrainingSpdBump spdBump = 10;
  total_size += 1UL * this->_internal_spdbump_size();
  for (const auto& msg : this->spdbump_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.SlotIdMapping slotIdMapping = 11;
  total_size += 1UL * this->_internal_slotidmapping_size();
  for (const auto& msg : this->slotidmapping_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.Ap_StaticObject ap_StaticObject = 12;
  total_size += 1UL * this->_internal_ap_staticobject_size();
  for (const auto& msg : this->ap_staticobject_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SRprotobuf.Wall wall = 15;
  total_size += 1UL * this->_internal_wall_size();
  for (const auto& msg : this->wall_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SRprotobuf.Location location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .SRprotobuf.ApEssentialMsg essentialMsg = 8;
  if (this->has_essentialmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *essentialmsg_);
  }

  // .SRprotobuf.ApNaviMsg naviMsg = 13;
  if (this->has_navimsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *navimsg_);
  }

  // .SRprotobuf.OnlineLocalMapMsg online_local_map_msg = 14;
  if (this->has_online_local_map_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *online_local_map_msg_);
  }

  // .SRprotobuf.OccupancyNetParkingMsg occupancy_net_parking_msg = 16;
  if (this->has_occupancy_net_parking_msg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *occupancy_net_parking_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApDrivingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.ApDrivingData)
  GOOGLE_DCHECK_NE(&from, this);
  const ApDrivingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApDrivingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.ApDrivingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.ApDrivingData)
    MergeFrom(*source);
  }
}

void ApDrivingData::MergeFrom(const ApDrivingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.ApDrivingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slot_.MergeFrom(from.slot_);
  obj_.MergeFrom(from.obj_);
  lanelines_.MergeFrom(from.lanelines_);
  curfloor_.MergeFrom(from.curfloor_);
  trajectory_.MergeFrom(from.trajectory_);
  dynobj_.MergeFrom(from.dynobj_);
  slotavm_.MergeFrom(from.slotavm_);
  spdbump_.MergeFrom(from.spdbump_);
  slotidmapping_.MergeFrom(from.slotidmapping_);
  ap_staticobject_.MergeFrom(from.ap_staticobject_);
  wall_.MergeFrom(from.wall_);
  if (from.has_location()) {
    _internal_mutable_location()->::SRprotobuf::Location::MergeFrom(from._internal_location());
  }
  if (from.has_essentialmsg()) {
    _internal_mutable_essentialmsg()->::SRprotobuf::ApEssentialMsg::MergeFrom(from._internal_essentialmsg());
  }
  if (from.has_navimsg()) {
    _internal_mutable_navimsg()->::SRprotobuf::ApNaviMsg::MergeFrom(from._internal_navimsg());
  }
  if (from.has_online_local_map_msg()) {
    _internal_mutable_online_local_map_msg()->::SRprotobuf::OnlineLocalMapMsg::MergeFrom(from._internal_online_local_map_msg());
  }
  if (from.has_occupancy_net_parking_msg()) {
    _internal_mutable_occupancy_net_parking_msg()->::SRprotobuf::OccupancyNetParkingMsg::MergeFrom(from._internal_occupancy_net_parking_msg());
  }
}

void ApDrivingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.ApDrivingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApDrivingData::CopyFrom(const ApDrivingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.ApDrivingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApDrivingData::IsInitialized() const {
  return true;
}

void ApDrivingData::InternalSwap(ApDrivingData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slot_.InternalSwap(&other->slot_);
  obj_.InternalSwap(&other->obj_);
  lanelines_.InternalSwap(&other->lanelines_);
  curfloor_.InternalSwap(&other->curfloor_);
  trajectory_.InternalSwap(&other->trajectory_);
  dynobj_.InternalSwap(&other->dynobj_);
  slotavm_.InternalSwap(&other->slotavm_);
  spdbump_.InternalSwap(&other->spdbump_);
  slotidmapping_.InternalSwap(&other->slotidmapping_);
  ap_staticobject_.InternalSwap(&other->ap_staticobject_);
  wall_.InternalSwap(&other->wall_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApDrivingData, occupancy_net_parking_msg_)
      + sizeof(ApDrivingData::occupancy_net_parking_msg_)
      - PROTOBUF_FIELD_OFFSET(ApDrivingData, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApDrivingData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SRprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SRprotobuf::StripObstacle* Arena::CreateMaybeMessage< ::SRprotobuf::StripObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::StripObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApPathPoint* Arena::CreateMaybeMessage< ::SRprotobuf::ApPathPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApPathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApLaneLineInfo* Arena::CreateMaybeMessage< ::SRprotobuf::ApLaneLineInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApLaneLineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApDynaObject* Arena::CreateMaybeMessage< ::SRprotobuf::ApDynaObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApDynaObject >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApTrajectoryDataType* Arena::CreateMaybeMessage< ::SRprotobuf::ApTrajectoryDataType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApTrajectoryDataType >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::BDistancePercent* Arena::CreateMaybeMessage< ::SRprotobuf::BDistancePercent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::BDistancePercent >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::RTFStatusMsg* Arena::CreateMaybeMessage< ::SRprotobuf::RTFStatusMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::RTFStatusMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::PkoutTerminationInfo* Arena::CreateMaybeMessage< ::SRprotobuf::PkoutTerminationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::PkoutTerminationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApEssentialMsg* Arena::CreateMaybeMessage< ::SRprotobuf::ApEssentialMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApEssentialMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApNaviMsg* Arena::CreateMaybeMessage< ::SRprotobuf::ApNaviMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApNaviMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::TrainingSpdBump* Arena::CreateMaybeMessage< ::SRprotobuf::TrainingSpdBump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::TrainingSpdBump >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::SlotIdMapping* Arena::CreateMaybeMessage< ::SRprotobuf::SlotIdMapping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::SlotIdMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Ap_StaticObjectPoint* Arena::CreateMaybeMessage< ::SRprotobuf::Ap_StaticObjectPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Ap_StaticObjectPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Ap_StaticObject* Arena::CreateMaybeMessage< ::SRprotobuf::Ap_StaticObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Ap_StaticObject >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Wall* Arena::CreateMaybeMessage< ::SRprotobuf::Wall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Wall >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::BevPillar* Arena::CreateMaybeMessage< ::SRprotobuf::BevPillar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::BevPillar >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::OccupancyNetParkingMsg* Arena::CreateMaybeMessage< ::SRprotobuf::OccupancyNetParkingMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::OccupancyNetParkingMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::ApDrivingData* Arena::CreateMaybeMessage< ::SRprotobuf::ApDrivingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::ApDrivingData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
