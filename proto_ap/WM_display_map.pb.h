// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/WM_display_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fWM_5fdisplay_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fWM_5fdisplay_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto_ap/WM_display_realtime.pb.h"
#include "proto_ap/base.pb.h"
#include "proto_ap/logic_map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
namespace venue_map_pb {
class map_trajectory_data;
class map_trajectory_dataDefaultTypeInternal;
extern map_trajectory_dataDefaultTypeInternal _map_trajectory_data_default_instance_;
class venue_map;
class venue_mapDefaultTypeInternal;
extern venue_mapDefaultTypeInternal _venue_map_default_instance_;
class venue_map_Connection;
class venue_map_ConnectionDefaultTypeInternal;
extern venue_map_ConnectionDefaultTypeInternal _venue_map_Connection_default_instance_;
class venue_map_Edge;
class venue_map_EdgeDefaultTypeInternal;
extern venue_map_EdgeDefaultTypeInternal _venue_map_Edge_default_instance_;
class venue_map_Favorate_Type;
class venue_map_Favorate_TypeDefaultTypeInternal;
extern venue_map_Favorate_TypeDefaultTypeInternal _venue_map_Favorate_Type_default_instance_;
class venue_map_Floor;
class venue_map_FloorDefaultTypeInternal;
extern venue_map_FloorDefaultTypeInternal _venue_map_Floor_default_instance_;
class venue_map_Intersection;
class venue_map_IntersectionDefaultTypeInternal;
extern venue_map_IntersectionDefaultTypeInternal _venue_map_Intersection_default_instance_;
class venue_map_Joints_Type;
class venue_map_Joints_TypeDefaultTypeInternal;
extern venue_map_Joints_TypeDefaultTypeInternal _venue_map_Joints_Type_default_instance_;
class venue_map_Landmarks_Type;
class venue_map_Landmarks_TypeDefaultTypeInternal;
extern venue_map_Landmarks_TypeDefaultTypeInternal _venue_map_Landmarks_Type_default_instance_;
class venue_map_Lane_lines_Type;
class venue_map_Lane_lines_TypeDefaultTypeInternal;
extern venue_map_Lane_lines_TypeDefaultTypeInternal _venue_map_Lane_lines_Type_default_instance_;
class venue_map_LastPostprocessing_Type;
class venue_map_LastPostprocessing_TypeDefaultTypeInternal;
extern venue_map_LastPostprocessing_TypeDefaultTypeInternal _venue_map_LastPostprocessing_Type_default_instance_;
class venue_map_Link_IDs_Type;
class venue_map_Link_IDs_TypeDefaultTypeInternal;
extern venue_map_Link_IDs_TypeDefaultTypeInternal _venue_map_Link_IDs_Type_default_instance_;
class venue_map_Links_Type;
class venue_map_Links_TypeDefaultTypeInternal;
extern venue_map_Links_TypeDefaultTypeInternal _venue_map_Links_Type_default_instance_;
class venue_map_Location_type;
class venue_map_Location_typeDefaultTypeInternal;
extern venue_map_Location_typeDefaultTypeInternal _venue_map_Location_type_default_instance_;
class venue_map_Pointwithid;
class venue_map_PointwithidDefaultTypeInternal;
extern venue_map_PointwithidDefaultTypeInternal _venue_map_Pointwithid_default_instance_;
class venue_map_Slots_Type;
class venue_map_Slots_TypeDefaultTypeInternal;
extern venue_map_Slots_TypeDefaultTypeInternal _venue_map_Slots_Type_default_instance_;
class venue_map_Turn_directions_Type;
class venue_map_Turn_directions_TypeDefaultTypeInternal;
extern venue_map_Turn_directions_TypeDefaultTypeInternal _venue_map_Turn_directions_Type_default_instance_;
class venue_map_Ultrasonic_obstacles_Type;
class venue_map_Ultrasonic_obstacles_TypeDefaultTypeInternal;
extern venue_map_Ultrasonic_obstacles_TypeDefaultTypeInternal _venue_map_Ultrasonic_obstacles_Type_default_instance_;
class venue_map_Updates_Type;
class venue_map_Updates_TypeDefaultTypeInternal;
extern venue_map_Updates_TypeDefaultTypeInternal _venue_map_Updates_Type_default_instance_;
class venue_map_Venue_Type;
class venue_map_Venue_TypeDefaultTypeInternal;
extern venue_map_Venue_TypeDefaultTypeInternal _venue_map_Venue_Type_default_instance_;
class venue_map_Waypoints_Type;
class venue_map_Waypoints_TypeDefaultTypeInternal;
extern venue_map_Waypoints_TypeDefaultTypeInternal _venue_map_Waypoints_Type_default_instance_;
}  // namespace venue_map_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::venue_map_pb::map_trajectory_data* Arena::CreateMaybeMessage<::venue_map_pb::map_trajectory_data>(Arena*);
template<> ::venue_map_pb::venue_map* Arena::CreateMaybeMessage<::venue_map_pb::venue_map>(Arena*);
template<> ::venue_map_pb::venue_map_Connection* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Connection>(Arena*);
template<> ::venue_map_pb::venue_map_Edge* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Edge>(Arena*);
template<> ::venue_map_pb::venue_map_Favorate_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Favorate_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Floor* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Floor>(Arena*);
template<> ::venue_map_pb::venue_map_Intersection* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Intersection>(Arena*);
template<> ::venue_map_pb::venue_map_Joints_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Joints_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Landmarks_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Landmarks_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Lane_lines_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Lane_lines_Type>(Arena*);
template<> ::venue_map_pb::venue_map_LastPostprocessing_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_LastPostprocessing_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Link_IDs_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Link_IDs_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Links_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Links_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Location_type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Location_type>(Arena*);
template<> ::venue_map_pb::venue_map_Pointwithid* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Pointwithid>(Arena*);
template<> ::venue_map_pb::venue_map_Slots_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Slots_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Turn_directions_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Turn_directions_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Ultrasonic_obstacles_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Updates_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Venue_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Venue_Type>(Arena*);
template<> ::venue_map_pb::venue_map_Waypoints_Type* Arena::CreateMaybeMessage<::venue_map_pb::venue_map_Waypoints_Type>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace venue_map_pb {

// ===================================================================

class venue_map_Floor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Floor) */ {
 public:
  inline venue_map_Floor() : venue_map_Floor(nullptr) {};
  virtual ~venue_map_Floor();

  venue_map_Floor(const venue_map_Floor& from);
  venue_map_Floor(venue_map_Floor&& from) noexcept
    : venue_map_Floor() {
    *this = ::std::move(from);
  }

  inline venue_map_Floor& operator=(const venue_map_Floor& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Floor& operator=(venue_map_Floor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Floor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Floor* internal_default_instance() {
    return reinterpret_cast<const venue_map_Floor*>(
               &_venue_map_Floor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(venue_map_Floor& a, venue_map_Floor& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Floor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Floor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Floor* New() const final {
    return CreateMaybeMessage<venue_map_Floor>(nullptr);
  }

  venue_map_Floor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Floor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Floor& from);
  void MergeFrom(const venue_map_Floor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Floor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Floor";
  }
  protected:
  explicit venue_map_Floor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kLevelFieldNumber = 2,
    kHeightUpperFieldNumber = 3,
    kHeightLowerFieldNumber = 4,
  };
  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float height_upper = 3;
  void clear_height_upper();
  float height_upper() const;
  void set_height_upper(float value);
  private:
  float _internal_height_upper() const;
  void _internal_set_height_upper(float value);
  public:

  // float height_lower = 4;
  void clear_height_lower();
  float height_lower() const;
  void set_height_lower(float value);
  private:
  float _internal_height_lower() const;
  void _internal_set_height_lower(float value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Floor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  float height_upper_;
  float height_lower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Waypoints_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Waypoints_Type) */ {
 public:
  inline venue_map_Waypoints_Type() : venue_map_Waypoints_Type(nullptr) {};
  virtual ~venue_map_Waypoints_Type();

  venue_map_Waypoints_Type(const venue_map_Waypoints_Type& from);
  venue_map_Waypoints_Type(venue_map_Waypoints_Type&& from) noexcept
    : venue_map_Waypoints_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Waypoints_Type& operator=(const venue_map_Waypoints_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Waypoints_Type& operator=(venue_map_Waypoints_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Waypoints_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Waypoints_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Waypoints_Type*>(
               &_venue_map_Waypoints_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(venue_map_Waypoints_Type& a, venue_map_Waypoints_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Waypoints_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Waypoints_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Waypoints_Type* New() const final {
    return CreateMaybeMessage<venue_map_Waypoints_Type>(nullptr);
  }

  venue_map_Waypoints_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Waypoints_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Waypoints_Type& from);
  void MergeFrom(const venue_map_Waypoints_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Waypoints_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Waypoints_Type";
  }
  protected:
  explicit venue_map_Waypoints_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kMaturityFieldNumber = 2,
    kLocationxFieldNumber = 3,
    kLocationyFieldNumber = 4,
    kLocationzFieldNumber = 5,
    kLocationAccuracyFieldNumber = 6,
    kHeadingFieldNumber = 7,
    kTempSFieldNumber = 8,
    kGearFieldNumber = 9,
    kTrainingTagFieldNumber = 10,
  };
  // int32 Index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 Maturity = 2;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Locationx = 3;
  void clear_locationx();
  float locationx() const;
  void set_locationx(float value);
  private:
  float _internal_locationx() const;
  void _internal_set_locationx(float value);
  public:

  // float Locationy = 4;
  void clear_locationy();
  float locationy() const;
  void set_locationy(float value);
  private:
  float _internal_locationy() const;
  void _internal_set_locationy(float value);
  public:

  // float Locationz = 5;
  void clear_locationz();
  float locationz() const;
  void set_locationz(float value);
  private:
  float _internal_locationz() const;
  void _internal_set_locationz(float value);
  public:

  // float Location_accuracy = 6;
  void clear_location_accuracy();
  float location_accuracy() const;
  void set_location_accuracy(float value);
  private:
  float _internal_location_accuracy() const;
  void _internal_set_location_accuracy(float value);
  public:

  // float Heading = 7;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float TempS = 8;
  void clear_temps();
  float temps() const;
  void set_temps(float value);
  private:
  float _internal_temps() const;
  void _internal_set_temps(float value);
  public:

  // sint32 Gear = 9;
  void clear_gear();
  ::PROTOBUF_NAMESPACE_ID::int32 gear() const;
  void set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear() const;
  void _internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Training_tag = 10;
  void clear_training_tag();
  ::PROTOBUF_NAMESPACE_ID::int32 training_tag() const;
  void set_training_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_training_tag() const;
  void _internal_set_training_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Waypoints_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  float locationx_;
  float locationy_;
  float locationz_;
  float location_accuracy_;
  float heading_;
  float temps_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_;
  ::PROTOBUF_NAMESPACE_ID::int32 training_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Favorate_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Favorate_Type) */ {
 public:
  inline venue_map_Favorate_Type() : venue_map_Favorate_Type(nullptr) {};
  virtual ~venue_map_Favorate_Type();

  venue_map_Favorate_Type(const venue_map_Favorate_Type& from);
  venue_map_Favorate_Type(venue_map_Favorate_Type&& from) noexcept
    : venue_map_Favorate_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Favorate_Type& operator=(const venue_map_Favorate_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Favorate_Type& operator=(venue_map_Favorate_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Favorate_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Favorate_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Favorate_Type*>(
               &_venue_map_Favorate_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(venue_map_Favorate_Type& a, venue_map_Favorate_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Favorate_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Favorate_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Favorate_Type* New() const final {
    return CreateMaybeMessage<venue_map_Favorate_Type>(nullptr);
  }

  venue_map_Favorate_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Favorate_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Favorate_Type& from);
  void MergeFrom(const venue_map_Favorate_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Favorate_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Favorate_Type";
  }
  protected:
  explicit venue_map_Favorate_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIDFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kMaturityFieldNumber = 3,
    kVirtualSlotFieldNumber = 4,
    kReversePkFieldNumber = 5,
    kParallelPkFieldNumber = 6,
    kForwardPkFieldNumber = 7,
    kFavorslotconfirmedFieldNumber = 8,
  };
  // int32 Vehicle_ID = 1;
  void clear_vehicle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id() const;
  void set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_id() const;
  void _internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // uint32 Maturity = 3;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 VirtualSlot = 4;
  void clear_virtualslot();
  ::PROTOBUF_NAMESPACE_ID::uint32 virtualslot() const;
  void set_virtualslot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_virtualslot() const;
  void _internal_set_virtualslot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ReversePk = 5;
  void clear_reversepk();
  ::PROTOBUF_NAMESPACE_ID::uint32 reversepk() const;
  void set_reversepk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reversepk() const;
  void _internal_set_reversepk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ParallelPk = 6;
  void clear_parallelpk();
  ::PROTOBUF_NAMESPACE_ID::uint32 parallelpk() const;
  void set_parallelpk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parallelpk() const;
  void _internal_set_parallelpk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ForwardPk = 7;
  void clear_forwardpk();
  ::PROTOBUF_NAMESPACE_ID::uint32 forwardpk() const;
  void set_forwardpk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forwardpk() const;
  void _internal_set_forwardpk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 Favorslotconfirmed = 8;
  void clear_favorslotconfirmed();
  ::PROTOBUF_NAMESPACE_ID::int32 favorslotconfirmed() const;
  void set_favorslotconfirmed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_favorslotconfirmed() const;
  void _internal_set_favorslotconfirmed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Favorate_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 virtualslot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reversepk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parallelpk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forwardpk_;
  ::PROTOBUF_NAMESPACE_ID::int32 favorslotconfirmed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Updates_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Updates_Type) */ {
 public:
  inline venue_map_Updates_Type() : venue_map_Updates_Type(nullptr) {};
  virtual ~venue_map_Updates_Type();

  venue_map_Updates_Type(const venue_map_Updates_Type& from);
  venue_map_Updates_Type(venue_map_Updates_Type&& from) noexcept
    : venue_map_Updates_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Updates_Type& operator=(const venue_map_Updates_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Updates_Type& operator=(venue_map_Updates_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Updates_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Updates_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Updates_Type*>(
               &_venue_map_Updates_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(venue_map_Updates_Type& a, venue_map_Updates_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Updates_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Updates_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Updates_Type* New() const final {
    return CreateMaybeMessage<venue_map_Updates_Type>(nullptr);
  }

  venue_map_Updates_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Updates_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Updates_Type& from);
  void MergeFrom(const venue_map_Updates_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Updates_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Updates_Type";
  }
  protected:
  explicit venue_map_Updates_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kVehicleIDFieldNumber = 1,
  };
  // int64 Time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 Vehicle_ID = 1;
  void clear_vehicle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id() const;
  void set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicle_id() const;
  void _internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Updates_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicle_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Slots_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Slots_Type) */ {
 public:
  inline venue_map_Slots_Type() : venue_map_Slots_Type(nullptr) {};
  virtual ~venue_map_Slots_Type();

  venue_map_Slots_Type(const venue_map_Slots_Type& from);
  venue_map_Slots_Type(venue_map_Slots_Type&& from) noexcept
    : venue_map_Slots_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Slots_Type& operator=(const venue_map_Slots_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Slots_Type& operator=(venue_map_Slots_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Slots_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Slots_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Slots_Type*>(
               &_venue_map_Slots_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(venue_map_Slots_Type& a, venue_map_Slots_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Slots_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Slots_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Slots_Type* New() const final {
    return CreateMaybeMessage<venue_map_Slots_Type>(nullptr);
  }

  venue_map_Slots_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Slots_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Slots_Type& from);
  void MergeFrom(const venue_map_Slots_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Slots_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Slots_Type";
  }
  protected:
  explicit venue_map_Slots_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 21,
    kFavorateFieldNumber = 22,
    kFloorLevelFieldNumber = 23,
    kIDFieldNumber = 1,
    kLinkIDFieldNumber = 2,
    kShapeFieldNumber = 3,
    kMaturityFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kLocationxFieldNumber = 6,
    kLocationyFieldNumber = 7,
    kLocationzFieldNumber = 8,
    kLocationAccuracyFieldNumber = 9,
    kNearFrontLocXFieldNumber = 10,
    kNearFrontLocYFieldNumber = 11,
    kNearFrontLocZFieldNumber = 12,
    kNearRearLocXFieldNumber = 13,
    kNearRearLocYFieldNumber = 14,
    kNearRearLocZFieldNumber = 15,
    kWayPointIndexFieldNumber = 16,
    kHeadingFieldNumber = 17,
    kWidthFieldNumber = 18,
    kLengthFieldNumber = 19,
    kCDUTypeFieldNumber = 20,
  };
  // .venue_map_pb.venue_map.Updates_Type Updates = 21;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::venue_map_pb::venue_map_Updates_Type& updates() const;
  ::venue_map_pb::venue_map_Updates_Type* release_updates();
  ::venue_map_pb::venue_map_Updates_Type* mutable_updates();
  void set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates);
  private:
  const ::venue_map_pb::venue_map_Updates_Type& _internal_updates() const;
  ::venue_map_pb::venue_map_Updates_Type* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::venue_map_pb::venue_map_Updates_Type* updates);
  ::venue_map_pb::venue_map_Updates_Type* unsafe_arena_release_updates();

  // .venue_map_pb.venue_map.Favorate_Type Favorate = 22;
  bool has_favorate() const;
  private:
  bool _internal_has_favorate() const;
  public:
  void clear_favorate();
  const ::venue_map_pb::venue_map_Favorate_Type& favorate() const;
  ::venue_map_pb::venue_map_Favorate_Type* release_favorate();
  ::venue_map_pb::venue_map_Favorate_Type* mutable_favorate();
  void set_allocated_favorate(::venue_map_pb::venue_map_Favorate_Type* favorate);
  private:
  const ::venue_map_pb::venue_map_Favorate_Type& _internal_favorate() const;
  ::venue_map_pb::venue_map_Favorate_Type* _internal_mutable_favorate();
  public:
  void unsafe_arena_set_allocated_favorate(
      ::venue_map_pb::venue_map_Favorate_Type* favorate);
  ::venue_map_pb::venue_map_Favorate_Type* unsafe_arena_release_favorate();

  // .SRprotobuf.FloorLevel floor_level = 23;
  bool has_floor_level() const;
  private:
  bool _internal_has_floor_level() const;
  public:
  void clear_floor_level();
  const ::SRprotobuf::FloorLevel& floor_level() const;
  ::SRprotobuf::FloorLevel* release_floor_level();
  ::SRprotobuf::FloorLevel* mutable_floor_level();
  void set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level);
  private:
  const ::SRprotobuf::FloorLevel& _internal_floor_level() const;
  ::SRprotobuf::FloorLevel* _internal_mutable_floor_level();
  public:
  void unsafe_arena_set_allocated_floor_level(
      ::SRprotobuf::FloorLevel* floor_level);
  ::SRprotobuf::FloorLevel* unsafe_arena_release_floor_level();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Link_ID = 2;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 Shape = 3;
  void clear_shape();
  ::PROTOBUF_NAMESPACE_ID::int32 shape() const;
  void set_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape() const;
  void _internal_set_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 Maturity = 4;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float Locationx = 6;
  void clear_locationx();
  float locationx() const;
  void set_locationx(float value);
  private:
  float _internal_locationx() const;
  void _internal_set_locationx(float value);
  public:

  // float Locationy = 7;
  void clear_locationy();
  float locationy() const;
  void set_locationy(float value);
  private:
  float _internal_locationy() const;
  void _internal_set_locationy(float value);
  public:

  // float Locationz = 8;
  void clear_locationz();
  float locationz() const;
  void set_locationz(float value);
  private:
  float _internal_locationz() const;
  void _internal_set_locationz(float value);
  public:

  // float Location_accuracy = 9;
  void clear_location_accuracy();
  float location_accuracy() const;
  void set_location_accuracy(float value);
  private:
  float _internal_location_accuracy() const;
  void _internal_set_location_accuracy(float value);
  public:

  // float NearFrontLoc_x = 10;
  void clear_nearfrontloc_x();
  float nearfrontloc_x() const;
  void set_nearfrontloc_x(float value);
  private:
  float _internal_nearfrontloc_x() const;
  void _internal_set_nearfrontloc_x(float value);
  public:

  // float NearFrontLoc_y = 11;
  void clear_nearfrontloc_y();
  float nearfrontloc_y() const;
  void set_nearfrontloc_y(float value);
  private:
  float _internal_nearfrontloc_y() const;
  void _internal_set_nearfrontloc_y(float value);
  public:

  // float NearFrontLoc_z = 12;
  void clear_nearfrontloc_z();
  float nearfrontloc_z() const;
  void set_nearfrontloc_z(float value);
  private:
  float _internal_nearfrontloc_z() const;
  void _internal_set_nearfrontloc_z(float value);
  public:

  // float NearRearLoc_x = 13;
  void clear_nearrearloc_x();
  float nearrearloc_x() const;
  void set_nearrearloc_x(float value);
  private:
  float _internal_nearrearloc_x() const;
  void _internal_set_nearrearloc_x(float value);
  public:

  // float NearRearLoc_y = 14;
  void clear_nearrearloc_y();
  float nearrearloc_y() const;
  void set_nearrearloc_y(float value);
  private:
  float _internal_nearrearloc_y() const;
  void _internal_set_nearrearloc_y(float value);
  public:

  // float NearRearLoc_z = 15;
  void clear_nearrearloc_z();
  float nearrearloc_z() const;
  void set_nearrearloc_z(float value);
  private:
  float _internal_nearrearloc_z() const;
  void _internal_set_nearrearloc_z(float value);
  public:

  // int32 WayPoint_Index = 16;
  void clear_waypoint_index();
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index() const;
  void set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waypoint_index() const;
  void _internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Heading = 17;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // float Width = 18;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float Length = 19;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // sint32 CDU_Type = 20;
  void clear_cdu_type();
  ::PROTOBUF_NAMESPACE_ID::int32 cdu_type() const;
  void set_cdu_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cdu_type() const;
  void _internal_set_cdu_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Slots_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::venue_map_pb::venue_map_Updates_Type* updates_;
  ::venue_map_pb::venue_map_Favorate_Type* favorate_;
  ::SRprotobuf::FloorLevel* floor_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shape_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  float confidence_;
  float locationx_;
  float locationy_;
  float locationz_;
  float location_accuracy_;
  float nearfrontloc_x_;
  float nearfrontloc_y_;
  float nearfrontloc_z_;
  float nearrearloc_x_;
  float nearrearloc_y_;
  float nearrearloc_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index_;
  float heading_;
  float width_;
  float length_;
  ::PROTOBUF_NAMESPACE_ID::int32 cdu_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Ultrasonic_obstacles_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Ultrasonic_obstacles_Type) */ {
 public:
  inline venue_map_Ultrasonic_obstacles_Type() : venue_map_Ultrasonic_obstacles_Type(nullptr) {};
  virtual ~venue_map_Ultrasonic_obstacles_Type();

  venue_map_Ultrasonic_obstacles_Type(const venue_map_Ultrasonic_obstacles_Type& from);
  venue_map_Ultrasonic_obstacles_Type(venue_map_Ultrasonic_obstacles_Type&& from) noexcept
    : venue_map_Ultrasonic_obstacles_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Ultrasonic_obstacles_Type& operator=(const venue_map_Ultrasonic_obstacles_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Ultrasonic_obstacles_Type& operator=(venue_map_Ultrasonic_obstacles_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Ultrasonic_obstacles_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Ultrasonic_obstacles_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Ultrasonic_obstacles_Type*>(
               &_venue_map_Ultrasonic_obstacles_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(venue_map_Ultrasonic_obstacles_Type& a, venue_map_Ultrasonic_obstacles_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Ultrasonic_obstacles_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Ultrasonic_obstacles_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Ultrasonic_obstacles_Type* New() const final {
    return CreateMaybeMessage<venue_map_Ultrasonic_obstacles_Type>(nullptr);
  }

  venue_map_Ultrasonic_obstacles_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Ultrasonic_obstacles_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Ultrasonic_obstacles_Type& from);
  void MergeFrom(const venue_map_Ultrasonic_obstacles_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Ultrasonic_obstacles_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Ultrasonic_obstacles_Type";
  }
  protected:
  explicit venue_map_Ultrasonic_obstacles_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 15,
    kIDFieldNumber = 1,
    kLinkIDFieldNumber = 2,
    kTypeFieldNumber = 3,
    kMaturityFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kLocationAXFieldNumber = 6,
    kLocationAYFieldNumber = 7,
    kLocationAZFieldNumber = 8,
    kLocationBXFieldNumber = 9,
    kLocationBYFieldNumber = 10,
    kLocationBZFieldNumber = 11,
    kLocationAccuracyFieldNumber = 12,
    kWayPointIndexFieldNumber = 13,
    kHeadingFieldNumber = 14,
  };
  // .venue_map_pb.venue_map.Updates_Type Updates = 15;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::venue_map_pb::venue_map_Updates_Type& updates() const;
  ::venue_map_pb::venue_map_Updates_Type* release_updates();
  ::venue_map_pb::venue_map_Updates_Type* mutable_updates();
  void set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates);
  private:
  const ::venue_map_pb::venue_map_Updates_Type& _internal_updates() const;
  ::venue_map_pb::venue_map_Updates_Type* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::venue_map_pb::venue_map_Updates_Type* updates);
  ::venue_map_pb::venue_map_Updates_Type* unsafe_arena_release_updates();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Link_ID = 2;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 Type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 Maturity = 4;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float LocationA_x = 6;
  void clear_locationa_x();
  float locationa_x() const;
  void set_locationa_x(float value);
  private:
  float _internal_locationa_x() const;
  void _internal_set_locationa_x(float value);
  public:

  // float LocationA_y = 7;
  void clear_locationa_y();
  float locationa_y() const;
  void set_locationa_y(float value);
  private:
  float _internal_locationa_y() const;
  void _internal_set_locationa_y(float value);
  public:

  // float LocationA_z = 8;
  void clear_locationa_z();
  float locationa_z() const;
  void set_locationa_z(float value);
  private:
  float _internal_locationa_z() const;
  void _internal_set_locationa_z(float value);
  public:

  // float LocationB_x = 9;
  void clear_locationb_x();
  float locationb_x() const;
  void set_locationb_x(float value);
  private:
  float _internal_locationb_x() const;
  void _internal_set_locationb_x(float value);
  public:

  // float LocationB_y = 10;
  void clear_locationb_y();
  float locationb_y() const;
  void set_locationb_y(float value);
  private:
  float _internal_locationb_y() const;
  void _internal_set_locationb_y(float value);
  public:

  // float LocationB_z = 11;
  void clear_locationb_z();
  float locationb_z() const;
  void set_locationb_z(float value);
  private:
  float _internal_locationb_z() const;
  void _internal_set_locationb_z(float value);
  public:

  // float Location_accuracy = 12;
  void clear_location_accuracy();
  float location_accuracy() const;
  void set_location_accuracy(float value);
  private:
  float _internal_location_accuracy() const;
  void _internal_set_location_accuracy(float value);
  public:

  // int32 WayPoint_Index = 13;
  void clear_waypoint_index();
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index() const;
  void set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waypoint_index() const;
  void _internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Heading = 14;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::venue_map_pb::venue_map_Updates_Type* updates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  float confidence_;
  float locationa_x_;
  float locationa_y_;
  float locationa_z_;
  float locationb_x_;
  float locationb_y_;
  float locationb_z_;
  float location_accuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index_;
  float heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_LastPostprocessing_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.LastPostprocessing_Type) */ {
 public:
  inline venue_map_LastPostprocessing_Type() : venue_map_LastPostprocessing_Type(nullptr) {};
  virtual ~venue_map_LastPostprocessing_Type();

  venue_map_LastPostprocessing_Type(const venue_map_LastPostprocessing_Type& from);
  venue_map_LastPostprocessing_Type(venue_map_LastPostprocessing_Type&& from) noexcept
    : venue_map_LastPostprocessing_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_LastPostprocessing_Type& operator=(const venue_map_LastPostprocessing_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_LastPostprocessing_Type& operator=(venue_map_LastPostprocessing_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_LastPostprocessing_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_LastPostprocessing_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_LastPostprocessing_Type*>(
               &_venue_map_LastPostprocessing_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(venue_map_LastPostprocessing_Type& a, venue_map_LastPostprocessing_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_LastPostprocessing_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_LastPostprocessing_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_LastPostprocessing_Type* New() const final {
    return CreateMaybeMessage<venue_map_LastPostprocessing_Type>(nullptr);
  }

  venue_map_LastPostprocessing_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_LastPostprocessing_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_LastPostprocessing_Type& from);
  void MergeFrom(const venue_map_LastPostprocessing_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_LastPostprocessing_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.LastPostprocessing_Type";
  }
  protected:
  explicit venue_map_LastPostprocessing_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kMaturityFieldNumber = 1,
  };
  // int64 Time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 Maturity = 1;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.LastPostprocessing_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Venue_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Venue_Type) */ {
 public:
  inline venue_map_Venue_Type() : venue_map_Venue_Type(nullptr) {};
  virtual ~venue_map_Venue_Type();

  venue_map_Venue_Type(const venue_map_Venue_Type& from);
  venue_map_Venue_Type(venue_map_Venue_Type&& from) noexcept
    : venue_map_Venue_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Venue_Type& operator=(const venue_map_Venue_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Venue_Type& operator=(venue_map_Venue_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Venue_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Venue_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Venue_Type*>(
               &_venue_map_Venue_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(venue_map_Venue_Type& a, venue_map_Venue_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Venue_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Venue_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Venue_Type* New() const final {
    return CreateMaybeMessage<venue_map_Venue_Type>(nullptr);
  }

  venue_map_Venue_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Venue_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Venue_Type& from);
  void MergeFrom(const venue_map_Venue_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Venue_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Venue_Type";
  }
  protected:
  explicit venue_map_Venue_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 10,
    kLastPostprocessingFieldNumber = 11,
    kIDFieldNumber = 1,
    kTypeFieldNumber = 2,
    kOrginLocationLonFieldNumber = 3,
    kOrginLocationLatFieldNumber = 4,
    kOrginLocationAltFieldNumber = 5,
    kEntranceLocationLonFieldNumber = 6,
    kEntranceLocationLatFieldNumber = 7,
    kEntranceLocationAltFieldNumber = 8,
    kMaturityFieldNumber = 9,
  };
  // .venue_map_pb.venue_map.Updates_Type Updates = 10;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::venue_map_pb::venue_map_Updates_Type& updates() const;
  ::venue_map_pb::venue_map_Updates_Type* release_updates();
  ::venue_map_pb::venue_map_Updates_Type* mutable_updates();
  void set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates);
  private:
  const ::venue_map_pb::venue_map_Updates_Type& _internal_updates() const;
  ::venue_map_pb::venue_map_Updates_Type* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::venue_map_pb::venue_map_Updates_Type* updates);
  ::venue_map_pb::venue_map_Updates_Type* unsafe_arena_release_updates();

  // .venue_map_pb.venue_map.LastPostprocessing_Type LastPostprocessing = 11;
  bool has_lastpostprocessing() const;
  private:
  bool _internal_has_lastpostprocessing() const;
  public:
  void clear_lastpostprocessing();
  const ::venue_map_pb::venue_map_LastPostprocessing_Type& lastpostprocessing() const;
  ::venue_map_pb::venue_map_LastPostprocessing_Type* release_lastpostprocessing();
  ::venue_map_pb::venue_map_LastPostprocessing_Type* mutable_lastpostprocessing();
  void set_allocated_lastpostprocessing(::venue_map_pb::venue_map_LastPostprocessing_Type* lastpostprocessing);
  private:
  const ::venue_map_pb::venue_map_LastPostprocessing_Type& _internal_lastpostprocessing() const;
  ::venue_map_pb::venue_map_LastPostprocessing_Type* _internal_mutable_lastpostprocessing();
  public:
  void unsafe_arena_set_allocated_lastpostprocessing(
      ::venue_map_pb::venue_map_LastPostprocessing_Type* lastpostprocessing);
  ::venue_map_pb::venue_map_LastPostprocessing_Type* unsafe_arena_release_lastpostprocessing();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 Type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double Orgin_location_lon = 3;
  void clear_orgin_location_lon();
  double orgin_location_lon() const;
  void set_orgin_location_lon(double value);
  private:
  double _internal_orgin_location_lon() const;
  void _internal_set_orgin_location_lon(double value);
  public:

  // double Orgin_location_lat = 4;
  void clear_orgin_location_lat();
  double orgin_location_lat() const;
  void set_orgin_location_lat(double value);
  private:
  double _internal_orgin_location_lat() const;
  void _internal_set_orgin_location_lat(double value);
  public:

  // double Orgin_location_alt = 5;
  void clear_orgin_location_alt();
  double orgin_location_alt() const;
  void set_orgin_location_alt(double value);
  private:
  double _internal_orgin_location_alt() const;
  void _internal_set_orgin_location_alt(double value);
  public:

  // double Entrance_location_lon = 6;
  void clear_entrance_location_lon();
  double entrance_location_lon() const;
  void set_entrance_location_lon(double value);
  private:
  double _internal_entrance_location_lon() const;
  void _internal_set_entrance_location_lon(double value);
  public:

  // double Entrance_location_lat = 7;
  void clear_entrance_location_lat();
  double entrance_location_lat() const;
  void set_entrance_location_lat(double value);
  private:
  double _internal_entrance_location_lat() const;
  void _internal_set_entrance_location_lat(double value);
  public:

  // double Entrance_location_alt = 8;
  void clear_entrance_location_alt();
  double entrance_location_alt() const;
  void set_entrance_location_alt(double value);
  private:
  double _internal_entrance_location_alt() const;
  void _internal_set_entrance_location_alt(double value);
  public:

  // uint32 Maturity = 9;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Venue_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::venue_map_pb::venue_map_Updates_Type* updates_;
  ::venue_map_pb::venue_map_LastPostprocessing_Type* lastpostprocessing_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double orgin_location_lon_;
  double orgin_location_lat_;
  double orgin_location_alt_;
  double entrance_location_lon_;
  double entrance_location_lat_;
  double entrance_location_alt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Link_IDs_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Link_IDs_Type) */ {
 public:
  inline venue_map_Link_IDs_Type() : venue_map_Link_IDs_Type(nullptr) {};
  virtual ~venue_map_Link_IDs_Type();

  venue_map_Link_IDs_Type(const venue_map_Link_IDs_Type& from);
  venue_map_Link_IDs_Type(venue_map_Link_IDs_Type&& from) noexcept
    : venue_map_Link_IDs_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Link_IDs_Type& operator=(const venue_map_Link_IDs_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Link_IDs_Type& operator=(venue_map_Link_IDs_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Link_IDs_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Link_IDs_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Link_IDs_Type*>(
               &_venue_map_Link_IDs_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(venue_map_Link_IDs_Type& a, venue_map_Link_IDs_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Link_IDs_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Link_IDs_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Link_IDs_Type* New() const final {
    return CreateMaybeMessage<venue_map_Link_IDs_Type>(nullptr);
  }

  venue_map_Link_IDs_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Link_IDs_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Link_IDs_Type& from);
  void MergeFrom(const venue_map_Link_IDs_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Link_IDs_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Link_IDs_Type";
  }
  protected:
  explicit venue_map_Link_IDs_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkIDFieldNumber = 1,
    kWayPointIndexFieldNumber = 2,
  };
  // uint32 Link_ID = 1;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 WayPoint_index = 2;
  void clear_waypoint_index();
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index() const;
  void set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waypoint_index() const;
  void _internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Link_IDs_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Turn_directions_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Turn_directions_Type) */ {
 public:
  inline venue_map_Turn_directions_Type() : venue_map_Turn_directions_Type(nullptr) {};
  virtual ~venue_map_Turn_directions_Type();

  venue_map_Turn_directions_Type(const venue_map_Turn_directions_Type& from);
  venue_map_Turn_directions_Type(venue_map_Turn_directions_Type&& from) noexcept
    : venue_map_Turn_directions_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Turn_directions_Type& operator=(const venue_map_Turn_directions_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Turn_directions_Type& operator=(venue_map_Turn_directions_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Turn_directions_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Turn_directions_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Turn_directions_Type*>(
               &_venue_map_Turn_directions_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(venue_map_Turn_directions_Type& a, venue_map_Turn_directions_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Turn_directions_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Turn_directions_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Turn_directions_Type* New() const final {
    return CreateMaybeMessage<venue_map_Turn_directions_Type>(nullptr);
  }

  venue_map_Turn_directions_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Turn_directions_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Turn_directions_Type& from);
  void MergeFrom(const venue_map_Turn_directions_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Turn_directions_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Turn_directions_Type";
  }
  protected:
  explicit venue_map_Turn_directions_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTurnPointLocationXFieldNumber = 1,
    kTurnPointLocationYFieldNumber = 2,
    kTurnPointLocationZFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kMaturityFieldNumber = 5,
  };
  // float TurnPoint_Location_x = 1;
  void clear_turnpoint_location_x();
  float turnpoint_location_x() const;
  void set_turnpoint_location_x(float value);
  private:
  float _internal_turnpoint_location_x() const;
  void _internal_set_turnpoint_location_x(float value);
  public:

  // float TurnPoint_Location_y = 2;
  void clear_turnpoint_location_y();
  float turnpoint_location_y() const;
  void set_turnpoint_location_y(float value);
  private:
  float _internal_turnpoint_location_y() const;
  void _internal_set_turnpoint_location_y(float value);
  public:

  // float TurnPoint_Location_z = 3;
  void clear_turnpoint_location_z();
  float turnpoint_location_z() const;
  void set_turnpoint_location_z(float value);
  private:
  float _internal_turnpoint_location_z() const;
  void _internal_set_turnpoint_location_z(float value);
  public:

  // float Direction = 4;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // uint32 Maturity = 5;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Turn_directions_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float turnpoint_location_x_;
  float turnpoint_location_y_;
  float turnpoint_location_z_;
  float direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Lane_lines_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Lane_lines_Type) */ {
 public:
  inline venue_map_Lane_lines_Type() : venue_map_Lane_lines_Type(nullptr) {};
  virtual ~venue_map_Lane_lines_Type();

  venue_map_Lane_lines_Type(const venue_map_Lane_lines_Type& from);
  venue_map_Lane_lines_Type(venue_map_Lane_lines_Type&& from) noexcept
    : venue_map_Lane_lines_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Lane_lines_Type& operator=(const venue_map_Lane_lines_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Lane_lines_Type& operator=(venue_map_Lane_lines_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Lane_lines_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Lane_lines_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Lane_lines_Type*>(
               &_venue_map_Lane_lines_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(venue_map_Lane_lines_Type& a, venue_map_Lane_lines_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Lane_lines_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Lane_lines_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Lane_lines_Type* New() const final {
    return CreateMaybeMessage<venue_map_Lane_lines_Type>(nullptr);
  }

  venue_map_Lane_lines_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Lane_lines_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Lane_lines_Type& from);
  void MergeFrom(const venue_map_Lane_lines_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Lane_lines_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Lane_lines_Type";
  }
  protected:
  explicit venue_map_Lane_lines_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 15,
    kIDFieldNumber = 1,
    kLinkIDFieldNumber = 2,
    kTypeFieldNumber = 3,
    kMaturityFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kLocationAXFieldNumber = 6,
    kLocationAYFieldNumber = 7,
    kLocationAZFieldNumber = 8,
    kLocationBXFieldNumber = 9,
    kLocationBYFieldNumber = 10,
    kLocationBZFieldNumber = 11,
    kLocationAccuracyFieldNumber = 12,
    kWayPointIndexFieldNumber = 13,
    kDirectionFieldNumber = 14,
  };
  // .venue_map_pb.venue_map.Updates_Type Updates = 15;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::venue_map_pb::venue_map_Updates_Type& updates() const;
  ::venue_map_pb::venue_map_Updates_Type* release_updates();
  ::venue_map_pb::venue_map_Updates_Type* mutable_updates();
  void set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates);
  private:
  const ::venue_map_pb::venue_map_Updates_Type& _internal_updates() const;
  ::venue_map_pb::venue_map_Updates_Type* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::venue_map_pb::venue_map_Updates_Type* updates);
  ::venue_map_pb::venue_map_Updates_Type* unsafe_arena_release_updates();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Link_ID = 2;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 Type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 Maturity = 4;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float LocationA_x = 6;
  void clear_locationa_x();
  float locationa_x() const;
  void set_locationa_x(float value);
  private:
  float _internal_locationa_x() const;
  void _internal_set_locationa_x(float value);
  public:

  // float LocationA_y = 7;
  void clear_locationa_y();
  float locationa_y() const;
  void set_locationa_y(float value);
  private:
  float _internal_locationa_y() const;
  void _internal_set_locationa_y(float value);
  public:

  // float LocationA_z = 8;
  void clear_locationa_z();
  float locationa_z() const;
  void set_locationa_z(float value);
  private:
  float _internal_locationa_z() const;
  void _internal_set_locationa_z(float value);
  public:

  // float LocationB_x = 9;
  void clear_locationb_x();
  float locationb_x() const;
  void set_locationb_x(float value);
  private:
  float _internal_locationb_x() const;
  void _internal_set_locationb_x(float value);
  public:

  // float LocationB_y = 10;
  void clear_locationb_y();
  float locationb_y() const;
  void set_locationb_y(float value);
  private:
  float _internal_locationb_y() const;
  void _internal_set_locationb_y(float value);
  public:

  // float LocationB_z = 11;
  void clear_locationb_z();
  float locationb_z() const;
  void set_locationb_z(float value);
  private:
  float _internal_locationb_z() const;
  void _internal_set_locationb_z(float value);
  public:

  // float Location_accuracy = 12;
  void clear_location_accuracy();
  float location_accuracy() const;
  void set_location_accuracy(float value);
  private:
  float _internal_location_accuracy() const;
  void _internal_set_location_accuracy(float value);
  public:

  // int32 WayPoint_Index = 13;
  void clear_waypoint_index();
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index() const;
  void set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waypoint_index() const;
  void _internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Direction = 14;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Lane_lines_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::venue_map_pb::venue_map_Updates_Type* updates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  float confidence_;
  float locationa_x_;
  float locationa_y_;
  float locationa_z_;
  float locationb_x_;
  float locationb_y_;
  float locationb_z_;
  float location_accuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index_;
  float direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Links_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Links_Type) */ {
 public:
  inline venue_map_Links_Type() : venue_map_Links_Type(nullptr) {};
  virtual ~venue_map_Links_Type();

  venue_map_Links_Type(const venue_map_Links_Type& from);
  venue_map_Links_Type(venue_map_Links_Type&& from) noexcept
    : venue_map_Links_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Links_Type& operator=(const venue_map_Links_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Links_Type& operator=(venue_map_Links_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Links_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Links_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Links_Type*>(
               &_venue_map_Links_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(venue_map_Links_Type& a, venue_map_Links_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Links_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Links_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Links_Type* New() const final {
    return CreateMaybeMessage<venue_map_Links_Type>(nullptr);
  }

  venue_map_Links_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Links_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Links_Type& from);
  void MergeFrom(const venue_map_Links_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Links_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Links_Type";
  }
  protected:
  explicit venue_map_Links_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 1,
    kLandmarkIDsFieldNumber = 4,
    kSlotIDsFieldNumber = 5,
    kObstacleIDsFieldNumber = 6,
    kFloorlevelFieldNumber = 10,
    kJointIDs1FieldNumber = 2,
    kJointIDs2FieldNumber = 3,
    kIDFieldNumber = 7,
    kDirectionFieldNumber = 8,
    kIsValidFieldNumber = 9,
  };
  // repeated .venue_map_pb.venue_map.Waypoints_Type Waypoints = 1;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  ::venue_map_pb::venue_map_Waypoints_Type* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Waypoints_Type >*
      mutable_waypoints();
  private:
  const ::venue_map_pb::venue_map_Waypoints_Type& _internal_waypoints(int index) const;
  ::venue_map_pb::venue_map_Waypoints_Type* _internal_add_waypoints();
  public:
  const ::venue_map_pb::venue_map_Waypoints_Type& waypoints(int index) const;
  ::venue_map_pb::venue_map_Waypoints_Type* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Waypoints_Type >&
      waypoints() const;

  // repeated uint32 Landmark_IDs = 4;
  int landmark_ids_size() const;
  private:
  int _internal_landmark_ids_size() const;
  public:
  void clear_landmark_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_landmark_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_landmark_ids() const;
  void _internal_add_landmark_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_landmark_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 landmark_ids(int index) const;
  void set_landmark_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_landmark_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      landmark_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_landmark_ids();

  // repeated uint32 Slot_IDs = 5;
  int slot_ids_size() const;
  private:
  int _internal_slot_ids_size() const;
  public:
  void clear_slot_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_slot_ids() const;
  void _internal_add_slot_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_slot_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_ids(int index) const;
  void set_slot_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_slot_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      slot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_slot_ids();

  // repeated uint32 Obstacle_IDs = 6;
  int obstacle_ids_size() const;
  private:
  int _internal_obstacle_ids_size() const;
  public:
  void clear_obstacle_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obstacle_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_obstacle_ids() const;
  void _internal_add_obstacle_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_obstacle_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 obstacle_ids(int index) const;
  void set_obstacle_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_obstacle_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      obstacle_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_obstacle_ids();

  // repeated float floorlevel = 10;
  int floorlevel_size() const;
  private:
  int _internal_floorlevel_size() const;
  public:
  void clear_floorlevel();
  private:
  float _internal_floorlevel(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floorlevel() const;
  void _internal_add_floorlevel(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floorlevel();
  public:
  float floorlevel(int index) const;
  void set_floorlevel(int index, float value);
  void add_floorlevel(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floorlevel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floorlevel();

  // uint32 Joint_IDs_1 = 2;
  void clear_joint_ids_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 joint_ids_1() const;
  void set_joint_ids_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_joint_ids_1() const;
  void _internal_set_joint_ids_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Joint_IDs_2 = 3;
  void clear_joint_ids_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 joint_ids_2() const;
  void set_joint_ids_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_joint_ids_2() const;
  void _internal_set_joint_ids_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ID = 7;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Direction = 8;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // bool IsValid = 9;
  void clear_isvalid();
  bool isvalid() const;
  void set_isvalid(bool value);
  private:
  bool _internal_isvalid() const;
  void _internal_set_isvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Links_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Waypoints_Type > waypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > landmark_ids_;
  mutable std::atomic<int> _landmark_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > slot_ids_;
  mutable std::atomic<int> _slot_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > obstacle_ids_;
  mutable std::atomic<int> _obstacle_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floorlevel_;
  mutable std::atomic<int> _floorlevel_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joint_ids_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 joint_ids_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float direction_;
  bool isvalid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Joints_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Joints_Type) */ {
 public:
  inline venue_map_Joints_Type() : venue_map_Joints_Type(nullptr) {};
  virtual ~venue_map_Joints_Type();

  venue_map_Joints_Type(const venue_map_Joints_Type& from);
  venue_map_Joints_Type(venue_map_Joints_Type&& from) noexcept
    : venue_map_Joints_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Joints_Type& operator=(const venue_map_Joints_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Joints_Type& operator=(venue_map_Joints_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Joints_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Joints_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Joints_Type*>(
               &_venue_map_Joints_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(venue_map_Joints_Type& a, venue_map_Joints_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Joints_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Joints_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Joints_Type* New() const final {
    return CreateMaybeMessage<venue_map_Joints_Type>(nullptr);
  }

  venue_map_Joints_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Joints_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Joints_Type& from);
  void MergeFrom(const venue_map_Joints_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Joints_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Joints_Type";
  }
  protected:
  explicit venue_map_Joints_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVLinkIDsFieldNumber = 2,
    kTurnDirectionsFieldNumber = 10,
    kUpdatesFieldNumber = 11,
    kIDFieldNumber = 1,
    kMaturityFieldNumber = 3,
    kConfidenceFieldNumber = 4,
    kLocationXFieldNumber = 5,
    kLocationYFieldNumber = 6,
    kLocationZFieldNumber = 7,
    kLocationAccuracyFieldNumber = 8,
    kHeadingFieldNumber = 9,
    kIsUpdatedFieldNumber = 12,
    kBreakTypeFieldNumber = 13,
  };
  // repeated .venue_map_pb.venue_map.Link_IDs_Type vLink_IDs = 2;
  int vlink_ids_size() const;
  private:
  int _internal_vlink_ids_size() const;
  public:
  void clear_vlink_ids();
  ::venue_map_pb::venue_map_Link_IDs_Type* mutable_vlink_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Link_IDs_Type >*
      mutable_vlink_ids();
  private:
  const ::venue_map_pb::venue_map_Link_IDs_Type& _internal_vlink_ids(int index) const;
  ::venue_map_pb::venue_map_Link_IDs_Type* _internal_add_vlink_ids();
  public:
  const ::venue_map_pb::venue_map_Link_IDs_Type& vlink_ids(int index) const;
  ::venue_map_pb::venue_map_Link_IDs_Type* add_vlink_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Link_IDs_Type >&
      vlink_ids() const;

  // .venue_map_pb.venue_map.Turn_directions_Type Turn_directions = 10;
  bool has_turn_directions() const;
  private:
  bool _internal_has_turn_directions() const;
  public:
  void clear_turn_directions();
  const ::venue_map_pb::venue_map_Turn_directions_Type& turn_directions() const;
  ::venue_map_pb::venue_map_Turn_directions_Type* release_turn_directions();
  ::venue_map_pb::venue_map_Turn_directions_Type* mutable_turn_directions();
  void set_allocated_turn_directions(::venue_map_pb::venue_map_Turn_directions_Type* turn_directions);
  private:
  const ::venue_map_pb::venue_map_Turn_directions_Type& _internal_turn_directions() const;
  ::venue_map_pb::venue_map_Turn_directions_Type* _internal_mutable_turn_directions();
  public:
  void unsafe_arena_set_allocated_turn_directions(
      ::venue_map_pb::venue_map_Turn_directions_Type* turn_directions);
  ::venue_map_pb::venue_map_Turn_directions_Type* unsafe_arena_release_turn_directions();

  // .venue_map_pb.venue_map.Updates_Type Updates = 11;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::venue_map_pb::venue_map_Updates_Type& updates() const;
  ::venue_map_pb::venue_map_Updates_Type* release_updates();
  ::venue_map_pb::venue_map_Updates_Type* mutable_updates();
  void set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates);
  private:
  const ::venue_map_pb::venue_map_Updates_Type& _internal_updates() const;
  ::venue_map_pb::venue_map_Updates_Type* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::venue_map_pb::venue_map_Updates_Type* updates);
  ::venue_map_pb::venue_map_Updates_Type* unsafe_arena_release_updates();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Maturity = 3;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float Location_x = 5;
  void clear_location_x();
  float location_x() const;
  void set_location_x(float value);
  private:
  float _internal_location_x() const;
  void _internal_set_location_x(float value);
  public:

  // float Location_y = 6;
  void clear_location_y();
  float location_y() const;
  void set_location_y(float value);
  private:
  float _internal_location_y() const;
  void _internal_set_location_y(float value);
  public:

  // float Location_z = 7;
  void clear_location_z();
  float location_z() const;
  void set_location_z(float value);
  private:
  float _internal_location_z() const;
  void _internal_set_location_z(float value);
  public:

  // float Location_accuracy = 8;
  void clear_location_accuracy();
  float location_accuracy() const;
  void set_location_accuracy(float value);
  private:
  float _internal_location_accuracy() const;
  void _internal_set_location_accuracy(float value);
  public:

  // float Heading = 9;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // uint32 IsUpdated = 12;
  void clear_isupdated();
  ::PROTOBUF_NAMESPACE_ID::uint32 isupdated() const;
  void set_isupdated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isupdated() const;
  void _internal_set_isupdated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 BreakType = 13;
  void clear_breaktype();
  ::PROTOBUF_NAMESPACE_ID::uint32 breaktype() const;
  void set_breaktype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_breaktype() const;
  void _internal_set_breaktype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Joints_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Link_IDs_Type > vlink_ids_;
  ::venue_map_pb::venue_map_Turn_directions_Type* turn_directions_;
  ::venue_map_pb::venue_map_Updates_Type* updates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  float confidence_;
  float location_x_;
  float location_y_;
  float location_z_;
  float location_accuracy_;
  float heading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 isupdated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 breaktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Landmarks_Type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Landmarks_Type) */ {
 public:
  inline venue_map_Landmarks_Type() : venue_map_Landmarks_Type(nullptr) {};
  virtual ~venue_map_Landmarks_Type();

  venue_map_Landmarks_Type(const venue_map_Landmarks_Type& from);
  venue_map_Landmarks_Type(venue_map_Landmarks_Type&& from) noexcept
    : venue_map_Landmarks_Type() {
    *this = ::std::move(from);
  }

  inline venue_map_Landmarks_Type& operator=(const venue_map_Landmarks_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Landmarks_Type& operator=(venue_map_Landmarks_Type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Landmarks_Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Landmarks_Type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Landmarks_Type*>(
               &_venue_map_Landmarks_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(venue_map_Landmarks_Type& a, venue_map_Landmarks_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Landmarks_Type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Landmarks_Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Landmarks_Type* New() const final {
    return CreateMaybeMessage<venue_map_Landmarks_Type>(nullptr);
  }

  venue_map_Landmarks_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Landmarks_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Landmarks_Type& from);
  void MergeFrom(const venue_map_Landmarks_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Landmarks_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Landmarks_Type";
  }
  protected:
  explicit venue_map_Landmarks_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 13,
    kFloorLevelFieldNumber = 14,
    kLocationAFieldNumber = 15,
    kLocationBFieldNumber = 16,
    kIDFieldNumber = 1,
    kLinkIDFieldNumber = 2,
    kTypeFieldNumber = 3,
    kMaturityFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kLocationXFieldNumber = 6,
    kLocationYFieldNumber = 7,
    kLocationZFieldNumber = 8,
    kLocationAccuracyFieldNumber = 9,
    kDirectionTypeFieldNumber = 10,
    kWayPointIndexFieldNumber = 11,
    kHeadingFieldNumber = 12,
  };
  // .venue_map_pb.venue_map.Updates_Type Updates = 13;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::venue_map_pb::venue_map_Updates_Type& updates() const;
  ::venue_map_pb::venue_map_Updates_Type* release_updates();
  ::venue_map_pb::venue_map_Updates_Type* mutable_updates();
  void set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates);
  private:
  const ::venue_map_pb::venue_map_Updates_Type& _internal_updates() const;
  ::venue_map_pb::venue_map_Updates_Type* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::venue_map_pb::venue_map_Updates_Type* updates);
  ::venue_map_pb::venue_map_Updates_Type* unsafe_arena_release_updates();

  // .SRprotobuf.FloorLevel floor_level = 14;
  bool has_floor_level() const;
  private:
  bool _internal_has_floor_level() const;
  public:
  void clear_floor_level();
  const ::SRprotobuf::FloorLevel& floor_level() const;
  ::SRprotobuf::FloorLevel* release_floor_level();
  ::SRprotobuf::FloorLevel* mutable_floor_level();
  void set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level);
  private:
  const ::SRprotobuf::FloorLevel& _internal_floor_level() const;
  ::SRprotobuf::FloorLevel* _internal_mutable_floor_level();
  public:
  void unsafe_arena_set_allocated_floor_level(
      ::SRprotobuf::FloorLevel* floor_level);
  ::SRprotobuf::FloorLevel* unsafe_arena_release_floor_level();

  // .venue_map_pb.venue_map.Location_type locationA = 15;
  bool has_locationa() const;
  private:
  bool _internal_has_locationa() const;
  public:
  void clear_locationa();
  const ::venue_map_pb::venue_map_Location_type& locationa() const;
  ::venue_map_pb::venue_map_Location_type* release_locationa();
  ::venue_map_pb::venue_map_Location_type* mutable_locationa();
  void set_allocated_locationa(::venue_map_pb::venue_map_Location_type* locationa);
  private:
  const ::venue_map_pb::venue_map_Location_type& _internal_locationa() const;
  ::venue_map_pb::venue_map_Location_type* _internal_mutable_locationa();
  public:
  void unsafe_arena_set_allocated_locationa(
      ::venue_map_pb::venue_map_Location_type* locationa);
  ::venue_map_pb::venue_map_Location_type* unsafe_arena_release_locationa();

  // .venue_map_pb.venue_map.Location_type locationB = 16;
  bool has_locationb() const;
  private:
  bool _internal_has_locationb() const;
  public:
  void clear_locationb();
  const ::venue_map_pb::venue_map_Location_type& locationb() const;
  ::venue_map_pb::venue_map_Location_type* release_locationb();
  ::venue_map_pb::venue_map_Location_type* mutable_locationb();
  void set_allocated_locationb(::venue_map_pb::venue_map_Location_type* locationb);
  private:
  const ::venue_map_pb::venue_map_Location_type& _internal_locationb() const;
  ::venue_map_pb::venue_map_Location_type* _internal_mutable_locationb();
  public:
  void unsafe_arena_set_allocated_locationb(
      ::venue_map_pb::venue_map_Location_type* locationb);
  ::venue_map_pb::venue_map_Location_type* unsafe_arena_release_locationb();

  // uint32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Link_ID = 2;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 Type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 Maturity = 4;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float Confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float Location_x = 6;
  void clear_location_x();
  float location_x() const;
  void set_location_x(float value);
  private:
  float _internal_location_x() const;
  void _internal_set_location_x(float value);
  public:

  // float Location_y = 7;
  void clear_location_y();
  float location_y() const;
  void set_location_y(float value);
  private:
  float _internal_location_y() const;
  void _internal_set_location_y(float value);
  public:

  // float Location_z = 8;
  void clear_location_z();
  float location_z() const;
  void set_location_z(float value);
  private:
  float _internal_location_z() const;
  void _internal_set_location_z(float value);
  public:

  // float Location_accuracy = 9;
  void clear_location_accuracy();
  float location_accuracy() const;
  void set_location_accuracy(float value);
  private:
  float _internal_location_accuracy() const;
  void _internal_set_location_accuracy(float value);
  public:

  // sint32 Direction_type = 10;
  void clear_direction_type();
  ::PROTOBUF_NAMESPACE_ID::int32 direction_type() const;
  void set_direction_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction_type() const;
  void _internal_set_direction_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 WayPoint_Index = 11;
  void clear_waypoint_index();
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index() const;
  void set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waypoint_index() const;
  void _internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float Heading = 12;
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Landmarks_Type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::venue_map_pb::venue_map_Updates_Type* updates_;
  ::SRprotobuf::FloorLevel* floor_level_;
  ::venue_map_pb::venue_map_Location_type* locationa_;
  ::venue_map_pb::venue_map_Location_type* locationb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_;
  float confidence_;
  float location_x_;
  float location_y_;
  float location_z_;
  float location_accuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 waypoint_index_;
  float heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Location_type PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Location_type) */ {
 public:
  inline venue_map_Location_type() : venue_map_Location_type(nullptr) {};
  virtual ~venue_map_Location_type();

  venue_map_Location_type(const venue_map_Location_type& from);
  venue_map_Location_type(venue_map_Location_type&& from) noexcept
    : venue_map_Location_type() {
    *this = ::std::move(from);
  }

  inline venue_map_Location_type& operator=(const venue_map_Location_type& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Location_type& operator=(venue_map_Location_type&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Location_type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Location_type* internal_default_instance() {
    return reinterpret_cast<const venue_map_Location_type*>(
               &_venue_map_Location_type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(venue_map_Location_type& a, venue_map_Location_type& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Location_type* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Location_type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Location_type* New() const final {
    return CreateMaybeMessage<venue_map_Location_type>(nullptr);
  }

  venue_map_Location_type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Location_type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Location_type& from);
  void MergeFrom(const venue_map_Location_type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Location_type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Location_type";
  }
  protected:
  explicit venue_map_Location_type(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Location_type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Pointwithid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Pointwithid) */ {
 public:
  inline venue_map_Pointwithid() : venue_map_Pointwithid(nullptr) {};
  virtual ~venue_map_Pointwithid();

  venue_map_Pointwithid(const venue_map_Pointwithid& from);
  venue_map_Pointwithid(venue_map_Pointwithid&& from) noexcept
    : venue_map_Pointwithid() {
    *this = ::std::move(from);
  }

  inline venue_map_Pointwithid& operator=(const venue_map_Pointwithid& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Pointwithid& operator=(venue_map_Pointwithid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Pointwithid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Pointwithid* internal_default_instance() {
    return reinterpret_cast<const venue_map_Pointwithid*>(
               &_venue_map_Pointwithid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(venue_map_Pointwithid& a, venue_map_Pointwithid& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Pointwithid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Pointwithid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Pointwithid* New() const final {
    return CreateMaybeMessage<venue_map_Pointwithid>(nullptr);
  }

  venue_map_Pointwithid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Pointwithid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Pointwithid& from);
  void MergeFrom(const venue_map_Pointwithid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Pointwithid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Pointwithid";
  }
  protected:
  explicit venue_map_Pointwithid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Pointwithid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Edge) */ {
 public:
  inline venue_map_Edge() : venue_map_Edge(nullptr) {};
  virtual ~venue_map_Edge();

  venue_map_Edge(const venue_map_Edge& from);
  venue_map_Edge(venue_map_Edge&& from) noexcept
    : venue_map_Edge() {
    *this = ::std::move(from);
  }

  inline venue_map_Edge& operator=(const venue_map_Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Edge& operator=(venue_map_Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Edge* internal_default_instance() {
    return reinterpret_cast<const venue_map_Edge*>(
               &_venue_map_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(venue_map_Edge& a, venue_map_Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Edge* New() const final {
    return CreateMaybeMessage<venue_map_Edge>(nullptr);
  }

  venue_map_Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Edge& from);
  void MergeFrom(const venue_map_Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Edge";
  }
  protected:
  explicit venue_map_Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kLinkIDFieldNumber = 6,
  };
  // repeated int32 pts = 5;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pts() const;
  void _internal_add_pts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pts(int index) const;
  void set_pts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pts();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 subtype = 3;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float direction = 4;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // int32 linkID = 6;
  void clear_linkid();
  ::PROTOBUF_NAMESPACE_ID::int32 linkid() const;
  void set_linkid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_linkid() const;
  void _internal_set_linkid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pts_;
  mutable std::atomic<int> _pts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  float direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 linkid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Connection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Connection) */ {
 public:
  inline venue_map_Connection() : venue_map_Connection(nullptr) {};
  virtual ~venue_map_Connection();

  venue_map_Connection(const venue_map_Connection& from);
  venue_map_Connection(venue_map_Connection&& from) noexcept
    : venue_map_Connection() {
    *this = ::std::move(from);
  }

  inline venue_map_Connection& operator=(const venue_map_Connection& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Connection& operator=(venue_map_Connection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Connection* internal_default_instance() {
    return reinterpret_cast<const venue_map_Connection*>(
               &_venue_map_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(venue_map_Connection& a, venue_map_Connection& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Connection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Connection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Connection* New() const final {
    return CreateMaybeMessage<venue_map_Connection>(nullptr);
  }

  venue_map_Connection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Connection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Connection& from);
  void MergeFrom(const venue_map_Connection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Connection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Connection";
  }
  protected:
  explicit venue_map_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReflineFieldNumber = 4,
    kEdge1FieldNumber = 1,
    kEdge2FieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .venue_map_pb.venue_map.Location_type refline = 4;
  int refline_size() const;
  private:
  int _internal_refline_size() const;
  public:
  void clear_refline();
  ::venue_map_pb::venue_map_Location_type* mutable_refline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Location_type >*
      mutable_refline();
  private:
  const ::venue_map_pb::venue_map_Location_type& _internal_refline(int index) const;
  ::venue_map_pb::venue_map_Location_type* _internal_add_refline();
  public:
  const ::venue_map_pb::venue_map_Location_type& refline(int index) const;
  ::venue_map_pb::venue_map_Location_type* add_refline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Location_type >&
      refline() const;

  // int32 edge1 = 1;
  void clear_edge1();
  ::PROTOBUF_NAMESPACE_ID::int32 edge1() const;
  void set_edge1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_edge1() const;
  void _internal_set_edge1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 edge2 = 2;
  void clear_edge2();
  ::PROTOBUF_NAMESPACE_ID::int32 edge2() const;
  void set_edge2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_edge2() const;
  void _internal_set_edge2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Connection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Location_type > refline_;
  ::PROTOBUF_NAMESPACE_ID::int32 edge1_;
  ::PROTOBUF_NAMESPACE_ID::int32 edge2_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map_Intersection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map.Intersection) */ {
 public:
  inline venue_map_Intersection() : venue_map_Intersection(nullptr) {};
  virtual ~venue_map_Intersection();

  venue_map_Intersection(const venue_map_Intersection& from);
  venue_map_Intersection(venue_map_Intersection&& from) noexcept
    : venue_map_Intersection() {
    *this = ::std::move(from);
  }

  inline venue_map_Intersection& operator=(const venue_map_Intersection& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map_Intersection& operator=(venue_map_Intersection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map_Intersection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map_Intersection* internal_default_instance() {
    return reinterpret_cast<const venue_map_Intersection*>(
               &_venue_map_Intersection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(venue_map_Intersection& a, venue_map_Intersection& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map_Intersection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map_Intersection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map_Intersection* New() const final {
    return CreateMaybeMessage<venue_map_Intersection>(nullptr);
  }

  venue_map_Intersection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map_Intersection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map_Intersection& from);
  void MergeFrom(const venue_map_Intersection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map_Intersection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map.Intersection";
  }
  protected:
  explicit venue_map_Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapesFieldNumber = 2,
    kEdgesFieldNumber = 3,
    kConnectionsFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .venue_map_pb.venue_map.Pointwithid shapes = 2;
  int shapes_size() const;
  private:
  int _internal_shapes_size() const;
  public:
  void clear_shapes();
  ::venue_map_pb::venue_map_Pointwithid* mutable_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Pointwithid >*
      mutable_shapes();
  private:
  const ::venue_map_pb::venue_map_Pointwithid& _internal_shapes(int index) const;
  ::venue_map_pb::venue_map_Pointwithid* _internal_add_shapes();
  public:
  const ::venue_map_pb::venue_map_Pointwithid& shapes(int index) const;
  ::venue_map_pb::venue_map_Pointwithid* add_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Pointwithid >&
      shapes() const;

  // repeated .venue_map_pb.venue_map.Edge edges = 3;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::venue_map_pb::venue_map_Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Edge >*
      mutable_edges();
  private:
  const ::venue_map_pb::venue_map_Edge& _internal_edges(int index) const;
  ::venue_map_pb::venue_map_Edge* _internal_add_edges();
  public:
  const ::venue_map_pb::venue_map_Edge& edges(int index) const;
  ::venue_map_pb::venue_map_Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Edge >&
      edges() const;

  // repeated .venue_map_pb.venue_map.Connection connections = 4;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::venue_map_pb::venue_map_Connection* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Connection >*
      mutable_connections();
  private:
  const ::venue_map_pb::venue_map_Connection& _internal_connections(int index) const;
  ::venue_map_pb::venue_map_Connection* _internal_add_connections();
  public:
  const ::venue_map_pb::venue_map_Connection& connections(int index) const;
  ::venue_map_pb::venue_map_Connection* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Connection >&
      connections() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map.Intersection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Pointwithid > shapes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Connection > connections_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class venue_map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.venue_map) */ {
 public:
  inline venue_map() : venue_map(nullptr) {};
  virtual ~venue_map();

  venue_map(const venue_map& from);
  venue_map(venue_map&& from) noexcept
    : venue_map() {
    *this = ::std::move(from);
  }

  inline venue_map& operator=(const venue_map& from) {
    CopyFrom(from);
    return *this;
  }
  inline venue_map& operator=(venue_map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const venue_map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const venue_map* internal_default_instance() {
    return reinterpret_cast<const venue_map*>(
               &_venue_map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(venue_map& a, venue_map& b) {
    a.Swap(&b);
  }
  inline void Swap(venue_map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(venue_map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline venue_map* New() const final {
    return CreateMaybeMessage<venue_map>(nullptr);
  }

  venue_map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<venue_map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const venue_map& from);
  void MergeFrom(const venue_map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(venue_map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.venue_map";
  }
  protected:
  explicit venue_map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef venue_map_Floor Floor;
  typedef venue_map_Waypoints_Type Waypoints_Type;
  typedef venue_map_Favorate_Type Favorate_Type;
  typedef venue_map_Updates_Type Updates_Type;
  typedef venue_map_Slots_Type Slots_Type;
  typedef venue_map_Ultrasonic_obstacles_Type Ultrasonic_obstacles_Type;
  typedef venue_map_LastPostprocessing_Type LastPostprocessing_Type;
  typedef venue_map_Venue_Type Venue_Type;
  typedef venue_map_Link_IDs_Type Link_IDs_Type;
  typedef venue_map_Turn_directions_Type Turn_directions_Type;
  typedef venue_map_Lane_lines_Type Lane_lines_Type;
  typedef venue_map_Links_Type Links_Type;
  typedef venue_map_Joints_Type Joints_Type;
  typedef venue_map_Landmarks_Type Landmarks_Type;
  typedef venue_map_Location_type Location_type;
  typedef venue_map_Pointwithid Pointwithid;
  typedef venue_map_Edge Edge;
  typedef venue_map_Connection Connection;
  typedef venue_map_Intersection Intersection;

  // accessors -------------------------------------------------------

  enum : int {
    kVLinksFieldNumber = 2,
    kVJointsFieldNumber = 3,
    kVLandmarksFieldNumber = 4,
    kVSlotsFieldNumber = 5,
    kVObstaclesUltrasonicFieldNumber = 6,
    kVLaneLinesFieldNumber = 7,
    kFloorsFieldNumber = 8,
    kIntersectionsFieldNumber = 9,
    kVenueFieldNumber = 1,
    kLogicMapFieldNumber = 10,
  };
  // repeated .venue_map_pb.venue_map.Links_Type vLinks = 2;
  int vlinks_size() const;
  private:
  int _internal_vlinks_size() const;
  public:
  void clear_vlinks();
  ::venue_map_pb::venue_map_Links_Type* mutable_vlinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Links_Type >*
      mutable_vlinks();
  private:
  const ::venue_map_pb::venue_map_Links_Type& _internal_vlinks(int index) const;
  ::venue_map_pb::venue_map_Links_Type* _internal_add_vlinks();
  public:
  const ::venue_map_pb::venue_map_Links_Type& vlinks(int index) const;
  ::venue_map_pb::venue_map_Links_Type* add_vlinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Links_Type >&
      vlinks() const;

  // repeated .venue_map_pb.venue_map.Joints_Type vJoints = 3;
  int vjoints_size() const;
  private:
  int _internal_vjoints_size() const;
  public:
  void clear_vjoints();
  ::venue_map_pb::venue_map_Joints_Type* mutable_vjoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Joints_Type >*
      mutable_vjoints();
  private:
  const ::venue_map_pb::venue_map_Joints_Type& _internal_vjoints(int index) const;
  ::venue_map_pb::venue_map_Joints_Type* _internal_add_vjoints();
  public:
  const ::venue_map_pb::venue_map_Joints_Type& vjoints(int index) const;
  ::venue_map_pb::venue_map_Joints_Type* add_vjoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Joints_Type >&
      vjoints() const;

  // repeated .venue_map_pb.venue_map.Landmarks_Type vLandmarks = 4;
  int vlandmarks_size() const;
  private:
  int _internal_vlandmarks_size() const;
  public:
  void clear_vlandmarks();
  ::venue_map_pb::venue_map_Landmarks_Type* mutable_vlandmarks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Landmarks_Type >*
      mutable_vlandmarks();
  private:
  const ::venue_map_pb::venue_map_Landmarks_Type& _internal_vlandmarks(int index) const;
  ::venue_map_pb::venue_map_Landmarks_Type* _internal_add_vlandmarks();
  public:
  const ::venue_map_pb::venue_map_Landmarks_Type& vlandmarks(int index) const;
  ::venue_map_pb::venue_map_Landmarks_Type* add_vlandmarks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Landmarks_Type >&
      vlandmarks() const;

  // repeated .venue_map_pb.venue_map.Slots_Type vSlots = 5;
  int vslots_size() const;
  private:
  int _internal_vslots_size() const;
  public:
  void clear_vslots();
  ::venue_map_pb::venue_map_Slots_Type* mutable_vslots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Slots_Type >*
      mutable_vslots();
  private:
  const ::venue_map_pb::venue_map_Slots_Type& _internal_vslots(int index) const;
  ::venue_map_pb::venue_map_Slots_Type* _internal_add_vslots();
  public:
  const ::venue_map_pb::venue_map_Slots_Type& vslots(int index) const;
  ::venue_map_pb::venue_map_Slots_Type* add_vslots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Slots_Type >&
      vslots() const;

  // repeated .venue_map_pb.venue_map.Ultrasonic_obstacles_Type vObstacles_Ultrasonic = 6;
  int vobstacles_ultrasonic_size() const;
  private:
  int _internal_vobstacles_ultrasonic_size() const;
  public:
  void clear_vobstacles_ultrasonic();
  ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* mutable_vobstacles_ultrasonic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type >*
      mutable_vobstacles_ultrasonic();
  private:
  const ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type& _internal_vobstacles_ultrasonic(int index) const;
  ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* _internal_add_vobstacles_ultrasonic();
  public:
  const ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type& vobstacles_ultrasonic(int index) const;
  ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* add_vobstacles_ultrasonic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type >&
      vobstacles_ultrasonic() const;

  // repeated .venue_map_pb.venue_map.Lane_lines_Type vLaneLines = 7;
  int vlanelines_size() const;
  private:
  int _internal_vlanelines_size() const;
  public:
  void clear_vlanelines();
  ::venue_map_pb::venue_map_Lane_lines_Type* mutable_vlanelines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Lane_lines_Type >*
      mutable_vlanelines();
  private:
  const ::venue_map_pb::venue_map_Lane_lines_Type& _internal_vlanelines(int index) const;
  ::venue_map_pb::venue_map_Lane_lines_Type* _internal_add_vlanelines();
  public:
  const ::venue_map_pb::venue_map_Lane_lines_Type& vlanelines(int index) const;
  ::venue_map_pb::venue_map_Lane_lines_Type* add_vlanelines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Lane_lines_Type >&
      vlanelines() const;

  // repeated .venue_map_pb.venue_map.Floor floors = 8;
  int floors_size() const;
  private:
  int _internal_floors_size() const;
  public:
  void clear_floors();
  ::venue_map_pb::venue_map_Floor* mutable_floors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Floor >*
      mutable_floors();
  private:
  const ::venue_map_pb::venue_map_Floor& _internal_floors(int index) const;
  ::venue_map_pb::venue_map_Floor* _internal_add_floors();
  public:
  const ::venue_map_pb::venue_map_Floor& floors(int index) const;
  ::venue_map_pb::venue_map_Floor* add_floors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Floor >&
      floors() const;

  // repeated .venue_map_pb.venue_map.Intersection intersections = 9;
  int intersections_size() const;
  private:
  int _internal_intersections_size() const;
  public:
  void clear_intersections();
  ::venue_map_pb::venue_map_Intersection* mutable_intersections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Intersection >*
      mutable_intersections();
  private:
  const ::venue_map_pb::venue_map_Intersection& _internal_intersections(int index) const;
  ::venue_map_pb::venue_map_Intersection* _internal_add_intersections();
  public:
  const ::venue_map_pb::venue_map_Intersection& intersections(int index) const;
  ::venue_map_pb::venue_map_Intersection* add_intersections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Intersection >&
      intersections() const;

  // .venue_map_pb.venue_map.Venue_Type Venue = 1;
  bool has_venue() const;
  private:
  bool _internal_has_venue() const;
  public:
  void clear_venue();
  const ::venue_map_pb::venue_map_Venue_Type& venue() const;
  ::venue_map_pb::venue_map_Venue_Type* release_venue();
  ::venue_map_pb::venue_map_Venue_Type* mutable_venue();
  void set_allocated_venue(::venue_map_pb::venue_map_Venue_Type* venue);
  private:
  const ::venue_map_pb::venue_map_Venue_Type& _internal_venue() const;
  ::venue_map_pb::venue_map_Venue_Type* _internal_mutable_venue();
  public:
  void unsafe_arena_set_allocated_venue(
      ::venue_map_pb::venue_map_Venue_Type* venue);
  ::venue_map_pb::venue_map_Venue_Type* unsafe_arena_release_venue();

  // .LogicMapPb.LogicMap logic_map = 10;
  bool has_logic_map() const;
  private:
  bool _internal_has_logic_map() const;
  public:
  void clear_logic_map();
  const ::LogicMapPb::LogicMap& logic_map() const;
  ::LogicMapPb::LogicMap* release_logic_map();
  ::LogicMapPb::LogicMap* mutable_logic_map();
  void set_allocated_logic_map(::LogicMapPb::LogicMap* logic_map);
  private:
  const ::LogicMapPb::LogicMap& _internal_logic_map() const;
  ::LogicMapPb::LogicMap* _internal_mutable_logic_map();
  public:
  void unsafe_arena_set_allocated_logic_map(
      ::LogicMapPb::LogicMap* logic_map);
  ::LogicMapPb::LogicMap* unsafe_arena_release_logic_map();

  // @@protoc_insertion_point(class_scope:venue_map_pb.venue_map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Links_Type > vlinks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Joints_Type > vjoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Landmarks_Type > vlandmarks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Slots_Type > vslots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type > vobstacles_ultrasonic_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Lane_lines_Type > vlanelines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Floor > floors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Intersection > intersections_;
  ::venue_map_pb::venue_map_Venue_Type* venue_;
  ::LogicMapPb::LogicMap* logic_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// -------------------------------------------------------------------

class map_trajectory_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:venue_map_pb.map_trajectory_data) */ {
 public:
  inline map_trajectory_data() : map_trajectory_data(nullptr) {};
  virtual ~map_trajectory_data();

  map_trajectory_data(const map_trajectory_data& from);
  map_trajectory_data(map_trajectory_data&& from) noexcept
    : map_trajectory_data() {
    *this = ::std::move(from);
  }

  inline map_trajectory_data& operator=(const map_trajectory_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline map_trajectory_data& operator=(map_trajectory_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const map_trajectory_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const map_trajectory_data* internal_default_instance() {
    return reinterpret_cast<const map_trajectory_data*>(
               &_map_trajectory_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(map_trajectory_data& a, map_trajectory_data& b) {
    a.Swap(&b);
  }
  inline void Swap(map_trajectory_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(map_trajectory_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline map_trajectory_data* New() const final {
    return CreateMaybeMessage<map_trajectory_data>(nullptr);
  }

  map_trajectory_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<map_trajectory_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const map_trajectory_data& from);
  void MergeFrom(const map_trajectory_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(map_trajectory_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "venue_map_pb.map_trajectory_data";
  }
  protected:
  explicit map_trajectory_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVenueMapFieldNumber = 1,
    kApTrajectoryDataFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kIsAcrossFloorsFieldNumber = 4,
  };
  // .venue_map_pb.venue_map venueMap = 1;
  bool has_venuemap() const;
  private:
  bool _internal_has_venuemap() const;
  public:
  void clear_venuemap();
  const ::venue_map_pb::venue_map& venuemap() const;
  ::venue_map_pb::venue_map* release_venuemap();
  ::venue_map_pb::venue_map* mutable_venuemap();
  void set_allocated_venuemap(::venue_map_pb::venue_map* venuemap);
  private:
  const ::venue_map_pb::venue_map& _internal_venuemap() const;
  ::venue_map_pb::venue_map* _internal_mutable_venuemap();
  public:
  void unsafe_arena_set_allocated_venuemap(
      ::venue_map_pb::venue_map* venuemap);
  ::venue_map_pb::venue_map* unsafe_arena_release_venuemap();

  // .SRprotobuf.ApTrajectoryDataType apTrajectoryData = 2;
  bool has_aptrajectorydata() const;
  private:
  bool _internal_has_aptrajectorydata() const;
  public:
  void clear_aptrajectorydata();
  const ::SRprotobuf::ApTrajectoryDataType& aptrajectorydata() const;
  ::SRprotobuf::ApTrajectoryDataType* release_aptrajectorydata();
  ::SRprotobuf::ApTrajectoryDataType* mutable_aptrajectorydata();
  void set_allocated_aptrajectorydata(::SRprotobuf::ApTrajectoryDataType* aptrajectorydata);
  private:
  const ::SRprotobuf::ApTrajectoryDataType& _internal_aptrajectorydata() const;
  ::SRprotobuf::ApTrajectoryDataType* _internal_mutable_aptrajectorydata();
  public:
  void unsafe_arena_set_allocated_aptrajectorydata(
      ::SRprotobuf::ApTrajectoryDataType* aptrajectorydata);
  ::SRprotobuf::ApTrajectoryDataType* unsafe_arena_release_aptrajectorydata();

  // uint32 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 isAcrossFloors = 4;
  void clear_isacrossfloors();
  ::PROTOBUF_NAMESPACE_ID::int32 isacrossfloors() const;
  void set_isacrossfloors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isacrossfloors() const;
  void _internal_set_isacrossfloors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:venue_map_pb.map_trajectory_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::venue_map_pb::venue_map* venuemap_;
  ::SRprotobuf::ApTrajectoryDataType* aptrajectorydata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 isacrossfloors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// venue_map_Floor

// int32 ID = 1;
inline void venue_map_Floor::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Floor::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Floor::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Floor.ID)
  return _internal_id();
}
inline void venue_map_Floor::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void venue_map_Floor::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Floor.ID)
}

// int32 level = 2;
inline void venue_map_Floor::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Floor::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Floor::level() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Floor.level)
  return _internal_level();
}
inline void venue_map_Floor::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void venue_map_Floor::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Floor.level)
}

// float height_upper = 3;
inline void venue_map_Floor::clear_height_upper() {
  height_upper_ = 0;
}
inline float venue_map_Floor::_internal_height_upper() const {
  return height_upper_;
}
inline float venue_map_Floor::height_upper() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Floor.height_upper)
  return _internal_height_upper();
}
inline void venue_map_Floor::_internal_set_height_upper(float value) {
  
  height_upper_ = value;
}
inline void venue_map_Floor::set_height_upper(float value) {
  _internal_set_height_upper(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Floor.height_upper)
}

// float height_lower = 4;
inline void venue_map_Floor::clear_height_lower() {
  height_lower_ = 0;
}
inline float venue_map_Floor::_internal_height_lower() const {
  return height_lower_;
}
inline float venue_map_Floor::height_lower() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Floor.height_lower)
  return _internal_height_lower();
}
inline void venue_map_Floor::_internal_set_height_lower(float value) {
  
  height_lower_ = value;
}
inline void venue_map_Floor::set_height_lower(float value) {
  _internal_set_height_lower(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Floor.height_lower)
}

// -------------------------------------------------------------------

// venue_map_Waypoints_Type

// int32 Index = 1;
inline void venue_map_Waypoints_Type::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Waypoints_Type::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Waypoints_Type::index() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Index)
  return _internal_index();
}
inline void venue_map_Waypoints_Type::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void venue_map_Waypoints_Type::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Index)
}

// uint32 Maturity = 2;
inline void venue_map_Waypoints_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Waypoints_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Waypoints_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Waypoints_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Waypoints_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Maturity)
}

// float Locationx = 3;
inline void venue_map_Waypoints_Type::clear_locationx() {
  locationx_ = 0;
}
inline float venue_map_Waypoints_Type::_internal_locationx() const {
  return locationx_;
}
inline float venue_map_Waypoints_Type::locationx() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Locationx)
  return _internal_locationx();
}
inline void venue_map_Waypoints_Type::_internal_set_locationx(float value) {
  
  locationx_ = value;
}
inline void venue_map_Waypoints_Type::set_locationx(float value) {
  _internal_set_locationx(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Locationx)
}

// float Locationy = 4;
inline void venue_map_Waypoints_Type::clear_locationy() {
  locationy_ = 0;
}
inline float venue_map_Waypoints_Type::_internal_locationy() const {
  return locationy_;
}
inline float venue_map_Waypoints_Type::locationy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Locationy)
  return _internal_locationy();
}
inline void venue_map_Waypoints_Type::_internal_set_locationy(float value) {
  
  locationy_ = value;
}
inline void venue_map_Waypoints_Type::set_locationy(float value) {
  _internal_set_locationy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Locationy)
}

// float Locationz = 5;
inline void venue_map_Waypoints_Type::clear_locationz() {
  locationz_ = 0;
}
inline float venue_map_Waypoints_Type::_internal_locationz() const {
  return locationz_;
}
inline float venue_map_Waypoints_Type::locationz() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Locationz)
  return _internal_locationz();
}
inline void venue_map_Waypoints_Type::_internal_set_locationz(float value) {
  
  locationz_ = value;
}
inline void venue_map_Waypoints_Type::set_locationz(float value) {
  _internal_set_locationz(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Locationz)
}

// float Location_accuracy = 6;
inline void venue_map_Waypoints_Type::clear_location_accuracy() {
  location_accuracy_ = 0;
}
inline float venue_map_Waypoints_Type::_internal_location_accuracy() const {
  return location_accuracy_;
}
inline float venue_map_Waypoints_Type::location_accuracy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Location_accuracy)
  return _internal_location_accuracy();
}
inline void venue_map_Waypoints_Type::_internal_set_location_accuracy(float value) {
  
  location_accuracy_ = value;
}
inline void venue_map_Waypoints_Type::set_location_accuracy(float value) {
  _internal_set_location_accuracy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Location_accuracy)
}

// float Heading = 7;
inline void venue_map_Waypoints_Type::clear_heading() {
  heading_ = 0;
}
inline float venue_map_Waypoints_Type::_internal_heading() const {
  return heading_;
}
inline float venue_map_Waypoints_Type::heading() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Heading)
  return _internal_heading();
}
inline void venue_map_Waypoints_Type::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void venue_map_Waypoints_Type::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Heading)
}

// float TempS = 8;
inline void venue_map_Waypoints_Type::clear_temps() {
  temps_ = 0;
}
inline float venue_map_Waypoints_Type::_internal_temps() const {
  return temps_;
}
inline float venue_map_Waypoints_Type::temps() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.TempS)
  return _internal_temps();
}
inline void venue_map_Waypoints_Type::_internal_set_temps(float value) {
  
  temps_ = value;
}
inline void venue_map_Waypoints_Type::set_temps(float value) {
  _internal_set_temps(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.TempS)
}

// sint32 Gear = 9;
inline void venue_map_Waypoints_Type::clear_gear() {
  gear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Waypoints_Type::_internal_gear() const {
  return gear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Waypoints_Type::gear() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Gear)
  return _internal_gear();
}
inline void venue_map_Waypoints_Type::_internal_set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gear_ = value;
}
inline void venue_map_Waypoints_Type::set_gear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Gear)
}

// int32 Training_tag = 10;
inline void venue_map_Waypoints_Type::clear_training_tag() {
  training_tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Waypoints_Type::_internal_training_tag() const {
  return training_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Waypoints_Type::training_tag() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Waypoints_Type.Training_tag)
  return _internal_training_tag();
}
inline void venue_map_Waypoints_Type::_internal_set_training_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  training_tag_ = value;
}
inline void venue_map_Waypoints_Type::set_training_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_training_tag(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Waypoints_Type.Training_tag)
}

// -------------------------------------------------------------------

// venue_map_Favorate_Type

// int32 Vehicle_ID = 1;
inline void venue_map_Favorate_Type::clear_vehicle_id() {
  vehicle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Favorate_Type::_internal_vehicle_id() const {
  return vehicle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Favorate_Type::vehicle_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.Vehicle_ID)
  return _internal_vehicle_id();
}
inline void venue_map_Favorate_Type::_internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_id_ = value;
}
inline void venue_map_Favorate_Type::set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.Vehicle_ID)
}

// float Confidence = 2;
inline void venue_map_Favorate_Type::clear_confidence() {
  confidence_ = 0;
}
inline float venue_map_Favorate_Type::_internal_confidence() const {
  return confidence_;
}
inline float venue_map_Favorate_Type::confidence() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.Confidence)
  return _internal_confidence();
}
inline void venue_map_Favorate_Type::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void venue_map_Favorate_Type::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.Confidence)
}

// uint32 Maturity = 3;
inline void venue_map_Favorate_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Favorate_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Favorate_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.Maturity)
}

// uint32 VirtualSlot = 4;
inline void venue_map_Favorate_Type::clear_virtualslot() {
  virtualslot_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::_internal_virtualslot() const {
  return virtualslot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::virtualslot() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.VirtualSlot)
  return _internal_virtualslot();
}
inline void venue_map_Favorate_Type::_internal_set_virtualslot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  virtualslot_ = value;
}
inline void venue_map_Favorate_Type::set_virtualslot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_virtualslot(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.VirtualSlot)
}

// uint32 ReversePk = 5;
inline void venue_map_Favorate_Type::clear_reversepk() {
  reversepk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::_internal_reversepk() const {
  return reversepk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::reversepk() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.ReversePk)
  return _internal_reversepk();
}
inline void venue_map_Favorate_Type::_internal_set_reversepk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reversepk_ = value;
}
inline void venue_map_Favorate_Type::set_reversepk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reversepk(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.ReversePk)
}

// uint32 ParallelPk = 6;
inline void venue_map_Favorate_Type::clear_parallelpk() {
  parallelpk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::_internal_parallelpk() const {
  return parallelpk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::parallelpk() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.ParallelPk)
  return _internal_parallelpk();
}
inline void venue_map_Favorate_Type::_internal_set_parallelpk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parallelpk_ = value;
}
inline void venue_map_Favorate_Type::set_parallelpk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parallelpk(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.ParallelPk)
}

// uint32 ForwardPk = 7;
inline void venue_map_Favorate_Type::clear_forwardpk() {
  forwardpk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::_internal_forwardpk() const {
  return forwardpk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Favorate_Type::forwardpk() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.ForwardPk)
  return _internal_forwardpk();
}
inline void venue_map_Favorate_Type::_internal_set_forwardpk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  forwardpk_ = value;
}
inline void venue_map_Favorate_Type::set_forwardpk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forwardpk(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.ForwardPk)
}

// int32 Favorslotconfirmed = 8;
inline void venue_map_Favorate_Type::clear_favorslotconfirmed() {
  favorslotconfirmed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Favorate_Type::_internal_favorslotconfirmed() const {
  return favorslotconfirmed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Favorate_Type::favorslotconfirmed() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Favorate_Type.Favorslotconfirmed)
  return _internal_favorslotconfirmed();
}
inline void venue_map_Favorate_Type::_internal_set_favorslotconfirmed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  favorslotconfirmed_ = value;
}
inline void venue_map_Favorate_Type::set_favorslotconfirmed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_favorslotconfirmed(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Favorate_Type.Favorslotconfirmed)
}

// -------------------------------------------------------------------

// venue_map_Updates_Type

// int32 Vehicle_ID = 1;
inline void venue_map_Updates_Type::clear_vehicle_id() {
  vehicle_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Updates_Type::_internal_vehicle_id() const {
  return vehicle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Updates_Type::vehicle_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Updates_Type.Vehicle_ID)
  return _internal_vehicle_id();
}
inline void venue_map_Updates_Type::_internal_set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vehicle_id_ = value;
}
inline void venue_map_Updates_Type::set_vehicle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Updates_Type.Vehicle_ID)
}

// int64 Time = 2;
inline void venue_map_Updates_Type::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 venue_map_Updates_Type::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 venue_map_Updates_Type::time() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Updates_Type.Time)
  return _internal_time();
}
inline void venue_map_Updates_Type::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void venue_map_Updates_Type::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Updates_Type.Time)
}

// -------------------------------------------------------------------

// venue_map_Slots_Type

// uint32 ID = 1;
inline void venue_map_Slots_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Slots_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Slots_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.ID)
  return _internal_id();
}
inline void venue_map_Slots_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Slots_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.ID)
}

// uint32 Link_ID = 2;
inline void venue_map_Slots_Type::clear_link_id() {
  link_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Slots_Type::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Slots_Type::link_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Link_ID)
  return _internal_link_id();
}
inline void venue_map_Slots_Type::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_id_ = value;
}
inline void venue_map_Slots_Type::set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Link_ID)
}

// sint32 Shape = 3;
inline void venue_map_Slots_Type::clear_shape() {
  shape_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Slots_Type::_internal_shape() const {
  return shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Slots_Type::shape() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Shape)
  return _internal_shape();
}
inline void venue_map_Slots_Type::_internal_set_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shape_ = value;
}
inline void venue_map_Slots_Type::set_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Shape)
}

// uint32 Maturity = 4;
inline void venue_map_Slots_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Slots_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Slots_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Slots_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Slots_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Maturity)
}

// float Confidence = 5;
inline void venue_map_Slots_Type::clear_confidence() {
  confidence_ = 0;
}
inline float venue_map_Slots_Type::_internal_confidence() const {
  return confidence_;
}
inline float venue_map_Slots_Type::confidence() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Confidence)
  return _internal_confidence();
}
inline void venue_map_Slots_Type::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void venue_map_Slots_Type::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Confidence)
}

// float Locationx = 6;
inline void venue_map_Slots_Type::clear_locationx() {
  locationx_ = 0;
}
inline float venue_map_Slots_Type::_internal_locationx() const {
  return locationx_;
}
inline float venue_map_Slots_Type::locationx() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Locationx)
  return _internal_locationx();
}
inline void venue_map_Slots_Type::_internal_set_locationx(float value) {
  
  locationx_ = value;
}
inline void venue_map_Slots_Type::set_locationx(float value) {
  _internal_set_locationx(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Locationx)
}

// float Locationy = 7;
inline void venue_map_Slots_Type::clear_locationy() {
  locationy_ = 0;
}
inline float venue_map_Slots_Type::_internal_locationy() const {
  return locationy_;
}
inline float venue_map_Slots_Type::locationy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Locationy)
  return _internal_locationy();
}
inline void venue_map_Slots_Type::_internal_set_locationy(float value) {
  
  locationy_ = value;
}
inline void venue_map_Slots_Type::set_locationy(float value) {
  _internal_set_locationy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Locationy)
}

// float Locationz = 8;
inline void venue_map_Slots_Type::clear_locationz() {
  locationz_ = 0;
}
inline float venue_map_Slots_Type::_internal_locationz() const {
  return locationz_;
}
inline float venue_map_Slots_Type::locationz() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Locationz)
  return _internal_locationz();
}
inline void venue_map_Slots_Type::_internal_set_locationz(float value) {
  
  locationz_ = value;
}
inline void venue_map_Slots_Type::set_locationz(float value) {
  _internal_set_locationz(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Locationz)
}

// float Location_accuracy = 9;
inline void venue_map_Slots_Type::clear_location_accuracy() {
  location_accuracy_ = 0;
}
inline float venue_map_Slots_Type::_internal_location_accuracy() const {
  return location_accuracy_;
}
inline float venue_map_Slots_Type::location_accuracy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Location_accuracy)
  return _internal_location_accuracy();
}
inline void venue_map_Slots_Type::_internal_set_location_accuracy(float value) {
  
  location_accuracy_ = value;
}
inline void venue_map_Slots_Type::set_location_accuracy(float value) {
  _internal_set_location_accuracy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Location_accuracy)
}

// float NearFrontLoc_x = 10;
inline void venue_map_Slots_Type::clear_nearfrontloc_x() {
  nearfrontloc_x_ = 0;
}
inline float venue_map_Slots_Type::_internal_nearfrontloc_x() const {
  return nearfrontloc_x_;
}
inline float venue_map_Slots_Type::nearfrontloc_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.NearFrontLoc_x)
  return _internal_nearfrontloc_x();
}
inline void venue_map_Slots_Type::_internal_set_nearfrontloc_x(float value) {
  
  nearfrontloc_x_ = value;
}
inline void venue_map_Slots_Type::set_nearfrontloc_x(float value) {
  _internal_set_nearfrontloc_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.NearFrontLoc_x)
}

// float NearFrontLoc_y = 11;
inline void venue_map_Slots_Type::clear_nearfrontloc_y() {
  nearfrontloc_y_ = 0;
}
inline float venue_map_Slots_Type::_internal_nearfrontloc_y() const {
  return nearfrontloc_y_;
}
inline float venue_map_Slots_Type::nearfrontloc_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.NearFrontLoc_y)
  return _internal_nearfrontloc_y();
}
inline void venue_map_Slots_Type::_internal_set_nearfrontloc_y(float value) {
  
  nearfrontloc_y_ = value;
}
inline void venue_map_Slots_Type::set_nearfrontloc_y(float value) {
  _internal_set_nearfrontloc_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.NearFrontLoc_y)
}

// float NearFrontLoc_z = 12;
inline void venue_map_Slots_Type::clear_nearfrontloc_z() {
  nearfrontloc_z_ = 0;
}
inline float venue_map_Slots_Type::_internal_nearfrontloc_z() const {
  return nearfrontloc_z_;
}
inline float venue_map_Slots_Type::nearfrontloc_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.NearFrontLoc_z)
  return _internal_nearfrontloc_z();
}
inline void venue_map_Slots_Type::_internal_set_nearfrontloc_z(float value) {
  
  nearfrontloc_z_ = value;
}
inline void venue_map_Slots_Type::set_nearfrontloc_z(float value) {
  _internal_set_nearfrontloc_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.NearFrontLoc_z)
}

// float NearRearLoc_x = 13;
inline void venue_map_Slots_Type::clear_nearrearloc_x() {
  nearrearloc_x_ = 0;
}
inline float venue_map_Slots_Type::_internal_nearrearloc_x() const {
  return nearrearloc_x_;
}
inline float venue_map_Slots_Type::nearrearloc_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.NearRearLoc_x)
  return _internal_nearrearloc_x();
}
inline void venue_map_Slots_Type::_internal_set_nearrearloc_x(float value) {
  
  nearrearloc_x_ = value;
}
inline void venue_map_Slots_Type::set_nearrearloc_x(float value) {
  _internal_set_nearrearloc_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.NearRearLoc_x)
}

// float NearRearLoc_y = 14;
inline void venue_map_Slots_Type::clear_nearrearloc_y() {
  nearrearloc_y_ = 0;
}
inline float venue_map_Slots_Type::_internal_nearrearloc_y() const {
  return nearrearloc_y_;
}
inline float venue_map_Slots_Type::nearrearloc_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.NearRearLoc_y)
  return _internal_nearrearloc_y();
}
inline void venue_map_Slots_Type::_internal_set_nearrearloc_y(float value) {
  
  nearrearloc_y_ = value;
}
inline void venue_map_Slots_Type::set_nearrearloc_y(float value) {
  _internal_set_nearrearloc_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.NearRearLoc_y)
}

// float NearRearLoc_z = 15;
inline void venue_map_Slots_Type::clear_nearrearloc_z() {
  nearrearloc_z_ = 0;
}
inline float venue_map_Slots_Type::_internal_nearrearloc_z() const {
  return nearrearloc_z_;
}
inline float venue_map_Slots_Type::nearrearloc_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.NearRearLoc_z)
  return _internal_nearrearloc_z();
}
inline void venue_map_Slots_Type::_internal_set_nearrearloc_z(float value) {
  
  nearrearloc_z_ = value;
}
inline void venue_map_Slots_Type::set_nearrearloc_z(float value) {
  _internal_set_nearrearloc_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.NearRearLoc_z)
}

// int32 WayPoint_Index = 16;
inline void venue_map_Slots_Type::clear_waypoint_index() {
  waypoint_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Slots_Type::_internal_waypoint_index() const {
  return waypoint_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Slots_Type::waypoint_index() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.WayPoint_Index)
  return _internal_waypoint_index();
}
inline void venue_map_Slots_Type::_internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waypoint_index_ = value;
}
inline void venue_map_Slots_Type::set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waypoint_index(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.WayPoint_Index)
}

// float Heading = 17;
inline void venue_map_Slots_Type::clear_heading() {
  heading_ = 0;
}
inline float venue_map_Slots_Type::_internal_heading() const {
  return heading_;
}
inline float venue_map_Slots_Type::heading() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Heading)
  return _internal_heading();
}
inline void venue_map_Slots_Type::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void venue_map_Slots_Type::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Heading)
}

// float Width = 18;
inline void venue_map_Slots_Type::clear_width() {
  width_ = 0;
}
inline float venue_map_Slots_Type::_internal_width() const {
  return width_;
}
inline float venue_map_Slots_Type::width() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Width)
  return _internal_width();
}
inline void venue_map_Slots_Type::_internal_set_width(float value) {
  
  width_ = value;
}
inline void venue_map_Slots_Type::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Width)
}

// float Length = 19;
inline void venue_map_Slots_Type::clear_length() {
  length_ = 0;
}
inline float venue_map_Slots_Type::_internal_length() const {
  return length_;
}
inline float venue_map_Slots_Type::length() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Length)
  return _internal_length();
}
inline void venue_map_Slots_Type::_internal_set_length(float value) {
  
  length_ = value;
}
inline void venue_map_Slots_Type::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.Length)
}

// sint32 CDU_Type = 20;
inline void venue_map_Slots_Type::clear_cdu_type() {
  cdu_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Slots_Type::_internal_cdu_type() const {
  return cdu_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Slots_Type::cdu_type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.CDU_Type)
  return _internal_cdu_type();
}
inline void venue_map_Slots_Type::_internal_set_cdu_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cdu_type_ = value;
}
inline void venue_map_Slots_Type::set_cdu_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cdu_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Slots_Type.CDU_Type)
}

// .venue_map_pb.venue_map.Updates_Type Updates = 21;
inline bool venue_map_Slots_Type::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool venue_map_Slots_Type::has_updates() const {
  return _internal_has_updates();
}
inline void venue_map_Slots_Type::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Slots_Type::_internal_updates() const {
  const ::venue_map_pb::venue_map_Updates_Type* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Updates_Type*>(
      &::venue_map_pb::_venue_map_Updates_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Slots_Type::updates() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Updates)
  return _internal_updates();
}
inline void venue_map_Slots_Type::unsafe_arena_set_allocated_updates(
    ::venue_map_pb::venue_map_Updates_Type* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Slots_Type.Updates)
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Slots_Type::release_updates() {
  auto temp = unsafe_arena_release_updates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Slots_Type::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Slots_Type.Updates)
  
  ::venue_map_pb::venue_map_Updates_Type* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Slots_Type::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Slots_Type::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Slots_Type.Updates)
  return _internal_mutable_updates();
}
inline void venue_map_Slots_Type::set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Slots_Type.Updates)
}

// .venue_map_pb.venue_map.Favorate_Type Favorate = 22;
inline bool venue_map_Slots_Type::_internal_has_favorate() const {
  return this != internal_default_instance() && favorate_ != nullptr;
}
inline bool venue_map_Slots_Type::has_favorate() const {
  return _internal_has_favorate();
}
inline void venue_map_Slots_Type::clear_favorate() {
  if (GetArena() == nullptr && favorate_ != nullptr) {
    delete favorate_;
  }
  favorate_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Favorate_Type& venue_map_Slots_Type::_internal_favorate() const {
  const ::venue_map_pb::venue_map_Favorate_Type* p = favorate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Favorate_Type*>(
      &::venue_map_pb::_venue_map_Favorate_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Favorate_Type& venue_map_Slots_Type::favorate() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.Favorate)
  return _internal_favorate();
}
inline void venue_map_Slots_Type::unsafe_arena_set_allocated_favorate(
    ::venue_map_pb::venue_map_Favorate_Type* favorate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favorate_);
  }
  favorate_ = favorate;
  if (favorate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Slots_Type.Favorate)
}
inline ::venue_map_pb::venue_map_Favorate_Type* venue_map_Slots_Type::release_favorate() {
  auto temp = unsafe_arena_release_favorate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Favorate_Type* venue_map_Slots_Type::unsafe_arena_release_favorate() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Slots_Type.Favorate)
  
  ::venue_map_pb::venue_map_Favorate_Type* temp = favorate_;
  favorate_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Favorate_Type* venue_map_Slots_Type::_internal_mutable_favorate() {
  
  if (favorate_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Favorate_Type>(GetArena());
    favorate_ = p;
  }
  return favorate_;
}
inline ::venue_map_pb::venue_map_Favorate_Type* venue_map_Slots_Type::mutable_favorate() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Slots_Type.Favorate)
  return _internal_mutable_favorate();
}
inline void venue_map_Slots_Type::set_allocated_favorate(::venue_map_pb::venue_map_Favorate_Type* favorate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete favorate_;
  }
  if (favorate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(favorate);
    if (message_arena != submessage_arena) {
      favorate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favorate, submessage_arena);
    }
    
  } else {
    
  }
  favorate_ = favorate;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Slots_Type.Favorate)
}

// .SRprotobuf.FloorLevel floor_level = 23;
inline bool venue_map_Slots_Type::_internal_has_floor_level() const {
  return this != internal_default_instance() && floor_level_ != nullptr;
}
inline bool venue_map_Slots_Type::has_floor_level() const {
  return _internal_has_floor_level();
}
inline const ::SRprotobuf::FloorLevel& venue_map_Slots_Type::_internal_floor_level() const {
  const ::SRprotobuf::FloorLevel* p = floor_level_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::FloorLevel*>(
      &::SRprotobuf::_FloorLevel_default_instance_);
}
inline const ::SRprotobuf::FloorLevel& venue_map_Slots_Type::floor_level() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Slots_Type.floor_level)
  return _internal_floor_level();
}
inline void venue_map_Slots_Type::unsafe_arena_set_allocated_floor_level(
    ::SRprotobuf::FloorLevel* floor_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  floor_level_ = floor_level;
  if (floor_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Slots_Type.floor_level)
}
inline ::SRprotobuf::FloorLevel* venue_map_Slots_Type::release_floor_level() {
  auto temp = unsafe_arena_release_floor_level();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::FloorLevel* venue_map_Slots_Type::unsafe_arena_release_floor_level() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Slots_Type.floor_level)
  
  ::SRprotobuf::FloorLevel* temp = floor_level_;
  floor_level_ = nullptr;
  return temp;
}
inline ::SRprotobuf::FloorLevel* venue_map_Slots_Type::_internal_mutable_floor_level() {
  
  if (floor_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::FloorLevel>(GetArena());
    floor_level_ = p;
  }
  return floor_level_;
}
inline ::SRprotobuf::FloorLevel* venue_map_Slots_Type::mutable_floor_level() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Slots_Type.floor_level)
  return _internal_mutable_floor_level();
}
inline void venue_map_Slots_Type::set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  if (floor_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level)->GetArena();
    if (message_arena != submessage_arena) {
      floor_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floor_level, submessage_arena);
    }
    
  } else {
    
  }
  floor_level_ = floor_level;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Slots_Type.floor_level)
}

// -------------------------------------------------------------------

// venue_map_Ultrasonic_obstacles_Type

// uint32 ID = 1;
inline void venue_map_Ultrasonic_obstacles_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Ultrasonic_obstacles_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Ultrasonic_obstacles_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.ID)
  return _internal_id();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.ID)
}

// uint32 Link_ID = 2;
inline void venue_map_Ultrasonic_obstacles_Type::clear_link_id() {
  link_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Ultrasonic_obstacles_Type::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Ultrasonic_obstacles_Type::link_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Link_ID)
  return _internal_link_id();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_id_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Link_ID)
}

// sint32 Type = 3;
inline void venue_map_Ultrasonic_obstacles_Type::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Ultrasonic_obstacles_Type::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Ultrasonic_obstacles_Type::type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Type)
  return _internal_type();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Type)
}

// uint32 Maturity = 4;
inline void venue_map_Ultrasonic_obstacles_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Ultrasonic_obstacles_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Ultrasonic_obstacles_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Maturity)
}

// float Confidence = 5;
inline void venue_map_Ultrasonic_obstacles_Type::clear_confidence() {
  confidence_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_confidence() const {
  return confidence_;
}
inline float venue_map_Ultrasonic_obstacles_Type::confidence() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Confidence)
  return _internal_confidence();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Confidence)
}

// float LocationA_x = 6;
inline void venue_map_Ultrasonic_obstacles_Type::clear_locationa_x() {
  locationa_x_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_locationa_x() const {
  return locationa_x_;
}
inline float venue_map_Ultrasonic_obstacles_Type::locationa_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationA_x)
  return _internal_locationa_x();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_locationa_x(float value) {
  
  locationa_x_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_locationa_x(float value) {
  _internal_set_locationa_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationA_x)
}

// float LocationA_y = 7;
inline void venue_map_Ultrasonic_obstacles_Type::clear_locationa_y() {
  locationa_y_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_locationa_y() const {
  return locationa_y_;
}
inline float venue_map_Ultrasonic_obstacles_Type::locationa_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationA_y)
  return _internal_locationa_y();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_locationa_y(float value) {
  
  locationa_y_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_locationa_y(float value) {
  _internal_set_locationa_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationA_y)
}

// float LocationA_z = 8;
inline void venue_map_Ultrasonic_obstacles_Type::clear_locationa_z() {
  locationa_z_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_locationa_z() const {
  return locationa_z_;
}
inline float venue_map_Ultrasonic_obstacles_Type::locationa_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationA_z)
  return _internal_locationa_z();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_locationa_z(float value) {
  
  locationa_z_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_locationa_z(float value) {
  _internal_set_locationa_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationA_z)
}

// float LocationB_x = 9;
inline void venue_map_Ultrasonic_obstacles_Type::clear_locationb_x() {
  locationb_x_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_locationb_x() const {
  return locationb_x_;
}
inline float venue_map_Ultrasonic_obstacles_Type::locationb_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationB_x)
  return _internal_locationb_x();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_locationb_x(float value) {
  
  locationb_x_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_locationb_x(float value) {
  _internal_set_locationb_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationB_x)
}

// float LocationB_y = 10;
inline void venue_map_Ultrasonic_obstacles_Type::clear_locationb_y() {
  locationb_y_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_locationb_y() const {
  return locationb_y_;
}
inline float venue_map_Ultrasonic_obstacles_Type::locationb_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationB_y)
  return _internal_locationb_y();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_locationb_y(float value) {
  
  locationb_y_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_locationb_y(float value) {
  _internal_set_locationb_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationB_y)
}

// float LocationB_z = 11;
inline void venue_map_Ultrasonic_obstacles_Type::clear_locationb_z() {
  locationb_z_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_locationb_z() const {
  return locationb_z_;
}
inline float venue_map_Ultrasonic_obstacles_Type::locationb_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationB_z)
  return _internal_locationb_z();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_locationb_z(float value) {
  
  locationb_z_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_locationb_z(float value) {
  _internal_set_locationb_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.LocationB_z)
}

// float Location_accuracy = 12;
inline void venue_map_Ultrasonic_obstacles_Type::clear_location_accuracy() {
  location_accuracy_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_location_accuracy() const {
  return location_accuracy_;
}
inline float venue_map_Ultrasonic_obstacles_Type::location_accuracy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Location_accuracy)
  return _internal_location_accuracy();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_location_accuracy(float value) {
  
  location_accuracy_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_location_accuracy(float value) {
  _internal_set_location_accuracy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Location_accuracy)
}

// int32 WayPoint_Index = 13;
inline void venue_map_Ultrasonic_obstacles_Type::clear_waypoint_index() {
  waypoint_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Ultrasonic_obstacles_Type::_internal_waypoint_index() const {
  return waypoint_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Ultrasonic_obstacles_Type::waypoint_index() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.WayPoint_Index)
  return _internal_waypoint_index();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waypoint_index_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waypoint_index(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.WayPoint_Index)
}

// float Heading = 14;
inline void venue_map_Ultrasonic_obstacles_Type::clear_heading() {
  heading_ = 0;
}
inline float venue_map_Ultrasonic_obstacles_Type::_internal_heading() const {
  return heading_;
}
inline float venue_map_Ultrasonic_obstacles_Type::heading() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Heading)
  return _internal_heading();
}
inline void venue_map_Ultrasonic_obstacles_Type::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void venue_map_Ultrasonic_obstacles_Type::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Heading)
}

// .venue_map_pb.venue_map.Updates_Type Updates = 15;
inline bool venue_map_Ultrasonic_obstacles_Type::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool venue_map_Ultrasonic_obstacles_Type::has_updates() const {
  return _internal_has_updates();
}
inline void venue_map_Ultrasonic_obstacles_Type::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Ultrasonic_obstacles_Type::_internal_updates() const {
  const ::venue_map_pb::venue_map_Updates_Type* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Updates_Type*>(
      &::venue_map_pb::_venue_map_Updates_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Ultrasonic_obstacles_Type::updates() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Updates)
  return _internal_updates();
}
inline void venue_map_Ultrasonic_obstacles_Type::unsafe_arena_set_allocated_updates(
    ::venue_map_pb::venue_map_Updates_Type* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Updates)
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Ultrasonic_obstacles_Type::release_updates() {
  auto temp = unsafe_arena_release_updates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Ultrasonic_obstacles_Type::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Updates)
  
  ::venue_map_pb::venue_map_Updates_Type* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Ultrasonic_obstacles_Type::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Ultrasonic_obstacles_Type::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Updates)
  return _internal_mutable_updates();
}
inline void venue_map_Ultrasonic_obstacles_Type::set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Ultrasonic_obstacles_Type.Updates)
}

// -------------------------------------------------------------------

// venue_map_LastPostprocessing_Type

// uint32 Maturity = 1;
inline void venue_map_LastPostprocessing_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_LastPostprocessing_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_LastPostprocessing_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.LastPostprocessing_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_LastPostprocessing_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_LastPostprocessing_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.LastPostprocessing_Type.Maturity)
}

// int64 Time = 2;
inline void venue_map_LastPostprocessing_Type::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 venue_map_LastPostprocessing_Type::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 venue_map_LastPostprocessing_Type::time() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.LastPostprocessing_Type.Time)
  return _internal_time();
}
inline void venue_map_LastPostprocessing_Type::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void venue_map_LastPostprocessing_Type::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.LastPostprocessing_Type.Time)
}

// -------------------------------------------------------------------

// venue_map_Venue_Type

// uint32 ID = 1;
inline void venue_map_Venue_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Venue_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Venue_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.ID)
  return _internal_id();
}
inline void venue_map_Venue_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Venue_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.ID)
}

// sint32 Type = 2;
inline void venue_map_Venue_Type::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Venue_Type::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Venue_Type::type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Type)
  return _internal_type();
}
inline void venue_map_Venue_Type::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void venue_map_Venue_Type::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Type)
}

// double Orgin_location_lon = 3;
inline void venue_map_Venue_Type::clear_orgin_location_lon() {
  orgin_location_lon_ = 0;
}
inline double venue_map_Venue_Type::_internal_orgin_location_lon() const {
  return orgin_location_lon_;
}
inline double venue_map_Venue_Type::orgin_location_lon() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Orgin_location_lon)
  return _internal_orgin_location_lon();
}
inline void venue_map_Venue_Type::_internal_set_orgin_location_lon(double value) {
  
  orgin_location_lon_ = value;
}
inline void venue_map_Venue_Type::set_orgin_location_lon(double value) {
  _internal_set_orgin_location_lon(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Orgin_location_lon)
}

// double Orgin_location_lat = 4;
inline void venue_map_Venue_Type::clear_orgin_location_lat() {
  orgin_location_lat_ = 0;
}
inline double venue_map_Venue_Type::_internal_orgin_location_lat() const {
  return orgin_location_lat_;
}
inline double venue_map_Venue_Type::orgin_location_lat() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Orgin_location_lat)
  return _internal_orgin_location_lat();
}
inline void venue_map_Venue_Type::_internal_set_orgin_location_lat(double value) {
  
  orgin_location_lat_ = value;
}
inline void venue_map_Venue_Type::set_orgin_location_lat(double value) {
  _internal_set_orgin_location_lat(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Orgin_location_lat)
}

// double Orgin_location_alt = 5;
inline void venue_map_Venue_Type::clear_orgin_location_alt() {
  orgin_location_alt_ = 0;
}
inline double venue_map_Venue_Type::_internal_orgin_location_alt() const {
  return orgin_location_alt_;
}
inline double venue_map_Venue_Type::orgin_location_alt() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Orgin_location_alt)
  return _internal_orgin_location_alt();
}
inline void venue_map_Venue_Type::_internal_set_orgin_location_alt(double value) {
  
  orgin_location_alt_ = value;
}
inline void venue_map_Venue_Type::set_orgin_location_alt(double value) {
  _internal_set_orgin_location_alt(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Orgin_location_alt)
}

// double Entrance_location_lon = 6;
inline void venue_map_Venue_Type::clear_entrance_location_lon() {
  entrance_location_lon_ = 0;
}
inline double venue_map_Venue_Type::_internal_entrance_location_lon() const {
  return entrance_location_lon_;
}
inline double venue_map_Venue_Type::entrance_location_lon() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Entrance_location_lon)
  return _internal_entrance_location_lon();
}
inline void venue_map_Venue_Type::_internal_set_entrance_location_lon(double value) {
  
  entrance_location_lon_ = value;
}
inline void venue_map_Venue_Type::set_entrance_location_lon(double value) {
  _internal_set_entrance_location_lon(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Entrance_location_lon)
}

// double Entrance_location_lat = 7;
inline void venue_map_Venue_Type::clear_entrance_location_lat() {
  entrance_location_lat_ = 0;
}
inline double venue_map_Venue_Type::_internal_entrance_location_lat() const {
  return entrance_location_lat_;
}
inline double venue_map_Venue_Type::entrance_location_lat() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Entrance_location_lat)
  return _internal_entrance_location_lat();
}
inline void venue_map_Venue_Type::_internal_set_entrance_location_lat(double value) {
  
  entrance_location_lat_ = value;
}
inline void venue_map_Venue_Type::set_entrance_location_lat(double value) {
  _internal_set_entrance_location_lat(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Entrance_location_lat)
}

// double Entrance_location_alt = 8;
inline void venue_map_Venue_Type::clear_entrance_location_alt() {
  entrance_location_alt_ = 0;
}
inline double venue_map_Venue_Type::_internal_entrance_location_alt() const {
  return entrance_location_alt_;
}
inline double venue_map_Venue_Type::entrance_location_alt() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Entrance_location_alt)
  return _internal_entrance_location_alt();
}
inline void venue_map_Venue_Type::_internal_set_entrance_location_alt(double value) {
  
  entrance_location_alt_ = value;
}
inline void venue_map_Venue_Type::set_entrance_location_alt(double value) {
  _internal_set_entrance_location_alt(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Entrance_location_alt)
}

// uint32 Maturity = 9;
inline void venue_map_Venue_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Venue_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Venue_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Venue_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Venue_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Venue_Type.Maturity)
}

// .venue_map_pb.venue_map.Updates_Type Updates = 10;
inline bool venue_map_Venue_Type::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool venue_map_Venue_Type::has_updates() const {
  return _internal_has_updates();
}
inline void venue_map_Venue_Type::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Venue_Type::_internal_updates() const {
  const ::venue_map_pb::venue_map_Updates_Type* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Updates_Type*>(
      &::venue_map_pb::_venue_map_Updates_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Venue_Type::updates() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.Updates)
  return _internal_updates();
}
inline void venue_map_Venue_Type::unsafe_arena_set_allocated_updates(
    ::venue_map_pb::venue_map_Updates_Type* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Venue_Type.Updates)
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Venue_Type::release_updates() {
  auto temp = unsafe_arena_release_updates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Venue_Type::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Venue_Type.Updates)
  
  ::venue_map_pb::venue_map_Updates_Type* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Venue_Type::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Venue_Type::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Venue_Type.Updates)
  return _internal_mutable_updates();
}
inline void venue_map_Venue_Type::set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Venue_Type.Updates)
}

// .venue_map_pb.venue_map.LastPostprocessing_Type LastPostprocessing = 11;
inline bool venue_map_Venue_Type::_internal_has_lastpostprocessing() const {
  return this != internal_default_instance() && lastpostprocessing_ != nullptr;
}
inline bool venue_map_Venue_Type::has_lastpostprocessing() const {
  return _internal_has_lastpostprocessing();
}
inline void venue_map_Venue_Type::clear_lastpostprocessing() {
  if (GetArena() == nullptr && lastpostprocessing_ != nullptr) {
    delete lastpostprocessing_;
  }
  lastpostprocessing_ = nullptr;
}
inline const ::venue_map_pb::venue_map_LastPostprocessing_Type& venue_map_Venue_Type::_internal_lastpostprocessing() const {
  const ::venue_map_pb::venue_map_LastPostprocessing_Type* p = lastpostprocessing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_LastPostprocessing_Type*>(
      &::venue_map_pb::_venue_map_LastPostprocessing_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_LastPostprocessing_Type& venue_map_Venue_Type::lastpostprocessing() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue_Type.LastPostprocessing)
  return _internal_lastpostprocessing();
}
inline void venue_map_Venue_Type::unsafe_arena_set_allocated_lastpostprocessing(
    ::venue_map_pb::venue_map_LastPostprocessing_Type* lastpostprocessing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastpostprocessing_);
  }
  lastpostprocessing_ = lastpostprocessing;
  if (lastpostprocessing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Venue_Type.LastPostprocessing)
}
inline ::venue_map_pb::venue_map_LastPostprocessing_Type* venue_map_Venue_Type::release_lastpostprocessing() {
  auto temp = unsafe_arena_release_lastpostprocessing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_LastPostprocessing_Type* venue_map_Venue_Type::unsafe_arena_release_lastpostprocessing() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Venue_Type.LastPostprocessing)
  
  ::venue_map_pb::venue_map_LastPostprocessing_Type* temp = lastpostprocessing_;
  lastpostprocessing_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_LastPostprocessing_Type* venue_map_Venue_Type::_internal_mutable_lastpostprocessing() {
  
  if (lastpostprocessing_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_LastPostprocessing_Type>(GetArena());
    lastpostprocessing_ = p;
  }
  return lastpostprocessing_;
}
inline ::venue_map_pb::venue_map_LastPostprocessing_Type* venue_map_Venue_Type::mutable_lastpostprocessing() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Venue_Type.LastPostprocessing)
  return _internal_mutable_lastpostprocessing();
}
inline void venue_map_Venue_Type::set_allocated_lastpostprocessing(::venue_map_pb::venue_map_LastPostprocessing_Type* lastpostprocessing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lastpostprocessing_;
  }
  if (lastpostprocessing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lastpostprocessing);
    if (message_arena != submessage_arena) {
      lastpostprocessing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastpostprocessing, submessage_arena);
    }
    
  } else {
    
  }
  lastpostprocessing_ = lastpostprocessing;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Venue_Type.LastPostprocessing)
}

// -------------------------------------------------------------------

// venue_map_Link_IDs_Type

// uint32 Link_ID = 1;
inline void venue_map_Link_IDs_Type::clear_link_id() {
  link_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Link_IDs_Type::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Link_IDs_Type::link_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Link_IDs_Type.Link_ID)
  return _internal_link_id();
}
inline void venue_map_Link_IDs_Type::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_id_ = value;
}
inline void venue_map_Link_IDs_Type::set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Link_IDs_Type.Link_ID)
}

// int32 WayPoint_index = 2;
inline void venue_map_Link_IDs_Type::clear_waypoint_index() {
  waypoint_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Link_IDs_Type::_internal_waypoint_index() const {
  return waypoint_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Link_IDs_Type::waypoint_index() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Link_IDs_Type.WayPoint_index)
  return _internal_waypoint_index();
}
inline void venue_map_Link_IDs_Type::_internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waypoint_index_ = value;
}
inline void venue_map_Link_IDs_Type::set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waypoint_index(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Link_IDs_Type.WayPoint_index)
}

// -------------------------------------------------------------------

// venue_map_Turn_directions_Type

// float TurnPoint_Location_x = 1;
inline void venue_map_Turn_directions_Type::clear_turnpoint_location_x() {
  turnpoint_location_x_ = 0;
}
inline float venue_map_Turn_directions_Type::_internal_turnpoint_location_x() const {
  return turnpoint_location_x_;
}
inline float venue_map_Turn_directions_Type::turnpoint_location_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Turn_directions_Type.TurnPoint_Location_x)
  return _internal_turnpoint_location_x();
}
inline void venue_map_Turn_directions_Type::_internal_set_turnpoint_location_x(float value) {
  
  turnpoint_location_x_ = value;
}
inline void venue_map_Turn_directions_Type::set_turnpoint_location_x(float value) {
  _internal_set_turnpoint_location_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Turn_directions_Type.TurnPoint_Location_x)
}

// float TurnPoint_Location_y = 2;
inline void venue_map_Turn_directions_Type::clear_turnpoint_location_y() {
  turnpoint_location_y_ = 0;
}
inline float venue_map_Turn_directions_Type::_internal_turnpoint_location_y() const {
  return turnpoint_location_y_;
}
inline float venue_map_Turn_directions_Type::turnpoint_location_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Turn_directions_Type.TurnPoint_Location_y)
  return _internal_turnpoint_location_y();
}
inline void venue_map_Turn_directions_Type::_internal_set_turnpoint_location_y(float value) {
  
  turnpoint_location_y_ = value;
}
inline void venue_map_Turn_directions_Type::set_turnpoint_location_y(float value) {
  _internal_set_turnpoint_location_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Turn_directions_Type.TurnPoint_Location_y)
}

// float TurnPoint_Location_z = 3;
inline void venue_map_Turn_directions_Type::clear_turnpoint_location_z() {
  turnpoint_location_z_ = 0;
}
inline float venue_map_Turn_directions_Type::_internal_turnpoint_location_z() const {
  return turnpoint_location_z_;
}
inline float venue_map_Turn_directions_Type::turnpoint_location_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Turn_directions_Type.TurnPoint_Location_z)
  return _internal_turnpoint_location_z();
}
inline void venue_map_Turn_directions_Type::_internal_set_turnpoint_location_z(float value) {
  
  turnpoint_location_z_ = value;
}
inline void venue_map_Turn_directions_Type::set_turnpoint_location_z(float value) {
  _internal_set_turnpoint_location_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Turn_directions_Type.TurnPoint_Location_z)
}

// float Direction = 4;
inline void venue_map_Turn_directions_Type::clear_direction() {
  direction_ = 0;
}
inline float venue_map_Turn_directions_Type::_internal_direction() const {
  return direction_;
}
inline float venue_map_Turn_directions_Type::direction() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Turn_directions_Type.Direction)
  return _internal_direction();
}
inline void venue_map_Turn_directions_Type::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void venue_map_Turn_directions_Type::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Turn_directions_Type.Direction)
}

// uint32 Maturity = 5;
inline void venue_map_Turn_directions_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Turn_directions_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Turn_directions_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Turn_directions_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Turn_directions_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Turn_directions_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Turn_directions_Type.Maturity)
}

// -------------------------------------------------------------------

// venue_map_Lane_lines_Type

// uint32 ID = 1;
inline void venue_map_Lane_lines_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Lane_lines_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Lane_lines_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.ID)
  return _internal_id();
}
inline void venue_map_Lane_lines_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Lane_lines_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.ID)
}

// uint32 Link_ID = 2;
inline void venue_map_Lane_lines_Type::clear_link_id() {
  link_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Lane_lines_Type::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Lane_lines_Type::link_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Link_ID)
  return _internal_link_id();
}
inline void venue_map_Lane_lines_Type::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_id_ = value;
}
inline void venue_map_Lane_lines_Type::set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.Link_ID)
}

// sint32 Type = 3;
inline void venue_map_Lane_lines_Type::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Lane_lines_Type::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Lane_lines_Type::type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Type)
  return _internal_type();
}
inline void venue_map_Lane_lines_Type::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void venue_map_Lane_lines_Type::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.Type)
}

// uint32 Maturity = 4;
inline void venue_map_Lane_lines_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Lane_lines_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Lane_lines_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Lane_lines_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Lane_lines_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.Maturity)
}

// float Confidence = 5;
inline void venue_map_Lane_lines_Type::clear_confidence() {
  confidence_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_confidence() const {
  return confidence_;
}
inline float venue_map_Lane_lines_Type::confidence() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Confidence)
  return _internal_confidence();
}
inline void venue_map_Lane_lines_Type::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void venue_map_Lane_lines_Type::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.Confidence)
}

// float LocationA_x = 6;
inline void venue_map_Lane_lines_Type::clear_locationa_x() {
  locationa_x_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_locationa_x() const {
  return locationa_x_;
}
inline float venue_map_Lane_lines_Type::locationa_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.LocationA_x)
  return _internal_locationa_x();
}
inline void venue_map_Lane_lines_Type::_internal_set_locationa_x(float value) {
  
  locationa_x_ = value;
}
inline void venue_map_Lane_lines_Type::set_locationa_x(float value) {
  _internal_set_locationa_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.LocationA_x)
}

// float LocationA_y = 7;
inline void venue_map_Lane_lines_Type::clear_locationa_y() {
  locationa_y_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_locationa_y() const {
  return locationa_y_;
}
inline float venue_map_Lane_lines_Type::locationa_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.LocationA_y)
  return _internal_locationa_y();
}
inline void venue_map_Lane_lines_Type::_internal_set_locationa_y(float value) {
  
  locationa_y_ = value;
}
inline void venue_map_Lane_lines_Type::set_locationa_y(float value) {
  _internal_set_locationa_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.LocationA_y)
}

// float LocationA_z = 8;
inline void venue_map_Lane_lines_Type::clear_locationa_z() {
  locationa_z_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_locationa_z() const {
  return locationa_z_;
}
inline float venue_map_Lane_lines_Type::locationa_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.LocationA_z)
  return _internal_locationa_z();
}
inline void venue_map_Lane_lines_Type::_internal_set_locationa_z(float value) {
  
  locationa_z_ = value;
}
inline void venue_map_Lane_lines_Type::set_locationa_z(float value) {
  _internal_set_locationa_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.LocationA_z)
}

// float LocationB_x = 9;
inline void venue_map_Lane_lines_Type::clear_locationb_x() {
  locationb_x_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_locationb_x() const {
  return locationb_x_;
}
inline float venue_map_Lane_lines_Type::locationb_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.LocationB_x)
  return _internal_locationb_x();
}
inline void venue_map_Lane_lines_Type::_internal_set_locationb_x(float value) {
  
  locationb_x_ = value;
}
inline void venue_map_Lane_lines_Type::set_locationb_x(float value) {
  _internal_set_locationb_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.LocationB_x)
}

// float LocationB_y = 10;
inline void venue_map_Lane_lines_Type::clear_locationb_y() {
  locationb_y_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_locationb_y() const {
  return locationb_y_;
}
inline float venue_map_Lane_lines_Type::locationb_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.LocationB_y)
  return _internal_locationb_y();
}
inline void venue_map_Lane_lines_Type::_internal_set_locationb_y(float value) {
  
  locationb_y_ = value;
}
inline void venue_map_Lane_lines_Type::set_locationb_y(float value) {
  _internal_set_locationb_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.LocationB_y)
}

// float LocationB_z = 11;
inline void venue_map_Lane_lines_Type::clear_locationb_z() {
  locationb_z_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_locationb_z() const {
  return locationb_z_;
}
inline float venue_map_Lane_lines_Type::locationb_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.LocationB_z)
  return _internal_locationb_z();
}
inline void venue_map_Lane_lines_Type::_internal_set_locationb_z(float value) {
  
  locationb_z_ = value;
}
inline void venue_map_Lane_lines_Type::set_locationb_z(float value) {
  _internal_set_locationb_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.LocationB_z)
}

// float Location_accuracy = 12;
inline void venue_map_Lane_lines_Type::clear_location_accuracy() {
  location_accuracy_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_location_accuracy() const {
  return location_accuracy_;
}
inline float venue_map_Lane_lines_Type::location_accuracy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Location_accuracy)
  return _internal_location_accuracy();
}
inline void venue_map_Lane_lines_Type::_internal_set_location_accuracy(float value) {
  
  location_accuracy_ = value;
}
inline void venue_map_Lane_lines_Type::set_location_accuracy(float value) {
  _internal_set_location_accuracy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.Location_accuracy)
}

// int32 WayPoint_Index = 13;
inline void venue_map_Lane_lines_Type::clear_waypoint_index() {
  waypoint_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Lane_lines_Type::_internal_waypoint_index() const {
  return waypoint_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Lane_lines_Type::waypoint_index() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.WayPoint_Index)
  return _internal_waypoint_index();
}
inline void venue_map_Lane_lines_Type::_internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waypoint_index_ = value;
}
inline void venue_map_Lane_lines_Type::set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waypoint_index(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.WayPoint_Index)
}

// float Direction = 14;
inline void venue_map_Lane_lines_Type::clear_direction() {
  direction_ = 0;
}
inline float venue_map_Lane_lines_Type::_internal_direction() const {
  return direction_;
}
inline float venue_map_Lane_lines_Type::direction() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Direction)
  return _internal_direction();
}
inline void venue_map_Lane_lines_Type::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void venue_map_Lane_lines_Type::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Lane_lines_Type.Direction)
}

// .venue_map_pb.venue_map.Updates_Type Updates = 15;
inline bool venue_map_Lane_lines_Type::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool venue_map_Lane_lines_Type::has_updates() const {
  return _internal_has_updates();
}
inline void venue_map_Lane_lines_Type::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Lane_lines_Type::_internal_updates() const {
  const ::venue_map_pb::venue_map_Updates_Type* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Updates_Type*>(
      &::venue_map_pb::_venue_map_Updates_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Lane_lines_Type::updates() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Lane_lines_Type.Updates)
  return _internal_updates();
}
inline void venue_map_Lane_lines_Type::unsafe_arena_set_allocated_updates(
    ::venue_map_pb::venue_map_Updates_Type* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Lane_lines_Type.Updates)
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Lane_lines_Type::release_updates() {
  auto temp = unsafe_arena_release_updates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Lane_lines_Type::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Lane_lines_Type.Updates)
  
  ::venue_map_pb::venue_map_Updates_Type* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Lane_lines_Type::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Lane_lines_Type::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Lane_lines_Type.Updates)
  return _internal_mutable_updates();
}
inline void venue_map_Lane_lines_Type::set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Lane_lines_Type.Updates)
}

// -------------------------------------------------------------------

// venue_map_Links_Type

// repeated .venue_map_pb.venue_map.Waypoints_Type Waypoints = 1;
inline int venue_map_Links_Type::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int venue_map_Links_Type::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void venue_map_Links_Type::clear_waypoints() {
  waypoints_.Clear();
}
inline ::venue_map_pb::venue_map_Waypoints_Type* venue_map_Links_Type::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Links_Type.Waypoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Waypoints_Type >*
venue_map_Links_Type::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Links_Type.Waypoints)
  return &waypoints_;
}
inline const ::venue_map_pb::venue_map_Waypoints_Type& venue_map_Links_Type::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline const ::venue_map_pb::venue_map_Waypoints_Type& venue_map_Links_Type::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Waypoints)
  return _internal_waypoints(index);
}
inline ::venue_map_pb::venue_map_Waypoints_Type* venue_map_Links_Type::_internal_add_waypoints() {
  return waypoints_.Add();
}
inline ::venue_map_pb::venue_map_Waypoints_Type* venue_map_Links_Type::add_waypoints() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Links_Type.Waypoints)
  return _internal_add_waypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Waypoints_Type >&
venue_map_Links_Type::waypoints() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Links_Type.Waypoints)
  return waypoints_;
}

// uint32 Joint_IDs_1 = 2;
inline void venue_map_Links_Type::clear_joint_ids_1() {
  joint_ids_1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::_internal_joint_ids_1() const {
  return joint_ids_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::joint_ids_1() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Joint_IDs_1)
  return _internal_joint_ids_1();
}
inline void venue_map_Links_Type::_internal_set_joint_ids_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  joint_ids_1_ = value;
}
inline void venue_map_Links_Type::set_joint_ids_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_joint_ids_1(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.Joint_IDs_1)
}

// uint32 Joint_IDs_2 = 3;
inline void venue_map_Links_Type::clear_joint_ids_2() {
  joint_ids_2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::_internal_joint_ids_2() const {
  return joint_ids_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::joint_ids_2() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Joint_IDs_2)
  return _internal_joint_ids_2();
}
inline void venue_map_Links_Type::_internal_set_joint_ids_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  joint_ids_2_ = value;
}
inline void venue_map_Links_Type::set_joint_ids_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_joint_ids_2(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.Joint_IDs_2)
}

// repeated uint32 Landmark_IDs = 4;
inline int venue_map_Links_Type::_internal_landmark_ids_size() const {
  return landmark_ids_.size();
}
inline int venue_map_Links_Type::landmark_ids_size() const {
  return _internal_landmark_ids_size();
}
inline void venue_map_Links_Type::clear_landmark_ids() {
  landmark_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::_internal_landmark_ids(int index) const {
  return landmark_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::landmark_ids(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Landmark_IDs)
  return _internal_landmark_ids(index);
}
inline void venue_map_Links_Type::set_landmark_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  landmark_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.Landmark_IDs)
}
inline void venue_map_Links_Type::_internal_add_landmark_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  landmark_ids_.Add(value);
}
inline void venue_map_Links_Type::add_landmark_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_landmark_ids(value);
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Links_Type.Landmark_IDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
venue_map_Links_Type::_internal_landmark_ids() const {
  return landmark_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
venue_map_Links_Type::landmark_ids() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Links_Type.Landmark_IDs)
  return _internal_landmark_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
venue_map_Links_Type::_internal_mutable_landmark_ids() {
  return &landmark_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
venue_map_Links_Type::mutable_landmark_ids() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Links_Type.Landmark_IDs)
  return _internal_mutable_landmark_ids();
}

// repeated uint32 Slot_IDs = 5;
inline int venue_map_Links_Type::_internal_slot_ids_size() const {
  return slot_ids_.size();
}
inline int venue_map_Links_Type::slot_ids_size() const {
  return _internal_slot_ids_size();
}
inline void venue_map_Links_Type::clear_slot_ids() {
  slot_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::_internal_slot_ids(int index) const {
  return slot_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::slot_ids(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Slot_IDs)
  return _internal_slot_ids(index);
}
inline void venue_map_Links_Type::set_slot_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  slot_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.Slot_IDs)
}
inline void venue_map_Links_Type::_internal_add_slot_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  slot_ids_.Add(value);
}
inline void venue_map_Links_Type::add_slot_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_slot_ids(value);
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Links_Type.Slot_IDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
venue_map_Links_Type::_internal_slot_ids() const {
  return slot_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
venue_map_Links_Type::slot_ids() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Links_Type.Slot_IDs)
  return _internal_slot_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
venue_map_Links_Type::_internal_mutable_slot_ids() {
  return &slot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
venue_map_Links_Type::mutable_slot_ids() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Links_Type.Slot_IDs)
  return _internal_mutable_slot_ids();
}

// repeated uint32 Obstacle_IDs = 6;
inline int venue_map_Links_Type::_internal_obstacle_ids_size() const {
  return obstacle_ids_.size();
}
inline int venue_map_Links_Type::obstacle_ids_size() const {
  return _internal_obstacle_ids_size();
}
inline void venue_map_Links_Type::clear_obstacle_ids() {
  obstacle_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::_internal_obstacle_ids(int index) const {
  return obstacle_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::obstacle_ids(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Obstacle_IDs)
  return _internal_obstacle_ids(index);
}
inline void venue_map_Links_Type::set_obstacle_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  obstacle_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.Obstacle_IDs)
}
inline void venue_map_Links_Type::_internal_add_obstacle_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  obstacle_ids_.Add(value);
}
inline void venue_map_Links_Type::add_obstacle_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_obstacle_ids(value);
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Links_Type.Obstacle_IDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
venue_map_Links_Type::_internal_obstacle_ids() const {
  return obstacle_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
venue_map_Links_Type::obstacle_ids() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Links_Type.Obstacle_IDs)
  return _internal_obstacle_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
venue_map_Links_Type::_internal_mutable_obstacle_ids() {
  return &obstacle_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
venue_map_Links_Type::mutable_obstacle_ids() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Links_Type.Obstacle_IDs)
  return _internal_mutable_obstacle_ids();
}

// uint32 ID = 7;
inline void venue_map_Links_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Links_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.ID)
  return _internal_id();
}
inline void venue_map_Links_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Links_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.ID)
}

// float Direction = 8;
inline void venue_map_Links_Type::clear_direction() {
  direction_ = 0;
}
inline float venue_map_Links_Type::_internal_direction() const {
  return direction_;
}
inline float venue_map_Links_Type::direction() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.Direction)
  return _internal_direction();
}
inline void venue_map_Links_Type::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void venue_map_Links_Type::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.Direction)
}

// bool IsValid = 9;
inline void venue_map_Links_Type::clear_isvalid() {
  isvalid_ = false;
}
inline bool venue_map_Links_Type::_internal_isvalid() const {
  return isvalid_;
}
inline bool venue_map_Links_Type::isvalid() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.IsValid)
  return _internal_isvalid();
}
inline void venue_map_Links_Type::_internal_set_isvalid(bool value) {
  
  isvalid_ = value;
}
inline void venue_map_Links_Type::set_isvalid(bool value) {
  _internal_set_isvalid(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.IsValid)
}

// repeated float floorlevel = 10;
inline int venue_map_Links_Type::_internal_floorlevel_size() const {
  return floorlevel_.size();
}
inline int venue_map_Links_Type::floorlevel_size() const {
  return _internal_floorlevel_size();
}
inline void venue_map_Links_Type::clear_floorlevel() {
  floorlevel_.Clear();
}
inline float venue_map_Links_Type::_internal_floorlevel(int index) const {
  return floorlevel_.Get(index);
}
inline float venue_map_Links_Type::floorlevel(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Links_Type.floorlevel)
  return _internal_floorlevel(index);
}
inline void venue_map_Links_Type::set_floorlevel(int index, float value) {
  floorlevel_.Set(index, value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Links_Type.floorlevel)
}
inline void venue_map_Links_Type::_internal_add_floorlevel(float value) {
  floorlevel_.Add(value);
}
inline void venue_map_Links_Type::add_floorlevel(float value) {
  _internal_add_floorlevel(value);
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Links_Type.floorlevel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
venue_map_Links_Type::_internal_floorlevel() const {
  return floorlevel_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
venue_map_Links_Type::floorlevel() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Links_Type.floorlevel)
  return _internal_floorlevel();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
venue_map_Links_Type::_internal_mutable_floorlevel() {
  return &floorlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
venue_map_Links_Type::mutable_floorlevel() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Links_Type.floorlevel)
  return _internal_mutable_floorlevel();
}

// -------------------------------------------------------------------

// venue_map_Joints_Type

// uint32 ID = 1;
inline void venue_map_Joints_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.ID)
  return _internal_id();
}
inline void venue_map_Joints_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Joints_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.ID)
}

// repeated .venue_map_pb.venue_map.Link_IDs_Type vLink_IDs = 2;
inline int venue_map_Joints_Type::_internal_vlink_ids_size() const {
  return vlink_ids_.size();
}
inline int venue_map_Joints_Type::vlink_ids_size() const {
  return _internal_vlink_ids_size();
}
inline void venue_map_Joints_Type::clear_vlink_ids() {
  vlink_ids_.Clear();
}
inline ::venue_map_pb::venue_map_Link_IDs_Type* venue_map_Joints_Type::mutable_vlink_ids(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Joints_Type.vLink_IDs)
  return vlink_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Link_IDs_Type >*
venue_map_Joints_Type::mutable_vlink_ids() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Joints_Type.vLink_IDs)
  return &vlink_ids_;
}
inline const ::venue_map_pb::venue_map_Link_IDs_Type& venue_map_Joints_Type::_internal_vlink_ids(int index) const {
  return vlink_ids_.Get(index);
}
inline const ::venue_map_pb::venue_map_Link_IDs_Type& venue_map_Joints_Type::vlink_ids(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.vLink_IDs)
  return _internal_vlink_ids(index);
}
inline ::venue_map_pb::venue_map_Link_IDs_Type* venue_map_Joints_Type::_internal_add_vlink_ids() {
  return vlink_ids_.Add();
}
inline ::venue_map_pb::venue_map_Link_IDs_Type* venue_map_Joints_Type::add_vlink_ids() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Joints_Type.vLink_IDs)
  return _internal_add_vlink_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Link_IDs_Type >&
venue_map_Joints_Type::vlink_ids() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Joints_Type.vLink_IDs)
  return vlink_ids_;
}

// uint32 Maturity = 3;
inline void venue_map_Joints_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Joints_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Joints_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Maturity)
}

// float Confidence = 4;
inline void venue_map_Joints_Type::clear_confidence() {
  confidence_ = 0;
}
inline float venue_map_Joints_Type::_internal_confidence() const {
  return confidence_;
}
inline float venue_map_Joints_Type::confidence() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Confidence)
  return _internal_confidence();
}
inline void venue_map_Joints_Type::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void venue_map_Joints_Type::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Confidence)
}

// float Location_x = 5;
inline void venue_map_Joints_Type::clear_location_x() {
  location_x_ = 0;
}
inline float venue_map_Joints_Type::_internal_location_x() const {
  return location_x_;
}
inline float venue_map_Joints_Type::location_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Location_x)
  return _internal_location_x();
}
inline void venue_map_Joints_Type::_internal_set_location_x(float value) {
  
  location_x_ = value;
}
inline void venue_map_Joints_Type::set_location_x(float value) {
  _internal_set_location_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Location_x)
}

// float Location_y = 6;
inline void venue_map_Joints_Type::clear_location_y() {
  location_y_ = 0;
}
inline float venue_map_Joints_Type::_internal_location_y() const {
  return location_y_;
}
inline float venue_map_Joints_Type::location_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Location_y)
  return _internal_location_y();
}
inline void venue_map_Joints_Type::_internal_set_location_y(float value) {
  
  location_y_ = value;
}
inline void venue_map_Joints_Type::set_location_y(float value) {
  _internal_set_location_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Location_y)
}

// float Location_z = 7;
inline void venue_map_Joints_Type::clear_location_z() {
  location_z_ = 0;
}
inline float venue_map_Joints_Type::_internal_location_z() const {
  return location_z_;
}
inline float venue_map_Joints_Type::location_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Location_z)
  return _internal_location_z();
}
inline void venue_map_Joints_Type::_internal_set_location_z(float value) {
  
  location_z_ = value;
}
inline void venue_map_Joints_Type::set_location_z(float value) {
  _internal_set_location_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Location_z)
}

// float Location_accuracy = 8;
inline void venue_map_Joints_Type::clear_location_accuracy() {
  location_accuracy_ = 0;
}
inline float venue_map_Joints_Type::_internal_location_accuracy() const {
  return location_accuracy_;
}
inline float venue_map_Joints_Type::location_accuracy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Location_accuracy)
  return _internal_location_accuracy();
}
inline void venue_map_Joints_Type::_internal_set_location_accuracy(float value) {
  
  location_accuracy_ = value;
}
inline void venue_map_Joints_Type::set_location_accuracy(float value) {
  _internal_set_location_accuracy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Location_accuracy)
}

// float Heading = 9;
inline void venue_map_Joints_Type::clear_heading() {
  heading_ = 0;
}
inline float venue_map_Joints_Type::_internal_heading() const {
  return heading_;
}
inline float venue_map_Joints_Type::heading() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Heading)
  return _internal_heading();
}
inline void venue_map_Joints_Type::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void venue_map_Joints_Type::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.Heading)
}

// .venue_map_pb.venue_map.Turn_directions_Type Turn_directions = 10;
inline bool venue_map_Joints_Type::_internal_has_turn_directions() const {
  return this != internal_default_instance() && turn_directions_ != nullptr;
}
inline bool venue_map_Joints_Type::has_turn_directions() const {
  return _internal_has_turn_directions();
}
inline void venue_map_Joints_Type::clear_turn_directions() {
  if (GetArena() == nullptr && turn_directions_ != nullptr) {
    delete turn_directions_;
  }
  turn_directions_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Turn_directions_Type& venue_map_Joints_Type::_internal_turn_directions() const {
  const ::venue_map_pb::venue_map_Turn_directions_Type* p = turn_directions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Turn_directions_Type*>(
      &::venue_map_pb::_venue_map_Turn_directions_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Turn_directions_Type& venue_map_Joints_Type::turn_directions() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Turn_directions)
  return _internal_turn_directions();
}
inline void venue_map_Joints_Type::unsafe_arena_set_allocated_turn_directions(
    ::venue_map_pb::venue_map_Turn_directions_Type* turn_directions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(turn_directions_);
  }
  turn_directions_ = turn_directions;
  if (turn_directions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Joints_Type.Turn_directions)
}
inline ::venue_map_pb::venue_map_Turn_directions_Type* venue_map_Joints_Type::release_turn_directions() {
  auto temp = unsafe_arena_release_turn_directions();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Turn_directions_Type* venue_map_Joints_Type::unsafe_arena_release_turn_directions() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Joints_Type.Turn_directions)
  
  ::venue_map_pb::venue_map_Turn_directions_Type* temp = turn_directions_;
  turn_directions_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Turn_directions_Type* venue_map_Joints_Type::_internal_mutable_turn_directions() {
  
  if (turn_directions_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Turn_directions_Type>(GetArena());
    turn_directions_ = p;
  }
  return turn_directions_;
}
inline ::venue_map_pb::venue_map_Turn_directions_Type* venue_map_Joints_Type::mutable_turn_directions() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Joints_Type.Turn_directions)
  return _internal_mutable_turn_directions();
}
inline void venue_map_Joints_Type::set_allocated_turn_directions(::venue_map_pb::venue_map_Turn_directions_Type* turn_directions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete turn_directions_;
  }
  if (turn_directions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(turn_directions);
    if (message_arena != submessage_arena) {
      turn_directions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turn_directions, submessage_arena);
    }
    
  } else {
    
  }
  turn_directions_ = turn_directions;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Joints_Type.Turn_directions)
}

// .venue_map_pb.venue_map.Updates_Type Updates = 11;
inline bool venue_map_Joints_Type::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool venue_map_Joints_Type::has_updates() const {
  return _internal_has_updates();
}
inline void venue_map_Joints_Type::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Joints_Type::_internal_updates() const {
  const ::venue_map_pb::venue_map_Updates_Type* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Updates_Type*>(
      &::venue_map_pb::_venue_map_Updates_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Joints_Type::updates() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.Updates)
  return _internal_updates();
}
inline void venue_map_Joints_Type::unsafe_arena_set_allocated_updates(
    ::venue_map_pb::venue_map_Updates_Type* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Joints_Type.Updates)
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Joints_Type::release_updates() {
  auto temp = unsafe_arena_release_updates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Joints_Type::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Joints_Type.Updates)
  
  ::venue_map_pb::venue_map_Updates_Type* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Joints_Type::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Joints_Type::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Joints_Type.Updates)
  return _internal_mutable_updates();
}
inline void venue_map_Joints_Type::set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Joints_Type.Updates)
}

// uint32 IsUpdated = 12;
inline void venue_map_Joints_Type::clear_isupdated() {
  isupdated_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::_internal_isupdated() const {
  return isupdated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::isupdated() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.IsUpdated)
  return _internal_isupdated();
}
inline void venue_map_Joints_Type::_internal_set_isupdated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  isupdated_ = value;
}
inline void venue_map_Joints_Type::set_isupdated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_isupdated(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.IsUpdated)
}

// uint32 BreakType = 13;
inline void venue_map_Joints_Type::clear_breaktype() {
  breaktype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::_internal_breaktype() const {
  return breaktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Joints_Type::breaktype() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Joints_Type.BreakType)
  return _internal_breaktype();
}
inline void venue_map_Joints_Type::_internal_set_breaktype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  breaktype_ = value;
}
inline void venue_map_Joints_Type::set_breaktype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_breaktype(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Joints_Type.BreakType)
}

// -------------------------------------------------------------------

// venue_map_Landmarks_Type

// uint32 ID = 1;
inline void venue_map_Landmarks_Type::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Landmarks_Type::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Landmarks_Type::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.ID)
  return _internal_id();
}
inline void venue_map_Landmarks_Type::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void venue_map_Landmarks_Type::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.ID)
}

// uint32 Link_ID = 2;
inline void venue_map_Landmarks_Type::clear_link_id() {
  link_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Landmarks_Type::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Landmarks_Type::link_id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Link_ID)
  return _internal_link_id();
}
inline void venue_map_Landmarks_Type::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_id_ = value;
}
inline void venue_map_Landmarks_Type::set_link_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Link_ID)
}

// sint32 Type = 3;
inline void venue_map_Landmarks_Type::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Landmarks_Type::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Landmarks_Type::type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Type)
  return _internal_type();
}
inline void venue_map_Landmarks_Type::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void venue_map_Landmarks_Type::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Type)
}

// uint32 Maturity = 4;
inline void venue_map_Landmarks_Type::clear_maturity() {
  maturity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Landmarks_Type::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 venue_map_Landmarks_Type::maturity() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Maturity)
  return _internal_maturity();
}
inline void venue_map_Landmarks_Type::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_ = value;
}
inline void venue_map_Landmarks_Type::set_maturity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Maturity)
}

// float Confidence = 5;
inline void venue_map_Landmarks_Type::clear_confidence() {
  confidence_ = 0;
}
inline float venue_map_Landmarks_Type::_internal_confidence() const {
  return confidence_;
}
inline float venue_map_Landmarks_Type::confidence() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Confidence)
  return _internal_confidence();
}
inline void venue_map_Landmarks_Type::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void venue_map_Landmarks_Type::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Confidence)
}

// float Location_x = 6;
inline void venue_map_Landmarks_Type::clear_location_x() {
  location_x_ = 0;
}
inline float venue_map_Landmarks_Type::_internal_location_x() const {
  return location_x_;
}
inline float venue_map_Landmarks_Type::location_x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Location_x)
  return _internal_location_x();
}
inline void venue_map_Landmarks_Type::_internal_set_location_x(float value) {
  
  location_x_ = value;
}
inline void venue_map_Landmarks_Type::set_location_x(float value) {
  _internal_set_location_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Location_x)
}

// float Location_y = 7;
inline void venue_map_Landmarks_Type::clear_location_y() {
  location_y_ = 0;
}
inline float venue_map_Landmarks_Type::_internal_location_y() const {
  return location_y_;
}
inline float venue_map_Landmarks_Type::location_y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Location_y)
  return _internal_location_y();
}
inline void venue_map_Landmarks_Type::_internal_set_location_y(float value) {
  
  location_y_ = value;
}
inline void venue_map_Landmarks_Type::set_location_y(float value) {
  _internal_set_location_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Location_y)
}

// float Location_z = 8;
inline void venue_map_Landmarks_Type::clear_location_z() {
  location_z_ = 0;
}
inline float venue_map_Landmarks_Type::_internal_location_z() const {
  return location_z_;
}
inline float venue_map_Landmarks_Type::location_z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Location_z)
  return _internal_location_z();
}
inline void venue_map_Landmarks_Type::_internal_set_location_z(float value) {
  
  location_z_ = value;
}
inline void venue_map_Landmarks_Type::set_location_z(float value) {
  _internal_set_location_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Location_z)
}

// float Location_accuracy = 9;
inline void venue_map_Landmarks_Type::clear_location_accuracy() {
  location_accuracy_ = 0;
}
inline float venue_map_Landmarks_Type::_internal_location_accuracy() const {
  return location_accuracy_;
}
inline float venue_map_Landmarks_Type::location_accuracy() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Location_accuracy)
  return _internal_location_accuracy();
}
inline void venue_map_Landmarks_Type::_internal_set_location_accuracy(float value) {
  
  location_accuracy_ = value;
}
inline void venue_map_Landmarks_Type::set_location_accuracy(float value) {
  _internal_set_location_accuracy(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Location_accuracy)
}

// sint32 Direction_type = 10;
inline void venue_map_Landmarks_Type::clear_direction_type() {
  direction_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Landmarks_Type::_internal_direction_type() const {
  return direction_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Landmarks_Type::direction_type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Direction_type)
  return _internal_direction_type();
}
inline void venue_map_Landmarks_Type::_internal_set_direction_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_type_ = value;
}
inline void venue_map_Landmarks_Type::set_direction_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Direction_type)
}

// int32 WayPoint_Index = 11;
inline void venue_map_Landmarks_Type::clear_waypoint_index() {
  waypoint_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Landmarks_Type::_internal_waypoint_index() const {
  return waypoint_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Landmarks_Type::waypoint_index() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.WayPoint_Index)
  return _internal_waypoint_index();
}
inline void venue_map_Landmarks_Type::_internal_set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waypoint_index_ = value;
}
inline void venue_map_Landmarks_Type::set_waypoint_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waypoint_index(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.WayPoint_Index)
}

// float Heading = 12;
inline void venue_map_Landmarks_Type::clear_heading() {
  heading_ = 0;
}
inline float venue_map_Landmarks_Type::_internal_heading() const {
  return heading_;
}
inline float venue_map_Landmarks_Type::heading() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Heading)
  return _internal_heading();
}
inline void venue_map_Landmarks_Type::_internal_set_heading(float value) {
  
  heading_ = value;
}
inline void venue_map_Landmarks_Type::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Landmarks_Type.Heading)
}

// .venue_map_pb.venue_map.Updates_Type Updates = 13;
inline bool venue_map_Landmarks_Type::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool venue_map_Landmarks_Type::has_updates() const {
  return _internal_has_updates();
}
inline void venue_map_Landmarks_Type::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Landmarks_Type::_internal_updates() const {
  const ::venue_map_pb::venue_map_Updates_Type* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Updates_Type*>(
      &::venue_map_pb::_venue_map_Updates_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Updates_Type& venue_map_Landmarks_Type::updates() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.Updates)
  return _internal_updates();
}
inline void venue_map_Landmarks_Type::unsafe_arena_set_allocated_updates(
    ::venue_map_pb::venue_map_Updates_Type* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Landmarks_Type.Updates)
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Landmarks_Type::release_updates() {
  auto temp = unsafe_arena_release_updates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Landmarks_Type::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Landmarks_Type.Updates)
  
  ::venue_map_pb::venue_map_Updates_Type* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Landmarks_Type::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Updates_Type>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::venue_map_pb::venue_map_Updates_Type* venue_map_Landmarks_Type::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Landmarks_Type.Updates)
  return _internal_mutable_updates();
}
inline void venue_map_Landmarks_Type::set_allocated_updates(::venue_map_pb::venue_map_Updates_Type* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Landmarks_Type.Updates)
}

// .SRprotobuf.FloorLevel floor_level = 14;
inline bool venue_map_Landmarks_Type::_internal_has_floor_level() const {
  return this != internal_default_instance() && floor_level_ != nullptr;
}
inline bool venue_map_Landmarks_Type::has_floor_level() const {
  return _internal_has_floor_level();
}
inline const ::SRprotobuf::FloorLevel& venue_map_Landmarks_Type::_internal_floor_level() const {
  const ::SRprotobuf::FloorLevel* p = floor_level_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::FloorLevel*>(
      &::SRprotobuf::_FloorLevel_default_instance_);
}
inline const ::SRprotobuf::FloorLevel& venue_map_Landmarks_Type::floor_level() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.floor_level)
  return _internal_floor_level();
}
inline void venue_map_Landmarks_Type::unsafe_arena_set_allocated_floor_level(
    ::SRprotobuf::FloorLevel* floor_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  floor_level_ = floor_level;
  if (floor_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Landmarks_Type.floor_level)
}
inline ::SRprotobuf::FloorLevel* venue_map_Landmarks_Type::release_floor_level() {
  auto temp = unsafe_arena_release_floor_level();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::FloorLevel* venue_map_Landmarks_Type::unsafe_arena_release_floor_level() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Landmarks_Type.floor_level)
  
  ::SRprotobuf::FloorLevel* temp = floor_level_;
  floor_level_ = nullptr;
  return temp;
}
inline ::SRprotobuf::FloorLevel* venue_map_Landmarks_Type::_internal_mutable_floor_level() {
  
  if (floor_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::FloorLevel>(GetArena());
    floor_level_ = p;
  }
  return floor_level_;
}
inline ::SRprotobuf::FloorLevel* venue_map_Landmarks_Type::mutable_floor_level() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Landmarks_Type.floor_level)
  return _internal_mutable_floor_level();
}
inline void venue_map_Landmarks_Type::set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  if (floor_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level)->GetArena();
    if (message_arena != submessage_arena) {
      floor_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floor_level, submessage_arena);
    }
    
  } else {
    
  }
  floor_level_ = floor_level;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Landmarks_Type.floor_level)
}

// .venue_map_pb.venue_map.Location_type locationA = 15;
inline bool venue_map_Landmarks_Type::_internal_has_locationa() const {
  return this != internal_default_instance() && locationa_ != nullptr;
}
inline bool venue_map_Landmarks_Type::has_locationa() const {
  return _internal_has_locationa();
}
inline void venue_map_Landmarks_Type::clear_locationa() {
  if (GetArena() == nullptr && locationa_ != nullptr) {
    delete locationa_;
  }
  locationa_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Location_type& venue_map_Landmarks_Type::_internal_locationa() const {
  const ::venue_map_pb::venue_map_Location_type* p = locationa_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Location_type*>(
      &::venue_map_pb::_venue_map_Location_type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Location_type& venue_map_Landmarks_Type::locationa() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.locationA)
  return _internal_locationa();
}
inline void venue_map_Landmarks_Type::unsafe_arena_set_allocated_locationa(
    ::venue_map_pb::venue_map_Location_type* locationa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationa_);
  }
  locationa_ = locationa;
  if (locationa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Landmarks_Type.locationA)
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::release_locationa() {
  auto temp = unsafe_arena_release_locationa();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::unsafe_arena_release_locationa() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Landmarks_Type.locationA)
  
  ::venue_map_pb::venue_map_Location_type* temp = locationa_;
  locationa_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::_internal_mutable_locationa() {
  
  if (locationa_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Location_type>(GetArena());
    locationa_ = p;
  }
  return locationa_;
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::mutable_locationa() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Landmarks_Type.locationA)
  return _internal_mutable_locationa();
}
inline void venue_map_Landmarks_Type::set_allocated_locationa(::venue_map_pb::venue_map_Location_type* locationa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locationa_;
  }
  if (locationa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locationa);
    if (message_arena != submessage_arena) {
      locationa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationa, submessage_arena);
    }
    
  } else {
    
  }
  locationa_ = locationa;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Landmarks_Type.locationA)
}

// .venue_map_pb.venue_map.Location_type locationB = 16;
inline bool venue_map_Landmarks_Type::_internal_has_locationb() const {
  return this != internal_default_instance() && locationb_ != nullptr;
}
inline bool venue_map_Landmarks_Type::has_locationb() const {
  return _internal_has_locationb();
}
inline void venue_map_Landmarks_Type::clear_locationb() {
  if (GetArena() == nullptr && locationb_ != nullptr) {
    delete locationb_;
  }
  locationb_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Location_type& venue_map_Landmarks_Type::_internal_locationb() const {
  const ::venue_map_pb::venue_map_Location_type* p = locationb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Location_type*>(
      &::venue_map_pb::_venue_map_Location_type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Location_type& venue_map_Landmarks_Type::locationb() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Landmarks_Type.locationB)
  return _internal_locationb();
}
inline void venue_map_Landmarks_Type::unsafe_arena_set_allocated_locationb(
    ::venue_map_pb::venue_map_Location_type* locationb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationb_);
  }
  locationb_ = locationb;
  if (locationb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Landmarks_Type.locationB)
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::release_locationb() {
  auto temp = unsafe_arena_release_locationb();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::unsafe_arena_release_locationb() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Landmarks_Type.locationB)
  
  ::venue_map_pb::venue_map_Location_type* temp = locationb_;
  locationb_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::_internal_mutable_locationb() {
  
  if (locationb_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Location_type>(GetArena());
    locationb_ = p;
  }
  return locationb_;
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Landmarks_Type::mutable_locationb() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Landmarks_Type.locationB)
  return _internal_mutable_locationb();
}
inline void venue_map_Landmarks_Type::set_allocated_locationb(::venue_map_pb::venue_map_Location_type* locationb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locationb_;
  }
  if (locationb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locationb);
    if (message_arena != submessage_arena) {
      locationb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationb, submessage_arena);
    }
    
  } else {
    
  }
  locationb_ = locationb;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Landmarks_Type.locationB)
}

// -------------------------------------------------------------------

// venue_map_Location_type

// float x = 1;
inline void venue_map_Location_type::clear_x() {
  x_ = 0;
}
inline float venue_map_Location_type::_internal_x() const {
  return x_;
}
inline float venue_map_Location_type::x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Location_type.x)
  return _internal_x();
}
inline void venue_map_Location_type::_internal_set_x(float value) {
  
  x_ = value;
}
inline void venue_map_Location_type::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Location_type.x)
}

// float y = 2;
inline void venue_map_Location_type::clear_y() {
  y_ = 0;
}
inline float venue_map_Location_type::_internal_y() const {
  return y_;
}
inline float venue_map_Location_type::y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Location_type.y)
  return _internal_y();
}
inline void venue_map_Location_type::_internal_set_y(float value) {
  
  y_ = value;
}
inline void venue_map_Location_type::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Location_type.y)
}

// float z = 3;
inline void venue_map_Location_type::clear_z() {
  z_ = 0;
}
inline float venue_map_Location_type::_internal_z() const {
  return z_;
}
inline float venue_map_Location_type::z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Location_type.z)
  return _internal_z();
}
inline void venue_map_Location_type::_internal_set_z(float value) {
  
  z_ = value;
}
inline void venue_map_Location_type::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Location_type.z)
}

// -------------------------------------------------------------------

// venue_map_Pointwithid

// int32 id = 1;
inline void venue_map_Pointwithid::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Pointwithid::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Pointwithid::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Pointwithid.id)
  return _internal_id();
}
inline void venue_map_Pointwithid::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void venue_map_Pointwithid::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Pointwithid.id)
}

// float x = 2;
inline void venue_map_Pointwithid::clear_x() {
  x_ = 0;
}
inline float venue_map_Pointwithid::_internal_x() const {
  return x_;
}
inline float venue_map_Pointwithid::x() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Pointwithid.x)
  return _internal_x();
}
inline void venue_map_Pointwithid::_internal_set_x(float value) {
  
  x_ = value;
}
inline void venue_map_Pointwithid::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Pointwithid.x)
}

// float y = 3;
inline void venue_map_Pointwithid::clear_y() {
  y_ = 0;
}
inline float venue_map_Pointwithid::_internal_y() const {
  return y_;
}
inline float venue_map_Pointwithid::y() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Pointwithid.y)
  return _internal_y();
}
inline void venue_map_Pointwithid::_internal_set_y(float value) {
  
  y_ = value;
}
inline void venue_map_Pointwithid::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Pointwithid.y)
}

// float z = 4;
inline void venue_map_Pointwithid::clear_z() {
  z_ = 0;
}
inline float venue_map_Pointwithid::_internal_z() const {
  return z_;
}
inline float venue_map_Pointwithid::z() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Pointwithid.z)
  return _internal_z();
}
inline void venue_map_Pointwithid::_internal_set_z(float value) {
  
  z_ = value;
}
inline void venue_map_Pointwithid::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Pointwithid.z)
}

// -------------------------------------------------------------------

// venue_map_Edge

// int32 id = 1;
inline void venue_map_Edge::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Edge.id)
  return _internal_id();
}
inline void venue_map_Edge::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void venue_map_Edge::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Edge.id)
}

// int32 type = 2;
inline void venue_map_Edge::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Edge.type)
  return _internal_type();
}
inline void venue_map_Edge::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void venue_map_Edge::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Edge.type)
}

// int32 subtype = 3;
inline void venue_map_Edge::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::subtype() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Edge.subtype)
  return _internal_subtype();
}
inline void venue_map_Edge::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void venue_map_Edge::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Edge.subtype)
}

// float direction = 4;
inline void venue_map_Edge::clear_direction() {
  direction_ = 0;
}
inline float venue_map_Edge::_internal_direction() const {
  return direction_;
}
inline float venue_map_Edge::direction() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Edge.direction)
  return _internal_direction();
}
inline void venue_map_Edge::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void venue_map_Edge::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Edge.direction)
}

// repeated int32 pts = 5;
inline int venue_map_Edge::_internal_pts_size() const {
  return pts_.size();
}
inline int venue_map_Edge::pts_size() const {
  return _internal_pts_size();
}
inline void venue_map_Edge::clear_pts() {
  pts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::pts(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Edge.pts)
  return _internal_pts(index);
}
inline void venue_map_Edge::set_pts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pts_.Set(index, value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Edge.pts)
}
inline void venue_map_Edge::_internal_add_pts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pts_.Add(value);
}
inline void venue_map_Edge::add_pts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pts(value);
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Edge.pts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
venue_map_Edge::_internal_pts() const {
  return pts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
venue_map_Edge::pts() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Edge.pts)
  return _internal_pts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
venue_map_Edge::_internal_mutable_pts() {
  return &pts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
venue_map_Edge::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Edge.pts)
  return _internal_mutable_pts();
}

// int32 linkID = 6;
inline void venue_map_Edge::clear_linkid() {
  linkid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::_internal_linkid() const {
  return linkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Edge::linkid() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Edge.linkID)
  return _internal_linkid();
}
inline void venue_map_Edge::_internal_set_linkid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  linkid_ = value;
}
inline void venue_map_Edge::set_linkid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_linkid(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Edge.linkID)
}

// -------------------------------------------------------------------

// venue_map_Connection

// int32 edge1 = 1;
inline void venue_map_Connection::clear_edge1() {
  edge1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Connection::_internal_edge1() const {
  return edge1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Connection::edge1() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Connection.edge1)
  return _internal_edge1();
}
inline void venue_map_Connection::_internal_set_edge1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  edge1_ = value;
}
inline void venue_map_Connection::set_edge1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_edge1(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Connection.edge1)
}

// int32 edge2 = 2;
inline void venue_map_Connection::clear_edge2() {
  edge2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Connection::_internal_edge2() const {
  return edge2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Connection::edge2() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Connection.edge2)
  return _internal_edge2();
}
inline void venue_map_Connection::_internal_set_edge2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  edge2_ = value;
}
inline void venue_map_Connection::set_edge2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_edge2(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Connection.edge2)
}

// int32 type = 3;
inline void venue_map_Connection::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Connection::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Connection::type() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Connection.type)
  return _internal_type();
}
inline void venue_map_Connection::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void venue_map_Connection::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Connection.type)
}

// repeated .venue_map_pb.venue_map.Location_type refline = 4;
inline int venue_map_Connection::_internal_refline_size() const {
  return refline_.size();
}
inline int venue_map_Connection::refline_size() const {
  return _internal_refline_size();
}
inline void venue_map_Connection::clear_refline() {
  refline_.Clear();
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Connection::mutable_refline(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Connection.refline)
  return refline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Location_type >*
venue_map_Connection::mutable_refline() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Connection.refline)
  return &refline_;
}
inline const ::venue_map_pb::venue_map_Location_type& venue_map_Connection::_internal_refline(int index) const {
  return refline_.Get(index);
}
inline const ::venue_map_pb::venue_map_Location_type& venue_map_Connection::refline(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Connection.refline)
  return _internal_refline(index);
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Connection::_internal_add_refline() {
  return refline_.Add();
}
inline ::venue_map_pb::venue_map_Location_type* venue_map_Connection::add_refline() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Connection.refline)
  return _internal_add_refline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Location_type >&
venue_map_Connection::refline() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Connection.refline)
  return refline_;
}

// -------------------------------------------------------------------

// venue_map_Intersection

// int32 id = 1;
inline void venue_map_Intersection::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Intersection::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 venue_map_Intersection::id() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Intersection.id)
  return _internal_id();
}
inline void venue_map_Intersection::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void venue_map_Intersection::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.venue_map.Intersection.id)
}

// repeated .venue_map_pb.venue_map.Pointwithid shapes = 2;
inline int venue_map_Intersection::_internal_shapes_size() const {
  return shapes_.size();
}
inline int venue_map_Intersection::shapes_size() const {
  return _internal_shapes_size();
}
inline void venue_map_Intersection::clear_shapes() {
  shapes_.Clear();
}
inline ::venue_map_pb::venue_map_Pointwithid* venue_map_Intersection::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Intersection.shapes)
  return shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Pointwithid >*
venue_map_Intersection::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Intersection.shapes)
  return &shapes_;
}
inline const ::venue_map_pb::venue_map_Pointwithid& venue_map_Intersection::_internal_shapes(int index) const {
  return shapes_.Get(index);
}
inline const ::venue_map_pb::venue_map_Pointwithid& venue_map_Intersection::shapes(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Intersection.shapes)
  return _internal_shapes(index);
}
inline ::venue_map_pb::venue_map_Pointwithid* venue_map_Intersection::_internal_add_shapes() {
  return shapes_.Add();
}
inline ::venue_map_pb::venue_map_Pointwithid* venue_map_Intersection::add_shapes() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Intersection.shapes)
  return _internal_add_shapes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Pointwithid >&
venue_map_Intersection::shapes() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Intersection.shapes)
  return shapes_;
}

// repeated .venue_map_pb.venue_map.Edge edges = 3;
inline int venue_map_Intersection::_internal_edges_size() const {
  return edges_.size();
}
inline int venue_map_Intersection::edges_size() const {
  return _internal_edges_size();
}
inline void venue_map_Intersection::clear_edges() {
  edges_.Clear();
}
inline ::venue_map_pb::venue_map_Edge* venue_map_Intersection::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Intersection.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Edge >*
venue_map_Intersection::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Intersection.edges)
  return &edges_;
}
inline const ::venue_map_pb::venue_map_Edge& venue_map_Intersection::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::venue_map_pb::venue_map_Edge& venue_map_Intersection::edges(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Intersection.edges)
  return _internal_edges(index);
}
inline ::venue_map_pb::venue_map_Edge* venue_map_Intersection::_internal_add_edges() {
  return edges_.Add();
}
inline ::venue_map_pb::venue_map_Edge* venue_map_Intersection::add_edges() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Intersection.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Edge >&
venue_map_Intersection::edges() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Intersection.edges)
  return edges_;
}

// repeated .venue_map_pb.venue_map.Connection connections = 4;
inline int venue_map_Intersection::_internal_connections_size() const {
  return connections_.size();
}
inline int venue_map_Intersection::connections_size() const {
  return _internal_connections_size();
}
inline void venue_map_Intersection::clear_connections() {
  connections_.Clear();
}
inline ::venue_map_pb::venue_map_Connection* venue_map_Intersection::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Intersection.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Connection >*
venue_map_Intersection::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.Intersection.connections)
  return &connections_;
}
inline const ::venue_map_pb::venue_map_Connection& venue_map_Intersection::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::venue_map_pb::venue_map_Connection& venue_map_Intersection::connections(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Intersection.connections)
  return _internal_connections(index);
}
inline ::venue_map_pb::venue_map_Connection* venue_map_Intersection::_internal_add_connections() {
  return connections_.Add();
}
inline ::venue_map_pb::venue_map_Connection* venue_map_Intersection::add_connections() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.Intersection.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Connection >&
venue_map_Intersection::connections() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.Intersection.connections)
  return connections_;
}

// -------------------------------------------------------------------

// venue_map

// .venue_map_pb.venue_map.Venue_Type Venue = 1;
inline bool venue_map::_internal_has_venue() const {
  return this != internal_default_instance() && venue_ != nullptr;
}
inline bool venue_map::has_venue() const {
  return _internal_has_venue();
}
inline void venue_map::clear_venue() {
  if (GetArena() == nullptr && venue_ != nullptr) {
    delete venue_;
  }
  venue_ = nullptr;
}
inline const ::venue_map_pb::venue_map_Venue_Type& venue_map::_internal_venue() const {
  const ::venue_map_pb::venue_map_Venue_Type* p = venue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map_Venue_Type*>(
      &::venue_map_pb::_venue_map_Venue_Type_default_instance_);
}
inline const ::venue_map_pb::venue_map_Venue_Type& venue_map::venue() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.Venue)
  return _internal_venue();
}
inline void venue_map::unsafe_arena_set_allocated_venue(
    ::venue_map_pb::venue_map_Venue_Type* venue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venue_);
  }
  venue_ = venue;
  if (venue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.Venue)
}
inline ::venue_map_pb::venue_map_Venue_Type* venue_map::release_venue() {
  auto temp = unsafe_arena_release_venue();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map_Venue_Type* venue_map::unsafe_arena_release_venue() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.Venue)
  
  ::venue_map_pb::venue_map_Venue_Type* temp = venue_;
  venue_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map_Venue_Type* venue_map::_internal_mutable_venue() {
  
  if (venue_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map_Venue_Type>(GetArena());
    venue_ = p;
  }
  return venue_;
}
inline ::venue_map_pb::venue_map_Venue_Type* venue_map::mutable_venue() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.Venue)
  return _internal_mutable_venue();
}
inline void venue_map::set_allocated_venue(::venue_map_pb::venue_map_Venue_Type* venue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete venue_;
  }
  if (venue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(venue);
    if (message_arena != submessage_arena) {
      venue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, venue, submessage_arena);
    }
    
  } else {
    
  }
  venue_ = venue;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.Venue)
}

// repeated .venue_map_pb.venue_map.Links_Type vLinks = 2;
inline int venue_map::_internal_vlinks_size() const {
  return vlinks_.size();
}
inline int venue_map::vlinks_size() const {
  return _internal_vlinks_size();
}
inline void venue_map::clear_vlinks() {
  vlinks_.Clear();
}
inline ::venue_map_pb::venue_map_Links_Type* venue_map::mutable_vlinks(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.vLinks)
  return vlinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Links_Type >*
venue_map::mutable_vlinks() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.vLinks)
  return &vlinks_;
}
inline const ::venue_map_pb::venue_map_Links_Type& venue_map::_internal_vlinks(int index) const {
  return vlinks_.Get(index);
}
inline const ::venue_map_pb::venue_map_Links_Type& venue_map::vlinks(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.vLinks)
  return _internal_vlinks(index);
}
inline ::venue_map_pb::venue_map_Links_Type* venue_map::_internal_add_vlinks() {
  return vlinks_.Add();
}
inline ::venue_map_pb::venue_map_Links_Type* venue_map::add_vlinks() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.vLinks)
  return _internal_add_vlinks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Links_Type >&
venue_map::vlinks() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.vLinks)
  return vlinks_;
}

// repeated .venue_map_pb.venue_map.Joints_Type vJoints = 3;
inline int venue_map::_internal_vjoints_size() const {
  return vjoints_.size();
}
inline int venue_map::vjoints_size() const {
  return _internal_vjoints_size();
}
inline void venue_map::clear_vjoints() {
  vjoints_.Clear();
}
inline ::venue_map_pb::venue_map_Joints_Type* venue_map::mutable_vjoints(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.vJoints)
  return vjoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Joints_Type >*
venue_map::mutable_vjoints() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.vJoints)
  return &vjoints_;
}
inline const ::venue_map_pb::venue_map_Joints_Type& venue_map::_internal_vjoints(int index) const {
  return vjoints_.Get(index);
}
inline const ::venue_map_pb::venue_map_Joints_Type& venue_map::vjoints(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.vJoints)
  return _internal_vjoints(index);
}
inline ::venue_map_pb::venue_map_Joints_Type* venue_map::_internal_add_vjoints() {
  return vjoints_.Add();
}
inline ::venue_map_pb::venue_map_Joints_Type* venue_map::add_vjoints() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.vJoints)
  return _internal_add_vjoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Joints_Type >&
venue_map::vjoints() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.vJoints)
  return vjoints_;
}

// repeated .venue_map_pb.venue_map.Landmarks_Type vLandmarks = 4;
inline int venue_map::_internal_vlandmarks_size() const {
  return vlandmarks_.size();
}
inline int venue_map::vlandmarks_size() const {
  return _internal_vlandmarks_size();
}
inline void venue_map::clear_vlandmarks() {
  vlandmarks_.Clear();
}
inline ::venue_map_pb::venue_map_Landmarks_Type* venue_map::mutable_vlandmarks(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.vLandmarks)
  return vlandmarks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Landmarks_Type >*
venue_map::mutable_vlandmarks() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.vLandmarks)
  return &vlandmarks_;
}
inline const ::venue_map_pb::venue_map_Landmarks_Type& venue_map::_internal_vlandmarks(int index) const {
  return vlandmarks_.Get(index);
}
inline const ::venue_map_pb::venue_map_Landmarks_Type& venue_map::vlandmarks(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.vLandmarks)
  return _internal_vlandmarks(index);
}
inline ::venue_map_pb::venue_map_Landmarks_Type* venue_map::_internal_add_vlandmarks() {
  return vlandmarks_.Add();
}
inline ::venue_map_pb::venue_map_Landmarks_Type* venue_map::add_vlandmarks() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.vLandmarks)
  return _internal_add_vlandmarks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Landmarks_Type >&
venue_map::vlandmarks() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.vLandmarks)
  return vlandmarks_;
}

// repeated .venue_map_pb.venue_map.Slots_Type vSlots = 5;
inline int venue_map::_internal_vslots_size() const {
  return vslots_.size();
}
inline int venue_map::vslots_size() const {
  return _internal_vslots_size();
}
inline void venue_map::clear_vslots() {
  vslots_.Clear();
}
inline ::venue_map_pb::venue_map_Slots_Type* venue_map::mutable_vslots(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.vSlots)
  return vslots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Slots_Type >*
venue_map::mutable_vslots() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.vSlots)
  return &vslots_;
}
inline const ::venue_map_pb::venue_map_Slots_Type& venue_map::_internal_vslots(int index) const {
  return vslots_.Get(index);
}
inline const ::venue_map_pb::venue_map_Slots_Type& venue_map::vslots(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.vSlots)
  return _internal_vslots(index);
}
inline ::venue_map_pb::venue_map_Slots_Type* venue_map::_internal_add_vslots() {
  return vslots_.Add();
}
inline ::venue_map_pb::venue_map_Slots_Type* venue_map::add_vslots() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.vSlots)
  return _internal_add_vslots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Slots_Type >&
venue_map::vslots() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.vSlots)
  return vslots_;
}

// repeated .venue_map_pb.venue_map.Ultrasonic_obstacles_Type vObstacles_Ultrasonic = 6;
inline int venue_map::_internal_vobstacles_ultrasonic_size() const {
  return vobstacles_ultrasonic_.size();
}
inline int venue_map::vobstacles_ultrasonic_size() const {
  return _internal_vobstacles_ultrasonic_size();
}
inline void venue_map::clear_vobstacles_ultrasonic() {
  vobstacles_ultrasonic_.Clear();
}
inline ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* venue_map::mutable_vobstacles_ultrasonic(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.vObstacles_Ultrasonic)
  return vobstacles_ultrasonic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type >*
venue_map::mutable_vobstacles_ultrasonic() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.vObstacles_Ultrasonic)
  return &vobstacles_ultrasonic_;
}
inline const ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type& venue_map::_internal_vobstacles_ultrasonic(int index) const {
  return vobstacles_ultrasonic_.Get(index);
}
inline const ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type& venue_map::vobstacles_ultrasonic(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.vObstacles_Ultrasonic)
  return _internal_vobstacles_ultrasonic(index);
}
inline ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* venue_map::_internal_add_vobstacles_ultrasonic() {
  return vobstacles_ultrasonic_.Add();
}
inline ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* venue_map::add_vobstacles_ultrasonic() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.vObstacles_Ultrasonic)
  return _internal_add_vobstacles_ultrasonic();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type >&
venue_map::vobstacles_ultrasonic() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.vObstacles_Ultrasonic)
  return vobstacles_ultrasonic_;
}

// repeated .venue_map_pb.venue_map.Lane_lines_Type vLaneLines = 7;
inline int venue_map::_internal_vlanelines_size() const {
  return vlanelines_.size();
}
inline int venue_map::vlanelines_size() const {
  return _internal_vlanelines_size();
}
inline void venue_map::clear_vlanelines() {
  vlanelines_.Clear();
}
inline ::venue_map_pb::venue_map_Lane_lines_Type* venue_map::mutable_vlanelines(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.vLaneLines)
  return vlanelines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Lane_lines_Type >*
venue_map::mutable_vlanelines() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.vLaneLines)
  return &vlanelines_;
}
inline const ::venue_map_pb::venue_map_Lane_lines_Type& venue_map::_internal_vlanelines(int index) const {
  return vlanelines_.Get(index);
}
inline const ::venue_map_pb::venue_map_Lane_lines_Type& venue_map::vlanelines(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.vLaneLines)
  return _internal_vlanelines(index);
}
inline ::venue_map_pb::venue_map_Lane_lines_Type* venue_map::_internal_add_vlanelines() {
  return vlanelines_.Add();
}
inline ::venue_map_pb::venue_map_Lane_lines_Type* venue_map::add_vlanelines() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.vLaneLines)
  return _internal_add_vlanelines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Lane_lines_Type >&
venue_map::vlanelines() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.vLaneLines)
  return vlanelines_;
}

// repeated .venue_map_pb.venue_map.Floor floors = 8;
inline int venue_map::_internal_floors_size() const {
  return floors_.size();
}
inline int venue_map::floors_size() const {
  return _internal_floors_size();
}
inline void venue_map::clear_floors() {
  floors_.Clear();
}
inline ::venue_map_pb::venue_map_Floor* venue_map::mutable_floors(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.floors)
  return floors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Floor >*
venue_map::mutable_floors() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.floors)
  return &floors_;
}
inline const ::venue_map_pb::venue_map_Floor& venue_map::_internal_floors(int index) const {
  return floors_.Get(index);
}
inline const ::venue_map_pb::venue_map_Floor& venue_map::floors(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.floors)
  return _internal_floors(index);
}
inline ::venue_map_pb::venue_map_Floor* venue_map::_internal_add_floors() {
  return floors_.Add();
}
inline ::venue_map_pb::venue_map_Floor* venue_map::add_floors() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.floors)
  return _internal_add_floors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Floor >&
venue_map::floors() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.floors)
  return floors_;
}

// repeated .venue_map_pb.venue_map.Intersection intersections = 9;
inline int venue_map::_internal_intersections_size() const {
  return intersections_.size();
}
inline int venue_map::intersections_size() const {
  return _internal_intersections_size();
}
inline void venue_map::clear_intersections() {
  intersections_.Clear();
}
inline ::venue_map_pb::venue_map_Intersection* venue_map::mutable_intersections(int index) {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.intersections)
  return intersections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Intersection >*
venue_map::mutable_intersections() {
  // @@protoc_insertion_point(field_mutable_list:venue_map_pb.venue_map.intersections)
  return &intersections_;
}
inline const ::venue_map_pb::venue_map_Intersection& venue_map::_internal_intersections(int index) const {
  return intersections_.Get(index);
}
inline const ::venue_map_pb::venue_map_Intersection& venue_map::intersections(int index) const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.intersections)
  return _internal_intersections(index);
}
inline ::venue_map_pb::venue_map_Intersection* venue_map::_internal_add_intersections() {
  return intersections_.Add();
}
inline ::venue_map_pb::venue_map_Intersection* venue_map::add_intersections() {
  // @@protoc_insertion_point(field_add:venue_map_pb.venue_map.intersections)
  return _internal_add_intersections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::venue_map_pb::venue_map_Intersection >&
venue_map::intersections() const {
  // @@protoc_insertion_point(field_list:venue_map_pb.venue_map.intersections)
  return intersections_;
}

// .LogicMapPb.LogicMap logic_map = 10;
inline bool venue_map::_internal_has_logic_map() const {
  return this != internal_default_instance() && logic_map_ != nullptr;
}
inline bool venue_map::has_logic_map() const {
  return _internal_has_logic_map();
}
inline const ::LogicMapPb::LogicMap& venue_map::_internal_logic_map() const {
  const ::LogicMapPb::LogicMap* p = logic_map_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LogicMapPb::LogicMap*>(
      &::LogicMapPb::_LogicMap_default_instance_);
}
inline const ::LogicMapPb::LogicMap& venue_map::logic_map() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.venue_map.logic_map)
  return _internal_logic_map();
}
inline void venue_map::unsafe_arena_set_allocated_logic_map(
    ::LogicMapPb::LogicMap* logic_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logic_map_);
  }
  logic_map_ = logic_map;
  if (logic_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.venue_map.logic_map)
}
inline ::LogicMapPb::LogicMap* venue_map::release_logic_map() {
  auto temp = unsafe_arena_release_logic_map();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LogicMapPb::LogicMap* venue_map::unsafe_arena_release_logic_map() {
  // @@protoc_insertion_point(field_release:venue_map_pb.venue_map.logic_map)
  
  ::LogicMapPb::LogicMap* temp = logic_map_;
  logic_map_ = nullptr;
  return temp;
}
inline ::LogicMapPb::LogicMap* venue_map::_internal_mutable_logic_map() {
  
  if (logic_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogicMapPb::LogicMap>(GetArena());
    logic_map_ = p;
  }
  return logic_map_;
}
inline ::LogicMapPb::LogicMap* venue_map::mutable_logic_map() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.venue_map.logic_map)
  return _internal_mutable_logic_map();
}
inline void venue_map::set_allocated_logic_map(::LogicMapPb::LogicMap* logic_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logic_map_);
  }
  if (logic_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logic_map)->GetArena();
    if (message_arena != submessage_arena) {
      logic_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logic_map, submessage_arena);
    }
    
  } else {
    
  }
  logic_map_ = logic_map;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.venue_map.logic_map)
}

// -------------------------------------------------------------------

// map_trajectory_data

// .venue_map_pb.venue_map venueMap = 1;
inline bool map_trajectory_data::_internal_has_venuemap() const {
  return this != internal_default_instance() && venuemap_ != nullptr;
}
inline bool map_trajectory_data::has_venuemap() const {
  return _internal_has_venuemap();
}
inline void map_trajectory_data::clear_venuemap() {
  if (GetArena() == nullptr && venuemap_ != nullptr) {
    delete venuemap_;
  }
  venuemap_ = nullptr;
}
inline const ::venue_map_pb::venue_map& map_trajectory_data::_internal_venuemap() const {
  const ::venue_map_pb::venue_map* p = venuemap_;
  return p != nullptr ? *p : *reinterpret_cast<const ::venue_map_pb::venue_map*>(
      &::venue_map_pb::_venue_map_default_instance_);
}
inline const ::venue_map_pb::venue_map& map_trajectory_data::venuemap() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.map_trajectory_data.venueMap)
  return _internal_venuemap();
}
inline void map_trajectory_data::unsafe_arena_set_allocated_venuemap(
    ::venue_map_pb::venue_map* venuemap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(venuemap_);
  }
  venuemap_ = venuemap;
  if (venuemap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.map_trajectory_data.venueMap)
}
inline ::venue_map_pb::venue_map* map_trajectory_data::release_venuemap() {
  auto temp = unsafe_arena_release_venuemap();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::venue_map_pb::venue_map* map_trajectory_data::unsafe_arena_release_venuemap() {
  // @@protoc_insertion_point(field_release:venue_map_pb.map_trajectory_data.venueMap)
  
  ::venue_map_pb::venue_map* temp = venuemap_;
  venuemap_ = nullptr;
  return temp;
}
inline ::venue_map_pb::venue_map* map_trajectory_data::_internal_mutable_venuemap() {
  
  if (venuemap_ == nullptr) {
    auto* p = CreateMaybeMessage<::venue_map_pb::venue_map>(GetArena());
    venuemap_ = p;
  }
  return venuemap_;
}
inline ::venue_map_pb::venue_map* map_trajectory_data::mutable_venuemap() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.map_trajectory_data.venueMap)
  return _internal_mutable_venuemap();
}
inline void map_trajectory_data::set_allocated_venuemap(::venue_map_pb::venue_map* venuemap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete venuemap_;
  }
  if (venuemap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(venuemap);
    if (message_arena != submessage_arena) {
      venuemap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, venuemap, submessage_arena);
    }
    
  } else {
    
  }
  venuemap_ = venuemap;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.map_trajectory_data.venueMap)
}

// .SRprotobuf.ApTrajectoryDataType apTrajectoryData = 2;
inline bool map_trajectory_data::_internal_has_aptrajectorydata() const {
  return this != internal_default_instance() && aptrajectorydata_ != nullptr;
}
inline bool map_trajectory_data::has_aptrajectorydata() const {
  return _internal_has_aptrajectorydata();
}
inline const ::SRprotobuf::ApTrajectoryDataType& map_trajectory_data::_internal_aptrajectorydata() const {
  const ::SRprotobuf::ApTrajectoryDataType* p = aptrajectorydata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::ApTrajectoryDataType*>(
      &::SRprotobuf::_ApTrajectoryDataType_default_instance_);
}
inline const ::SRprotobuf::ApTrajectoryDataType& map_trajectory_data::aptrajectorydata() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.map_trajectory_data.apTrajectoryData)
  return _internal_aptrajectorydata();
}
inline void map_trajectory_data::unsafe_arena_set_allocated_aptrajectorydata(
    ::SRprotobuf::ApTrajectoryDataType* aptrajectorydata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aptrajectorydata_);
  }
  aptrajectorydata_ = aptrajectorydata;
  if (aptrajectorydata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:venue_map_pb.map_trajectory_data.apTrajectoryData)
}
inline ::SRprotobuf::ApTrajectoryDataType* map_trajectory_data::release_aptrajectorydata() {
  auto temp = unsafe_arena_release_aptrajectorydata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::ApTrajectoryDataType* map_trajectory_data::unsafe_arena_release_aptrajectorydata() {
  // @@protoc_insertion_point(field_release:venue_map_pb.map_trajectory_data.apTrajectoryData)
  
  ::SRprotobuf::ApTrajectoryDataType* temp = aptrajectorydata_;
  aptrajectorydata_ = nullptr;
  return temp;
}
inline ::SRprotobuf::ApTrajectoryDataType* map_trajectory_data::_internal_mutable_aptrajectorydata() {
  
  if (aptrajectorydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::ApTrajectoryDataType>(GetArena());
    aptrajectorydata_ = p;
  }
  return aptrajectorydata_;
}
inline ::SRprotobuf::ApTrajectoryDataType* map_trajectory_data::mutable_aptrajectorydata() {
  // @@protoc_insertion_point(field_mutable:venue_map_pb.map_trajectory_data.apTrajectoryData)
  return _internal_mutable_aptrajectorydata();
}
inline void map_trajectory_data::set_allocated_aptrajectorydata(::SRprotobuf::ApTrajectoryDataType* aptrajectorydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aptrajectorydata_);
  }
  if (aptrajectorydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aptrajectorydata)->GetArena();
    if (message_arena != submessage_arena) {
      aptrajectorydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aptrajectorydata, submessage_arena);
    }
    
  } else {
    
  }
  aptrajectorydata_ = aptrajectorydata;
  // @@protoc_insertion_point(field_set_allocated:venue_map_pb.map_trajectory_data.apTrajectoryData)
}

// uint32 timestamp = 3;
inline void map_trajectory_data::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 map_trajectory_data::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 map_trajectory_data::timestamp() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.map_trajectory_data.timestamp)
  return _internal_timestamp();
}
inline void map_trajectory_data::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void map_trajectory_data::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.map_trajectory_data.timestamp)
}

// int32 isAcrossFloors = 4;
inline void map_trajectory_data::clear_isacrossfloors() {
  isacrossfloors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_trajectory_data::_internal_isacrossfloors() const {
  return isacrossfloors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 map_trajectory_data::isacrossfloors() const {
  // @@protoc_insertion_point(field_get:venue_map_pb.map_trajectory_data.isAcrossFloors)
  return _internal_isacrossfloors();
}
inline void map_trajectory_data::_internal_set_isacrossfloors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isacrossfloors_ = value;
}
inline void map_trajectory_data::set_isacrossfloors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isacrossfloors(value);
  // @@protoc_insertion_point(field_set:venue_map_pb.map_trajectory_data.isAcrossFloors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace venue_map_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fWM_5fdisplay_5fmap_2eproto
