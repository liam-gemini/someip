// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/fngp_route_mgr.proto

#include "proto_ap/fngp_route_mgr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class SegmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentInfo> _instance;
} _SegmentInfo_default_instance_;
class FNgpRouteBriefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpRouteBrief> _instance;
} _FNgpRouteBrief_default_instance_;
class FNgpRouteBriefListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpRouteBriefList> _instance;
} _FNgpRouteBriefList_default_instance_;
class FNgpRouteDetailListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpRouteDetailList> _instance;
} _FNgpRouteDetailList_default_instance_;
class FNgpRouteDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpRouteDetail> _instance;
} _FNgpRouteDetail_default_instance_;
class FNgpRouteWayPointsSpecifiedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpRouteWayPointsSpecified> _instance;
} _FNgpRouteWayPointsSpecified_default_instance_;
class FNgpEmulatorNavigationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpEmulatorNavigation> _instance;
} _FNgpEmulatorNavigation_default_instance_;
class CustomStatusMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomStatusMsg> _instance;
} _CustomStatusMsg_default_instance_;
class FNgpRecordingStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FNgpRecordingState> _instance;
} _FNgpRecordingState_default_instance_;
static void InitDefaultsscc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CustomStatusMsg_default_instance_;
    new (ptr) ::CustomStatusMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CustomStatusMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {}};

static void InitDefaultsscc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpEmulatorNavigation_default_instance_;
    new (ptr) ::FNgpEmulatorNavigation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpEmulatorNavigation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {
      &scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
      &scc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,}};

static void InitDefaultsscc_info_FNgpRecordingState_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpRecordingState_default_instance_;
    new (ptr) ::FNgpRecordingState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpRecordingState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FNgpRecordingState_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FNgpRecordingState_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {}};

static void InitDefaultsscc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpRouteBrief_default_instance_;
    new (ptr) ::FNgpRouteBrief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpRouteBrief::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {
      &scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
      &scc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,}};

static void InitDefaultsscc_info_FNgpRouteBriefList_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpRouteBriefList_default_instance_;
    new (ptr) ::FNgpRouteBriefList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpRouteBriefList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FNgpRouteBriefList_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FNgpRouteBriefList_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {
      &scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
      &scc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,}};

static void InitDefaultsscc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpRouteDetail_default_instance_;
    new (ptr) ::FNgpRouteDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpRouteDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {
      &scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
      &scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
      &scc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,}};

static void InitDefaultsscc_info_FNgpRouteDetailList_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpRouteDetailList_default_instance_;
    new (ptr) ::FNgpRouteDetailList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpRouteDetailList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FNgpRouteDetailList_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FNgpRouteDetailList_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {
      &scc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,}};

static void InitDefaultsscc_info_FNgpRouteWayPointsSpecified_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FNgpRouteWayPointsSpecified_default_instance_;
    new (ptr) ::FNgpRouteWayPointsSpecified();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FNgpRouteWayPointsSpecified::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FNgpRouteWayPointsSpecified_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FNgpRouteWayPointsSpecified_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {
      &scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,}};

static void InitDefaultsscc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Point_default_instance_;
    new (ptr) ::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {}};

static void InitDefaultsscc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SegmentInfo_default_instance_;
    new (ptr) ::SegmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SegmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fap_2ffngp_5froute_5fmgr_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Point, x_),
  PROTOBUF_FIELD_OFFSET(::Point, y_),
  PROTOBUF_FIELD_OFFSET(::Point, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, mileage_),
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, status_),
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, begin_index_),
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, end_index_),
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, begin_offset_),
  PROTOBUF_FIELD_OFFSET(::SegmentInfo, end_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, route_id_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, total_mileage_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, begin_lonlat_point_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, begin_point_name_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, end_lonlat_point_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, end_point_name_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, predict_time_duration_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, create_time_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, is_selected_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, last_use_time_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, is_lock_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, fngp_status_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, path_type_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, priority_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, name_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, total_odd_milage_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, route_show_status_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, priority_info_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, is_renamed_route_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, is_navi_end_match_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, cluster_number_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, learn_status_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, route_score_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, using_raw_route_type_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, start_end_cluster_number_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, is_custom_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBrief, custom_status_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBriefList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBriefList, fngp_route_brief_list_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBriefList, fngp_emulator_navigation_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBriefList, state_remind_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteBriefList, sequence_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetailList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetailList, flag_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetailList, fngp_route_defail_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetail, fngp_route_brief_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetail, v2_point_list_),
  PROTOBUF_FIELD_OFFSET(::FNgpRouteDetail, segment_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteWayPointsSpecified, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpRouteWayPointsSpecified, v2_point_list_specified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, route_id_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, current_point_index_in_v2list_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, current_lonlat_point_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, remain_mileage_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, passed_mileage_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, predict_time_duration_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, arrive_time_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, maneuver_type_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, maneuver_direction_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, maneuver_distance_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, current_offset_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, offset_segment_list_),
  PROTOBUF_FIELD_OFFSET(::FNgpEmulatorNavigation, end_point_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CustomStatusMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CustomStatusMsg, code_),
  PROTOBUF_FIELD_OFFSET(::CustomStatusMsg, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FNgpRecordingState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FNgpRecordingState, route_id_),
  PROTOBUF_FIELD_OFFSET(::FNgpRecordingState, recording_status_),
  PROTOBUF_FIELD_OFFSET(::FNgpRecordingState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::FNgpRecordingState, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Point)},
  { 8, -1, sizeof(::SegmentInfo)},
  { 20, -1, sizeof(::FNgpRouteBrief)},
  { 52, -1, sizeof(::FNgpRouteBriefList)},
  { 61, -1, sizeof(::FNgpRouteDetailList)},
  { 68, -1, sizeof(::FNgpRouteDetail)},
  { 76, -1, sizeof(::FNgpRouteWayPointsSpecified)},
  { 82, -1, sizeof(::FNgpEmulatorNavigation)},
  { 100, -1, sizeof(::CustomStatusMsg)},
  { 107, -1, sizeof(::FNgpRecordingState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SegmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpRouteBrief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpRouteBriefList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpRouteDetailList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpRouteDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpRouteWayPointsSpecified_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpEmulatorNavigation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CustomStatusMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FNgpRecordingState_default_instance_),
};

const char descriptor_table_protodef_proto_5fap_2ffngp_5froute_5fmgr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035proto_ap/fngp_route_mgr.proto\"(\n\005Point"
  "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\247\001\n\013Se"
  "gmentInfo\022\017\n\007mileage\030\001 \001(\005\022\'\n\006status\030\002 \001"
  "(\0162\027.SegmentAvailableStatus\022\023\n\013begin_ind"
  "ex\030\003 \001(\005\022\021\n\tend_index\030\004 \001(\005\022\014\n\004desc\030\005 \001("
  "\005\022\024\n\014begin_offset\030\006 \001(\005\022\022\n\nend_offset\030\007 "
  "\001(\005\"\373\005\n\016FNgpRouteBrief\022\020\n\010route_id\030\001 \001(\003"
  "\022\025\n\rtotal_mileage\030\002 \001(\005\022\"\n\022begin_lonlat_"
  "point\030\003 \001(\0132\006.Point\022\030\n\020begin_point_name\030"
  "\004 \001(\t\022 \n\020end_lonlat_point\030\005 \001(\0132\006.Point\022"
  "\026\n\016end_point_name\030\006 \001(\t\022\035\n\025predict_time_"
  "duration\030\007 \001(\003\022\023\n\013create_time\030\010 \001(\003\022\023\n\013i"
  "s_selected\030\t \001(\010\022\025\n\rlast_use_time\030\n \001(\003\022"
  "\017\n\007is_lock\030\013 \001(\010\022 \n\013fngp_status\030\014 \001(\0162\013."
  "FNgpStatus\022\034\n\tpath_type\030\r \001(\0162\t.PathType"
  "\022\020\n\010priority\030\016 \001(\005\022\014\n\004name\030\017 \001(\t\022\030\n\020tota"
  "l_odd_milage\030\020 \001(\005\022\031\n\021route_show_status\030"
  "\021 \001(\005\022$\n\rpriority_info\030\022 \001(\0162\r.PriorityI"
  "nfo\022\030\n\020is_renamed_route\030\023 \001(\005\022\031\n\021is_navi"
  "_end_match\030\024 \001(\005\022\026\n\016cluster_number\030\025 \001(\005"
  "\022&\n\014learn_status\030\026 \001(\0162\020.PathLearnStatus"
  "\022\023\n\013route_score\030\027 \001(\001\0220\n\024using_raw_route"
  "_type\030\030 \001(\0162\022.UsingRawRouteType\022 \n\030start"
  "_end_cluster_number\030\031 \001(\005\022\021\n\tis_custom\030\032"
  " \001(\005\022+\n\021custom_status_msg\030\033 \001(\0132\020.Custom"
  "StatusMsg\"\274\001\n\022FNgpRouteBriefList\022.\n\025fngp"
  "_route_brief_list\030\001 \003(\0132\017.FNgpRouteBrief"
  "\0229\n\030fngp_emulator_navigation\030\002 \001(\0132\027.FNg"
  "pEmulatorNavigation\022&\n\014state_remind\030\003 \001("
  "\0162\020.StateRemindType\022\023\n\013sequence_id\030\004 \001(\003"
  "\"U\n\023FNgpRouteDetailList\022\014\n\004flag\030\001 \001(\005\0220\n"
  "\026fngp_route_defail_list\030\002 \003(\0132\020.FNgpRout"
  "eDetail\"\177\n\017FNgpRouteDetail\022)\n\020fngp_route"
  "_brief\030\001 \001(\0132\017.FNgpRouteBrief\022\035\n\rv2_poin"
  "t_list\030\002 \003(\0132\006.Point\022\"\n\014segment_list\030\003 \003"
  "(\0132\014.SegmentInfo\"F\n\033FNgpRouteWayPointsSp"
  "ecified\022\'\n\027v2_point_list_Specified\030\001 \003(\013"
  "2\006.Point\"\247\003\n\026FNgpEmulatorNavigation\022\020\n\010r"
  "oute_id\030\001 \001(\003\022%\n\035current_point_index_in_"
  "v2list\030\002 \001(\005\022$\n\024current_lonlat_point\030\003 \001"
  "(\0132\006.Point\022\026\n\016remain_mileage\030\004 \001(\005\022\026\n\016pa"
  "ssed_mileage\030\005 \001(\005\022\035\n\025predict_time_durat"
  "ion\030\006 \001(\003\022\023\n\013arrive_time\030\007 \001(\003\022$\n\rmaneuv"
  "er_type\030\010 \001(\0162\r.ManeuverType\022.\n\022maneuver"
  "_direction\030\t \001(\0162\022.ManeuverDirection\022\031\n\021"
  "maneuver_distance\030\n \001(\005\022\026\n\016current_offse"
  "t\030\013 \001(\005\022)\n\023offset_segment_list\030\014 \003(\0132\014.S"
  "egmentInfo\022\026\n\016end_point_name\030\r \001(\t\"0\n\017Cu"
  "stomStatusMsg\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030\002"
  " \001(\t\"a\n\022FNgpRecordingState\022\020\n\010route_id\030\001"
  " \001(\003\022\030\n\020recording_status\030\002 \001(\r\022\021\n\ttimest"
  "amp\030\003 \001(\003\022\014\n\004name\030\004 \001(\t*G\n\026SegmentAvaila"
  "bleStatus\022\r\n\tAVAILABLE\020\000\022\021\n\rNOT_AVAILABL"
  "E\020\001\022\013\n\007WARNING\020\002*\245\001\n\017PathLearnStatus\022\025\n\021"
  "kPathLearnDefault\020\000\022\021\n\rkPathLearning\020\001\022\024"
  "\n\020kPathLearnFailed\020\002\022\025\n\021kPathLearnSucces"
  "s\020\003\022\016\n\nkPathUsing\020\004\022\025\n\021kPathLearnWaiting"
  "\020\005\022\024\n\020kPathNeedRelearn\020\006*3\n\021UsingRawRout"
  "eType\022\r\n\tkRouteRaw\020\000\022\017\n\013kRouteUsing\020\001*S\n"
  "\010PathType\022\014\n\010RESERVED\020\000\022\024\n\020WORKING_DAY_P"
  "ATH\020\001\022\024\n\020WEEKEND_DAY_PATH\020\002\022\r\n\tCUSTOMIZE"
  "\020\003*\243\004\n\014ManeuverType\022\020\n\014TURN_DEFAULT\020\000\022\021\n"
  "\rTURN_LEFT_2km\020\001\022\021\n\rTURN_LEFT_1km\020\002\022\022\n\016T"
  "URN_LEFT_500m\020\003\022\022\n\016TURN_LEFT_200m\020\004\022\021\n\rT"
  "URN_LEFT_NOW\020\005\022\022\n\016TURN_RIGHT_2km\020\006\022\022\n\016TU"
  "RN_RIGHT_1km\020\007\022\023\n\017TURN_RIGHT_500m\020\010\022\023\n\017T"
  "URN_RIGHT_200m\020\t\022\022\n\016TURN_RIGHT_NOW\020\n\022\021\n\r"
  "TURN_BACK_2km\020\013\022\021\n\rTURN_BACK_1km\020\014\022\022\n\016TU"
  "RN_BACK_500m\020\r\022\022\n\016TURN_BACK_200m\020\016\022\021\n\rTU"
  "RN_BACK_NOW\020\017\022\020\n\014STRAIGHT_2km\020\020\022\020\n\014STRAI"
  "GHT_1km\020\021\022\021\n\rSTRAIGHT_500m\020\022\022\021\n\rSTRAIGHT"
  "_200m\020\023\022\020\n\014STRAIGHT_NOW\020\024\022\027\n\023PASS_ROUNDA"
  "BOUT_2km\020\025\022\027\n\023PASS_ROUNDABOUT_1km\020\026\022\030\n\024P"
  "ASS_ROUNDABOUT_500m\020\027\022\030\n\024PASS_ROUNDABOUT"
  "_200m\020\030\022\027\n\023PASS_ROUNDABOUT_NOW\020\031*q\n\021Mane"
  "uverDirection\022\013\n\007DEFAULT\020\000\022\r\n\tTURN_LEFT\020"
  "\001\022\016\n\nTURN_RIGHT\020\002\022\r\n\tTURN_BACK\020\003\022\014\n\010STRA"
  "IGHT\020\004\022\023\n\017PASS_ROUNDABOUT\020\005*\263\001\n\nFNgpStat"
  "us\022\035\n\031FNGP_STATUS_NOT_AVAILABLE\020\000\022\034\n\030FNG"
  "P_STATUS_OUT_OF_RANGE\020\001\022\030\n\024FNGP_STATUS_I"
  "N_RANGE\020\002\022\027\n\023FNGP_STATUS_DRIVING\020\003\022\030\n\024FN"
  "GP_STATUS_GRAY_WAY\020\004\022\033\n\027FNGP_STATUS_DRIV"
  "ING_END\020\005*Z\n\017StateRemindType\022\020\n\014kDisplay"
  "None\020\000\022\025\n\021kDisplayBriefList\020\001\022\036\n\032kDispla"
  "yEmulatorNavigation\020\002*j\n\014PriorityInfo\022\021\n"
  "\rFNGP_NO_LABEL\020\000\022\027\n\023FNGP_HIGH_FREQUENCY\020"
  "\001\022\030\n\024FNGP_HIGH_EFFICIENCY\020\002\022\024\n\020FNGP_LATE"
  "ST_USED\020\003B/\n\030android.car.hardware.xpuB\023X"
  "puFNgpRouteMessageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto_sccs[10] = {
  &scc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpRecordingState_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpRouteBriefList_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpRouteDetailList_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_FNgpRouteWayPointsSpecified_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
  &scc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto = {
  false, false, descriptor_table_protodef_proto_5fap_2ffngp_5froute_5fmgr_2eproto, "proto_ap/fngp_route_mgr.proto", 3546,
  &descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto_once, descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto_sccs, descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto::offsets,
  file_level_metadata_proto_5fap_2ffngp_5froute_5fmgr_2eproto, 10, file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto, file_level_service_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fap_2ffngp_5froute_5fmgr_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentAvailableStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[0];
}
bool SegmentAvailableStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathLearnStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[1];
}
bool PathLearnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsingRawRouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[2];
}
bool UsingRawRouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[3];
}
bool PathType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManeuverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[4];
}
bool ManeuverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManeuverDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[5];
}
bool ManeuverDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FNgpStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[6];
}
bool FNgpStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateRemindType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[7];
}
bool StateRemindType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorityInfo_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
  return file_level_enum_descriptors_proto_5fap_2ffngp_5froute_5fmgr_2eproto[8];
}
bool PriorityInfo_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, z_)
      + sizeof(Point::z_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentInfo::InitAsDefaultInstance() {
}
class SegmentInfo::_Internal {
 public:
};

SegmentInfo::SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SegmentInfo)
}
SegmentInfo::SegmentInfo(const SegmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mileage_, &from.mileage_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_offset_) -
    reinterpret_cast<char*>(&mileage_)) + sizeof(end_offset_));
  // @@protoc_insertion_point(copy_constructor:SegmentInfo)
}

void SegmentInfo::SharedCtor() {
  ::memset(&mileage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&mileage_)) + sizeof(end_offset_));
}

SegmentInfo::~SegmentInfo() {
  // @@protoc_insertion_point(destructor:SegmentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SegmentInfo::ArenaDtor(void* object) {
  SegmentInfo* _this = reinterpret_cast< SegmentInfo* >(object);
  (void)_this;
}
void SegmentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentInfo& SegmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentInfo_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void SegmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mileage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&mileage_)) + sizeof(end_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mileage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SegmentAvailableStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::SegmentAvailableStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 begin_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          begin_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          desc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 begin_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          begin_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          end_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SegmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mileage = 1;
  if (this->mileage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mileage(), target);
  }

  // .SegmentAvailableStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int32 begin_index = 3;
  if (this->begin_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_begin_index(), target);
  }

  // int32 end_index = 4;
  if (this->end_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_end_index(), target);
  }

  // int32 desc = 5;
  if (this->desc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_desc(), target);
  }

  // int32 begin_offset = 6;
  if (this->begin_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_begin_offset(), target);
  }

  // int32 end_offset = 7;
  if (this->end_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_end_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SegmentInfo)
  return target;
}

size_t SegmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SegmentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mileage = 1;
  if (this->mileage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mileage());
  }

  // .SegmentAvailableStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 begin_index = 3;
  if (this->begin_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_begin_index());
  }

  // int32 end_index = 4;
  if (this->end_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_index());
  }

  // int32 desc = 5;
  if (this->desc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_desc());
  }

  // int32 begin_offset = 6;
  if (this->begin_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_begin_offset());
  }

  // int32 end_offset = 7;
  if (this->end_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SegmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SegmentInfo)
    MergeFrom(*source);
  }
}

void SegmentInfo::MergeFrom(const SegmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SegmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mileage() != 0) {
    _internal_set_mileage(from._internal_mileage());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.begin_index() != 0) {
    _internal_set_begin_index(from._internal_begin_index());
  }
  if (from.end_index() != 0) {
    _internal_set_end_index(from._internal_end_index());
  }
  if (from.desc() != 0) {
    _internal_set_desc(from._internal_desc());
  }
  if (from.begin_offset() != 0) {
    _internal_set_begin_offset(from._internal_begin_offset());
  }
  if (from.end_offset() != 0) {
    _internal_set_end_offset(from._internal_end_offset());
  }
}

void SegmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentInfo::CopyFrom(const SegmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SegmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentInfo::IsInitialized() const {
  return true;
}

void SegmentInfo::InternalSwap(SegmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentInfo, end_offset_)
      + sizeof(SegmentInfo::end_offset_)
      - PROTOBUF_FIELD_OFFSET(SegmentInfo, mileage_)>(
          reinterpret_cast<char*>(&mileage_),
          reinterpret_cast<char*>(&other->mileage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpRouteBrief::InitAsDefaultInstance() {
  ::_FNgpRouteBrief_default_instance_._instance.get_mutable()->begin_lonlat_point_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_FNgpRouteBrief_default_instance_._instance.get_mutable()->end_lonlat_point_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_FNgpRouteBrief_default_instance_._instance.get_mutable()->custom_status_msg_ = const_cast< ::CustomStatusMsg*>(
      ::CustomStatusMsg::internal_default_instance());
}
class FNgpRouteBrief::_Internal {
 public:
  static const ::Point& begin_lonlat_point(const FNgpRouteBrief* msg);
  static const ::Point& end_lonlat_point(const FNgpRouteBrief* msg);
  static const ::CustomStatusMsg& custom_status_msg(const FNgpRouteBrief* msg);
};

const ::Point&
FNgpRouteBrief::_Internal::begin_lonlat_point(const FNgpRouteBrief* msg) {
  return *msg->begin_lonlat_point_;
}
const ::Point&
FNgpRouteBrief::_Internal::end_lonlat_point(const FNgpRouteBrief* msg) {
  return *msg->end_lonlat_point_;
}
const ::CustomStatusMsg&
FNgpRouteBrief::_Internal::custom_status_msg(const FNgpRouteBrief* msg) {
  return *msg->custom_status_msg_;
}
FNgpRouteBrief::FNgpRouteBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpRouteBrief)
}
FNgpRouteBrief::FNgpRouteBrief(const FNgpRouteBrief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  begin_point_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_begin_point_name().empty()) {
    begin_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_begin_point_name(),
      GetArena());
  }
  end_point_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_point_name().empty()) {
    end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_point_name(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_begin_lonlat_point()) {
    begin_lonlat_point_ = new ::Point(*from.begin_lonlat_point_);
  } else {
    begin_lonlat_point_ = nullptr;
  }
  if (from._internal_has_end_lonlat_point()) {
    end_lonlat_point_ = new ::Point(*from.end_lonlat_point_);
  } else {
    end_lonlat_point_ = nullptr;
  }
  if (from._internal_has_custom_status_msg()) {
    custom_status_msg_ = new ::CustomStatusMsg(*from.custom_status_msg_);
  } else {
    custom_status_msg_ = nullptr;
  }
  ::memcpy(&route_id_, &from.route_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_custom_) -
    reinterpret_cast<char*>(&route_id_)) + sizeof(is_custom_));
  // @@protoc_insertion_point(copy_constructor:FNgpRouteBrief)
}

void FNgpRouteBrief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  begin_point_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_point_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_lonlat_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_custom_) -
      reinterpret_cast<char*>(&begin_lonlat_point_)) + sizeof(is_custom_));
}

FNgpRouteBrief::~FNgpRouteBrief() {
  // @@protoc_insertion_point(destructor:FNgpRouteBrief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpRouteBrief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  begin_point_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_point_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete begin_lonlat_point_;
  if (this != internal_default_instance()) delete end_lonlat_point_;
  if (this != internal_default_instance()) delete custom_status_msg_;
}

void FNgpRouteBrief::ArenaDtor(void* object) {
  FNgpRouteBrief* _this = reinterpret_cast< FNgpRouteBrief* >(object);
  (void)_this;
}
void FNgpRouteBrief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpRouteBrief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpRouteBrief& FNgpRouteBrief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpRouteBrief_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpRouteBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpRouteBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_point_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_point_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && begin_lonlat_point_ != nullptr) {
    delete begin_lonlat_point_;
  }
  begin_lonlat_point_ = nullptr;
  if (GetArena() == nullptr && end_lonlat_point_ != nullptr) {
    delete end_lonlat_point_;
  }
  end_lonlat_point_ = nullptr;
  if (GetArena() == nullptr && custom_status_msg_ != nullptr) {
    delete custom_status_msg_;
  }
  custom_status_msg_ = nullptr;
  ::memset(&route_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_custom_) -
      reinterpret_cast<char*>(&route_id_)) + sizeof(is_custom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpRouteBrief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_mileage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Point begin_lonlat_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_lonlat_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string begin_point_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_begin_point_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FNgpRouteBrief.begin_point_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Point end_lonlat_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_lonlat_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_point_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_end_point_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FNgpRouteBrief.end_point_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 predict_time_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          predict_time_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_selected = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_use_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          last_use_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_lock = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FNgpStatus fngp_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fngp_status(static_cast<::FNgpStatus>(val));
        } else goto handle_unusual;
        continue;
      // .PathType path_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_path_type(static_cast<::PathType>(val));
        } else goto handle_unusual;
        continue;
      // int32 priority = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FNgpRouteBrief.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_odd_milage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          total_odd_milage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 route_show_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          route_show_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PriorityInfo priority_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_priority_info(static_cast<::PriorityInfo>(val));
        } else goto handle_unusual;
        continue;
      // int32 is_renamed_route = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          is_renamed_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_navi_end_match = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          is_navi_end_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cluster_number = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          cluster_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PathLearnStatus learn_status = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_learn_status(static_cast<::PathLearnStatus>(val));
        } else goto handle_unusual;
        continue;
      // double route_score = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          route_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .UsingRawRouteType using_raw_route_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_using_raw_route_type(static_cast<::UsingRawRouteType>(val));
        } else goto handle_unusual;
        continue;
      // int32 start_end_cluster_number = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          start_end_cluster_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_custom = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          is_custom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CustomStatusMsg custom_status_msg = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_status_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpRouteBrief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpRouteBrief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 route_id = 1;
  if (this->route_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_route_id(), target);
  }

  // int32 total_mileage = 2;
  if (this->total_mileage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_mileage(), target);
  }

  // .Point begin_lonlat_point = 3;
  if (this->has_begin_lonlat_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::begin_lonlat_point(this), target, stream);
  }

  // string begin_point_name = 4;
  if (this->begin_point_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_begin_point_name().data(), static_cast<int>(this->_internal_begin_point_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FNgpRouteBrief.begin_point_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_begin_point_name(), target);
  }

  // .Point end_lonlat_point = 5;
  if (this->has_end_lonlat_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::end_lonlat_point(this), target, stream);
  }

  // string end_point_name = 6;
  if (this->end_point_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_point_name().data(), static_cast<int>(this->_internal_end_point_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FNgpRouteBrief.end_point_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_end_point_name(), target);
  }

  // int64 predict_time_duration = 7;
  if (this->predict_time_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_predict_time_duration(), target);
  }

  // int64 create_time = 8;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_create_time(), target);
  }

  // bool is_selected = 9;
  if (this->is_selected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_selected(), target);
  }

  // int64 last_use_time = 10;
  if (this->last_use_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_last_use_time(), target);
  }

  // bool is_lock = 11;
  if (this->is_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_lock(), target);
  }

  // .FNgpStatus fngp_status = 12;
  if (this->fngp_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_fngp_status(), target);
  }

  // .PathType path_type = 13;
  if (this->path_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_path_type(), target);
  }

  // int32 priority = 14;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_priority(), target);
  }

  // string name = 15;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FNgpRouteBrief.name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_name(), target);
  }

  // int32 total_odd_milage = 16;
  if (this->total_odd_milage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_total_odd_milage(), target);
  }

  // int32 route_show_status = 17;
  if (this->route_show_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_route_show_status(), target);
  }

  // .PriorityInfo priority_info = 18;
  if (this->priority_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_priority_info(), target);
  }

  // int32 is_renamed_route = 19;
  if (this->is_renamed_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_is_renamed_route(), target);
  }

  // int32 is_navi_end_match = 20;
  if (this->is_navi_end_match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_is_navi_end_match(), target);
  }

  // int32 cluster_number = 21;
  if (this->cluster_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_cluster_number(), target);
  }

  // .PathLearnStatus learn_status = 22;
  if (this->learn_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_learn_status(), target);
  }

  // double route_score = 23;
  if (!(this->route_score() <= 0 && this->route_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_route_score(), target);
  }

  // .UsingRawRouteType using_raw_route_type = 24;
  if (this->using_raw_route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_using_raw_route_type(), target);
  }

  // int32 start_end_cluster_number = 25;
  if (this->start_end_cluster_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_start_end_cluster_number(), target);
  }

  // int32 is_custom = 26;
  if (this->is_custom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_is_custom(), target);
  }

  // .CustomStatusMsg custom_status_msg = 27;
  if (this->has_custom_status_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::custom_status_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpRouteBrief)
  return target;
}

size_t FNgpRouteBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpRouteBrief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string begin_point_name = 4;
  if (this->begin_point_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_begin_point_name());
  }

  // string end_point_name = 6;
  if (this->end_point_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_point_name());
  }

  // string name = 15;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Point begin_lonlat_point = 3;
  if (this->has_begin_lonlat_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *begin_lonlat_point_);
  }

  // .Point end_lonlat_point = 5;
  if (this->has_end_lonlat_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_lonlat_point_);
  }

  // .CustomStatusMsg custom_status_msg = 27;
  if (this->has_custom_status_msg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_status_msg_);
  }

  // int64 route_id = 1;
  if (this->route_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_route_id());
  }

  // int64 predict_time_duration = 7;
  if (this->predict_time_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_predict_time_duration());
  }

  // int32 total_mileage = 2;
  if (this->total_mileage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_mileage());
  }

  // bool is_selected = 9;
  if (this->is_selected() != 0) {
    total_size += 1 + 1;
  }

  // bool is_lock = 11;
  if (this->is_lock() != 0) {
    total_size += 1 + 1;
  }

  // int64 create_time = 8;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_time());
  }

  // int64 last_use_time = 10;
  if (this->last_use_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_use_time());
  }

  // .FNgpStatus fngp_status = 12;
  if (this->fngp_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fngp_status());
  }

  // .PathType path_type = 13;
  if (this->path_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_path_type());
  }

  // int32 priority = 14;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  // int32 total_odd_milage = 16;
  if (this->total_odd_milage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_odd_milage());
  }

  // int32 route_show_status = 17;
  if (this->route_show_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_route_show_status());
  }

  // .PriorityInfo priority_info = 18;
  if (this->priority_info() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority_info());
  }

  // int32 is_renamed_route = 19;
  if (this->is_renamed_route() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_renamed_route());
  }

  // int32 is_navi_end_match = 20;
  if (this->is_navi_end_match() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_navi_end_match());
  }

  // int32 cluster_number = 21;
  if (this->cluster_number() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cluster_number());
  }

  // .PathLearnStatus learn_status = 22;
  if (this->learn_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_learn_status());
  }

  // double route_score = 23;
  if (!(this->route_score() <= 0 && this->route_score() >= 0)) {
    total_size += 2 + 8;
  }

  // .UsingRawRouteType using_raw_route_type = 24;
  if (this->using_raw_route_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_using_raw_route_type());
  }

  // int32 start_end_cluster_number = 25;
  if (this->start_end_cluster_number() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_end_cluster_number());
  }

  // int32 is_custom = 26;
  if (this->is_custom() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_custom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpRouteBrief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpRouteBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpRouteBrief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpRouteBrief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpRouteBrief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpRouteBrief)
    MergeFrom(*source);
  }
}

void FNgpRouteBrief::MergeFrom(const FNgpRouteBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpRouteBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin_point_name().size() > 0) {
    _internal_set_begin_point_name(from._internal_begin_point_name());
  }
  if (from.end_point_name().size() > 0) {
    _internal_set_end_point_name(from._internal_end_point_name());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_begin_lonlat_point()) {
    _internal_mutable_begin_lonlat_point()->::Point::MergeFrom(from._internal_begin_lonlat_point());
  }
  if (from.has_end_lonlat_point()) {
    _internal_mutable_end_lonlat_point()->::Point::MergeFrom(from._internal_end_lonlat_point());
  }
  if (from.has_custom_status_msg()) {
    _internal_mutable_custom_status_msg()->::CustomStatusMsg::MergeFrom(from._internal_custom_status_msg());
  }
  if (from.route_id() != 0) {
    _internal_set_route_id(from._internal_route_id());
  }
  if (from.predict_time_duration() != 0) {
    _internal_set_predict_time_duration(from._internal_predict_time_duration());
  }
  if (from.total_mileage() != 0) {
    _internal_set_total_mileage(from._internal_total_mileage());
  }
  if (from.is_selected() != 0) {
    _internal_set_is_selected(from._internal_is_selected());
  }
  if (from.is_lock() != 0) {
    _internal_set_is_lock(from._internal_is_lock());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.last_use_time() != 0) {
    _internal_set_last_use_time(from._internal_last_use_time());
  }
  if (from.fngp_status() != 0) {
    _internal_set_fngp_status(from._internal_fngp_status());
  }
  if (from.path_type() != 0) {
    _internal_set_path_type(from._internal_path_type());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.total_odd_milage() != 0) {
    _internal_set_total_odd_milage(from._internal_total_odd_milage());
  }
  if (from.route_show_status() != 0) {
    _internal_set_route_show_status(from._internal_route_show_status());
  }
  if (from.priority_info() != 0) {
    _internal_set_priority_info(from._internal_priority_info());
  }
  if (from.is_renamed_route() != 0) {
    _internal_set_is_renamed_route(from._internal_is_renamed_route());
  }
  if (from.is_navi_end_match() != 0) {
    _internal_set_is_navi_end_match(from._internal_is_navi_end_match());
  }
  if (from.cluster_number() != 0) {
    _internal_set_cluster_number(from._internal_cluster_number());
  }
  if (from.learn_status() != 0) {
    _internal_set_learn_status(from._internal_learn_status());
  }
  if (!(from.route_score() <= 0 && from.route_score() >= 0)) {
    _internal_set_route_score(from._internal_route_score());
  }
  if (from.using_raw_route_type() != 0) {
    _internal_set_using_raw_route_type(from._internal_using_raw_route_type());
  }
  if (from.start_end_cluster_number() != 0) {
    _internal_set_start_end_cluster_number(from._internal_start_end_cluster_number());
  }
  if (from.is_custom() != 0) {
    _internal_set_is_custom(from._internal_is_custom());
  }
}

void FNgpRouteBrief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpRouteBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpRouteBrief::CopyFrom(const FNgpRouteBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpRouteBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpRouteBrief::IsInitialized() const {
  return true;
}

void FNgpRouteBrief::InternalSwap(FNgpRouteBrief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  begin_point_name_.Swap(&other->begin_point_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_point_name_.Swap(&other->end_point_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FNgpRouteBrief, is_custom_)
      + sizeof(FNgpRouteBrief::is_custom_)
      - PROTOBUF_FIELD_OFFSET(FNgpRouteBrief, begin_lonlat_point_)>(
          reinterpret_cast<char*>(&begin_lonlat_point_),
          reinterpret_cast<char*>(&other->begin_lonlat_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpRouteBrief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpRouteBriefList::InitAsDefaultInstance() {
  ::_FNgpRouteBriefList_default_instance_._instance.get_mutable()->fngp_emulator_navigation_ = const_cast< ::FNgpEmulatorNavigation*>(
      ::FNgpEmulatorNavigation::internal_default_instance());
}
class FNgpRouteBriefList::_Internal {
 public:
  static const ::FNgpEmulatorNavigation& fngp_emulator_navigation(const FNgpRouteBriefList* msg);
};

const ::FNgpEmulatorNavigation&
FNgpRouteBriefList::_Internal::fngp_emulator_navigation(const FNgpRouteBriefList* msg) {
  return *msg->fngp_emulator_navigation_;
}
FNgpRouteBriefList::FNgpRouteBriefList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fngp_route_brief_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpRouteBriefList)
}
FNgpRouteBriefList::FNgpRouteBriefList(const FNgpRouteBriefList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fngp_route_brief_list_(from.fngp_route_brief_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fngp_emulator_navigation()) {
    fngp_emulator_navigation_ = new ::FNgpEmulatorNavigation(*from.fngp_emulator_navigation_);
  } else {
    fngp_emulator_navigation_ = nullptr;
  }
  ::memcpy(&sequence_id_, &from.sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_remind_) -
    reinterpret_cast<char*>(&sequence_id_)) + sizeof(state_remind_));
  // @@protoc_insertion_point(copy_constructor:FNgpRouteBriefList)
}

void FNgpRouteBriefList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpRouteBriefList_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  ::memset(&fngp_emulator_navigation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_remind_) -
      reinterpret_cast<char*>(&fngp_emulator_navigation_)) + sizeof(state_remind_));
}

FNgpRouteBriefList::~FNgpRouteBriefList() {
  // @@protoc_insertion_point(destructor:FNgpRouteBriefList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpRouteBriefList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fngp_emulator_navigation_;
}

void FNgpRouteBriefList::ArenaDtor(void* object) {
  FNgpRouteBriefList* _this = reinterpret_cast< FNgpRouteBriefList* >(object);
  (void)_this;
}
void FNgpRouteBriefList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpRouteBriefList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpRouteBriefList& FNgpRouteBriefList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpRouteBriefList_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpRouteBriefList::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpRouteBriefList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fngp_route_brief_list_.Clear();
  if (GetArena() == nullptr && fngp_emulator_navigation_ != nullptr) {
    delete fngp_emulator_navigation_;
  }
  fngp_emulator_navigation_ = nullptr;
  ::memset(&sequence_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_remind_) -
      reinterpret_cast<char*>(&sequence_id_)) + sizeof(state_remind_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpRouteBriefList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .FNgpRouteBrief fngp_route_brief_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fngp_route_brief_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .FNgpEmulatorNavigation fngp_emulator_navigation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fngp_emulator_navigation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StateRemindType state_remind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state_remind(static_cast<::StateRemindType>(val));
        } else goto handle_unusual;
        continue;
      // int64 sequence_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpRouteBriefList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpRouteBriefList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FNgpRouteBrief fngp_route_brief_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fngp_route_brief_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fngp_route_brief_list(i), target, stream);
  }

  // .FNgpEmulatorNavigation fngp_emulator_navigation = 2;
  if (this->has_fngp_emulator_navigation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fngp_emulator_navigation(this), target, stream);
  }

  // .StateRemindType state_remind = 3;
  if (this->state_remind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state_remind(), target);
  }

  // int64 sequence_id = 4;
  if (this->sequence_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpRouteBriefList)
  return target;
}

size_t FNgpRouteBriefList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpRouteBriefList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FNgpRouteBrief fngp_route_brief_list = 1;
  total_size += 1UL * this->_internal_fngp_route_brief_list_size();
  for (const auto& msg : this->fngp_route_brief_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .FNgpEmulatorNavigation fngp_emulator_navigation = 2;
  if (this->has_fngp_emulator_navigation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fngp_emulator_navigation_);
  }

  // int64 sequence_id = 4;
  if (this->sequence_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence_id());
  }

  // .StateRemindType state_remind = 3;
  if (this->state_remind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state_remind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpRouteBriefList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpRouteBriefList)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpRouteBriefList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpRouteBriefList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpRouteBriefList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpRouteBriefList)
    MergeFrom(*source);
  }
}

void FNgpRouteBriefList::MergeFrom(const FNgpRouteBriefList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpRouteBriefList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fngp_route_brief_list_.MergeFrom(from.fngp_route_brief_list_);
  if (from.has_fngp_emulator_navigation()) {
    _internal_mutable_fngp_emulator_navigation()->::FNgpEmulatorNavigation::MergeFrom(from._internal_fngp_emulator_navigation());
  }
  if (from.sequence_id() != 0) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  if (from.state_remind() != 0) {
    _internal_set_state_remind(from._internal_state_remind());
  }
}

void FNgpRouteBriefList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpRouteBriefList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpRouteBriefList::CopyFrom(const FNgpRouteBriefList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpRouteBriefList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpRouteBriefList::IsInitialized() const {
  return true;
}

void FNgpRouteBriefList::InternalSwap(FNgpRouteBriefList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fngp_route_brief_list_.InternalSwap(&other->fngp_route_brief_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FNgpRouteBriefList, state_remind_)
      + sizeof(FNgpRouteBriefList::state_remind_)
      - PROTOBUF_FIELD_OFFSET(FNgpRouteBriefList, fngp_emulator_navigation_)>(
          reinterpret_cast<char*>(&fngp_emulator_navigation_),
          reinterpret_cast<char*>(&other->fngp_emulator_navigation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpRouteBriefList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpRouteDetailList::InitAsDefaultInstance() {
}
class FNgpRouteDetailList::_Internal {
 public:
};

FNgpRouteDetailList::FNgpRouteDetailList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fngp_route_defail_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpRouteDetailList)
}
FNgpRouteDetailList::FNgpRouteDetailList(const FNgpRouteDetailList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fngp_route_defail_list_(from.fngp_route_defail_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:FNgpRouteDetailList)
}

void FNgpRouteDetailList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpRouteDetailList_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  flag_ = 0;
}

FNgpRouteDetailList::~FNgpRouteDetailList() {
  // @@protoc_insertion_point(destructor:FNgpRouteDetailList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpRouteDetailList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FNgpRouteDetailList::ArenaDtor(void* object) {
  FNgpRouteDetailList* _this = reinterpret_cast< FNgpRouteDetailList* >(object);
  (void)_this;
}
void FNgpRouteDetailList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpRouteDetailList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpRouteDetailList& FNgpRouteDetailList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpRouteDetailList_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpRouteDetailList::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpRouteDetailList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fngp_route_defail_list_.Clear();
  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpRouteDetailList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .FNgpRouteDetail fngp_route_defail_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fngp_route_defail_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpRouteDetailList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpRouteDetailList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // repeated .FNgpRouteDetail fngp_route_defail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fngp_route_defail_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fngp_route_defail_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpRouteDetailList)
  return target;
}

size_t FNgpRouteDetailList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpRouteDetailList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FNgpRouteDetail fngp_route_defail_list = 2;
  total_size += 1UL * this->_internal_fngp_route_defail_list_size();
  for (const auto& msg : this->fngp_route_defail_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpRouteDetailList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpRouteDetailList)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpRouteDetailList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpRouteDetailList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpRouteDetailList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpRouteDetailList)
    MergeFrom(*source);
  }
}

void FNgpRouteDetailList::MergeFrom(const FNgpRouteDetailList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpRouteDetailList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fngp_route_defail_list_.MergeFrom(from.fngp_route_defail_list_);
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void FNgpRouteDetailList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpRouteDetailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpRouteDetailList::CopyFrom(const FNgpRouteDetailList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpRouteDetailList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpRouteDetailList::IsInitialized() const {
  return true;
}

void FNgpRouteDetailList::InternalSwap(FNgpRouteDetailList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fngp_route_defail_list_.InternalSwap(&other->fngp_route_defail_list_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpRouteDetailList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpRouteDetail::InitAsDefaultInstance() {
  ::_FNgpRouteDetail_default_instance_._instance.get_mutable()->fngp_route_brief_ = const_cast< ::FNgpRouteBrief*>(
      ::FNgpRouteBrief::internal_default_instance());
}
class FNgpRouteDetail::_Internal {
 public:
  static const ::FNgpRouteBrief& fngp_route_brief(const FNgpRouteDetail* msg);
};

const ::FNgpRouteBrief&
FNgpRouteDetail::_Internal::fngp_route_brief(const FNgpRouteDetail* msg) {
  return *msg->fngp_route_brief_;
}
FNgpRouteDetail::FNgpRouteDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v2_point_list_(arena),
  segment_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpRouteDetail)
}
FNgpRouteDetail::FNgpRouteDetail(const FNgpRouteDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v2_point_list_(from.v2_point_list_),
      segment_list_(from.segment_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fngp_route_brief()) {
    fngp_route_brief_ = new ::FNgpRouteBrief(*from.fngp_route_brief_);
  } else {
    fngp_route_brief_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:FNgpRouteDetail)
}

void FNgpRouteDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  fngp_route_brief_ = nullptr;
}

FNgpRouteDetail::~FNgpRouteDetail() {
  // @@protoc_insertion_point(destructor:FNgpRouteDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpRouteDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fngp_route_brief_;
}

void FNgpRouteDetail::ArenaDtor(void* object) {
  FNgpRouteDetail* _this = reinterpret_cast< FNgpRouteDetail* >(object);
  (void)_this;
}
void FNgpRouteDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpRouteDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpRouteDetail& FNgpRouteDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpRouteDetail_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpRouteDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpRouteDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2_point_list_.Clear();
  segment_list_.Clear();
  if (GetArena() == nullptr && fngp_route_brief_ != nullptr) {
    delete fngp_route_brief_;
  }
  fngp_route_brief_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpRouteDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .FNgpRouteBrief fngp_route_brief = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fngp_route_brief(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Point v2_point_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v2_point_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SegmentInfo segment_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpRouteDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpRouteDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FNgpRouteBrief fngp_route_brief = 1;
  if (this->has_fngp_route_brief()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fngp_route_brief(this), target, stream);
  }

  // repeated .Point v2_point_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v2_point_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_v2_point_list(i), target, stream);
  }

  // repeated .SegmentInfo segment_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_segment_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpRouteDetail)
  return target;
}

size_t FNgpRouteDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpRouteDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Point v2_point_list = 2;
  total_size += 1UL * this->_internal_v2_point_list_size();
  for (const auto& msg : this->v2_point_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SegmentInfo segment_list = 3;
  total_size += 1UL * this->_internal_segment_list_size();
  for (const auto& msg : this->segment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .FNgpRouteBrief fngp_route_brief = 1;
  if (this->has_fngp_route_brief()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fngp_route_brief_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpRouteDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpRouteDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpRouteDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpRouteDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpRouteDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpRouteDetail)
    MergeFrom(*source);
  }
}

void FNgpRouteDetail::MergeFrom(const FNgpRouteDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpRouteDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v2_point_list_.MergeFrom(from.v2_point_list_);
  segment_list_.MergeFrom(from.segment_list_);
  if (from.has_fngp_route_brief()) {
    _internal_mutable_fngp_route_brief()->::FNgpRouteBrief::MergeFrom(from._internal_fngp_route_brief());
  }
}

void FNgpRouteDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpRouteDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpRouteDetail::CopyFrom(const FNgpRouteDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpRouteDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpRouteDetail::IsInitialized() const {
  return true;
}

void FNgpRouteDetail::InternalSwap(FNgpRouteDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v2_point_list_.InternalSwap(&other->v2_point_list_);
  segment_list_.InternalSwap(&other->segment_list_);
  swap(fngp_route_brief_, other->fngp_route_brief_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpRouteDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpRouteWayPointsSpecified::InitAsDefaultInstance() {
}
class FNgpRouteWayPointsSpecified::_Internal {
 public:
};

FNgpRouteWayPointsSpecified::FNgpRouteWayPointsSpecified(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v2_point_list_specified_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpRouteWayPointsSpecified)
}
FNgpRouteWayPointsSpecified::FNgpRouteWayPointsSpecified(const FNgpRouteWayPointsSpecified& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      v2_point_list_specified_(from.v2_point_list_specified_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FNgpRouteWayPointsSpecified)
}

void FNgpRouteWayPointsSpecified::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpRouteWayPointsSpecified_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
}

FNgpRouteWayPointsSpecified::~FNgpRouteWayPointsSpecified() {
  // @@protoc_insertion_point(destructor:FNgpRouteWayPointsSpecified)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpRouteWayPointsSpecified::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FNgpRouteWayPointsSpecified::ArenaDtor(void* object) {
  FNgpRouteWayPointsSpecified* _this = reinterpret_cast< FNgpRouteWayPointsSpecified* >(object);
  (void)_this;
}
void FNgpRouteWayPointsSpecified::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpRouteWayPointsSpecified::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpRouteWayPointsSpecified& FNgpRouteWayPointsSpecified::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpRouteWayPointsSpecified_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpRouteWayPointsSpecified::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpRouteWayPointsSpecified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2_point_list_specified_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpRouteWayPointsSpecified::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Point v2_point_list_Specified = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v2_point_list_specified(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpRouteWayPointsSpecified::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpRouteWayPointsSpecified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Point v2_point_list_Specified = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v2_point_list_specified_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_v2_point_list_specified(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpRouteWayPointsSpecified)
  return target;
}

size_t FNgpRouteWayPointsSpecified::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpRouteWayPointsSpecified)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Point v2_point_list_Specified = 1;
  total_size += 1UL * this->_internal_v2_point_list_specified_size();
  for (const auto& msg : this->v2_point_list_specified_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpRouteWayPointsSpecified::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpRouteWayPointsSpecified)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpRouteWayPointsSpecified* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpRouteWayPointsSpecified>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpRouteWayPointsSpecified)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpRouteWayPointsSpecified)
    MergeFrom(*source);
  }
}

void FNgpRouteWayPointsSpecified::MergeFrom(const FNgpRouteWayPointsSpecified& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpRouteWayPointsSpecified)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v2_point_list_specified_.MergeFrom(from.v2_point_list_specified_);
}

void FNgpRouteWayPointsSpecified::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpRouteWayPointsSpecified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpRouteWayPointsSpecified::CopyFrom(const FNgpRouteWayPointsSpecified& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpRouteWayPointsSpecified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpRouteWayPointsSpecified::IsInitialized() const {
  return true;
}

void FNgpRouteWayPointsSpecified::InternalSwap(FNgpRouteWayPointsSpecified* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  v2_point_list_specified_.InternalSwap(&other->v2_point_list_specified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpRouteWayPointsSpecified::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpEmulatorNavigation::InitAsDefaultInstance() {
  ::_FNgpEmulatorNavigation_default_instance_._instance.get_mutable()->current_lonlat_point_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
}
class FNgpEmulatorNavigation::_Internal {
 public:
  static const ::Point& current_lonlat_point(const FNgpEmulatorNavigation* msg);
};

const ::Point&
FNgpEmulatorNavigation::_Internal::current_lonlat_point(const FNgpEmulatorNavigation* msg) {
  return *msg->current_lonlat_point_;
}
FNgpEmulatorNavigation::FNgpEmulatorNavigation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  offset_segment_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpEmulatorNavigation)
}
FNgpEmulatorNavigation::FNgpEmulatorNavigation(const FNgpEmulatorNavigation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      offset_segment_list_(from.offset_segment_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  end_point_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_point_name().empty()) {
    end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_point_name(),
      GetArena());
  }
  if (from._internal_has_current_lonlat_point()) {
    current_lonlat_point_ = new ::Point(*from.current_lonlat_point_);
  } else {
    current_lonlat_point_ = nullptr;
  }
  ::memcpy(&route_id_, &from.route_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_offset_) -
    reinterpret_cast<char*>(&route_id_)) + sizeof(current_offset_));
  // @@protoc_insertion_point(copy_constructor:FNgpEmulatorNavigation)
}

void FNgpEmulatorNavigation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  end_point_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_lonlat_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_offset_) -
      reinterpret_cast<char*>(&current_lonlat_point_)) + sizeof(current_offset_));
}

FNgpEmulatorNavigation::~FNgpEmulatorNavigation() {
  // @@protoc_insertion_point(destructor:FNgpEmulatorNavigation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpEmulatorNavigation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  end_point_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_lonlat_point_;
}

void FNgpEmulatorNavigation::ArenaDtor(void* object) {
  FNgpEmulatorNavigation* _this = reinterpret_cast< FNgpEmulatorNavigation* >(object);
  (void)_this;
}
void FNgpEmulatorNavigation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpEmulatorNavigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpEmulatorNavigation& FNgpEmulatorNavigation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpEmulatorNavigation_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpEmulatorNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpEmulatorNavigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_segment_list_.Clear();
  end_point_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && current_lonlat_point_ != nullptr) {
    delete current_lonlat_point_;
  }
  current_lonlat_point_ = nullptr;
  ::memset(&route_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_offset_) -
      reinterpret_cast<char*>(&route_id_)) + sizeof(current_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpEmulatorNavigation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_point_index_in_v2list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_point_index_in_v2list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Point current_lonlat_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_lonlat_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remain_mileage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remain_mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passed_mileage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          passed_mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 predict_time_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          predict_time_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 arrive_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          arrive_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ManeuverType maneuver_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_maneuver_type(static_cast<::ManeuverType>(val));
        } else goto handle_unusual;
        continue;
      // .ManeuverDirection maneuver_direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_maneuver_direction(static_cast<::ManeuverDirection>(val));
        } else goto handle_unusual;
        continue;
      // int32 maneuver_distance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          maneuver_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 current_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          current_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SegmentInfo offset_segment_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offset_segment_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string end_point_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_end_point_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FNgpEmulatorNavigation.end_point_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpEmulatorNavigation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpEmulatorNavigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 route_id = 1;
  if (this->route_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_route_id(), target);
  }

  // int32 current_point_index_in_v2list = 2;
  if (this->current_point_index_in_v2list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_point_index_in_v2list(), target);
  }

  // .Point current_lonlat_point = 3;
  if (this->has_current_lonlat_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::current_lonlat_point(this), target, stream);
  }

  // int32 remain_mileage = 4;
  if (this->remain_mileage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_remain_mileage(), target);
  }

  // int32 passed_mileage = 5;
  if (this->passed_mileage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_passed_mileage(), target);
  }

  // int64 predict_time_duration = 6;
  if (this->predict_time_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_predict_time_duration(), target);
  }

  // int64 arrive_time = 7;
  if (this->arrive_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_arrive_time(), target);
  }

  // .ManeuverType maneuver_type = 8;
  if (this->maneuver_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_maneuver_type(), target);
  }

  // .ManeuverDirection maneuver_direction = 9;
  if (this->maneuver_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_maneuver_direction(), target);
  }

  // int32 maneuver_distance = 10;
  if (this->maneuver_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_maneuver_distance(), target);
  }

  // int32 current_offset = 11;
  if (this->current_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_current_offset(), target);
  }

  // repeated .SegmentInfo offset_segment_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_offset_segment_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_offset_segment_list(i), target, stream);
  }

  // string end_point_name = 13;
  if (this->end_point_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_point_name().data(), static_cast<int>(this->_internal_end_point_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FNgpEmulatorNavigation.end_point_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_end_point_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpEmulatorNavigation)
  return target;
}

size_t FNgpEmulatorNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpEmulatorNavigation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SegmentInfo offset_segment_list = 12;
  total_size += 1UL * this->_internal_offset_segment_list_size();
  for (const auto& msg : this->offset_segment_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string end_point_name = 13;
  if (this->end_point_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_point_name());
  }

  // .Point current_lonlat_point = 3;
  if (this->has_current_lonlat_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_lonlat_point_);
  }

  // int64 route_id = 1;
  if (this->route_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_route_id());
  }

  // int32 current_point_index_in_v2list = 2;
  if (this->current_point_index_in_v2list() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_point_index_in_v2list());
  }

  // int32 remain_mileage = 4;
  if (this->remain_mileage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_mileage());
  }

  // int64 predict_time_duration = 6;
  if (this->predict_time_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_predict_time_duration());
  }

  // int32 passed_mileage = 5;
  if (this->passed_mileage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_passed_mileage());
  }

  // .ManeuverType maneuver_type = 8;
  if (this->maneuver_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maneuver_type());
  }

  // int64 arrive_time = 7;
  if (this->arrive_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_arrive_time());
  }

  // .ManeuverDirection maneuver_direction = 9;
  if (this->maneuver_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_maneuver_direction());
  }

  // int32 maneuver_distance = 10;
  if (this->maneuver_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maneuver_distance());
  }

  // int32 current_offset = 11;
  if (this->current_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpEmulatorNavigation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpEmulatorNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpEmulatorNavigation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpEmulatorNavigation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpEmulatorNavigation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpEmulatorNavigation)
    MergeFrom(*source);
  }
}

void FNgpEmulatorNavigation::MergeFrom(const FNgpEmulatorNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpEmulatorNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  offset_segment_list_.MergeFrom(from.offset_segment_list_);
  if (from.end_point_name().size() > 0) {
    _internal_set_end_point_name(from._internal_end_point_name());
  }
  if (from.has_current_lonlat_point()) {
    _internal_mutable_current_lonlat_point()->::Point::MergeFrom(from._internal_current_lonlat_point());
  }
  if (from.route_id() != 0) {
    _internal_set_route_id(from._internal_route_id());
  }
  if (from.current_point_index_in_v2list() != 0) {
    _internal_set_current_point_index_in_v2list(from._internal_current_point_index_in_v2list());
  }
  if (from.remain_mileage() != 0) {
    _internal_set_remain_mileage(from._internal_remain_mileage());
  }
  if (from.predict_time_duration() != 0) {
    _internal_set_predict_time_duration(from._internal_predict_time_duration());
  }
  if (from.passed_mileage() != 0) {
    _internal_set_passed_mileage(from._internal_passed_mileage());
  }
  if (from.maneuver_type() != 0) {
    _internal_set_maneuver_type(from._internal_maneuver_type());
  }
  if (from.arrive_time() != 0) {
    _internal_set_arrive_time(from._internal_arrive_time());
  }
  if (from.maneuver_direction() != 0) {
    _internal_set_maneuver_direction(from._internal_maneuver_direction());
  }
  if (from.maneuver_distance() != 0) {
    _internal_set_maneuver_distance(from._internal_maneuver_distance());
  }
  if (from.current_offset() != 0) {
    _internal_set_current_offset(from._internal_current_offset());
  }
}

void FNgpEmulatorNavigation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpEmulatorNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpEmulatorNavigation::CopyFrom(const FNgpEmulatorNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpEmulatorNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpEmulatorNavigation::IsInitialized() const {
  return true;
}

void FNgpEmulatorNavigation::InternalSwap(FNgpEmulatorNavigation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  offset_segment_list_.InternalSwap(&other->offset_segment_list_);
  end_point_name_.Swap(&other->end_point_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FNgpEmulatorNavigation, current_offset_)
      + sizeof(FNgpEmulatorNavigation::current_offset_)
      - PROTOBUF_FIELD_OFFSET(FNgpEmulatorNavigation, current_lonlat_point_)>(
          reinterpret_cast<char*>(&current_lonlat_point_),
          reinterpret_cast<char*>(&other->current_lonlat_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpEmulatorNavigation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomStatusMsg::InitAsDefaultInstance() {
}
class CustomStatusMsg::_Internal {
 public:
};

CustomStatusMsg::CustomStatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CustomStatusMsg)
}
CustomStatusMsg::CustomStatusMsg(const CustomStatusMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:CustomStatusMsg)
}

void CustomStatusMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

CustomStatusMsg::~CustomStatusMsg() {
  // @@protoc_insertion_point(destructor:CustomStatusMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomStatusMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomStatusMsg::ArenaDtor(void* object) {
  CustomStatusMsg* _this = reinterpret_cast< CustomStatusMsg* >(object);
  (void)_this;
}
void CustomStatusMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomStatusMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomStatusMsg& CustomStatusMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomStatusMsg_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void CustomStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CustomStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomStatusMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CustomStatusMsg.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomStatusMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CustomStatusMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CustomStatusMsg.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CustomStatusMsg)
  return target;
}

size_t CustomStatusMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CustomStatusMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomStatusMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CustomStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomStatusMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomStatusMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CustomStatusMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CustomStatusMsg)
    MergeFrom(*source);
  }
}

void CustomStatusMsg::MergeFrom(const CustomStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CustomStatusMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void CustomStatusMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CustomStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomStatusMsg::CopyFrom(const CustomStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CustomStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomStatusMsg::IsInitialized() const {
  return true;
}

void CustomStatusMsg::InternalSwap(CustomStatusMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomStatusMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FNgpRecordingState::InitAsDefaultInstance() {
}
class FNgpRecordingState::_Internal {
 public:
};

FNgpRecordingState::FNgpRecordingState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FNgpRecordingState)
}
FNgpRecordingState::FNgpRecordingState(const FNgpRecordingState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&route_id_, &from.route_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recording_status_) -
    reinterpret_cast<char*>(&route_id_)) + sizeof(recording_status_));
  // @@protoc_insertion_point(copy_constructor:FNgpRecordingState)
}

void FNgpRecordingState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FNgpRecordingState_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&route_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_status_) -
      reinterpret_cast<char*>(&route_id_)) + sizeof(recording_status_));
}

FNgpRecordingState::~FNgpRecordingState() {
  // @@protoc_insertion_point(destructor:FNgpRecordingState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FNgpRecordingState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FNgpRecordingState::ArenaDtor(void* object) {
  FNgpRecordingState* _this = reinterpret_cast< FNgpRecordingState* >(object);
  (void)_this;
}
void FNgpRecordingState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FNgpRecordingState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FNgpRecordingState& FNgpRecordingState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FNgpRecordingState_proto_5fap_2ffngp_5froute_5fmgr_2eproto.base);
  return *internal_default_instance();
}


void FNgpRecordingState::Clear() {
// @@protoc_insertion_point(message_clear_start:FNgpRecordingState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&route_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_status_) -
      reinterpret_cast<char*>(&route_id_)) + sizeof(recording_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FNgpRecordingState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 route_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 recording_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recording_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FNgpRecordingState.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FNgpRecordingState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FNgpRecordingState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 route_id = 1;
  if (this->route_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_route_id(), target);
  }

  // uint32 recording_status = 2;
  if (this->recording_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recording_status(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FNgpRecordingState.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FNgpRecordingState)
  return target;
}

size_t FNgpRecordingState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FNgpRecordingState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 route_id = 1;
  if (this->route_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_route_id());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // uint32 recording_status = 2;
  if (this->recording_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recording_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FNgpRecordingState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FNgpRecordingState)
  GOOGLE_DCHECK_NE(&from, this);
  const FNgpRecordingState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FNgpRecordingState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FNgpRecordingState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FNgpRecordingState)
    MergeFrom(*source);
  }
}

void FNgpRecordingState::MergeFrom(const FNgpRecordingState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FNgpRecordingState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.route_id() != 0) {
    _internal_set_route_id(from._internal_route_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.recording_status() != 0) {
    _internal_set_recording_status(from._internal_recording_status());
  }
}

void FNgpRecordingState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FNgpRecordingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FNgpRecordingState::CopyFrom(const FNgpRecordingState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FNgpRecordingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FNgpRecordingState::IsInitialized() const {
  return true;
}

void FNgpRecordingState::InternalSwap(FNgpRecordingState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FNgpRecordingState, recording_status_)
      + sizeof(FNgpRecordingState::recording_status_)
      - PROTOBUF_FIELD_OFFSET(FNgpRecordingState, route_id_)>(
          reinterpret_cast<char*>(&route_id_),
          reinterpret_cast<char*>(&other->route_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FNgpRecordingState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Point* Arena::CreateMaybeMessage< ::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::SegmentInfo* Arena::CreateMaybeMessage< ::SegmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SegmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpRouteBrief* Arena::CreateMaybeMessage< ::FNgpRouteBrief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpRouteBrief >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpRouteBriefList* Arena::CreateMaybeMessage< ::FNgpRouteBriefList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpRouteBriefList >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpRouteDetailList* Arena::CreateMaybeMessage< ::FNgpRouteDetailList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpRouteDetailList >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpRouteDetail* Arena::CreateMaybeMessage< ::FNgpRouteDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpRouteDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpRouteWayPointsSpecified* Arena::CreateMaybeMessage< ::FNgpRouteWayPointsSpecified >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpRouteWayPointsSpecified >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpEmulatorNavigation* Arena::CreateMaybeMessage< ::FNgpEmulatorNavigation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpEmulatorNavigation >(arena);
}
template<> PROTOBUF_NOINLINE ::CustomStatusMsg* Arena::CreateMaybeMessage< ::CustomStatusMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CustomStatusMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::FNgpRecordingState* Arena::CreateMaybeMessage< ::FNgpRecordingState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FNgpRecordingState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
