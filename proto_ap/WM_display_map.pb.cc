// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/WM_display_map.proto

#include "proto_ap/WM_display_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloorLevel_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fWM_5fdisplay_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto;
namespace venue_map_pb {
class venue_map_FloorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Floor> _instance;
} _venue_map_Floor_default_instance_;
class venue_map_Waypoints_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Waypoints_Type> _instance;
} _venue_map_Waypoints_Type_default_instance_;
class venue_map_Favorate_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Favorate_Type> _instance;
} _venue_map_Favorate_Type_default_instance_;
class venue_map_Updates_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Updates_Type> _instance;
} _venue_map_Updates_Type_default_instance_;
class venue_map_Slots_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Slots_Type> _instance;
} _venue_map_Slots_Type_default_instance_;
class venue_map_Ultrasonic_obstacles_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Ultrasonic_obstacles_Type> _instance;
} _venue_map_Ultrasonic_obstacles_Type_default_instance_;
class venue_map_LastPostprocessing_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_LastPostprocessing_Type> _instance;
} _venue_map_LastPostprocessing_Type_default_instance_;
class venue_map_Venue_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Venue_Type> _instance;
} _venue_map_Venue_Type_default_instance_;
class venue_map_Link_IDs_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Link_IDs_Type> _instance;
} _venue_map_Link_IDs_Type_default_instance_;
class venue_map_Turn_directions_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Turn_directions_Type> _instance;
} _venue_map_Turn_directions_Type_default_instance_;
class venue_map_Lane_lines_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Lane_lines_Type> _instance;
} _venue_map_Lane_lines_Type_default_instance_;
class venue_map_Links_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Links_Type> _instance;
} _venue_map_Links_Type_default_instance_;
class venue_map_Joints_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Joints_Type> _instance;
} _venue_map_Joints_Type_default_instance_;
class venue_map_Landmarks_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Landmarks_Type> _instance;
} _venue_map_Landmarks_Type_default_instance_;
class venue_map_Location_typeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Location_type> _instance;
} _venue_map_Location_type_default_instance_;
class venue_map_PointwithidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Pointwithid> _instance;
} _venue_map_Pointwithid_default_instance_;
class venue_map_EdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Edge> _instance;
} _venue_map_Edge_default_instance_;
class venue_map_ConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Connection> _instance;
} _venue_map_Connection_default_instance_;
class venue_map_IntersectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map_Intersection> _instance;
} _venue_map_Intersection_default_instance_;
class venue_mapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<venue_map> _instance;
} _venue_map_default_instance_;
class map_trajectory_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<map_trajectory_data> _instance;
} _map_trajectory_data_default_instance_;
}  // namespace venue_map_pb
static void InitDefaultsscc_info_map_trajectory_data_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_map_trajectory_data_default_instance_;
    new (ptr) ::venue_map_pb::map_trajectory_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::map_trajectory_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_map_trajectory_data_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_map_trajectory_data_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_ApTrajectoryDataType_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_default_instance_;
    new (ptr) ::venue_map_pb::venue_map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Connection_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Connection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Connection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Edge_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Edge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Edge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Favorate_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Favorate_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Favorate_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Floor_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Floor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Floor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Intersection_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Intersection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Intersection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Joints_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Joints_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Joints_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Landmarks_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Landmarks_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Landmarks_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,
      &scc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Lane_lines_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Lane_lines_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Lane_lines_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_LastPostprocessing_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_LastPostprocessing_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_LastPostprocessing_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Link_IDs_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Link_IDs_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Link_IDs_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Links_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Links_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Links_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Location_type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Location_type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Location_type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Pointwithid_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Pointwithid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Pointwithid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Slots_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Slots_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Slots_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Turn_directions_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Turn_directions_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Turn_directions_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Ultrasonic_obstacles_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Updates_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Updates_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Updates_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Venue_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Venue_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Venue_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {
      &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
      &scc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::venue_map_pb::_venue_map_Waypoints_Type_default_instance_;
    new (ptr) ::venue_map_pb::venue_map_Waypoints_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::venue_map_pb::venue_map_Waypoints_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fap_2fWM_5fdisplay_5fmap_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fap_2fWM_5fdisplay_5fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Floor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Floor, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Floor, level_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Floor, height_upper_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Floor, height_lower_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, index_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, locationx_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, locationy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, locationz_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, location_accuracy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, heading_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, temps_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, gear_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Waypoints_Type, training_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, confidence_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, virtualslot_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, reversepk_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, parallelpk_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, forwardpk_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Favorate_Type, favorslotconfirmed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Updates_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Updates_Type, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Updates_Type, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, link_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, shape_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, confidence_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, locationx_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, locationy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, locationz_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, location_accuracy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, nearfrontloc_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, nearfrontloc_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, nearfrontloc_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, nearrearloc_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, nearrearloc_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, nearrearloc_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, waypoint_index_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, heading_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, width_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, length_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, cdu_type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, updates_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, favorate_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Slots_Type, floor_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, link_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, confidence_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, locationa_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, locationa_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, locationa_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, locationb_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, locationb_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, locationb_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, location_accuracy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, waypoint_index_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, heading_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_LastPostprocessing_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_LastPostprocessing_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_LastPostprocessing_Type, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, orgin_location_lon_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, orgin_location_lat_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, orgin_location_alt_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, entrance_location_lon_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, entrance_location_lat_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, entrance_location_alt_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, updates_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Venue_Type, lastpostprocessing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Link_IDs_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Link_IDs_Type, link_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Link_IDs_Type, waypoint_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Turn_directions_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Turn_directions_Type, turnpoint_location_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Turn_directions_Type, turnpoint_location_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Turn_directions_Type, turnpoint_location_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Turn_directions_Type, direction_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Turn_directions_Type, maturity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, link_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, confidence_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, locationa_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, locationa_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, locationa_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, locationb_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, locationb_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, locationb_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, location_accuracy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, waypoint_index_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, direction_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Lane_lines_Type, updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, waypoints_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, joint_ids_1_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, joint_ids_2_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, landmark_ids_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, slot_ids_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, obstacle_ids_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, direction_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, isvalid_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Links_Type, floorlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, vlink_ids_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, confidence_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, location_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, location_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, location_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, location_accuracy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, heading_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, turn_directions_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, updates_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, isupdated_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Joints_Type, breaktype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, link_id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, maturity_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, confidence_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, location_x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, location_y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, location_z_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, location_accuracy_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, direction_type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, waypoint_index_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, heading_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, updates_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, floor_level_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, locationa_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Landmarks_Type, locationb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Location_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Location_type, x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Location_type, y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Location_type, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Pointwithid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Pointwithid, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Pointwithid, x_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Pointwithid, y_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Pointwithid, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, subtype_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, direction_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, pts_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Edge, linkid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Connection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Connection, edge1_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Connection, edge2_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Connection, type_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Connection, refline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Intersection, id_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Intersection, shapes_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Intersection, edges_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map_Intersection, connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, venue_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, vlinks_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, vjoints_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, vlandmarks_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, vslots_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, vobstacles_ultrasonic_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, vlanelines_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, floors_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, intersections_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::venue_map, logic_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::map_trajectory_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::map_trajectory_data, venuemap_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::map_trajectory_data, aptrajectorydata_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::map_trajectory_data, timestamp_),
  PROTOBUF_FIELD_OFFSET(::venue_map_pb::map_trajectory_data, isacrossfloors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::venue_map_pb::venue_map_Floor)},
  { 9, -1, sizeof(::venue_map_pb::venue_map_Waypoints_Type)},
  { 24, -1, sizeof(::venue_map_pb::venue_map_Favorate_Type)},
  { 37, -1, sizeof(::venue_map_pb::venue_map_Updates_Type)},
  { 44, -1, sizeof(::venue_map_pb::venue_map_Slots_Type)},
  { 72, -1, sizeof(::venue_map_pb::venue_map_Ultrasonic_obstacles_Type)},
  { 92, -1, sizeof(::venue_map_pb::venue_map_LastPostprocessing_Type)},
  { 99, -1, sizeof(::venue_map_pb::venue_map_Venue_Type)},
  { 115, -1, sizeof(::venue_map_pb::venue_map_Link_IDs_Type)},
  { 122, -1, sizeof(::venue_map_pb::venue_map_Turn_directions_Type)},
  { 132, -1, sizeof(::venue_map_pb::venue_map_Lane_lines_Type)},
  { 152, -1, sizeof(::venue_map_pb::venue_map_Links_Type)},
  { 167, -1, sizeof(::venue_map_pb::venue_map_Joints_Type)},
  { 185, -1, sizeof(::venue_map_pb::venue_map_Landmarks_Type)},
  { 206, -1, sizeof(::venue_map_pb::venue_map_Location_type)},
  { 214, -1, sizeof(::venue_map_pb::venue_map_Pointwithid)},
  { 223, -1, sizeof(::venue_map_pb::venue_map_Edge)},
  { 234, -1, sizeof(::venue_map_pb::venue_map_Connection)},
  { 243, -1, sizeof(::venue_map_pb::venue_map_Intersection)},
  { 252, -1, sizeof(::venue_map_pb::venue_map)},
  { 267, -1, sizeof(::venue_map_pb::map_trajectory_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Floor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Waypoints_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Favorate_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Updates_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Slots_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Ultrasonic_obstacles_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_LastPostprocessing_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Venue_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Link_IDs_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Turn_directions_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Lane_lines_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Links_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Joints_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Landmarks_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Location_type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Pointwithid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Connection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_Intersection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_venue_map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::venue_map_pb::_map_trajectory_data_default_instance_),
};

const char descriptor_table_protodef_proto_5fap_2fWM_5fdisplay_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035proto_ap/WM_display_map.proto\022\014venue_m"
  "ap_pb\032\"proto_ap/WM_display_realtime.prot"
  "o\032\023proto_ap/base.proto\032\030proto_ap/logic_m"
  "ap.proto\"\214$\n\tvenue_map\0221\n\005Venue\030\001 \001(\0132\"."
  "venue_map_pb.venue_map.Venue_Type\0222\n\006vLi"
  "nks\030\002 \003(\0132\".venue_map_pb.venue_map.Links"
  "_Type\0224\n\007vJoints\030\003 \003(\0132#.venue_map_pb.ve"
  "nue_map.Joints_Type\022:\n\nvLandmarks\030\004 \003(\0132"
  "&.venue_map_pb.venue_map.Landmarks_Type\022"
  "2\n\006vSlots\030\005 \003(\0132\".venue_map_pb.venue_map"
  ".Slots_Type\022P\n\025vObstacles_Ultrasonic\030\006 \003"
  "(\01321.venue_map_pb.venue_map.Ultrasonic_o"
  "bstacles_Type\022;\n\nvLaneLines\030\007 \003(\0132\'.venu"
  "e_map_pb.venue_map.Lane_lines_Type\022-\n\006fl"
  "oors\030\010 \003(\0132\035.venue_map_pb.venue_map.Floo"
  "r\022;\n\rintersections\030\t \003(\0132$.venue_map_pb."
  "venue_map.Intersection\022\'\n\tlogic_map\030\n \001("
  "\0132\024.LogicMapPb.LogicMap\032N\n\005Floor\022\n\n\002ID\030\001"
  " \001(\005\022\r\n\005level\030\002 \001(\005\022\024\n\014height_upper\030\003 \001("
  "\002\022\024\n\014height_lower\030\004 \001(\002\032\311\001\n\016Waypoints_Ty"
  "pe\022\r\n\005Index\030\001 \001(\005\022\020\n\010Maturity\030\002 \001(\r\022\021\n\tL"
  "ocationx\030\003 \001(\002\022\021\n\tLocationy\030\004 \001(\002\022\021\n\tLoc"
  "ationz\030\005 \001(\002\022\031\n\021Location_accuracy\030\006 \001(\002\022"
  "\017\n\007Heading\030\007 \001(\002\022\r\n\005TempS\030\010 \001(\002\022\014\n\004Gear\030"
  "\t \001(\021\022\024\n\014Training_tag\030\n \001(\005\032\264\001\n\rFavorate"
  "_Type\022\022\n\nVehicle_ID\030\001 \001(\005\022\022\n\nConfidence\030"
  "\002 \001(\002\022\020\n\010Maturity\030\003 \001(\r\022\023\n\013VirtualSlot\030\004"
  " \001(\r\022\021\n\tReversePk\030\005 \001(\r\022\022\n\nParallelPk\030\006 "
  "\001(\r\022\021\n\tForwardPk\030\007 \001(\r\022\032\n\022Favorslotconfi"
  "rmed\030\010 \001(\005\0320\n\014Updates_Type\022\022\n\nVehicle_ID"
  "\030\001 \001(\005\022\014\n\004Time\030\002 \001(\003\032\266\004\n\nSlots_Type\022\n\n\002I"
  "D\030\001 \001(\r\022\017\n\007Link_ID\030\002 \001(\r\022\r\n\005Shape\030\003 \001(\021\022"
  "\020\n\010Maturity\030\004 \001(\r\022\022\n\nConfidence\030\005 \001(\002\022\021\n"
  "\tLocationx\030\006 \001(\002\022\021\n\tLocationy\030\007 \001(\002\022\021\n\tL"
  "ocationz\030\010 \001(\002\022\031\n\021Location_accuracy\030\t \001("
  "\002\022\026\n\016NearFrontLoc_x\030\n \001(\002\022\026\n\016NearFrontLo"
  "c_y\030\013 \001(\002\022\026\n\016NearFrontLoc_z\030\014 \001(\002\022\025\n\rNea"
  "rRearLoc_x\030\r \001(\002\022\025\n\rNearRearLoc_y\030\016 \001(\002\022"
  "\025\n\rNearRearLoc_z\030\017 \001(\002\022\026\n\016WayPoint_Index"
  "\030\020 \001(\005\022\017\n\007Heading\030\021 \001(\002\022\r\n\005Width\030\022 \001(\002\022\016"
  "\n\006Length\030\023 \001(\002\022\020\n\010CDU_Type\030\024 \001(\021\0225\n\007Upda"
  "tes\030\025 \001(\0132$.venue_map_pb.venue_map.Updat"
  "es_Type\0227\n\010Favorate\030\026 \001(\0132%.venue_map_pb"
  ".venue_map.Favorate_Type\022+\n\013floor_level\030"
  "\027 \001(\0132\026.SRprotobuf.FloorLevel\032\345\002\n\031Ultras"
  "onic_obstacles_Type\022\n\n\002ID\030\001 \001(\r\022\017\n\007Link_"
  "ID\030\002 \001(\r\022\014\n\004Type\030\003 \001(\021\022\020\n\010Maturity\030\004 \001(\r"
  "\022\022\n\nConfidence\030\005 \001(\002\022\023\n\013LocationA_x\030\006 \001("
  "\002\022\023\n\013LocationA_y\030\007 \001(\002\022\023\n\013LocationA_z\030\010 "
  "\001(\002\022\023\n\013LocationB_x\030\t \001(\002\022\023\n\013LocationB_y\030"
  "\n \001(\002\022\023\n\013LocationB_z\030\013 \001(\002\022\031\n\021Location_a"
  "ccuracy\030\014 \001(\002\022\026\n\016WayPoint_Index\030\r \001(\005\022\017\n"
  "\007Heading\030\016 \001(\002\0225\n\007Updates\030\017 \001(\0132$.venue_"
  "map_pb.venue_map.Updates_Type\0329\n\027LastPos"
  "tprocessing_Type\022\020\n\010Maturity\030\001 \001(\r\022\014\n\004Ti"
  "me\030\002 \001(\003\032\355\002\n\nVenue_Type\022\n\n\002ID\030\001 \001(\r\022\014\n\004T"
  "ype\030\002 \001(\021\022\032\n\022Orgin_location_lon\030\003 \001(\001\022\032\n"
  "\022Orgin_location_lat\030\004 \001(\001\022\032\n\022Orgin_locat"
  "ion_alt\030\005 \001(\001\022\035\n\025Entrance_location_lon\030\006"
  " \001(\001\022\035\n\025Entrance_location_lat\030\007 \001(\001\022\035\n\025E"
  "ntrance_location_alt\030\010 \001(\001\022\020\n\010Maturity\030\t"
  " \001(\r\0225\n\007Updates\030\n \001(\0132$.venue_map_pb.ven"
  "ue_map.Updates_Type\022K\n\022LastPostprocessin"
  "g\030\013 \001(\0132/.venue_map_pb.venue_map.LastPos"
  "tprocessing_Type\0328\n\rLink_IDs_Type\022\017\n\007Lin"
  "k_ID\030\001 \001(\r\022\026\n\016WayPoint_index\030\002 \001(\005\032\225\001\n\024T"
  "urn_directions_Type\022\034\n\024TurnPoint_Locatio"
  "n_x\030\001 \001(\002\022\034\n\024TurnPoint_Location_y\030\002 \001(\002\022"
  "\034\n\024TurnPoint_Location_z\030\003 \001(\002\022\021\n\tDirecti"
  "on\030\004 \001(\002\022\020\n\010Maturity\030\005 \001(\r\032\335\002\n\017Lane_line"
  "s_Type\022\n\n\002ID\030\001 \001(\r\022\017\n\007Link_ID\030\002 \001(\r\022\014\n\004T"
  "ype\030\003 \001(\021\022\020\n\010Maturity\030\004 \001(\r\022\022\n\nConfidenc"
  "e\030\005 \001(\002\022\023\n\013LocationA_x\030\006 \001(\002\022\023\n\013Location"
  "A_y\030\007 \001(\002\022\023\n\013LocationA_z\030\010 \001(\002\022\023\n\013Locati"
  "onB_x\030\t \001(\002\022\023\n\013LocationB_y\030\n \001(\002\022\023\n\013Loca"
  "tionB_z\030\013 \001(\002\022\031\n\021Location_accuracy\030\014 \001(\002"
  "\022\026\n\016WayPoint_Index\030\r \001(\005\022\021\n\tDirection\030\016 "
  "\001(\002\0225\n\007Updates\030\017 \001(\0132$.venue_map_pb.venu"
  "e_map.Updates_Type\032\363\001\n\nLinks_Type\0229\n\tWay"
  "points\030\001 \003(\0132&.venue_map_pb.venue_map.Wa"
  "ypoints_Type\022\023\n\013Joint_IDs_1\030\002 \001(\r\022\023\n\013Joi"
  "nt_IDs_2\030\003 \001(\r\022\024\n\014Landmark_IDs\030\004 \003(\r\022\020\n\010"
  "Slot_IDs\030\005 \003(\r\022\024\n\014Obstacle_IDs\030\006 \003(\r\022\n\n\002"
  "ID\030\007 \001(\r\022\021\n\tDirection\030\010 \001(\002\022\017\n\007IsValid\030\t"
  " \001(\010\022\022\n\nfloorlevel\030\n \003(\002\032\205\003\n\013Joints_Type"
  "\022\n\n\002ID\030\001 \001(\r\0228\n\tvLink_IDs\030\002 \003(\0132%.venue_"
  "map_pb.venue_map.Link_IDs_Type\022\020\n\010Maturi"
  "ty\030\003 \001(\r\022\022\n\nConfidence\030\004 \001(\002\022\022\n\nLocation"
  "_x\030\005 \001(\002\022\022\n\nLocation_y\030\006 \001(\002\022\022\n\nLocation"
  "_z\030\007 \001(\002\022\031\n\021Location_accuracy\030\010 \001(\002\022\017\n\007H"
  "eading\030\t \001(\002\022E\n\017Turn_directions\030\n \001(\0132,."
  "venue_map_pb.venue_map.Turn_directions_T"
  "ype\0225\n\007Updates\030\013 \001(\0132$.venue_map_pb.venu"
  "e_map.Updates_Type\022\021\n\tIsUpdated\030\014 \001(\r\022\021\n"
  "\tBreakType\030\r \001(\r\032\321\003\n\016Landmarks_Type\022\n\n\002I"
  "D\030\001 \001(\r\022\017\n\007Link_ID\030\002 \001(\r\022\014\n\004Type\030\003 \001(\021\022\020"
  "\n\010Maturity\030\004 \001(\r\022\022\n\nConfidence\030\005 \001(\002\022\022\n\n"
  "Location_x\030\006 \001(\002\022\022\n\nLocation_y\030\007 \001(\002\022\022\n\n"
  "Location_z\030\010 \001(\002\022\031\n\021Location_accuracy\030\t "
  "\001(\002\022\026\n\016Direction_type\030\n \001(\021\022\026\n\016WayPoint_"
  "Index\030\013 \001(\005\022\017\n\007Heading\030\014 \001(\002\0225\n\007Updates\030"
  "\r \001(\0132$.venue_map_pb.venue_map.Updates_T"
  "ype\022+\n\013floor_level\030\016 \001(\0132\026.SRprotobuf.Fl"
  "oorLevel\0228\n\tlocationA\030\017 \001(\0132%.venue_map_"
  "pb.venue_map.Location_type\0228\n\tlocationB\030"
  "\020 \001(\0132%.venue_map_pb.venue_map.Location_"
  "type\0320\n\rLocation_type\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002\022\t\n\001z\030\003 \001(\002\032:\n\013Pointwithid\022\n\n\002id\030\001 \001("
  "\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\032a\n\004Ed"
  "ge\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\017\n\007subtype\030"
  "\003 \001(\005\022\021\n\tdirection\030\004 \001(\002\022\013\n\003pts\030\005 \003(\005\022\016\n"
  "\006linkID\030\006 \001(\005\032p\n\nConnection\022\r\n\005edge1\030\001 \001"
  "(\005\022\r\n\005edge2\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\0226\n\007refli"
  "ne\030\004 \003(\0132%.venue_map_pb.venue_map.Locati"
  "on_type\032\265\001\n\014Intersection\022\n\n\002id\030\001 \001(\005\0223\n\006"
  "shapes\030\002 \003(\0132#.venue_map_pb.venue_map.Po"
  "intwithid\022+\n\005edges\030\003 \003(\0132\034.venue_map_pb."
  "venue_map.Edge\0227\n\013connections\030\004 \003(\0132\".ve"
  "nue_map_pb.venue_map.Connection\"\247\001\n\023map_"
  "trajectory_data\022)\n\010venueMap\030\001 \001(\0132\027.venu"
  "e_map_pb.venue_map\022:\n\020apTrajectoryData\030\002"
  " \001(\0132 .SRprotobuf.ApTrajectoryDataType\022\021"
  "\n\ttimestamp\030\003 \001(\r\022\026\n\016isAcrossFloors\030\004 \001("
  "\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto_deps[3] = {
  &::descriptor_table_proto_5fap_2fWM_5fdisplay_5frealtime_2eproto,
  &::descriptor_table_proto_5fap_2fbase_2eproto,
  &::descriptor_table_proto_5fap_2flogic_5fmap_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto_sccs[21] = {
  &scc_info_map_trajectory_data_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
  &scc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto = {
  false, false, descriptor_table_protodef_proto_5fap_2fWM_5fdisplay_5fmap_2eproto, "proto_ap/WM_display_map.proto", 4929,
  &descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto_once, descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto_sccs, descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto_deps, 21, 3,
  schemas, file_default_instances, TableStruct_proto_5fap_2fWM_5fdisplay_5fmap_2eproto::offsets,
  file_level_metadata_proto_5fap_2fWM_5fdisplay_5fmap_2eproto, 21, file_level_enum_descriptors_proto_5fap_2fWM_5fdisplay_5fmap_2eproto, file_level_service_descriptors_proto_5fap_2fWM_5fdisplay_5fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fap_2fWM_5fdisplay_5fmap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fap_2fWM_5fdisplay_5fmap_2eproto)), true);
namespace venue_map_pb {

// ===================================================================

void venue_map_Floor::InitAsDefaultInstance() {
}
class venue_map_Floor::_Internal {
 public:
};

venue_map_Floor::venue_map_Floor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Floor)
}
venue_map_Floor::venue_map_Floor(const venue_map_Floor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_lower_) -
    reinterpret_cast<char*>(&id_)) + sizeof(height_lower_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Floor)
}

void venue_map_Floor::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_lower_) -
      reinterpret_cast<char*>(&id_)) + sizeof(height_lower_));
}

venue_map_Floor::~venue_map_Floor() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Floor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Floor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Floor::ArenaDtor(void* object) {
  venue_map_Floor* _this = reinterpret_cast< venue_map_Floor* >(object);
  (void)_this;
}
void venue_map_Floor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Floor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Floor& venue_map_Floor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Floor_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Floor::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Floor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_lower_) -
      reinterpret_cast<char*>(&id_)) + sizeof(height_lower_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Floor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float height_upper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          height_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height_lower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          height_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Floor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Floor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // float height_upper = 3;
  if (!(this->height_upper() <= 0 && this->height_upper() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_height_upper(), target);
  }

  // float height_lower = 4;
  if (!(this->height_lower() <= 0 && this->height_lower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height_lower(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Floor)
  return target;
}

size_t venue_map_Floor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Floor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // float height_upper = 3;
  if (!(this->height_upper() <= 0 && this->height_upper() >= 0)) {
    total_size += 1 + 4;
  }

  // float height_lower = 4;
  if (!(this->height_lower() <= 0 && this->height_lower() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Floor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Floor)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Floor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Floor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Floor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Floor)
    MergeFrom(*source);
  }
}

void venue_map_Floor::MergeFrom(const venue_map_Floor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Floor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (!(from.height_upper() <= 0 && from.height_upper() >= 0)) {
    _internal_set_height_upper(from._internal_height_upper());
  }
  if (!(from.height_lower() <= 0 && from.height_lower() >= 0)) {
    _internal_set_height_lower(from._internal_height_lower());
  }
}

void venue_map_Floor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Floor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Floor::CopyFrom(const venue_map_Floor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Floor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Floor::IsInitialized() const {
  return true;
}

void venue_map_Floor::InternalSwap(venue_map_Floor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Floor, height_lower_)
      + sizeof(venue_map_Floor::height_lower_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Floor, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Floor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Waypoints_Type::InitAsDefaultInstance() {
}
class venue_map_Waypoints_Type::_Internal {
 public:
};

venue_map_Waypoints_Type::venue_map_Waypoints_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Waypoints_Type)
}
venue_map_Waypoints_Type::venue_map_Waypoints_Type(const venue_map_Waypoints_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&training_tag_) -
    reinterpret_cast<char*>(&index_)) + sizeof(training_tag_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Waypoints_Type)
}

void venue_map_Waypoints_Type::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&training_tag_) -
      reinterpret_cast<char*>(&index_)) + sizeof(training_tag_));
}

venue_map_Waypoints_Type::~venue_map_Waypoints_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Waypoints_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Waypoints_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Waypoints_Type::ArenaDtor(void* object) {
  venue_map_Waypoints_Type* _this = reinterpret_cast< venue_map_Waypoints_Type* >(object);
  (void)_this;
}
void venue_map_Waypoints_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Waypoints_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Waypoints_Type& venue_map_Waypoints_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Waypoints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Waypoints_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Waypoints_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&training_tag_) -
      reinterpret_cast<char*>(&index_)) + sizeof(training_tag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Waypoints_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Locationx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Locationy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Locationz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          locationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_accuracy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          location_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Heading = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float TempS = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          temps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 Gear = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Training_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          training_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Waypoints_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Waypoints_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 Maturity = 2;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maturity(), target);
  }

  // float Locationx = 3;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_locationx(), target);
  }

  // float Locationy = 4;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_locationy(), target);
  }

  // float Locationz = 5;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_locationz(), target);
  }

  // float Location_accuracy = 6;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_location_accuracy(), target);
  }

  // float Heading = 7;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_heading(), target);
  }

  // float TempS = 8;
  if (!(this->temps() <= 0 && this->temps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_temps(), target);
  }

  // sint32 Gear = 9;
  if (this->gear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(9, this->_internal_gear(), target);
  }

  // int32 Training_tag = 10;
  if (this->training_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_training_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Waypoints_Type)
  return target;
}

size_t venue_map_Waypoints_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Waypoints_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // uint32 Maturity = 2;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // float Locationx = 3;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    total_size += 1 + 4;
  }

  // float Locationy = 4;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    total_size += 1 + 4;
  }

  // float Locationz = 5;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_accuracy = 6;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // float Heading = 7;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // float TempS = 8;
  if (!(this->temps() <= 0 && this->temps() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 Gear = 9;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_gear());
  }

  // int32 Training_tag = 10;
  if (this->training_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_training_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Waypoints_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Waypoints_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Waypoints_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Waypoints_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Waypoints_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Waypoints_Type)
    MergeFrom(*source);
  }
}

void venue_map_Waypoints_Type::MergeFrom(const venue_map_Waypoints_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Waypoints_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!(from.locationx() <= 0 && from.locationx() >= 0)) {
    _internal_set_locationx(from._internal_locationx());
  }
  if (!(from.locationy() <= 0 && from.locationy() >= 0)) {
    _internal_set_locationy(from._internal_locationy());
  }
  if (!(from.locationz() <= 0 && from.locationz() >= 0)) {
    _internal_set_locationz(from._internal_locationz());
  }
  if (!(from.location_accuracy() <= 0 && from.location_accuracy() >= 0)) {
    _internal_set_location_accuracy(from._internal_location_accuracy());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.temps() <= 0 && from.temps() >= 0)) {
    _internal_set_temps(from._internal_temps());
  }
  if (from.gear() != 0) {
    _internal_set_gear(from._internal_gear());
  }
  if (from.training_tag() != 0) {
    _internal_set_training_tag(from._internal_training_tag());
  }
}

void venue_map_Waypoints_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Waypoints_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Waypoints_Type::CopyFrom(const venue_map_Waypoints_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Waypoints_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Waypoints_Type::IsInitialized() const {
  return true;
}

void venue_map_Waypoints_Type::InternalSwap(venue_map_Waypoints_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Waypoints_Type, training_tag_)
      + sizeof(venue_map_Waypoints_Type::training_tag_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Waypoints_Type, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Waypoints_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Favorate_Type::InitAsDefaultInstance() {
}
class venue_map_Favorate_Type::_Internal {
 public:
};

venue_map_Favorate_Type::venue_map_Favorate_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Favorate_Type)
}
venue_map_Favorate_Type::venue_map_Favorate_Type(const venue_map_Favorate_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favorslotconfirmed_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(favorslotconfirmed_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Favorate_Type)
}

void venue_map_Favorate_Type::SharedCtor() {
  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favorslotconfirmed_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(favorslotconfirmed_));
}

venue_map_Favorate_Type::~venue_map_Favorate_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Favorate_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Favorate_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Favorate_Type::ArenaDtor(void* object) {
  venue_map_Favorate_Type* _this = reinterpret_cast< venue_map_Favorate_Type* >(object);
  (void)_this;
}
void venue_map_Favorate_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Favorate_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Favorate_Type& venue_map_Favorate_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Favorate_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Favorate_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Favorate_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&favorslotconfirmed_) -
      reinterpret_cast<char*>(&vehicle_id_)) + sizeof(favorslotconfirmed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Favorate_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Vehicle_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VirtualSlot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          virtualslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ReversePk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reversepk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ParallelPk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          parallelpk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ForwardPk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          forwardpk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Favorslotconfirmed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          favorslotconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Favorate_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Favorate_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Vehicle_ID = 1;
  if (this->vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_id(), target);
  }

  // float Confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  // uint32 Maturity = 3;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maturity(), target);
  }

  // uint32 VirtualSlot = 4;
  if (this->virtualslot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_virtualslot(), target);
  }

  // uint32 ReversePk = 5;
  if (this->reversepk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reversepk(), target);
  }

  // uint32 ParallelPk = 6;
  if (this->parallelpk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_parallelpk(), target);
  }

  // uint32 ForwardPk = 7;
  if (this->forwardpk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_forwardpk(), target);
  }

  // int32 Favorslotconfirmed = 8;
  if (this->favorslotconfirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_favorslotconfirmed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Favorate_Type)
  return target;
}

size_t venue_map_Favorate_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Favorate_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Vehicle_ID = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_id());
  }

  // float Confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 Maturity = 3;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // uint32 VirtualSlot = 4;
  if (this->virtualslot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_virtualslot());
  }

  // uint32 ReversePk = 5;
  if (this->reversepk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reversepk());
  }

  // uint32 ParallelPk = 6;
  if (this->parallelpk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parallelpk());
  }

  // uint32 ForwardPk = 7;
  if (this->forwardpk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_forwardpk());
  }

  // int32 Favorslotconfirmed = 8;
  if (this->favorslotconfirmed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_favorslotconfirmed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Favorate_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Favorate_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Favorate_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Favorate_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Favorate_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Favorate_Type)
    MergeFrom(*source);
  }
}

void venue_map_Favorate_Type::MergeFrom(const venue_map_Favorate_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Favorate_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id() != 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (from.virtualslot() != 0) {
    _internal_set_virtualslot(from._internal_virtualslot());
  }
  if (from.reversepk() != 0) {
    _internal_set_reversepk(from._internal_reversepk());
  }
  if (from.parallelpk() != 0) {
    _internal_set_parallelpk(from._internal_parallelpk());
  }
  if (from.forwardpk() != 0) {
    _internal_set_forwardpk(from._internal_forwardpk());
  }
  if (from.favorslotconfirmed() != 0) {
    _internal_set_favorslotconfirmed(from._internal_favorslotconfirmed());
  }
}

void venue_map_Favorate_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Favorate_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Favorate_Type::CopyFrom(const venue_map_Favorate_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Favorate_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Favorate_Type::IsInitialized() const {
  return true;
}

void venue_map_Favorate_Type::InternalSwap(venue_map_Favorate_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Favorate_Type, favorslotconfirmed_)
      + sizeof(venue_map_Favorate_Type::favorslotconfirmed_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Favorate_Type, vehicle_id_)>(
          reinterpret_cast<char*>(&vehicle_id_),
          reinterpret_cast<char*>(&other->vehicle_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Favorate_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Updates_Type::InitAsDefaultInstance() {
}
class venue_map_Updates_Type::_Internal {
 public:
};

venue_map_Updates_Type::venue_map_Updates_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Updates_Type)
}
venue_map_Updates_Type::venue_map_Updates_Type(const venue_map_Updates_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(vehicle_id_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Updates_Type)
}

void venue_map_Updates_Type::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(vehicle_id_));
}

venue_map_Updates_Type::~venue_map_Updates_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Updates_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Updates_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Updates_Type::ArenaDtor(void* object) {
  venue_map_Updates_Type* _this = reinterpret_cast< venue_map_Updates_Type* >(object);
  (void)_this;
}
void venue_map_Updates_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Updates_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Updates_Type& venue_map_Updates_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Updates_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Updates_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Updates_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(vehicle_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Updates_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Vehicle_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Updates_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Updates_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Vehicle_ID = 1;
  if (this->vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_id(), target);
  }

  // int64 Time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Updates_Type)
  return target;
}

size_t venue_map_Updates_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Updates_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 Vehicle_ID = 1;
  if (this->vehicle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vehicle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Updates_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Updates_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Updates_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Updates_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Updates_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Updates_Type)
    MergeFrom(*source);
  }
}

void venue_map_Updates_Type::MergeFrom(const venue_map_Updates_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Updates_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.vehicle_id() != 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
}

void venue_map_Updates_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Updates_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Updates_Type::CopyFrom(const venue_map_Updates_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Updates_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Updates_Type::IsInitialized() const {
  return true;
}

void venue_map_Updates_Type::InternalSwap(venue_map_Updates_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Updates_Type, vehicle_id_)
      + sizeof(venue_map_Updates_Type::vehicle_id_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Updates_Type, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Updates_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Slots_Type::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_Slots_Type_default_instance_._instance.get_mutable()->updates_ = const_cast< ::venue_map_pb::venue_map_Updates_Type*>(
      ::venue_map_pb::venue_map_Updates_Type::internal_default_instance());
  ::venue_map_pb::_venue_map_Slots_Type_default_instance_._instance.get_mutable()->favorate_ = const_cast< ::venue_map_pb::venue_map_Favorate_Type*>(
      ::venue_map_pb::venue_map_Favorate_Type::internal_default_instance());
  ::venue_map_pb::_venue_map_Slots_Type_default_instance_._instance.get_mutable()->floor_level_ = const_cast< ::SRprotobuf::FloorLevel*>(
      ::SRprotobuf::FloorLevel::internal_default_instance());
}
class venue_map_Slots_Type::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Updates_Type& updates(const venue_map_Slots_Type* msg);
  static const ::venue_map_pb::venue_map_Favorate_Type& favorate(const venue_map_Slots_Type* msg);
  static const ::SRprotobuf::FloorLevel& floor_level(const venue_map_Slots_Type* msg);
};

const ::venue_map_pb::venue_map_Updates_Type&
venue_map_Slots_Type::_Internal::updates(const venue_map_Slots_Type* msg) {
  return *msg->updates_;
}
const ::venue_map_pb::venue_map_Favorate_Type&
venue_map_Slots_Type::_Internal::favorate(const venue_map_Slots_Type* msg) {
  return *msg->favorate_;
}
const ::SRprotobuf::FloorLevel&
venue_map_Slots_Type::_Internal::floor_level(const venue_map_Slots_Type* msg) {
  return *msg->floor_level_;
}
void venue_map_Slots_Type::clear_floor_level() {
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
}
venue_map_Slots_Type::venue_map_Slots_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Slots_Type)
}
venue_map_Slots_Type::venue_map_Slots_Type(const venue_map_Slots_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updates()) {
    updates_ = new ::venue_map_pb::venue_map_Updates_Type(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  if (from._internal_has_favorate()) {
    favorate_ = new ::venue_map_pb::venue_map_Favorate_Type(*from.favorate_);
  } else {
    favorate_ = nullptr;
  }
  if (from._internal_has_floor_level()) {
    floor_level_ = new ::SRprotobuf::FloorLevel(*from.floor_level_);
  } else {
    floor_level_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cdu_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cdu_type_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Slots_Type)
}

void venue_map_Slots_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdu_type_) -
      reinterpret_cast<char*>(&updates_)) + sizeof(cdu_type_));
}

venue_map_Slots_Type::~venue_map_Slots_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Slots_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Slots_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updates_;
  if (this != internal_default_instance()) delete favorate_;
  if (this != internal_default_instance()) delete floor_level_;
}

void venue_map_Slots_Type::ArenaDtor(void* object) {
  venue_map_Slots_Type* _this = reinterpret_cast< venue_map_Slots_Type* >(object);
  (void)_this;
}
void venue_map_Slots_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Slots_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Slots_Type& venue_map_Slots_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Slots_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Slots_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Slots_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  if (GetArena() == nullptr && favorate_ != nullptr) {
    delete favorate_;
  }
  favorate_ = nullptr;
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdu_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cdu_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Slots_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Link_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 Shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Locationx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Locationy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Locationz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          locationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_accuracy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          location_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NearFrontLoc_x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          nearfrontloc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NearFrontLoc_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          nearfrontloc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NearFrontLoc_z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          nearfrontloc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NearRearLoc_x = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          nearrearloc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NearRearLoc_y = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          nearrearloc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NearRearLoc_z = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          nearrearloc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 WayPoint_Index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Heading = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Width = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Length = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 CDU_Type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cdu_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Updates_Type Updates = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Favorate_Type Favorate = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_favorate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.FloorLevel floor_level = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Slots_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Slots_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_link_id(), target);
  }

  // sint32 Shape = 3;
  if (this->shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_shape(), target);
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maturity(), target);
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // float Locationx = 6;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_locationx(), target);
  }

  // float Locationy = 7;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_locationy(), target);
  }

  // float Locationz = 8;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_locationz(), target);
  }

  // float Location_accuracy = 9;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_location_accuracy(), target);
  }

  // float NearFrontLoc_x = 10;
  if (!(this->nearfrontloc_x() <= 0 && this->nearfrontloc_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_nearfrontloc_x(), target);
  }

  // float NearFrontLoc_y = 11;
  if (!(this->nearfrontloc_y() <= 0 && this->nearfrontloc_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_nearfrontloc_y(), target);
  }

  // float NearFrontLoc_z = 12;
  if (!(this->nearfrontloc_z() <= 0 && this->nearfrontloc_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_nearfrontloc_z(), target);
  }

  // float NearRearLoc_x = 13;
  if (!(this->nearrearloc_x() <= 0 && this->nearrearloc_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_nearrearloc_x(), target);
  }

  // float NearRearLoc_y = 14;
  if (!(this->nearrearloc_y() <= 0 && this->nearrearloc_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_nearrearloc_y(), target);
  }

  // float NearRearLoc_z = 15;
  if (!(this->nearrearloc_z() <= 0 && this->nearrearloc_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_nearrearloc_z(), target);
  }

  // int32 WayPoint_Index = 16;
  if (this->waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_waypoint_index(), target);
  }

  // float Heading = 17;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_heading(), target);
  }

  // float Width = 18;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_width(), target);
  }

  // float Length = 19;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_length(), target);
  }

  // sint32 CDU_Type = 20;
  if (this->cdu_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(20, this->_internal_cdu_type(), target);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 21;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::updates(this), target, stream);
  }

  // .venue_map_pb.venue_map.Favorate_Type Favorate = 22;
  if (this->has_favorate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::favorate(this), target, stream);
  }

  // .SRprotobuf.FloorLevel floor_level = 23;
  if (this->has_floor_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::floor_level(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Slots_Type)
  return target;
}

size_t venue_map_Slots_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Slots_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .venue_map_pb.venue_map.Updates_Type Updates = 21;
  if (this->has_updates()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // .venue_map_pb.venue_map.Favorate_Type Favorate = 22;
  if (this->has_favorate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *favorate_);
  }

  // .SRprotobuf.FloorLevel floor_level = 23;
  if (this->has_floor_level()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *floor_level_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_id());
  }

  // sint32 Shape = 3;
  if (this->shape() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_shape());
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float Locationx = 6;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    total_size += 1 + 4;
  }

  // float Locationy = 7;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    total_size += 1 + 4;
  }

  // float Locationz = 8;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_accuracy = 9;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // float NearFrontLoc_x = 10;
  if (!(this->nearfrontloc_x() <= 0 && this->nearfrontloc_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float NearFrontLoc_y = 11;
  if (!(this->nearfrontloc_y() <= 0 && this->nearfrontloc_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float NearFrontLoc_z = 12;
  if (!(this->nearfrontloc_z() <= 0 && this->nearfrontloc_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float NearRearLoc_x = 13;
  if (!(this->nearrearloc_x() <= 0 && this->nearrearloc_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float NearRearLoc_y = 14;
  if (!(this->nearrearloc_y() <= 0 && this->nearrearloc_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float NearRearLoc_z = 15;
  if (!(this->nearrearloc_z() <= 0 && this->nearrearloc_z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 WayPoint_Index = 16;
  if (this->waypoint_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waypoint_index());
  }

  // float Heading = 17;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 2 + 4;
  }

  // float Width = 18;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 2 + 4;
  }

  // float Length = 19;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 2 + 4;
  }

  // sint32 CDU_Type = 20;
  if (this->cdu_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_cdu_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Slots_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Slots_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Slots_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Slots_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Slots_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Slots_Type)
    MergeFrom(*source);
  }
}

void venue_map_Slots_Type::MergeFrom(const venue_map_Slots_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Slots_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updates()) {
    _internal_mutable_updates()->::venue_map_pb::venue_map_Updates_Type::MergeFrom(from._internal_updates());
  }
  if (from.has_favorate()) {
    _internal_mutable_favorate()->::venue_map_pb::venue_map_Favorate_Type::MergeFrom(from._internal_favorate());
  }
  if (from.has_floor_level()) {
    _internal_mutable_floor_level()->::SRprotobuf::FloorLevel::MergeFrom(from._internal_floor_level());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (from.shape() != 0) {
    _internal_set_shape(from._internal_shape());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.locationx() <= 0 && from.locationx() >= 0)) {
    _internal_set_locationx(from._internal_locationx());
  }
  if (!(from.locationy() <= 0 && from.locationy() >= 0)) {
    _internal_set_locationy(from._internal_locationy());
  }
  if (!(from.locationz() <= 0 && from.locationz() >= 0)) {
    _internal_set_locationz(from._internal_locationz());
  }
  if (!(from.location_accuracy() <= 0 && from.location_accuracy() >= 0)) {
    _internal_set_location_accuracy(from._internal_location_accuracy());
  }
  if (!(from.nearfrontloc_x() <= 0 && from.nearfrontloc_x() >= 0)) {
    _internal_set_nearfrontloc_x(from._internal_nearfrontloc_x());
  }
  if (!(from.nearfrontloc_y() <= 0 && from.nearfrontloc_y() >= 0)) {
    _internal_set_nearfrontloc_y(from._internal_nearfrontloc_y());
  }
  if (!(from.nearfrontloc_z() <= 0 && from.nearfrontloc_z() >= 0)) {
    _internal_set_nearfrontloc_z(from._internal_nearfrontloc_z());
  }
  if (!(from.nearrearloc_x() <= 0 && from.nearrearloc_x() >= 0)) {
    _internal_set_nearrearloc_x(from._internal_nearrearloc_x());
  }
  if (!(from.nearrearloc_y() <= 0 && from.nearrearloc_y() >= 0)) {
    _internal_set_nearrearloc_y(from._internal_nearrearloc_y());
  }
  if (!(from.nearrearloc_z() <= 0 && from.nearrearloc_z() >= 0)) {
    _internal_set_nearrearloc_z(from._internal_nearrearloc_z());
  }
  if (from.waypoint_index() != 0) {
    _internal_set_waypoint_index(from._internal_waypoint_index());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (from.cdu_type() != 0) {
    _internal_set_cdu_type(from._internal_cdu_type());
  }
}

void venue_map_Slots_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Slots_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Slots_Type::CopyFrom(const venue_map_Slots_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Slots_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Slots_Type::IsInitialized() const {
  return true;
}

void venue_map_Slots_Type::InternalSwap(venue_map_Slots_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Slots_Type, cdu_type_)
      + sizeof(venue_map_Slots_Type::cdu_type_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Slots_Type, updates_)>(
          reinterpret_cast<char*>(&updates_),
          reinterpret_cast<char*>(&other->updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Slots_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Ultrasonic_obstacles_Type::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_Ultrasonic_obstacles_Type_default_instance_._instance.get_mutable()->updates_ = const_cast< ::venue_map_pb::venue_map_Updates_Type*>(
      ::venue_map_pb::venue_map_Updates_Type::internal_default_instance());
}
class venue_map_Ultrasonic_obstacles_Type::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Updates_Type& updates(const venue_map_Ultrasonic_obstacles_Type* msg);
};

const ::venue_map_pb::venue_map_Updates_Type&
venue_map_Ultrasonic_obstacles_Type::_Internal::updates(const venue_map_Ultrasonic_obstacles_Type* msg) {
  return *msg->updates_;
}
venue_map_Ultrasonic_obstacles_Type::venue_map_Ultrasonic_obstacles_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
}
venue_map_Ultrasonic_obstacles_Type::venue_map_Ultrasonic_obstacles_Type(const venue_map_Ultrasonic_obstacles_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updates()) {
    updates_ = new ::venue_map_pb::venue_map_Updates_Type(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
}

void venue_map_Ultrasonic_obstacles_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&updates_)) + sizeof(heading_));
}

venue_map_Ultrasonic_obstacles_Type::~venue_map_Ultrasonic_obstacles_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Ultrasonic_obstacles_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updates_;
}

void venue_map_Ultrasonic_obstacles_Type::ArenaDtor(void* object) {
  venue_map_Ultrasonic_obstacles_Type* _this = reinterpret_cast< venue_map_Ultrasonic_obstacles_Type* >(object);
  (void)_this;
}
void venue_map_Ultrasonic_obstacles_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Ultrasonic_obstacles_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Ultrasonic_obstacles_Type& venue_map_Ultrasonic_obstacles_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Ultrasonic_obstacles_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Ultrasonic_obstacles_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Ultrasonic_obstacles_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Link_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationA_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          locationa_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationA_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          locationa_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationA_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          locationa_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationB_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          locationb_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationB_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          locationb_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationB_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          locationb_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_accuracy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          location_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 WayPoint_Index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Heading = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Updates_Type Updates = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Ultrasonic_obstacles_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_link_id(), target);
  }

  // sint32 Type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maturity(), target);
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // float LocationA_x = 6;
  if (!(this->locationa_x() <= 0 && this->locationa_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_locationa_x(), target);
  }

  // float LocationA_y = 7;
  if (!(this->locationa_y() <= 0 && this->locationa_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_locationa_y(), target);
  }

  // float LocationA_z = 8;
  if (!(this->locationa_z() <= 0 && this->locationa_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_locationa_z(), target);
  }

  // float LocationB_x = 9;
  if (!(this->locationb_x() <= 0 && this->locationb_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_locationb_x(), target);
  }

  // float LocationB_y = 10;
  if (!(this->locationb_y() <= 0 && this->locationb_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_locationb_y(), target);
  }

  // float LocationB_z = 11;
  if (!(this->locationb_z() <= 0 && this->locationb_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_locationb_z(), target);
  }

  // float Location_accuracy = 12;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_location_accuracy(), target);
  }

  // int32 WayPoint_Index = 13;
  if (this->waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_waypoint_index(), target);
  }

  // float Heading = 14;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_heading(), target);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 15;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::updates(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  return target;
}

size_t venue_map_Ultrasonic_obstacles_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .venue_map_pb.venue_map.Updates_Type Updates = 15;
  if (this->has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_id());
  }

  // sint32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationA_x = 6;
  if (!(this->locationa_x() <= 0 && this->locationa_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationA_y = 7;
  if (!(this->locationa_y() <= 0 && this->locationa_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationA_z = 8;
  if (!(this->locationa_z() <= 0 && this->locationa_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationB_x = 9;
  if (!(this->locationb_x() <= 0 && this->locationb_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationB_y = 10;
  if (!(this->locationb_y() <= 0 && this->locationb_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationB_z = 11;
  if (!(this->locationb_z() <= 0 && this->locationb_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_accuracy = 12;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 WayPoint_Index = 13;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waypoint_index());
  }

  // float Heading = 14;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Ultrasonic_obstacles_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Ultrasonic_obstacles_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Ultrasonic_obstacles_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
    MergeFrom(*source);
  }
}

void venue_map_Ultrasonic_obstacles_Type::MergeFrom(const venue_map_Ultrasonic_obstacles_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updates()) {
    _internal_mutable_updates()->::venue_map_pb::venue_map_Updates_Type::MergeFrom(from._internal_updates());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.locationa_x() <= 0 && from.locationa_x() >= 0)) {
    _internal_set_locationa_x(from._internal_locationa_x());
  }
  if (!(from.locationa_y() <= 0 && from.locationa_y() >= 0)) {
    _internal_set_locationa_y(from._internal_locationa_y());
  }
  if (!(from.locationa_z() <= 0 && from.locationa_z() >= 0)) {
    _internal_set_locationa_z(from._internal_locationa_z());
  }
  if (!(from.locationb_x() <= 0 && from.locationb_x() >= 0)) {
    _internal_set_locationb_x(from._internal_locationb_x());
  }
  if (!(from.locationb_y() <= 0 && from.locationb_y() >= 0)) {
    _internal_set_locationb_y(from._internal_locationb_y());
  }
  if (!(from.locationb_z() <= 0 && from.locationb_z() >= 0)) {
    _internal_set_locationb_z(from._internal_locationb_z());
  }
  if (!(from.location_accuracy() <= 0 && from.location_accuracy() >= 0)) {
    _internal_set_location_accuracy(from._internal_location_accuracy());
  }
  if (from.waypoint_index() != 0) {
    _internal_set_waypoint_index(from._internal_waypoint_index());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void venue_map_Ultrasonic_obstacles_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Ultrasonic_obstacles_Type::CopyFrom(const venue_map_Ultrasonic_obstacles_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Ultrasonic_obstacles_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Ultrasonic_obstacles_Type::IsInitialized() const {
  return true;
}

void venue_map_Ultrasonic_obstacles_Type::InternalSwap(venue_map_Ultrasonic_obstacles_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Ultrasonic_obstacles_Type, heading_)
      + sizeof(venue_map_Ultrasonic_obstacles_Type::heading_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Ultrasonic_obstacles_Type, updates_)>(
          reinterpret_cast<char*>(&updates_),
          reinterpret_cast<char*>(&other->updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Ultrasonic_obstacles_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_LastPostprocessing_Type::InitAsDefaultInstance() {
}
class venue_map_LastPostprocessing_Type::_Internal {
 public:
};

venue_map_LastPostprocessing_Type::venue_map_LastPostprocessing_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.LastPostprocessing_Type)
}
venue_map_LastPostprocessing_Type::venue_map_LastPostprocessing_Type(const venue_map_LastPostprocessing_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&maturity_) -
    reinterpret_cast<char*>(&time_)) + sizeof(maturity_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.LastPostprocessing_Type)
}

void venue_map_LastPostprocessing_Type::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maturity_) -
      reinterpret_cast<char*>(&time_)) + sizeof(maturity_));
}

venue_map_LastPostprocessing_Type::~venue_map_LastPostprocessing_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.LastPostprocessing_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_LastPostprocessing_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_LastPostprocessing_Type::ArenaDtor(void* object) {
  venue_map_LastPostprocessing_Type* _this = reinterpret_cast< venue_map_LastPostprocessing_Type* >(object);
  (void)_this;
}
void venue_map_LastPostprocessing_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_LastPostprocessing_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_LastPostprocessing_Type& venue_map_LastPostprocessing_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_LastPostprocessing_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_LastPostprocessing_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maturity_) -
      reinterpret_cast<char*>(&time_)) + sizeof(maturity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_LastPostprocessing_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Maturity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_LastPostprocessing_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Maturity = 1;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maturity(), target);
  }

  // int64 Time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.LastPostprocessing_Type)
  return target;
}

size_t venue_map_LastPostprocessing_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // uint32 Maturity = 1;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_LastPostprocessing_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_LastPostprocessing_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_LastPostprocessing_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.LastPostprocessing_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.LastPostprocessing_Type)
    MergeFrom(*source);
  }
}

void venue_map_LastPostprocessing_Type::MergeFrom(const venue_map_LastPostprocessing_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
}

void venue_map_LastPostprocessing_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_LastPostprocessing_Type::CopyFrom(const venue_map_LastPostprocessing_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.LastPostprocessing_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_LastPostprocessing_Type::IsInitialized() const {
  return true;
}

void venue_map_LastPostprocessing_Type::InternalSwap(venue_map_LastPostprocessing_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_LastPostprocessing_Type, maturity_)
      + sizeof(venue_map_LastPostprocessing_Type::maturity_)
      - PROTOBUF_FIELD_OFFSET(venue_map_LastPostprocessing_Type, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_LastPostprocessing_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Venue_Type::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_Venue_Type_default_instance_._instance.get_mutable()->updates_ = const_cast< ::venue_map_pb::venue_map_Updates_Type*>(
      ::venue_map_pb::venue_map_Updates_Type::internal_default_instance());
  ::venue_map_pb::_venue_map_Venue_Type_default_instance_._instance.get_mutable()->lastpostprocessing_ = const_cast< ::venue_map_pb::venue_map_LastPostprocessing_Type*>(
      ::venue_map_pb::venue_map_LastPostprocessing_Type::internal_default_instance());
}
class venue_map_Venue_Type::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Updates_Type& updates(const venue_map_Venue_Type* msg);
  static const ::venue_map_pb::venue_map_LastPostprocessing_Type& lastpostprocessing(const venue_map_Venue_Type* msg);
};

const ::venue_map_pb::venue_map_Updates_Type&
venue_map_Venue_Type::_Internal::updates(const venue_map_Venue_Type* msg) {
  return *msg->updates_;
}
const ::venue_map_pb::venue_map_LastPostprocessing_Type&
venue_map_Venue_Type::_Internal::lastpostprocessing(const venue_map_Venue_Type* msg) {
  return *msg->lastpostprocessing_;
}
venue_map_Venue_Type::venue_map_Venue_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Venue_Type)
}
venue_map_Venue_Type::venue_map_Venue_Type(const venue_map_Venue_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updates()) {
    updates_ = new ::venue_map_pb::venue_map_Updates_Type(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  if (from._internal_has_lastpostprocessing()) {
    lastpostprocessing_ = new ::venue_map_pb::venue_map_LastPostprocessing_Type(*from.lastpostprocessing_);
  } else {
    lastpostprocessing_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&maturity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(maturity_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Venue_Type)
}

void venue_map_Venue_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maturity_) -
      reinterpret_cast<char*>(&updates_)) + sizeof(maturity_));
}

venue_map_Venue_Type::~venue_map_Venue_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Venue_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Venue_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updates_;
  if (this != internal_default_instance()) delete lastpostprocessing_;
}

void venue_map_Venue_Type::ArenaDtor(void* object) {
  venue_map_Venue_Type* _this = reinterpret_cast< venue_map_Venue_Type* >(object);
  (void)_this;
}
void venue_map_Venue_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Venue_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Venue_Type& venue_map_Venue_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Venue_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Venue_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Venue_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  if (GetArena() == nullptr && lastpostprocessing_ != nullptr) {
    delete lastpostprocessing_;
  }
  lastpostprocessing_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maturity_) -
      reinterpret_cast<char*>(&id_)) + sizeof(maturity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Venue_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Orgin_location_lon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          orgin_location_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Orgin_location_lat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          orgin_location_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Orgin_location_alt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          orgin_location_alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Entrance_location_lon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          entrance_location_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Entrance_location_lat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          entrance_location_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Entrance_location_alt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          entrance_location_alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Updates_Type Updates = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.LastPostprocessing_Type LastPostprocessing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lastpostprocessing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Venue_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Venue_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // sint32 Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_type(), target);
  }

  // double Orgin_location_lon = 3;
  if (!(this->orgin_location_lon() <= 0 && this->orgin_location_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_orgin_location_lon(), target);
  }

  // double Orgin_location_lat = 4;
  if (!(this->orgin_location_lat() <= 0 && this->orgin_location_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_orgin_location_lat(), target);
  }

  // double Orgin_location_alt = 5;
  if (!(this->orgin_location_alt() <= 0 && this->orgin_location_alt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_orgin_location_alt(), target);
  }

  // double Entrance_location_lon = 6;
  if (!(this->entrance_location_lon() <= 0 && this->entrance_location_lon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_entrance_location_lon(), target);
  }

  // double Entrance_location_lat = 7;
  if (!(this->entrance_location_lat() <= 0 && this->entrance_location_lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_entrance_location_lat(), target);
  }

  // double Entrance_location_alt = 8;
  if (!(this->entrance_location_alt() <= 0 && this->entrance_location_alt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_entrance_location_alt(), target);
  }

  // uint32 Maturity = 9;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_maturity(), target);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 10;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::updates(this), target, stream);
  }

  // .venue_map_pb.venue_map.LastPostprocessing_Type LastPostprocessing = 11;
  if (this->has_lastpostprocessing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lastpostprocessing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Venue_Type)
  return target;
}

size_t venue_map_Venue_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Venue_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .venue_map_pb.venue_map.Updates_Type Updates = 10;
  if (this->has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // .venue_map_pb.venue_map.LastPostprocessing_Type LastPostprocessing = 11;
  if (this->has_lastpostprocessing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lastpostprocessing_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // sint32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());
  }

  // double Orgin_location_lon = 3;
  if (!(this->orgin_location_lon() <= 0 && this->orgin_location_lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double Orgin_location_lat = 4;
  if (!(this->orgin_location_lat() <= 0 && this->orgin_location_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double Orgin_location_alt = 5;
  if (!(this->orgin_location_alt() <= 0 && this->orgin_location_alt() >= 0)) {
    total_size += 1 + 8;
  }

  // double Entrance_location_lon = 6;
  if (!(this->entrance_location_lon() <= 0 && this->entrance_location_lon() >= 0)) {
    total_size += 1 + 8;
  }

  // double Entrance_location_lat = 7;
  if (!(this->entrance_location_lat() <= 0 && this->entrance_location_lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double Entrance_location_alt = 8;
  if (!(this->entrance_location_alt() <= 0 && this->entrance_location_alt() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 Maturity = 9;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Venue_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Venue_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Venue_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Venue_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Venue_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Venue_Type)
    MergeFrom(*source);
  }
}

void venue_map_Venue_Type::MergeFrom(const venue_map_Venue_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Venue_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updates()) {
    _internal_mutable_updates()->::venue_map_pb::venue_map_Updates_Type::MergeFrom(from._internal_updates());
  }
  if (from.has_lastpostprocessing()) {
    _internal_mutable_lastpostprocessing()->::venue_map_pb::venue_map_LastPostprocessing_Type::MergeFrom(from._internal_lastpostprocessing());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.orgin_location_lon() <= 0 && from.orgin_location_lon() >= 0)) {
    _internal_set_orgin_location_lon(from._internal_orgin_location_lon());
  }
  if (!(from.orgin_location_lat() <= 0 && from.orgin_location_lat() >= 0)) {
    _internal_set_orgin_location_lat(from._internal_orgin_location_lat());
  }
  if (!(from.orgin_location_alt() <= 0 && from.orgin_location_alt() >= 0)) {
    _internal_set_orgin_location_alt(from._internal_orgin_location_alt());
  }
  if (!(from.entrance_location_lon() <= 0 && from.entrance_location_lon() >= 0)) {
    _internal_set_entrance_location_lon(from._internal_entrance_location_lon());
  }
  if (!(from.entrance_location_lat() <= 0 && from.entrance_location_lat() >= 0)) {
    _internal_set_entrance_location_lat(from._internal_entrance_location_lat());
  }
  if (!(from.entrance_location_alt() <= 0 && from.entrance_location_alt() >= 0)) {
    _internal_set_entrance_location_alt(from._internal_entrance_location_alt());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
}

void venue_map_Venue_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Venue_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Venue_Type::CopyFrom(const venue_map_Venue_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Venue_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Venue_Type::IsInitialized() const {
  return true;
}

void venue_map_Venue_Type::InternalSwap(venue_map_Venue_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Venue_Type, maturity_)
      + sizeof(venue_map_Venue_Type::maturity_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Venue_Type, updates_)>(
          reinterpret_cast<char*>(&updates_),
          reinterpret_cast<char*>(&other->updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Venue_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Link_IDs_Type::InitAsDefaultInstance() {
}
class venue_map_Link_IDs_Type::_Internal {
 public:
};

venue_map_Link_IDs_Type::venue_map_Link_IDs_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Link_IDs_Type)
}
venue_map_Link_IDs_Type::venue_map_Link_IDs_Type(const venue_map_Link_IDs_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&link_id_, &from.link_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&waypoint_index_) -
    reinterpret_cast<char*>(&link_id_)) + sizeof(waypoint_index_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Link_IDs_Type)
}

void venue_map_Link_IDs_Type::SharedCtor() {
  ::memset(&link_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_index_) -
      reinterpret_cast<char*>(&link_id_)) + sizeof(waypoint_index_));
}

venue_map_Link_IDs_Type::~venue_map_Link_IDs_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Link_IDs_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Link_IDs_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Link_IDs_Type::ArenaDtor(void* object) {
  venue_map_Link_IDs_Type* _this = reinterpret_cast< venue_map_Link_IDs_Type* >(object);
  (void)_this;
}
void venue_map_Link_IDs_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Link_IDs_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Link_IDs_Type& venue_map_Link_IDs_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Link_IDs_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Link_IDs_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Link_IDs_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&link_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_index_) -
      reinterpret_cast<char*>(&link_id_)) + sizeof(waypoint_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Link_IDs_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Link_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 WayPoint_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Link_IDs_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Link_IDs_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Link_ID = 1;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_link_id(), target);
  }

  // int32 WayPoint_index = 2;
  if (this->waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_waypoint_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Link_IDs_Type)
  return target;
}

size_t venue_map_Link_IDs_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Link_IDs_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Link_ID = 1;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_id());
  }

  // int32 WayPoint_index = 2;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waypoint_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Link_IDs_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Link_IDs_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Link_IDs_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Link_IDs_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Link_IDs_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Link_IDs_Type)
    MergeFrom(*source);
  }
}

void venue_map_Link_IDs_Type::MergeFrom(const venue_map_Link_IDs_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Link_IDs_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (from.waypoint_index() != 0) {
    _internal_set_waypoint_index(from._internal_waypoint_index());
  }
}

void venue_map_Link_IDs_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Link_IDs_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Link_IDs_Type::CopyFrom(const venue_map_Link_IDs_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Link_IDs_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Link_IDs_Type::IsInitialized() const {
  return true;
}

void venue_map_Link_IDs_Type::InternalSwap(venue_map_Link_IDs_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Link_IDs_Type, waypoint_index_)
      + sizeof(venue_map_Link_IDs_Type::waypoint_index_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Link_IDs_Type, link_id_)>(
          reinterpret_cast<char*>(&link_id_),
          reinterpret_cast<char*>(&other->link_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Link_IDs_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Turn_directions_Type::InitAsDefaultInstance() {
}
class venue_map_Turn_directions_Type::_Internal {
 public:
};

venue_map_Turn_directions_Type::venue_map_Turn_directions_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Turn_directions_Type)
}
venue_map_Turn_directions_Type::venue_map_Turn_directions_Type(const venue_map_Turn_directions_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turnpoint_location_x_, &from.turnpoint_location_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&maturity_) -
    reinterpret_cast<char*>(&turnpoint_location_x_)) + sizeof(maturity_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Turn_directions_Type)
}

void venue_map_Turn_directions_Type::SharedCtor() {
  ::memset(&turnpoint_location_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maturity_) -
      reinterpret_cast<char*>(&turnpoint_location_x_)) + sizeof(maturity_));
}

venue_map_Turn_directions_Type::~venue_map_Turn_directions_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Turn_directions_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Turn_directions_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Turn_directions_Type::ArenaDtor(void* object) {
  venue_map_Turn_directions_Type* _this = reinterpret_cast< venue_map_Turn_directions_Type* >(object);
  (void)_this;
}
void venue_map_Turn_directions_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Turn_directions_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Turn_directions_Type& venue_map_Turn_directions_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Turn_directions_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Turn_directions_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Turn_directions_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turnpoint_location_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maturity_) -
      reinterpret_cast<char*>(&turnpoint_location_x_)) + sizeof(maturity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Turn_directions_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float TurnPoint_Location_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          turnpoint_location_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float TurnPoint_Location_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          turnpoint_location_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float TurnPoint_Location_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          turnpoint_location_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Turn_directions_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Turn_directions_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float TurnPoint_Location_x = 1;
  if (!(this->turnpoint_location_x() <= 0 && this->turnpoint_location_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_turnpoint_location_x(), target);
  }

  // float TurnPoint_Location_y = 2;
  if (!(this->turnpoint_location_y() <= 0 && this->turnpoint_location_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_turnpoint_location_y(), target);
  }

  // float TurnPoint_Location_z = 3;
  if (!(this->turnpoint_location_z() <= 0 && this->turnpoint_location_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_turnpoint_location_z(), target);
  }

  // float Direction = 4;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_direction(), target);
  }

  // uint32 Maturity = 5;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maturity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Turn_directions_Type)
  return target;
}

size_t venue_map_Turn_directions_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Turn_directions_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float TurnPoint_Location_x = 1;
  if (!(this->turnpoint_location_x() <= 0 && this->turnpoint_location_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float TurnPoint_Location_y = 2;
  if (!(this->turnpoint_location_y() <= 0 && this->turnpoint_location_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float TurnPoint_Location_z = 3;
  if (!(this->turnpoint_location_z() <= 0 && this->turnpoint_location_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Direction = 4;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 Maturity = 5;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Turn_directions_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Turn_directions_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Turn_directions_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Turn_directions_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Turn_directions_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Turn_directions_Type)
    MergeFrom(*source);
  }
}

void venue_map_Turn_directions_Type::MergeFrom(const venue_map_Turn_directions_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Turn_directions_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.turnpoint_location_x() <= 0 && from.turnpoint_location_x() >= 0)) {
    _internal_set_turnpoint_location_x(from._internal_turnpoint_location_x());
  }
  if (!(from.turnpoint_location_y() <= 0 && from.turnpoint_location_y() >= 0)) {
    _internal_set_turnpoint_location_y(from._internal_turnpoint_location_y());
  }
  if (!(from.turnpoint_location_z() <= 0 && from.turnpoint_location_z() >= 0)) {
    _internal_set_turnpoint_location_z(from._internal_turnpoint_location_z());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
}

void venue_map_Turn_directions_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Turn_directions_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Turn_directions_Type::CopyFrom(const venue_map_Turn_directions_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Turn_directions_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Turn_directions_Type::IsInitialized() const {
  return true;
}

void venue_map_Turn_directions_Type::InternalSwap(venue_map_Turn_directions_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Turn_directions_Type, maturity_)
      + sizeof(venue_map_Turn_directions_Type::maturity_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Turn_directions_Type, turnpoint_location_x_)>(
          reinterpret_cast<char*>(&turnpoint_location_x_),
          reinterpret_cast<char*>(&other->turnpoint_location_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Turn_directions_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Lane_lines_Type::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_Lane_lines_Type_default_instance_._instance.get_mutable()->updates_ = const_cast< ::venue_map_pb::venue_map_Updates_Type*>(
      ::venue_map_pb::venue_map_Updates_Type::internal_default_instance());
}
class venue_map_Lane_lines_Type::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Updates_Type& updates(const venue_map_Lane_lines_Type* msg);
};

const ::venue_map_pb::venue_map_Updates_Type&
venue_map_Lane_lines_Type::_Internal::updates(const venue_map_Lane_lines_Type* msg) {
  return *msg->updates_;
}
venue_map_Lane_lines_Type::venue_map_Lane_lines_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Lane_lines_Type)
}
venue_map_Lane_lines_Type::venue_map_Lane_lines_Type(const venue_map_Lane_lines_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updates()) {
    updates_ = new ::venue_map_pb::venue_map_Updates_Type(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Lane_lines_Type)
}

void venue_map_Lane_lines_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&updates_)) + sizeof(direction_));
}

venue_map_Lane_lines_Type::~venue_map_Lane_lines_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Lane_lines_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Lane_lines_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updates_;
}

void venue_map_Lane_lines_Type::ArenaDtor(void* object) {
  venue_map_Lane_lines_Type* _this = reinterpret_cast< venue_map_Lane_lines_Type* >(object);
  (void)_this;
}
void venue_map_Lane_lines_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Lane_lines_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Lane_lines_Type& venue_map_Lane_lines_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Lane_lines_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Lane_lines_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Lane_lines_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Lane_lines_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Link_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationA_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          locationa_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationA_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          locationa_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationA_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          locationa_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationB_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          locationb_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationB_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          locationb_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LocationB_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          locationb_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_accuracy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          location_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 WayPoint_Index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Direction = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Updates_Type Updates = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Lane_lines_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Lane_lines_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_link_id(), target);
  }

  // sint32 Type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maturity(), target);
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // float LocationA_x = 6;
  if (!(this->locationa_x() <= 0 && this->locationa_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_locationa_x(), target);
  }

  // float LocationA_y = 7;
  if (!(this->locationa_y() <= 0 && this->locationa_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_locationa_y(), target);
  }

  // float LocationA_z = 8;
  if (!(this->locationa_z() <= 0 && this->locationa_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_locationa_z(), target);
  }

  // float LocationB_x = 9;
  if (!(this->locationb_x() <= 0 && this->locationb_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_locationb_x(), target);
  }

  // float LocationB_y = 10;
  if (!(this->locationb_y() <= 0 && this->locationb_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_locationb_y(), target);
  }

  // float LocationB_z = 11;
  if (!(this->locationb_z() <= 0 && this->locationb_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_locationb_z(), target);
  }

  // float Location_accuracy = 12;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_location_accuracy(), target);
  }

  // int32 WayPoint_Index = 13;
  if (this->waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_waypoint_index(), target);
  }

  // float Direction = 14;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_direction(), target);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 15;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::updates(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Lane_lines_Type)
  return target;
}

size_t venue_map_Lane_lines_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Lane_lines_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .venue_map_pb.venue_map.Updates_Type Updates = 15;
  if (this->has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_id());
  }

  // sint32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationA_x = 6;
  if (!(this->locationa_x() <= 0 && this->locationa_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationA_y = 7;
  if (!(this->locationa_y() <= 0 && this->locationa_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationA_z = 8;
  if (!(this->locationa_z() <= 0 && this->locationa_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationB_x = 9;
  if (!(this->locationb_x() <= 0 && this->locationb_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationB_y = 10;
  if (!(this->locationb_y() <= 0 && this->locationb_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float LocationB_z = 11;
  if (!(this->locationb_z() <= 0 && this->locationb_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_accuracy = 12;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 WayPoint_Index = 13;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waypoint_index());
  }

  // float Direction = 14;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Lane_lines_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Lane_lines_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Lane_lines_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Lane_lines_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Lane_lines_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Lane_lines_Type)
    MergeFrom(*source);
  }
}

void venue_map_Lane_lines_Type::MergeFrom(const venue_map_Lane_lines_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Lane_lines_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updates()) {
    _internal_mutable_updates()->::venue_map_pb::venue_map_Updates_Type::MergeFrom(from._internal_updates());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.locationa_x() <= 0 && from.locationa_x() >= 0)) {
    _internal_set_locationa_x(from._internal_locationa_x());
  }
  if (!(from.locationa_y() <= 0 && from.locationa_y() >= 0)) {
    _internal_set_locationa_y(from._internal_locationa_y());
  }
  if (!(from.locationa_z() <= 0 && from.locationa_z() >= 0)) {
    _internal_set_locationa_z(from._internal_locationa_z());
  }
  if (!(from.locationb_x() <= 0 && from.locationb_x() >= 0)) {
    _internal_set_locationb_x(from._internal_locationb_x());
  }
  if (!(from.locationb_y() <= 0 && from.locationb_y() >= 0)) {
    _internal_set_locationb_y(from._internal_locationb_y());
  }
  if (!(from.locationb_z() <= 0 && from.locationb_z() >= 0)) {
    _internal_set_locationb_z(from._internal_locationb_z());
  }
  if (!(from.location_accuracy() <= 0 && from.location_accuracy() >= 0)) {
    _internal_set_location_accuracy(from._internal_location_accuracy());
  }
  if (from.waypoint_index() != 0) {
    _internal_set_waypoint_index(from._internal_waypoint_index());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
}

void venue_map_Lane_lines_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Lane_lines_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Lane_lines_Type::CopyFrom(const venue_map_Lane_lines_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Lane_lines_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Lane_lines_Type::IsInitialized() const {
  return true;
}

void venue_map_Lane_lines_Type::InternalSwap(venue_map_Lane_lines_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Lane_lines_Type, direction_)
      + sizeof(venue_map_Lane_lines_Type::direction_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Lane_lines_Type, updates_)>(
          reinterpret_cast<char*>(&updates_),
          reinterpret_cast<char*>(&other->updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Lane_lines_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Links_Type::InitAsDefaultInstance() {
}
class venue_map_Links_Type::_Internal {
 public:
};

venue_map_Links_Type::venue_map_Links_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waypoints_(arena),
  landmark_ids_(arena),
  slot_ids_(arena),
  obstacle_ids_(arena),
  floorlevel_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Links_Type)
}
venue_map_Links_Type::venue_map_Links_Type(const venue_map_Links_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waypoints_(from.waypoints_),
      landmark_ids_(from.landmark_ids_),
      slot_ids_(from.slot_ids_),
      obstacle_ids_(from.obstacle_ids_),
      floorlevel_(from.floorlevel_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&joint_ids_1_, &from.joint_ids_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvalid_) -
    reinterpret_cast<char*>(&joint_ids_1_)) + sizeof(isvalid_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Links_Type)
}

void venue_map_Links_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&joint_ids_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&joint_ids_1_)) + sizeof(isvalid_));
}

venue_map_Links_Type::~venue_map_Links_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Links_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Links_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Links_Type::ArenaDtor(void* object) {
  venue_map_Links_Type* _this = reinterpret_cast< venue_map_Links_Type* >(object);
  (void)_this;
}
void venue_map_Links_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Links_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Links_Type& venue_map_Links_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Links_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Links_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Links_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  landmark_ids_.Clear();
  slot_ids_.Clear();
  obstacle_ids_.Clear();
  floorlevel_.Clear();
  ::memset(&joint_ids_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&joint_ids_1_)) + sizeof(isvalid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Links_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .venue_map_pb.venue_map.Waypoints_Type Waypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 Joint_IDs_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          joint_ids_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Joint_IDs_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          joint_ids_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Landmark_IDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_landmark_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_landmark_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Slot_IDs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_slot_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_slot_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Obstacle_IDs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_obstacle_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_obstacle_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Direction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool IsValid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float floorlevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floorlevel(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          _internal_add_floorlevel(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Links_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Links_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .venue_map_pb.venue_map.Waypoints_Type Waypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_waypoints(i), target, stream);
  }

  // uint32 Joint_IDs_1 = 2;
  if (this->joint_ids_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_joint_ids_1(), target);
  }

  // uint32 Joint_IDs_2 = 3;
  if (this->joint_ids_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_joint_ids_2(), target);
  }

  // repeated uint32 Landmark_IDs = 4;
  {
    int byte_size = _landmark_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_landmark_ids(), byte_size, target);
    }
  }

  // repeated uint32 Slot_IDs = 5;
  {
    int byte_size = _slot_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_slot_ids(), byte_size, target);
    }
  }

  // repeated uint32 Obstacle_IDs = 6;
  {
    int byte_size = _obstacle_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_obstacle_ids(), byte_size, target);
    }
  }

  // uint32 ID = 7;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_id(), target);
  }

  // float Direction = 8;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_direction(), target);
  }

  // bool IsValid = 9;
  if (this->isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_isvalid(), target);
  }

  // repeated float floorlevel = 10;
  if (this->_internal_floorlevel_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_floorlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Links_Type)
  return target;
}

size_t venue_map_Links_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Links_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .venue_map_pb.venue_map.Waypoints_Type Waypoints = 1;
  total_size += 1UL * this->_internal_waypoints_size();
  for (const auto& msg : this->waypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 Landmark_IDs = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->landmark_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _landmark_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Slot_IDs = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->slot_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _slot_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Obstacle_IDs = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->obstacle_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _obstacle_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float floorlevel = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floorlevel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _floorlevel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 Joint_IDs_1 = 2;
  if (this->joint_ids_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_joint_ids_1());
  }

  // uint32 Joint_IDs_2 = 3;
  if (this->joint_ids_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_joint_ids_2());
  }

  // uint32 ID = 7;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float Direction = 8;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 4;
  }

  // bool IsValid = 9;
  if (this->isvalid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Links_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Links_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Links_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Links_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Links_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Links_Type)
    MergeFrom(*source);
  }
}

void venue_map_Links_Type::MergeFrom(const venue_map_Links_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Links_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  landmark_ids_.MergeFrom(from.landmark_ids_);
  slot_ids_.MergeFrom(from.slot_ids_);
  obstacle_ids_.MergeFrom(from.obstacle_ids_);
  floorlevel_.MergeFrom(from.floorlevel_);
  if (from.joint_ids_1() != 0) {
    _internal_set_joint_ids_1(from._internal_joint_ids_1());
  }
  if (from.joint_ids_2() != 0) {
    _internal_set_joint_ids_2(from._internal_joint_ids_2());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.isvalid() != 0) {
    _internal_set_isvalid(from._internal_isvalid());
  }
}

void venue_map_Links_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Links_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Links_Type::CopyFrom(const venue_map_Links_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Links_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Links_Type::IsInitialized() const {
  return true;
}

void venue_map_Links_Type::InternalSwap(venue_map_Links_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waypoints_.InternalSwap(&other->waypoints_);
  landmark_ids_.InternalSwap(&other->landmark_ids_);
  slot_ids_.InternalSwap(&other->slot_ids_);
  obstacle_ids_.InternalSwap(&other->obstacle_ids_);
  floorlevel_.InternalSwap(&other->floorlevel_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Links_Type, isvalid_)
      + sizeof(venue_map_Links_Type::isvalid_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Links_Type, joint_ids_1_)>(
          reinterpret_cast<char*>(&joint_ids_1_),
          reinterpret_cast<char*>(&other->joint_ids_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Links_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Joints_Type::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_Joints_Type_default_instance_._instance.get_mutable()->turn_directions_ = const_cast< ::venue_map_pb::venue_map_Turn_directions_Type*>(
      ::venue_map_pb::venue_map_Turn_directions_Type::internal_default_instance());
  ::venue_map_pb::_venue_map_Joints_Type_default_instance_._instance.get_mutable()->updates_ = const_cast< ::venue_map_pb::venue_map_Updates_Type*>(
      ::venue_map_pb::venue_map_Updates_Type::internal_default_instance());
}
class venue_map_Joints_Type::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Turn_directions_Type& turn_directions(const venue_map_Joints_Type* msg);
  static const ::venue_map_pb::venue_map_Updates_Type& updates(const venue_map_Joints_Type* msg);
};

const ::venue_map_pb::venue_map_Turn_directions_Type&
venue_map_Joints_Type::_Internal::turn_directions(const venue_map_Joints_Type* msg) {
  return *msg->turn_directions_;
}
const ::venue_map_pb::venue_map_Updates_Type&
venue_map_Joints_Type::_Internal::updates(const venue_map_Joints_Type* msg) {
  return *msg->updates_;
}
venue_map_Joints_Type::venue_map_Joints_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vlink_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Joints_Type)
}
venue_map_Joints_Type::venue_map_Joints_Type(const venue_map_Joints_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vlink_ids_(from.vlink_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_turn_directions()) {
    turn_directions_ = new ::venue_map_pb::venue_map_Turn_directions_Type(*from.turn_directions_);
  } else {
    turn_directions_ = nullptr;
  }
  if (from._internal_has_updates()) {
    updates_ = new ::venue_map_pb::venue_map_Updates_Type(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&breaktype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(breaktype_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Joints_Type)
}

void venue_map_Joints_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&turn_directions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&breaktype_) -
      reinterpret_cast<char*>(&turn_directions_)) + sizeof(breaktype_));
}

venue_map_Joints_Type::~venue_map_Joints_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Joints_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Joints_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete turn_directions_;
  if (this != internal_default_instance()) delete updates_;
}

void venue_map_Joints_Type::ArenaDtor(void* object) {
  venue_map_Joints_Type* _this = reinterpret_cast< venue_map_Joints_Type* >(object);
  (void)_this;
}
void venue_map_Joints_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Joints_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Joints_Type& venue_map_Joints_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Joints_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Joints_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Joints_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vlink_ids_.Clear();
  if (GetArena() == nullptr && turn_directions_ != nullptr) {
    delete turn_directions_;
  }
  turn_directions_ = nullptr;
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&breaktype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(breaktype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Joints_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Link_IDs_Type vLink_IDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vlink_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          location_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          location_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          location_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_accuracy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          location_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Heading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Turn_directions_Type Turn_directions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_directions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Updates_Type Updates = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IsUpdated = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          isupdated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BreakType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          breaktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Joints_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Joints_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .venue_map_pb.venue_map.Link_IDs_Type vLink_IDs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vlink_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vlink_ids(i), target, stream);
  }

  // uint32 Maturity = 3;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maturity(), target);
  }

  // float Confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  // float Location_x = 5;
  if (!(this->location_x() <= 0 && this->location_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_location_x(), target);
  }

  // float Location_y = 6;
  if (!(this->location_y() <= 0 && this->location_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_location_y(), target);
  }

  // float Location_z = 7;
  if (!(this->location_z() <= 0 && this->location_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_location_z(), target);
  }

  // float Location_accuracy = 8;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_location_accuracy(), target);
  }

  // float Heading = 9;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_heading(), target);
  }

  // .venue_map_pb.venue_map.Turn_directions_Type Turn_directions = 10;
  if (this->has_turn_directions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::turn_directions(this), target, stream);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 11;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::updates(this), target, stream);
  }

  // uint32 IsUpdated = 12;
  if (this->isupdated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_isupdated(), target);
  }

  // uint32 BreakType = 13;
  if (this->breaktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_breaktype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Joints_Type)
  return target;
}

size_t venue_map_Joints_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Joints_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .venue_map_pb.venue_map.Link_IDs_Type vLink_IDs = 2;
  total_size += 1UL * this->_internal_vlink_ids_size();
  for (const auto& msg : this->vlink_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .venue_map_pb.venue_map.Turn_directions_Type Turn_directions = 10;
  if (this->has_turn_directions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *turn_directions_);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 11;
  if (this->has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Maturity = 3;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // float Confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_x = 5;
  if (!(this->location_x() <= 0 && this->location_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_y = 6;
  if (!(this->location_y() <= 0 && this->location_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_z = 7;
  if (!(this->location_z() <= 0 && this->location_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_accuracy = 8;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // float Heading = 9;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 IsUpdated = 12;
  if (this->isupdated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_isupdated());
  }

  // uint32 BreakType = 13;
  if (this->breaktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_breaktype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Joints_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Joints_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Joints_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Joints_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Joints_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Joints_Type)
    MergeFrom(*source);
  }
}

void venue_map_Joints_Type::MergeFrom(const venue_map_Joints_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Joints_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vlink_ids_.MergeFrom(from.vlink_ids_);
  if (from.has_turn_directions()) {
    _internal_mutable_turn_directions()->::venue_map_pb::venue_map_Turn_directions_Type::MergeFrom(from._internal_turn_directions());
  }
  if (from.has_updates()) {
    _internal_mutable_updates()->::venue_map_pb::venue_map_Updates_Type::MergeFrom(from._internal_updates());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.location_x() <= 0 && from.location_x() >= 0)) {
    _internal_set_location_x(from._internal_location_x());
  }
  if (!(from.location_y() <= 0 && from.location_y() >= 0)) {
    _internal_set_location_y(from._internal_location_y());
  }
  if (!(from.location_z() <= 0 && from.location_z() >= 0)) {
    _internal_set_location_z(from._internal_location_z());
  }
  if (!(from.location_accuracy() <= 0 && from.location_accuracy() >= 0)) {
    _internal_set_location_accuracy(from._internal_location_accuracy());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (from.isupdated() != 0) {
    _internal_set_isupdated(from._internal_isupdated());
  }
  if (from.breaktype() != 0) {
    _internal_set_breaktype(from._internal_breaktype());
  }
}

void venue_map_Joints_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Joints_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Joints_Type::CopyFrom(const venue_map_Joints_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Joints_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Joints_Type::IsInitialized() const {
  return true;
}

void venue_map_Joints_Type::InternalSwap(venue_map_Joints_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vlink_ids_.InternalSwap(&other->vlink_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Joints_Type, breaktype_)
      + sizeof(venue_map_Joints_Type::breaktype_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Joints_Type, turn_directions_)>(
          reinterpret_cast<char*>(&turn_directions_),
          reinterpret_cast<char*>(&other->turn_directions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Joints_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Landmarks_Type::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_Landmarks_Type_default_instance_._instance.get_mutable()->updates_ = const_cast< ::venue_map_pb::venue_map_Updates_Type*>(
      ::venue_map_pb::venue_map_Updates_Type::internal_default_instance());
  ::venue_map_pb::_venue_map_Landmarks_Type_default_instance_._instance.get_mutable()->floor_level_ = const_cast< ::SRprotobuf::FloorLevel*>(
      ::SRprotobuf::FloorLevel::internal_default_instance());
  ::venue_map_pb::_venue_map_Landmarks_Type_default_instance_._instance.get_mutable()->locationa_ = const_cast< ::venue_map_pb::venue_map_Location_type*>(
      ::venue_map_pb::venue_map_Location_type::internal_default_instance());
  ::venue_map_pb::_venue_map_Landmarks_Type_default_instance_._instance.get_mutable()->locationb_ = const_cast< ::venue_map_pb::venue_map_Location_type*>(
      ::venue_map_pb::venue_map_Location_type::internal_default_instance());
}
class venue_map_Landmarks_Type::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Updates_Type& updates(const venue_map_Landmarks_Type* msg);
  static const ::SRprotobuf::FloorLevel& floor_level(const venue_map_Landmarks_Type* msg);
  static const ::venue_map_pb::venue_map_Location_type& locationa(const venue_map_Landmarks_Type* msg);
  static const ::venue_map_pb::venue_map_Location_type& locationb(const venue_map_Landmarks_Type* msg);
};

const ::venue_map_pb::venue_map_Updates_Type&
venue_map_Landmarks_Type::_Internal::updates(const venue_map_Landmarks_Type* msg) {
  return *msg->updates_;
}
const ::SRprotobuf::FloorLevel&
venue_map_Landmarks_Type::_Internal::floor_level(const venue_map_Landmarks_Type* msg) {
  return *msg->floor_level_;
}
const ::venue_map_pb::venue_map_Location_type&
venue_map_Landmarks_Type::_Internal::locationa(const venue_map_Landmarks_Type* msg) {
  return *msg->locationa_;
}
const ::venue_map_pb::venue_map_Location_type&
venue_map_Landmarks_Type::_Internal::locationb(const venue_map_Landmarks_Type* msg) {
  return *msg->locationb_;
}
void venue_map_Landmarks_Type::clear_floor_level() {
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
}
venue_map_Landmarks_Type::venue_map_Landmarks_Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Landmarks_Type)
}
venue_map_Landmarks_Type::venue_map_Landmarks_Type(const venue_map_Landmarks_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_updates()) {
    updates_ = new ::venue_map_pb::venue_map_Updates_Type(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  if (from._internal_has_floor_level()) {
    floor_level_ = new ::SRprotobuf::FloorLevel(*from.floor_level_);
  } else {
    floor_level_ = nullptr;
  }
  if (from._internal_has_locationa()) {
    locationa_ = new ::venue_map_pb::venue_map_Location_type(*from.locationa_);
  } else {
    locationa_ = nullptr;
  }
  if (from._internal_has_locationb()) {
    locationb_ = new ::venue_map_pb::venue_map_Location_type(*from.locationb_);
  } else {
    locationb_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Landmarks_Type)
}

void venue_map_Landmarks_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&updates_)) + sizeof(heading_));
}

venue_map_Landmarks_Type::~venue_map_Landmarks_Type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Landmarks_Type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Landmarks_Type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete updates_;
  if (this != internal_default_instance()) delete floor_level_;
  if (this != internal_default_instance()) delete locationa_;
  if (this != internal_default_instance()) delete locationb_;
}

void venue_map_Landmarks_Type::ArenaDtor(void* object) {
  venue_map_Landmarks_Type* _this = reinterpret_cast< venue_map_Landmarks_Type* >(object);
  (void)_this;
}
void venue_map_Landmarks_Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Landmarks_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Landmarks_Type& venue_map_Landmarks_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Landmarks_Type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Landmarks_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Landmarks_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
  if (GetArena() == nullptr && locationa_ != nullptr) {
    delete locationa_;
  }
  locationa_ = nullptr;
  if (GetArena() == nullptr && locationb_ != nullptr) {
    delete locationb_;
  }
  locationb_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&id_)) + sizeof(heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Landmarks_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Link_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Maturity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          location_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          location_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          location_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Location_accuracy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          location_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 Direction_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          direction_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 WayPoint_Index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Heading = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Updates_Type Updates = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.FloorLevel floor_level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Location_type locationA = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .venue_map_pb.venue_map.Location_type locationB = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Landmarks_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Landmarks_Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_link_id(), target);
  }

  // sint32 Type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maturity(), target);
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // float Location_x = 6;
  if (!(this->location_x() <= 0 && this->location_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_location_x(), target);
  }

  // float Location_y = 7;
  if (!(this->location_y() <= 0 && this->location_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_location_y(), target);
  }

  // float Location_z = 8;
  if (!(this->location_z() <= 0 && this->location_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_location_z(), target);
  }

  // float Location_accuracy = 9;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_location_accuracy(), target);
  }

  // sint32 Direction_type = 10;
  if (this->direction_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_direction_type(), target);
  }

  // int32 WayPoint_Index = 11;
  if (this->waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_waypoint_index(), target);
  }

  // float Heading = 12;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_heading(), target);
  }

  // .venue_map_pb.venue_map.Updates_Type Updates = 13;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::updates(this), target, stream);
  }

  // .SRprotobuf.FloorLevel floor_level = 14;
  if (this->has_floor_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::floor_level(this), target, stream);
  }

  // .venue_map_pb.venue_map.Location_type locationA = 15;
  if (this->has_locationa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::locationa(this), target, stream);
  }

  // .venue_map_pb.venue_map.Location_type locationB = 16;
  if (this->has_locationb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::locationb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Landmarks_Type)
  return target;
}

size_t venue_map_Landmarks_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Landmarks_Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .venue_map_pb.venue_map.Updates_Type Updates = 13;
  if (this->has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // .SRprotobuf.FloorLevel floor_level = 14;
  if (this->has_floor_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *floor_level_);
  }

  // .venue_map_pb.venue_map.Location_type locationA = 15;
  if (this->has_locationa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationa_);
  }

  // .venue_map_pb.venue_map.Location_type locationB = 16;
  if (this->has_locationb()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationb_);
  }

  // uint32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Link_ID = 2;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_id());
  }

  // sint32 Type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());
  }

  // uint32 Maturity = 4;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity());
  }

  // float Confidence = 5;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_x = 6;
  if (!(this->location_x() <= 0 && this->location_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_y = 7;
  if (!(this->location_y() <= 0 && this->location_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_z = 8;
  if (!(this->location_z() <= 0 && this->location_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Location_accuracy = 9;
  if (!(this->location_accuracy() <= 0 && this->location_accuracy() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 Direction_type = 10;
  if (this->direction_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_direction_type());
  }

  // int32 WayPoint_Index = 11;
  if (this->waypoint_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waypoint_index());
  }

  // float Heading = 12;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Landmarks_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Landmarks_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Landmarks_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Landmarks_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Landmarks_Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Landmarks_Type)
    MergeFrom(*source);
  }
}

void venue_map_Landmarks_Type::MergeFrom(const venue_map_Landmarks_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Landmarks_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_updates()) {
    _internal_mutable_updates()->::venue_map_pb::venue_map_Updates_Type::MergeFrom(from._internal_updates());
  }
  if (from.has_floor_level()) {
    _internal_mutable_floor_level()->::SRprotobuf::FloorLevel::MergeFrom(from._internal_floor_level());
  }
  if (from.has_locationa()) {
    _internal_mutable_locationa()->::venue_map_pb::venue_map_Location_type::MergeFrom(from._internal_locationa());
  }
  if (from.has_locationb()) {
    _internal_mutable_locationb()->::venue_map_pb::venue_map_Location_type::MergeFrom(from._internal_locationb());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.location_x() <= 0 && from.location_x() >= 0)) {
    _internal_set_location_x(from._internal_location_x());
  }
  if (!(from.location_y() <= 0 && from.location_y() >= 0)) {
    _internal_set_location_y(from._internal_location_y());
  }
  if (!(from.location_z() <= 0 && from.location_z() >= 0)) {
    _internal_set_location_z(from._internal_location_z());
  }
  if (!(from.location_accuracy() <= 0 && from.location_accuracy() >= 0)) {
    _internal_set_location_accuracy(from._internal_location_accuracy());
  }
  if (from.direction_type() != 0) {
    _internal_set_direction_type(from._internal_direction_type());
  }
  if (from.waypoint_index() != 0) {
    _internal_set_waypoint_index(from._internal_waypoint_index());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
}

void venue_map_Landmarks_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Landmarks_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Landmarks_Type::CopyFrom(const venue_map_Landmarks_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Landmarks_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Landmarks_Type::IsInitialized() const {
  return true;
}

void venue_map_Landmarks_Type::InternalSwap(venue_map_Landmarks_Type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Landmarks_Type, heading_)
      + sizeof(venue_map_Landmarks_Type::heading_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Landmarks_Type, updates_)>(
          reinterpret_cast<char*>(&updates_),
          reinterpret_cast<char*>(&other->updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Landmarks_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Location_type::InitAsDefaultInstance() {
}
class venue_map_Location_type::_Internal {
 public:
};

venue_map_Location_type::venue_map_Location_type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Location_type)
}
venue_map_Location_type::venue_map_Location_type(const venue_map_Location_type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Location_type)
}

void venue_map_Location_type::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

venue_map_Location_type::~venue_map_Location_type() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Location_type)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Location_type::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Location_type::ArenaDtor(void* object) {
  venue_map_Location_type* _this = reinterpret_cast< venue_map_Location_type* >(object);
  (void)_this;
}
void venue_map_Location_type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Location_type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Location_type& venue_map_Location_type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Location_type_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Location_type::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Location_type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Location_type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Location_type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Location_type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Location_type)
  return target;
}

size_t venue_map_Location_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Location_type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Location_type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Location_type)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Location_type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Location_type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Location_type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Location_type)
    MergeFrom(*source);
  }
}

void venue_map_Location_type::MergeFrom(const venue_map_Location_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Location_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void venue_map_Location_type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Location_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Location_type::CopyFrom(const venue_map_Location_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Location_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Location_type::IsInitialized() const {
  return true;
}

void venue_map_Location_type::InternalSwap(venue_map_Location_type* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Location_type, z_)
      + sizeof(venue_map_Location_type::z_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Location_type, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Location_type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Pointwithid::InitAsDefaultInstance() {
}
class venue_map_Pointwithid::_Internal {
 public:
};

venue_map_Pointwithid::venue_map_Pointwithid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Pointwithid)
}
venue_map_Pointwithid::venue_map_Pointwithid(const venue_map_Pointwithid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Pointwithid)
}

void venue_map_Pointwithid::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&id_)) + sizeof(z_));
}

venue_map_Pointwithid::~venue_map_Pointwithid() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Pointwithid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Pointwithid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Pointwithid::ArenaDtor(void* object) {
  venue_map_Pointwithid* _this = reinterpret_cast< venue_map_Pointwithid* >(object);
  (void)_this;
}
void venue_map_Pointwithid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Pointwithid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Pointwithid& venue_map_Pointwithid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Pointwithid_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Pointwithid::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Pointwithid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Pointwithid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Pointwithid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Pointwithid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Pointwithid)
  return target;
}

size_t venue_map_Pointwithid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Pointwithid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Pointwithid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Pointwithid)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Pointwithid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Pointwithid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Pointwithid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Pointwithid)
    MergeFrom(*source);
  }
}

void venue_map_Pointwithid::MergeFrom(const venue_map_Pointwithid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Pointwithid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void venue_map_Pointwithid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Pointwithid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Pointwithid::CopyFrom(const venue_map_Pointwithid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Pointwithid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Pointwithid::IsInitialized() const {
  return true;
}

void venue_map_Pointwithid::InternalSwap(venue_map_Pointwithid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Pointwithid, z_)
      + sizeof(venue_map_Pointwithid::z_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Pointwithid, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Pointwithid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Edge::InitAsDefaultInstance() {
}
class venue_map_Edge::_Internal {
 public:
};

venue_map_Edge::venue_map_Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Edge)
}
venue_map_Edge::venue_map_Edge(const venue_map_Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&linkid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(linkid_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Edge)
}

void venue_map_Edge::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linkid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(linkid_));
}

venue_map_Edge::~venue_map_Edge() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Edge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Edge::ArenaDtor(void* object) {
  venue_map_Edge* _this = reinterpret_cast< venue_map_Edge* >(object);
  (void)_this;
}
void venue_map_Edge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Edge& venue_map_Edge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Edge_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linkid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(linkid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 pts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_pts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 linkID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          linkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Edge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subtype(), target);
  }

  // float direction = 4;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_direction(), target);
  }

  // repeated int32 pts = 5;
  {
    int byte_size = _pts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_pts(), byte_size, target);
    }
  }

  // int32 linkID = 6;
  if (this->linkid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_linkid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Edge)
  return target;
}

size_t venue_map_Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Edge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pts = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // float direction = 4;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 linkID = 6;
  if (this->linkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linkid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Edge)
    MergeFrom(*source);
  }
}

void venue_map_Edge::MergeFrom(const venue_map_Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.linkid() != 0) {
    _internal_set_linkid(from._internal_linkid());
  }
}

void venue_map_Edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Edge::CopyFrom(const venue_map_Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Edge::IsInitialized() const {
  return true;
}

void venue_map_Edge::InternalSwap(venue_map_Edge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Edge, linkid_)
      + sizeof(venue_map_Edge::linkid_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Edge, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Connection::InitAsDefaultInstance() {
}
class venue_map_Connection::_Internal {
 public:
};

venue_map_Connection::venue_map_Connection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  refline_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Connection)
}
venue_map_Connection::venue_map_Connection(const venue_map_Connection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      refline_(from.refline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&edge1_, &from.edge1_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&edge1_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Connection)
}

void venue_map_Connection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&edge1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&edge1_)) + sizeof(type_));
}

venue_map_Connection::~venue_map_Connection() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Connection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Connection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Connection::ArenaDtor(void* object) {
  venue_map_Connection* _this = reinterpret_cast< venue_map_Connection* >(object);
  (void)_this;
}
void venue_map_Connection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Connection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Connection& venue_map_Connection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Connection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refline_.Clear();
  ::memset(&edge1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&edge1_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Connection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 edge1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          edge1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 edge2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          edge2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Location_type refline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Connection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Connection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 edge1 = 1;
  if (this->edge1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_edge1(), target);
  }

  // int32 edge2 = 2;
  if (this->edge2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_edge2(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated .venue_map_pb.venue_map.Location_type refline = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_refline(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Connection)
  return target;
}

size_t venue_map_Connection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Connection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .venue_map_pb.venue_map.Location_type refline = 4;
  total_size += 1UL * this->_internal_refline_size();
  for (const auto& msg : this->refline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 edge1 = 1;
  if (this->edge1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_edge1());
  }

  // int32 edge2 = 2;
  if (this->edge2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_edge2());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Connection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Connection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Connection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Connection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Connection)
    MergeFrom(*source);
  }
}

void venue_map_Connection::MergeFrom(const venue_map_Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Connection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refline_.MergeFrom(from.refline_);
  if (from.edge1() != 0) {
    _internal_set_edge1(from._internal_edge1());
  }
  if (from.edge2() != 0) {
    _internal_set_edge2(from._internal_edge2());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void venue_map_Connection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Connection::CopyFrom(const venue_map_Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Connection::IsInitialized() const {
  return true;
}

void venue_map_Connection::InternalSwap(venue_map_Connection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  refline_.InternalSwap(&other->refline_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map_Connection, type_)
      + sizeof(venue_map_Connection::type_)
      - PROTOBUF_FIELD_OFFSET(venue_map_Connection, edge1_)>(
          reinterpret_cast<char*>(&edge1_),
          reinterpret_cast<char*>(&other->edge1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Connection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map_Intersection::InitAsDefaultInstance() {
}
class venue_map_Intersection::_Internal {
 public:
};

venue_map_Intersection::venue_map_Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shapes_(arena),
  edges_(arena),
  connections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map.Intersection)
}
venue_map_Intersection::venue_map_Intersection(const venue_map_Intersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_),
      edges_(from.edges_),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map.Intersection)
}

void venue_map_Intersection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  id_ = 0;
}

venue_map_Intersection::~venue_map_Intersection() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map.Intersection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map_Intersection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void venue_map_Intersection::ArenaDtor(void* object) {
  venue_map_Intersection* _this = reinterpret_cast< venue_map_Intersection* >(object);
  (void)_this;
}
void venue_map_Intersection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map_Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map_Intersection& venue_map_Intersection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_Intersection_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map_Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  edges_.Clear();
  connections_.Clear();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map_Intersection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Pointwithid shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Edge edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Connection connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map_Intersection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .venue_map_pb.venue_map.Pointwithid shapes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shapes(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Edge edges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_edges(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Connection connections = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_connections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map.Intersection)
  return target;
}

size_t venue_map_Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map.Intersection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .venue_map_pb.venue_map.Pointwithid shapes = 2;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Edge edges = 3;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Connection connections = 4;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map_Intersection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map_Intersection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map_Intersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map.Intersection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map.Intersection)
    MergeFrom(*source);
  }
}

void venue_map_Intersection::MergeFrom(const venue_map_Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  edges_.MergeFrom(from.edges_);
  connections_.MergeFrom(from.connections_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void venue_map_Intersection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map_Intersection::CopyFrom(const venue_map_Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map_Intersection::IsInitialized() const {
  return true;
}

void venue_map_Intersection::InternalSwap(venue_map_Intersection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
  edges_.InternalSwap(&other->edges_);
  connections_.InternalSwap(&other->connections_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map_Intersection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void venue_map::InitAsDefaultInstance() {
  ::venue_map_pb::_venue_map_default_instance_._instance.get_mutable()->venue_ = const_cast< ::venue_map_pb::venue_map_Venue_Type*>(
      ::venue_map_pb::venue_map_Venue_Type::internal_default_instance());
  ::venue_map_pb::_venue_map_default_instance_._instance.get_mutable()->logic_map_ = const_cast< ::LogicMapPb::LogicMap*>(
      ::LogicMapPb::LogicMap::internal_default_instance());
}
class venue_map::_Internal {
 public:
  static const ::venue_map_pb::venue_map_Venue_Type& venue(const venue_map* msg);
  static const ::LogicMapPb::LogicMap& logic_map(const venue_map* msg);
};

const ::venue_map_pb::venue_map_Venue_Type&
venue_map::_Internal::venue(const venue_map* msg) {
  return *msg->venue_;
}
const ::LogicMapPb::LogicMap&
venue_map::_Internal::logic_map(const venue_map* msg) {
  return *msg->logic_map_;
}
void venue_map::clear_logic_map() {
  if (GetArena() == nullptr && logic_map_ != nullptr) {
    delete logic_map_;
  }
  logic_map_ = nullptr;
}
venue_map::venue_map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vlinks_(arena),
  vjoints_(arena),
  vlandmarks_(arena),
  vslots_(arena),
  vobstacles_ultrasonic_(arena),
  vlanelines_(arena),
  floors_(arena),
  intersections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.venue_map)
}
venue_map::venue_map(const venue_map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vlinks_(from.vlinks_),
      vjoints_(from.vjoints_),
      vlandmarks_(from.vlandmarks_),
      vslots_(from.vslots_),
      vobstacles_ultrasonic_(from.vobstacles_ultrasonic_),
      vlanelines_(from.vlanelines_),
      floors_(from.floors_),
      intersections_(from.intersections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_venue()) {
    venue_ = new ::venue_map_pb::venue_map_Venue_Type(*from.venue_);
  } else {
    venue_ = nullptr;
  }
  if (from._internal_has_logic_map()) {
    logic_map_ = new ::LogicMapPb::LogicMap(*from.logic_map_);
  } else {
    logic_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.venue_map)
}

void venue_map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&venue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logic_map_) -
      reinterpret_cast<char*>(&venue_)) + sizeof(logic_map_));
}

venue_map::~venue_map() {
  // @@protoc_insertion_point(destructor:venue_map_pb.venue_map)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void venue_map::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete venue_;
  if (this != internal_default_instance()) delete logic_map_;
}

void venue_map::ArenaDtor(void* object) {
  venue_map* _this = reinterpret_cast< venue_map* >(object);
  (void)_this;
}
void venue_map::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void venue_map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const venue_map& venue_map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_venue_map_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void venue_map::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.venue_map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vlinks_.Clear();
  vjoints_.Clear();
  vlandmarks_.Clear();
  vslots_.Clear();
  vobstacles_ultrasonic_.Clear();
  vlanelines_.Clear();
  floors_.Clear();
  intersections_.Clear();
  if (GetArena() == nullptr && venue_ != nullptr) {
    delete venue_;
  }
  venue_ = nullptr;
  if (GetArena() == nullptr && logic_map_ != nullptr) {
    delete logic_map_;
  }
  logic_map_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* venue_map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .venue_map_pb.venue_map.Venue_Type Venue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_venue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Links_Type vLinks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vlinks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Joints_Type vJoints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vjoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Landmarks_Type vLandmarks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vlandmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Slots_Type vSlots = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vslots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Ultrasonic_obstacles_Type vObstacles_Ultrasonic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vobstacles_ultrasonic(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Lane_lines_Type vLaneLines = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vlanelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Floor floors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_floors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .venue_map_pb.venue_map.Intersection intersections = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .LogicMapPb.LogicMap logic_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_logic_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* venue_map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.venue_map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .venue_map_pb.venue_map.Venue_Type Venue = 1;
  if (this->has_venue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::venue(this), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Links_Type vLinks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vlinks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vlinks(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Joints_Type vJoints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vjoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vjoints(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Landmarks_Type vLandmarks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vlandmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vlandmarks(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Slots_Type vSlots = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vslots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vslots(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Ultrasonic_obstacles_Type vObstacles_Ultrasonic = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vobstacles_ultrasonic_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_vobstacles_ultrasonic(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Lane_lines_Type vLaneLines = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vlanelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_vlanelines(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Floor floors = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_floors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_floors(i), target, stream);
  }

  // repeated .venue_map_pb.venue_map.Intersection intersections = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intersections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_intersections(i), target, stream);
  }

  // .LogicMapPb.LogicMap logic_map = 10;
  if (this->has_logic_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::logic_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.venue_map)
  return target;
}

size_t venue_map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.venue_map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .venue_map_pb.venue_map.Links_Type vLinks = 2;
  total_size += 1UL * this->_internal_vlinks_size();
  for (const auto& msg : this->vlinks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Joints_Type vJoints = 3;
  total_size += 1UL * this->_internal_vjoints_size();
  for (const auto& msg : this->vjoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Landmarks_Type vLandmarks = 4;
  total_size += 1UL * this->_internal_vlandmarks_size();
  for (const auto& msg : this->vlandmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Slots_Type vSlots = 5;
  total_size += 1UL * this->_internal_vslots_size();
  for (const auto& msg : this->vslots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Ultrasonic_obstacles_Type vObstacles_Ultrasonic = 6;
  total_size += 1UL * this->_internal_vobstacles_ultrasonic_size();
  for (const auto& msg : this->vobstacles_ultrasonic_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Lane_lines_Type vLaneLines = 7;
  total_size += 1UL * this->_internal_vlanelines_size();
  for (const auto& msg : this->vlanelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Floor floors = 8;
  total_size += 1UL * this->_internal_floors_size();
  for (const auto& msg : this->floors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .venue_map_pb.venue_map.Intersection intersections = 9;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .venue_map_pb.venue_map.Venue_Type Venue = 1;
  if (this->has_venue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *venue_);
  }

  // .LogicMapPb.LogicMap logic_map = 10;
  if (this->has_logic_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logic_map_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void venue_map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.venue_map)
  GOOGLE_DCHECK_NE(&from, this);
  const venue_map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<venue_map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.venue_map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.venue_map)
    MergeFrom(*source);
  }
}

void venue_map::MergeFrom(const venue_map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.venue_map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vlinks_.MergeFrom(from.vlinks_);
  vjoints_.MergeFrom(from.vjoints_);
  vlandmarks_.MergeFrom(from.vlandmarks_);
  vslots_.MergeFrom(from.vslots_);
  vobstacles_ultrasonic_.MergeFrom(from.vobstacles_ultrasonic_);
  vlanelines_.MergeFrom(from.vlanelines_);
  floors_.MergeFrom(from.floors_);
  intersections_.MergeFrom(from.intersections_);
  if (from.has_venue()) {
    _internal_mutable_venue()->::venue_map_pb::venue_map_Venue_Type::MergeFrom(from._internal_venue());
  }
  if (from.has_logic_map()) {
    _internal_mutable_logic_map()->::LogicMapPb::LogicMap::MergeFrom(from._internal_logic_map());
  }
}

void venue_map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.venue_map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_map::CopyFrom(const venue_map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.venue_map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_map::IsInitialized() const {
  return true;
}

void venue_map::InternalSwap(venue_map* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vlinks_.InternalSwap(&other->vlinks_);
  vjoints_.InternalSwap(&other->vjoints_);
  vlandmarks_.InternalSwap(&other->vlandmarks_);
  vslots_.InternalSwap(&other->vslots_);
  vobstacles_ultrasonic_.InternalSwap(&other->vobstacles_ultrasonic_);
  vlanelines_.InternalSwap(&other->vlanelines_);
  floors_.InternalSwap(&other->floors_);
  intersections_.InternalSwap(&other->intersections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(venue_map, logic_map_)
      + sizeof(venue_map::logic_map_)
      - PROTOBUF_FIELD_OFFSET(venue_map, venue_)>(
          reinterpret_cast<char*>(&venue_),
          reinterpret_cast<char*>(&other->venue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata venue_map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void map_trajectory_data::InitAsDefaultInstance() {
  ::venue_map_pb::_map_trajectory_data_default_instance_._instance.get_mutable()->venuemap_ = const_cast< ::venue_map_pb::venue_map*>(
      ::venue_map_pb::venue_map::internal_default_instance());
  ::venue_map_pb::_map_trajectory_data_default_instance_._instance.get_mutable()->aptrajectorydata_ = const_cast< ::SRprotobuf::ApTrajectoryDataType*>(
      ::SRprotobuf::ApTrajectoryDataType::internal_default_instance());
}
class map_trajectory_data::_Internal {
 public:
  static const ::venue_map_pb::venue_map& venuemap(const map_trajectory_data* msg);
  static const ::SRprotobuf::ApTrajectoryDataType& aptrajectorydata(const map_trajectory_data* msg);
};

const ::venue_map_pb::venue_map&
map_trajectory_data::_Internal::venuemap(const map_trajectory_data* msg) {
  return *msg->venuemap_;
}
const ::SRprotobuf::ApTrajectoryDataType&
map_trajectory_data::_Internal::aptrajectorydata(const map_trajectory_data* msg) {
  return *msg->aptrajectorydata_;
}
void map_trajectory_data::clear_aptrajectorydata() {
  if (GetArena() == nullptr && aptrajectorydata_ != nullptr) {
    delete aptrajectorydata_;
  }
  aptrajectorydata_ = nullptr;
}
map_trajectory_data::map_trajectory_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:venue_map_pb.map_trajectory_data)
}
map_trajectory_data::map_trajectory_data(const map_trajectory_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_venuemap()) {
    venuemap_ = new ::venue_map_pb::venue_map(*from.venuemap_);
  } else {
    venuemap_ = nullptr;
  }
  if (from._internal_has_aptrajectorydata()) {
    aptrajectorydata_ = new ::SRprotobuf::ApTrajectoryDataType(*from.aptrajectorydata_);
  } else {
    aptrajectorydata_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&isacrossfloors_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(isacrossfloors_));
  // @@protoc_insertion_point(copy_constructor:venue_map_pb.map_trajectory_data)
}

void map_trajectory_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_map_trajectory_data_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  ::memset(&venuemap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isacrossfloors_) -
      reinterpret_cast<char*>(&venuemap_)) + sizeof(isacrossfloors_));
}

map_trajectory_data::~map_trajectory_data() {
  // @@protoc_insertion_point(destructor:venue_map_pb.map_trajectory_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void map_trajectory_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete venuemap_;
  if (this != internal_default_instance()) delete aptrajectorydata_;
}

void map_trajectory_data::ArenaDtor(void* object) {
  map_trajectory_data* _this = reinterpret_cast< map_trajectory_data* >(object);
  (void)_this;
}
void map_trajectory_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void map_trajectory_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const map_trajectory_data& map_trajectory_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_map_trajectory_data_proto_5fap_2fWM_5fdisplay_5fmap_2eproto.base);
  return *internal_default_instance();
}


void map_trajectory_data::Clear() {
// @@protoc_insertion_point(message_clear_start:venue_map_pb.map_trajectory_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && venuemap_ != nullptr) {
    delete venuemap_;
  }
  venuemap_ = nullptr;
  if (GetArena() == nullptr && aptrajectorydata_ != nullptr) {
    delete aptrajectorydata_;
  }
  aptrajectorydata_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isacrossfloors_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(isacrossfloors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* map_trajectory_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .venue_map_pb.venue_map venueMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_venuemap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.ApTrajectoryDataType apTrajectoryData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aptrajectorydata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isAcrossFloors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isacrossfloors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* map_trajectory_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:venue_map_pb.map_trajectory_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .venue_map_pb.venue_map venueMap = 1;
  if (this->has_venuemap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::venuemap(this), target, stream);
  }

  // .SRprotobuf.ApTrajectoryDataType apTrajectoryData = 2;
  if (this->has_aptrajectorydata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::aptrajectorydata(this), target, stream);
  }

  // uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // int32 isAcrossFloors = 4;
  if (this->isacrossfloors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_isacrossfloors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:venue_map_pb.map_trajectory_data)
  return target;
}

size_t map_trajectory_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:venue_map_pb.map_trajectory_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .venue_map_pb.venue_map venueMap = 1;
  if (this->has_venuemap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *venuemap_);
  }

  // .SRprotobuf.ApTrajectoryDataType apTrajectoryData = 2;
  if (this->has_aptrajectorydata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aptrajectorydata_);
  }

  // uint32 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  // int32 isAcrossFloors = 4;
  if (this->isacrossfloors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isacrossfloors());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void map_trajectory_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:venue_map_pb.map_trajectory_data)
  GOOGLE_DCHECK_NE(&from, this);
  const map_trajectory_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<map_trajectory_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:venue_map_pb.map_trajectory_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:venue_map_pb.map_trajectory_data)
    MergeFrom(*source);
  }
}

void map_trajectory_data::MergeFrom(const map_trajectory_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:venue_map_pb.map_trajectory_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_venuemap()) {
    _internal_mutable_venuemap()->::venue_map_pb::venue_map::MergeFrom(from._internal_venuemap());
  }
  if (from.has_aptrajectorydata()) {
    _internal_mutable_aptrajectorydata()->::SRprotobuf::ApTrajectoryDataType::MergeFrom(from._internal_aptrajectorydata());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.isacrossfloors() != 0) {
    _internal_set_isacrossfloors(from._internal_isacrossfloors());
  }
}

void map_trajectory_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:venue_map_pb.map_trajectory_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void map_trajectory_data::CopyFrom(const map_trajectory_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:venue_map_pb.map_trajectory_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool map_trajectory_data::IsInitialized() const {
  return true;
}

void map_trajectory_data::InternalSwap(map_trajectory_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(map_trajectory_data, isacrossfloors_)
      + sizeof(map_trajectory_data::isacrossfloors_)
      - PROTOBUF_FIELD_OFFSET(map_trajectory_data, venuemap_)>(
          reinterpret_cast<char*>(&venuemap_),
          reinterpret_cast<char*>(&other->venuemap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata map_trajectory_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace venue_map_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Floor* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Floor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Floor >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Waypoints_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Waypoints_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Waypoints_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Favorate_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Favorate_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Favorate_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Updates_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Updates_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Updates_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Slots_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Slots_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Slots_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Ultrasonic_obstacles_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_LastPostprocessing_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_LastPostprocessing_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_LastPostprocessing_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Venue_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Venue_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Venue_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Link_IDs_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Link_IDs_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Link_IDs_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Turn_directions_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Turn_directions_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Turn_directions_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Lane_lines_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Lane_lines_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Lane_lines_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Links_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Links_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Links_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Joints_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Joints_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Joints_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Landmarks_Type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Landmarks_Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Landmarks_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Location_type* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Location_type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Location_type >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Pointwithid* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Pointwithid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Pointwithid >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Edge* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Connection* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Connection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Connection >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map_Intersection* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map_Intersection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map_Intersection >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::venue_map* Arena::CreateMaybeMessage< ::venue_map_pb::venue_map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::venue_map >(arena);
}
template<> PROTOBUF_NOINLINE ::venue_map_pb::map_trajectory_data* Arena::CreateMaybeMessage< ::venue_map_pb::map_trajectory_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::venue_map_pb::map_trajectory_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
