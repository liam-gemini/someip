// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/online_local_map_fusion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto_ap/base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
namespace SRprotobuf {
class BoundaryObject;
class BoundaryObjectDefaultTypeInternal;
extern BoundaryObjectDefaultTypeInternal _BoundaryObject_default_instance_;
class FeaturePointSequence;
class FeaturePointSequenceDefaultTypeInternal;
extern FeaturePointSequenceDefaultTypeInternal _FeaturePointSequence_default_instance_;
class OnlineLocalMapMsg;
class OnlineLocalMapMsgDefaultTypeInternal;
extern OnlineLocalMapMsgDefaultTypeInternal _OnlineLocalMapMsg_default_instance_;
class RoadMarkingObject;
class RoadMarkingObjectDefaultTypeInternal;
extern RoadMarkingObjectDefaultTypeInternal _RoadMarkingObject_default_instance_;
class RoadMarkingPoint;
class RoadMarkingPointDefaultTypeInternal;
extern RoadMarkingPointDefaultTypeInternal _RoadMarkingPoint_default_instance_;
}  // namespace SRprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::SRprotobuf::BoundaryObject* Arena::CreateMaybeMessage<::SRprotobuf::BoundaryObject>(Arena*);
template<> ::SRprotobuf::FeaturePointSequence* Arena::CreateMaybeMessage<::SRprotobuf::FeaturePointSequence>(Arena*);
template<> ::SRprotobuf::OnlineLocalMapMsg* Arena::CreateMaybeMessage<::SRprotobuf::OnlineLocalMapMsg>(Arena*);
template<> ::SRprotobuf::RoadMarkingObject* Arena::CreateMaybeMessage<::SRprotobuf::RoadMarkingObject>(Arena*);
template<> ::SRprotobuf::RoadMarkingPoint* Arena::CreateMaybeMessage<::SRprotobuf::RoadMarkingPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SRprotobuf {

enum LaneLineType : int {
  LINE_TYPE_UNKNOWN = 0,
  LINE_TYPE_SINGLE_SOLID = 1,
  LINE_TYPE_SINGLE_DASHED = 2,
  LINE_TYPE_SHORT_DASHED = 3,
  LINE_TYPE_DOUBLE_SOLID = 4,
  LINE_TYPE_DOUBLE_DASHED = 5,
  LINE_TYPE_LEFT_SOLID_RIGHT_DASHED = 6,
  LINE_TYPE_RIGHT_SOLID_LEFT_DASHED = 7,
  LINE_TYPE_SHADED_AREA = 8,
  LINE_TYPE_VIRTUAL = 9,
  LINE_TYPE_INTERSECTION_VIRTUAL = 10,
  LINE_TYPE_CURB = 11,
  LINE_TYPE_UNCLOSED_ROAD = 12,
  LINE_TYPE_BOLT = 13,
  LINE_TYPE_DASHED_SLOW = 14,
  LINE_TYPE_SOLID_SLOW = 15,
  LINE_TYPE_OBSTACLE = 16,
  LINE_TYPE_OTHERS = 17,
  LaneLineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LaneLineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LaneLineType_IsValid(int value);
constexpr LaneLineType LaneLineType_MIN = LINE_TYPE_UNKNOWN;
constexpr LaneLineType LaneLineType_MAX = LINE_TYPE_OTHERS;
constexpr int LaneLineType_ARRAYSIZE = LaneLineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineType_descriptor();
template<typename T>
inline const std::string& LaneLineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaneLineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaneLineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaneLineType_descriptor(), enum_t_value);
}
inline bool LaneLineType_Parse(
    const std::string& name, LaneLineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaneLineType>(
    LaneLineType_descriptor(), name, value);
}
enum RoadMarkingType : int {
  STRAIGHT = 0,
  LEFT_TURN = 1,
  RIGHT_TURN = 2,
  STRAIGHT_LEFT_TURN = 3,
  STRAIGHT_RIGHT_TURN = 4,
  STRAIGHT_LEFT_RIGHT_TURN = 5,
  LEFT_RIGHT_TURN = 6,
  LEFT_U_TURN = 7,
  RIGHT_U_TURN = 8,
  LEFT_TURN_U_TURN = 9,
  RIGHT_TURN_U_TURN = 10,
  UNKNOWN = 11,
  speed_bump = 44,
  RoadMarkingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoadMarkingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoadMarkingType_IsValid(int value);
constexpr RoadMarkingType RoadMarkingType_MIN = STRAIGHT;
constexpr RoadMarkingType RoadMarkingType_MAX = speed_bump;
constexpr int RoadMarkingType_ARRAYSIZE = RoadMarkingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarkingType_descriptor();
template<typename T>
inline const std::string& RoadMarkingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoadMarkingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoadMarkingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoadMarkingType_descriptor(), enum_t_value);
}
inline bool RoadMarkingType_Parse(
    const std::string& name, RoadMarkingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoadMarkingType>(
    RoadMarkingType_descriptor(), name, value);
}
// ===================================================================

class FeaturePointSequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.FeaturePointSequence) */ {
 public:
  inline FeaturePointSequence() : FeaturePointSequence(nullptr) {};
  virtual ~FeaturePointSequence();

  FeaturePointSequence(const FeaturePointSequence& from);
  FeaturePointSequence(FeaturePointSequence&& from) noexcept
    : FeaturePointSequence() {
    *this = ::std::move(from);
  }

  inline FeaturePointSequence& operator=(const FeaturePointSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeaturePointSequence& operator=(FeaturePointSequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeaturePointSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeaturePointSequence* internal_default_instance() {
    return reinterpret_cast<const FeaturePointSequence*>(
               &_FeaturePointSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeaturePointSequence& a, FeaturePointSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(FeaturePointSequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeaturePointSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeaturePointSequence* New() const final {
    return CreateMaybeMessage<FeaturePointSequence>(nullptr);
  }

  FeaturePointSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeaturePointSequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeaturePointSequence& from);
  void MergeFrom(const FeaturePointSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeaturePointSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.FeaturePointSequence";
  }
  protected:
  explicit FeaturePointSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.FeaturePointSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class BoundaryObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.BoundaryObject) */ {
 public:
  inline BoundaryObject() : BoundaryObject(nullptr) {};
  virtual ~BoundaryObject();

  BoundaryObject(const BoundaryObject& from);
  BoundaryObject(BoundaryObject&& from) noexcept
    : BoundaryObject() {
    *this = ::std::move(from);
  }

  inline BoundaryObject& operator=(const BoundaryObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundaryObject& operator=(BoundaryObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundaryObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundaryObject* internal_default_instance() {
    return reinterpret_cast<const BoundaryObject*>(
               &_BoundaryObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundaryObject& a, BoundaryObject& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundaryObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundaryObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundaryObject* New() const final {
    return CreateMaybeMessage<BoundaryObject>(nullptr);
  }

  BoundaryObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundaryObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundaryObject& from);
  void MergeFrom(const BoundaryObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundaryObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.BoundaryObject";
  }
  protected:
  explicit BoundaryObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturePointsFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kColorFieldNumber = 3,
  };
  // repeated .SRprotobuf.FeaturePointSequence feature_points = 4;
  int feature_points_size() const;
  private:
  int _internal_feature_points_size() const;
  public:
  void clear_feature_points();
  ::SRprotobuf::FeaturePointSequence* mutable_feature_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::FeaturePointSequence >*
      mutable_feature_points();
  private:
  const ::SRprotobuf::FeaturePointSequence& _internal_feature_points(int index) const;
  ::SRprotobuf::FeaturePointSequence* _internal_add_feature_points();
  public:
  const ::SRprotobuf::FeaturePointSequence& feature_points(int index) const;
  ::SRprotobuf::FeaturePointSequence* add_feature_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::FeaturePointSequence >&
      feature_points() const;

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.BoundaryObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::FeaturePointSequence > feature_points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class RoadMarkingObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.RoadMarkingObject) */ {
 public:
  inline RoadMarkingObject() : RoadMarkingObject(nullptr) {};
  virtual ~RoadMarkingObject();

  RoadMarkingObject(const RoadMarkingObject& from);
  RoadMarkingObject(RoadMarkingObject&& from) noexcept
    : RoadMarkingObject() {
    *this = ::std::move(from);
  }

  inline RoadMarkingObject& operator=(const RoadMarkingObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadMarkingObject& operator=(RoadMarkingObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadMarkingObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadMarkingObject* internal_default_instance() {
    return reinterpret_cast<const RoadMarkingObject*>(
               &_RoadMarkingObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoadMarkingObject& a, RoadMarkingObject& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadMarkingObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadMarkingObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadMarkingObject* New() const final {
    return CreateMaybeMessage<RoadMarkingObject>(nullptr);
  }

  RoadMarkingObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadMarkingObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadMarkingObject& from);
  void MergeFrom(const RoadMarkingObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadMarkingObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.RoadMarkingObject";
  }
  protected:
  explicit RoadMarkingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kIdFieldNumber = 1,
    kRsmTypeFieldNumber = 2,
    kStopLineColorFieldNumber = 4,
  };
  // repeated .SRprotobuf.RoadMarkingPoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::SRprotobuf::RoadMarkingPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingPoint >*
      mutable_points();
  private:
  const ::SRprotobuf::RoadMarkingPoint& _internal_points(int index) const;
  ::SRprotobuf::RoadMarkingPoint* _internal_add_points();
  public:
  const ::SRprotobuf::RoadMarkingPoint& points(int index) const;
  ::SRprotobuf::RoadMarkingPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingPoint >&
      points() const;

  // float id = 1;
  void clear_id();
  float id() const;
  void set_id(float value);
  private:
  float _internal_id() const;
  void _internal_set_id(float value);
  public:

  // uint32 rsm_type = 2;
  void clear_rsm_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 rsm_type() const;
  void set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rsm_type() const;
  void _internal_set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stop_line_color = 4;
  void clear_stop_line_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_line_color() const;
  void set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_line_color() const;
  void _internal_set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.RoadMarkingObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingPoint > points_;
  float id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rsm_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_line_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class RoadMarkingPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.RoadMarkingPoint) */ {
 public:
  inline RoadMarkingPoint() : RoadMarkingPoint(nullptr) {};
  virtual ~RoadMarkingPoint();

  RoadMarkingPoint(const RoadMarkingPoint& from);
  RoadMarkingPoint(RoadMarkingPoint&& from) noexcept
    : RoadMarkingPoint() {
    *this = ::std::move(from);
  }

  inline RoadMarkingPoint& operator=(const RoadMarkingPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadMarkingPoint& operator=(RoadMarkingPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadMarkingPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadMarkingPoint* internal_default_instance() {
    return reinterpret_cast<const RoadMarkingPoint*>(
               &_RoadMarkingPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoadMarkingPoint& a, RoadMarkingPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadMarkingPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadMarkingPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadMarkingPoint* New() const final {
    return CreateMaybeMessage<RoadMarkingPoint>(nullptr);
  }

  RoadMarkingPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadMarkingPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadMarkingPoint& from);
  void MergeFrom(const RoadMarkingPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadMarkingPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.RoadMarkingPoint";
  }
  protected:
  explicit RoadMarkingPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.RoadMarkingPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class OnlineLocalMapMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.OnlineLocalMapMsg) */ {
 public:
  inline OnlineLocalMapMsg() : OnlineLocalMapMsg(nullptr) {};
  virtual ~OnlineLocalMapMsg();

  OnlineLocalMapMsg(const OnlineLocalMapMsg& from);
  OnlineLocalMapMsg(OnlineLocalMapMsg&& from) noexcept
    : OnlineLocalMapMsg() {
    *this = ::std::move(from);
  }

  inline OnlineLocalMapMsg& operator=(const OnlineLocalMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineLocalMapMsg& operator=(OnlineLocalMapMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineLocalMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineLocalMapMsg* internal_default_instance() {
    return reinterpret_cast<const OnlineLocalMapMsg*>(
               &_OnlineLocalMapMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OnlineLocalMapMsg& a, OnlineLocalMapMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineLocalMapMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineLocalMapMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineLocalMapMsg* New() const final {
    return CreateMaybeMessage<OnlineLocalMapMsg>(nullptr);
  }

  OnlineLocalMapMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineLocalMapMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineLocalMapMsg& from);
  void MergeFrom(const OnlineLocalMapMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineLocalMapMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.OnlineLocalMapMsg";
  }
  protected:
  explicit OnlineLocalMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoudaryObjectFieldNumber = 1,
    kRoadMarkObjectFieldNumber = 2,
    kDrivableSpaceMapFieldNumber = 3,
  };
  // repeated .SRprotobuf.BoundaryObject boudary_object = 1;
  int boudary_object_size() const;
  private:
  int _internal_boudary_object_size() const;
  public:
  void clear_boudary_object();
  ::SRprotobuf::BoundaryObject* mutable_boudary_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::BoundaryObject >*
      mutable_boudary_object();
  private:
  const ::SRprotobuf::BoundaryObject& _internal_boudary_object(int index) const;
  ::SRprotobuf::BoundaryObject* _internal_add_boudary_object();
  public:
  const ::SRprotobuf::BoundaryObject& boudary_object(int index) const;
  ::SRprotobuf::BoundaryObject* add_boudary_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::BoundaryObject >&
      boudary_object() const;

  // repeated .SRprotobuf.RoadMarkingObject road_mark_object = 2;
  int road_mark_object_size() const;
  private:
  int _internal_road_mark_object_size() const;
  public:
  void clear_road_mark_object();
  ::SRprotobuf::RoadMarkingObject* mutable_road_mark_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingObject >*
      mutable_road_mark_object();
  private:
  const ::SRprotobuf::RoadMarkingObject& _internal_road_mark_object(int index) const;
  ::SRprotobuf::RoadMarkingObject* _internal_add_road_mark_object();
  public:
  const ::SRprotobuf::RoadMarkingObject& road_mark_object(int index) const;
  ::SRprotobuf::RoadMarkingObject* add_road_mark_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingObject >&
      road_mark_object() const;

  // repeated int32 drivable_space_map = 3;
  int drivable_space_map_size() const;
  private:
  int _internal_drivable_space_map_size() const;
  public:
  void clear_drivable_space_map();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drivable_space_map(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_drivable_space_map() const;
  void _internal_add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_drivable_space_map();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 drivable_space_map(int index) const;
  void set_drivable_space_map(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      drivable_space_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_drivable_space_map();

  // @@protoc_insertion_point(class_scope:SRprotobuf.OnlineLocalMapMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::BoundaryObject > boudary_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingObject > road_mark_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > drivable_space_map_;
  mutable std::atomic<int> _drivable_space_map_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeaturePointSequence

// float x = 1;
inline void FeaturePointSequence::clear_x() {
  x_ = 0;
}
inline float FeaturePointSequence::_internal_x() const {
  return x_;
}
inline float FeaturePointSequence::x() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.FeaturePointSequence.x)
  return _internal_x();
}
inline void FeaturePointSequence::_internal_set_x(float value) {
  
  x_ = value;
}
inline void FeaturePointSequence::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.FeaturePointSequence.x)
}

// float y = 2;
inline void FeaturePointSequence::clear_y() {
  y_ = 0;
}
inline float FeaturePointSequence::_internal_y() const {
  return y_;
}
inline float FeaturePointSequence::y() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.FeaturePointSequence.y)
  return _internal_y();
}
inline void FeaturePointSequence::_internal_set_y(float value) {
  
  y_ = value;
}
inline void FeaturePointSequence::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.FeaturePointSequence.y)
}

// float z = 3;
inline void FeaturePointSequence::clear_z() {
  z_ = 0;
}
inline float FeaturePointSequence::_internal_z() const {
  return z_;
}
inline float FeaturePointSequence::z() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.FeaturePointSequence.z)
  return _internal_z();
}
inline void FeaturePointSequence::_internal_set_z(float value) {
  
  z_ = value;
}
inline void FeaturePointSequence::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.FeaturePointSequence.z)
}

// -------------------------------------------------------------------

// BoundaryObject

// uint64 id = 1;
inline void BoundaryObject::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::id() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.BoundaryObject.id)
  return _internal_id();
}
inline void BoundaryObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void BoundaryObject::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.BoundaryObject.id)
}

// uint32 type = 2;
inline void BoundaryObject::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::type() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.BoundaryObject.type)
  return _internal_type();
}
inline void BoundaryObject::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void BoundaryObject::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.BoundaryObject.type)
}

// uint32 color = 3;
inline void BoundaryObject::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::color() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.BoundaryObject.color)
  return _internal_color();
}
inline void BoundaryObject::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void BoundaryObject::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.BoundaryObject.color)
}

// repeated .SRprotobuf.FeaturePointSequence feature_points = 4;
inline int BoundaryObject::_internal_feature_points_size() const {
  return feature_points_.size();
}
inline int BoundaryObject::feature_points_size() const {
  return _internal_feature_points_size();
}
inline void BoundaryObject::clear_feature_points() {
  feature_points_.Clear();
}
inline ::SRprotobuf::FeaturePointSequence* BoundaryObject::mutable_feature_points(int index) {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.BoundaryObject.feature_points)
  return feature_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::FeaturePointSequence >*
BoundaryObject::mutable_feature_points() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.BoundaryObject.feature_points)
  return &feature_points_;
}
inline const ::SRprotobuf::FeaturePointSequence& BoundaryObject::_internal_feature_points(int index) const {
  return feature_points_.Get(index);
}
inline const ::SRprotobuf::FeaturePointSequence& BoundaryObject::feature_points(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.BoundaryObject.feature_points)
  return _internal_feature_points(index);
}
inline ::SRprotobuf::FeaturePointSequence* BoundaryObject::_internal_add_feature_points() {
  return feature_points_.Add();
}
inline ::SRprotobuf::FeaturePointSequence* BoundaryObject::add_feature_points() {
  // @@protoc_insertion_point(field_add:SRprotobuf.BoundaryObject.feature_points)
  return _internal_add_feature_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::FeaturePointSequence >&
BoundaryObject::feature_points() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.BoundaryObject.feature_points)
  return feature_points_;
}

// -------------------------------------------------------------------

// RoadMarkingObject

// float id = 1;
inline void RoadMarkingObject::clear_id() {
  id_ = 0;
}
inline float RoadMarkingObject::_internal_id() const {
  return id_;
}
inline float RoadMarkingObject::id() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingObject.id)
  return _internal_id();
}
inline void RoadMarkingObject::_internal_set_id(float value) {
  
  id_ = value;
}
inline void RoadMarkingObject::set_id(float value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingObject.id)
}

// uint32 rsm_type = 2;
inline void RoadMarkingObject::clear_rsm_type() {
  rsm_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::_internal_rsm_type() const {
  return rsm_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::rsm_type() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingObject.rsm_type)
  return _internal_rsm_type();
}
inline void RoadMarkingObject::_internal_set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rsm_type_ = value;
}
inline void RoadMarkingObject::set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rsm_type(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingObject.rsm_type)
}

// repeated .SRprotobuf.RoadMarkingPoint points = 3;
inline int RoadMarkingObject::_internal_points_size() const {
  return points_.size();
}
inline int RoadMarkingObject::points_size() const {
  return _internal_points_size();
}
inline void RoadMarkingObject::clear_points() {
  points_.Clear();
}
inline ::SRprotobuf::RoadMarkingPoint* RoadMarkingObject::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.RoadMarkingObject.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingPoint >*
RoadMarkingObject::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.RoadMarkingObject.points)
  return &points_;
}
inline const ::SRprotobuf::RoadMarkingPoint& RoadMarkingObject::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::SRprotobuf::RoadMarkingPoint& RoadMarkingObject::points(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingObject.points)
  return _internal_points(index);
}
inline ::SRprotobuf::RoadMarkingPoint* RoadMarkingObject::_internal_add_points() {
  return points_.Add();
}
inline ::SRprotobuf::RoadMarkingPoint* RoadMarkingObject::add_points() {
  // @@protoc_insertion_point(field_add:SRprotobuf.RoadMarkingObject.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingPoint >&
RoadMarkingObject::points() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.RoadMarkingObject.points)
  return points_;
}

// uint32 stop_line_color = 4;
inline void RoadMarkingObject::clear_stop_line_color() {
  stop_line_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::_internal_stop_line_color() const {
  return stop_line_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::stop_line_color() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingObject.stop_line_color)
  return _internal_stop_line_color();
}
inline void RoadMarkingObject::_internal_set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_line_color_ = value;
}
inline void RoadMarkingObject::set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_line_color(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingObject.stop_line_color)
}

// -------------------------------------------------------------------

// RoadMarkingPoint

// float x = 1;
inline void RoadMarkingPoint::clear_x() {
  x_ = 0;
}
inline float RoadMarkingPoint::_internal_x() const {
  return x_;
}
inline float RoadMarkingPoint::x() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingPoint.x)
  return _internal_x();
}
inline void RoadMarkingPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void RoadMarkingPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingPoint.x)
}

// float y = 2;
inline void RoadMarkingPoint::clear_y() {
  y_ = 0;
}
inline float RoadMarkingPoint::_internal_y() const {
  return y_;
}
inline float RoadMarkingPoint::y() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingPoint.y)
  return _internal_y();
}
inline void RoadMarkingPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void RoadMarkingPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingPoint.y)
}

// float z = 3;
inline void RoadMarkingPoint::clear_z() {
  z_ = 0;
}
inline float RoadMarkingPoint::_internal_z() const {
  return z_;
}
inline float RoadMarkingPoint::z() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingPoint.z)
  return _internal_z();
}
inline void RoadMarkingPoint::_internal_set_z(float value) {
  
  z_ = value;
}
inline void RoadMarkingPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingPoint.z)
}

// uint32 type = 4;
inline void RoadMarkingPoint::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingPoint::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingPoint::type() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.RoadMarkingPoint.type)
  return _internal_type();
}
inline void RoadMarkingPoint::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void RoadMarkingPoint::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.RoadMarkingPoint.type)
}

// -------------------------------------------------------------------

// OnlineLocalMapMsg

// repeated .SRprotobuf.BoundaryObject boudary_object = 1;
inline int OnlineLocalMapMsg::_internal_boudary_object_size() const {
  return boudary_object_.size();
}
inline int OnlineLocalMapMsg::boudary_object_size() const {
  return _internal_boudary_object_size();
}
inline void OnlineLocalMapMsg::clear_boudary_object() {
  boudary_object_.Clear();
}
inline ::SRprotobuf::BoundaryObject* OnlineLocalMapMsg::mutable_boudary_object(int index) {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.OnlineLocalMapMsg.boudary_object)
  return boudary_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::BoundaryObject >*
OnlineLocalMapMsg::mutable_boudary_object() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.OnlineLocalMapMsg.boudary_object)
  return &boudary_object_;
}
inline const ::SRprotobuf::BoundaryObject& OnlineLocalMapMsg::_internal_boudary_object(int index) const {
  return boudary_object_.Get(index);
}
inline const ::SRprotobuf::BoundaryObject& OnlineLocalMapMsg::boudary_object(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.OnlineLocalMapMsg.boudary_object)
  return _internal_boudary_object(index);
}
inline ::SRprotobuf::BoundaryObject* OnlineLocalMapMsg::_internal_add_boudary_object() {
  return boudary_object_.Add();
}
inline ::SRprotobuf::BoundaryObject* OnlineLocalMapMsg::add_boudary_object() {
  // @@protoc_insertion_point(field_add:SRprotobuf.OnlineLocalMapMsg.boudary_object)
  return _internal_add_boudary_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::BoundaryObject >&
OnlineLocalMapMsg::boudary_object() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.OnlineLocalMapMsg.boudary_object)
  return boudary_object_;
}

// repeated .SRprotobuf.RoadMarkingObject road_mark_object = 2;
inline int OnlineLocalMapMsg::_internal_road_mark_object_size() const {
  return road_mark_object_.size();
}
inline int OnlineLocalMapMsg::road_mark_object_size() const {
  return _internal_road_mark_object_size();
}
inline void OnlineLocalMapMsg::clear_road_mark_object() {
  road_mark_object_.Clear();
}
inline ::SRprotobuf::RoadMarkingObject* OnlineLocalMapMsg::mutable_road_mark_object(int index) {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.OnlineLocalMapMsg.road_mark_object)
  return road_mark_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingObject >*
OnlineLocalMapMsg::mutable_road_mark_object() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.OnlineLocalMapMsg.road_mark_object)
  return &road_mark_object_;
}
inline const ::SRprotobuf::RoadMarkingObject& OnlineLocalMapMsg::_internal_road_mark_object(int index) const {
  return road_mark_object_.Get(index);
}
inline const ::SRprotobuf::RoadMarkingObject& OnlineLocalMapMsg::road_mark_object(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.OnlineLocalMapMsg.road_mark_object)
  return _internal_road_mark_object(index);
}
inline ::SRprotobuf::RoadMarkingObject* OnlineLocalMapMsg::_internal_add_road_mark_object() {
  return road_mark_object_.Add();
}
inline ::SRprotobuf::RoadMarkingObject* OnlineLocalMapMsg::add_road_mark_object() {
  // @@protoc_insertion_point(field_add:SRprotobuf.OnlineLocalMapMsg.road_mark_object)
  return _internal_add_road_mark_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::RoadMarkingObject >&
OnlineLocalMapMsg::road_mark_object() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.OnlineLocalMapMsg.road_mark_object)
  return road_mark_object_;
}

// repeated int32 drivable_space_map = 3;
inline int OnlineLocalMapMsg::_internal_drivable_space_map_size() const {
  return drivable_space_map_.size();
}
inline int OnlineLocalMapMsg::drivable_space_map_size() const {
  return _internal_drivable_space_map_size();
}
inline void OnlineLocalMapMsg::clear_drivable_space_map() {
  drivable_space_map_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnlineLocalMapMsg::_internal_drivable_space_map(int index) const {
  return drivable_space_map_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnlineLocalMapMsg::drivable_space_map(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.OnlineLocalMapMsg.drivable_space_map)
  return _internal_drivable_space_map(index);
}
inline void OnlineLocalMapMsg::set_drivable_space_map(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  drivable_space_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:SRprotobuf.OnlineLocalMapMsg.drivable_space_map)
}
inline void OnlineLocalMapMsg::_internal_add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  drivable_space_map_.Add(value);
}
inline void OnlineLocalMapMsg::add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_drivable_space_map(value);
  // @@protoc_insertion_point(field_add:SRprotobuf.OnlineLocalMapMsg.drivable_space_map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OnlineLocalMapMsg::_internal_drivable_space_map() const {
  return drivable_space_map_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OnlineLocalMapMsg::drivable_space_map() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.OnlineLocalMapMsg.drivable_space_map)
  return _internal_drivable_space_map();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OnlineLocalMapMsg::_internal_mutable_drivable_space_map() {
  return &drivable_space_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OnlineLocalMapMsg::mutable_drivable_space_map() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.OnlineLocalMapMsg.drivable_space_map)
  return _internal_mutable_drivable_space_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRprotobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SRprotobuf::LaneLineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SRprotobuf::LaneLineType>() {
  return ::SRprotobuf::LaneLineType_descriptor();
}
template <> struct is_proto_enum< ::SRprotobuf::RoadMarkingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SRprotobuf::RoadMarkingType>() {
  return ::SRprotobuf::RoadMarkingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fonline_5flocal_5fmap_5ffusion_2eproto
