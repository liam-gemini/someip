// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/fngp_route_mgr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2ffngp_5froute_5fmgr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2ffngp_5froute_5fmgr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fap_2ffngp_5froute_5fmgr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
class CustomStatusMsg;
class CustomStatusMsgDefaultTypeInternal;
extern CustomStatusMsgDefaultTypeInternal _CustomStatusMsg_default_instance_;
class FNgpEmulatorNavigation;
class FNgpEmulatorNavigationDefaultTypeInternal;
extern FNgpEmulatorNavigationDefaultTypeInternal _FNgpEmulatorNavigation_default_instance_;
class FNgpRecordingState;
class FNgpRecordingStateDefaultTypeInternal;
extern FNgpRecordingStateDefaultTypeInternal _FNgpRecordingState_default_instance_;
class FNgpRouteBrief;
class FNgpRouteBriefDefaultTypeInternal;
extern FNgpRouteBriefDefaultTypeInternal _FNgpRouteBrief_default_instance_;
class FNgpRouteBriefList;
class FNgpRouteBriefListDefaultTypeInternal;
extern FNgpRouteBriefListDefaultTypeInternal _FNgpRouteBriefList_default_instance_;
class FNgpRouteDetail;
class FNgpRouteDetailDefaultTypeInternal;
extern FNgpRouteDetailDefaultTypeInternal _FNgpRouteDetail_default_instance_;
class FNgpRouteDetailList;
class FNgpRouteDetailListDefaultTypeInternal;
extern FNgpRouteDetailListDefaultTypeInternal _FNgpRouteDetailList_default_instance_;
class FNgpRouteWayPointsSpecified;
class FNgpRouteWayPointsSpecifiedDefaultTypeInternal;
extern FNgpRouteWayPointsSpecifiedDefaultTypeInternal _FNgpRouteWayPointsSpecified_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class SegmentInfo;
class SegmentInfoDefaultTypeInternal;
extern SegmentInfoDefaultTypeInternal _SegmentInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CustomStatusMsg* Arena::CreateMaybeMessage<::CustomStatusMsg>(Arena*);
template<> ::FNgpEmulatorNavigation* Arena::CreateMaybeMessage<::FNgpEmulatorNavigation>(Arena*);
template<> ::FNgpRecordingState* Arena::CreateMaybeMessage<::FNgpRecordingState>(Arena*);
template<> ::FNgpRouteBrief* Arena::CreateMaybeMessage<::FNgpRouteBrief>(Arena*);
template<> ::FNgpRouteBriefList* Arena::CreateMaybeMessage<::FNgpRouteBriefList>(Arena*);
template<> ::FNgpRouteDetail* Arena::CreateMaybeMessage<::FNgpRouteDetail>(Arena*);
template<> ::FNgpRouteDetailList* Arena::CreateMaybeMessage<::FNgpRouteDetailList>(Arena*);
template<> ::FNgpRouteWayPointsSpecified* Arena::CreateMaybeMessage<::FNgpRouteWayPointsSpecified>(Arena*);
template<> ::Point* Arena::CreateMaybeMessage<::Point>(Arena*);
template<> ::SegmentInfo* Arena::CreateMaybeMessage<::SegmentInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SegmentAvailableStatus : int {
  AVAILABLE = 0,
  NOT_AVAILABLE = 1,
  WARNING = 2,
  SegmentAvailableStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SegmentAvailableStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SegmentAvailableStatus_IsValid(int value);
constexpr SegmentAvailableStatus SegmentAvailableStatus_MIN = AVAILABLE;
constexpr SegmentAvailableStatus SegmentAvailableStatus_MAX = WARNING;
constexpr int SegmentAvailableStatus_ARRAYSIZE = SegmentAvailableStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SegmentAvailableStatus_descriptor();
template<typename T>
inline const std::string& SegmentAvailableStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SegmentAvailableStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SegmentAvailableStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SegmentAvailableStatus_descriptor(), enum_t_value);
}
inline bool SegmentAvailableStatus_Parse(
    const std::string& name, SegmentAvailableStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SegmentAvailableStatus>(
    SegmentAvailableStatus_descriptor(), name, value);
}
enum PathLearnStatus : int {
  kPathLearnDefault = 0,
  kPathLearning = 1,
  kPathLearnFailed = 2,
  kPathLearnSuccess = 3,
  kPathUsing = 4,
  kPathLearnWaiting = 5,
  kPathNeedRelearn = 6,
  PathLearnStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PathLearnStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PathLearnStatus_IsValid(int value);
constexpr PathLearnStatus PathLearnStatus_MIN = kPathLearnDefault;
constexpr PathLearnStatus PathLearnStatus_MAX = kPathNeedRelearn;
constexpr int PathLearnStatus_ARRAYSIZE = PathLearnStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathLearnStatus_descriptor();
template<typename T>
inline const std::string& PathLearnStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PathLearnStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PathLearnStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PathLearnStatus_descriptor(), enum_t_value);
}
inline bool PathLearnStatus_Parse(
    const std::string& name, PathLearnStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PathLearnStatus>(
    PathLearnStatus_descriptor(), name, value);
}
enum UsingRawRouteType : int {
  kRouteRaw = 0,
  kRouteUsing = 1,
  UsingRawRouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UsingRawRouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UsingRawRouteType_IsValid(int value);
constexpr UsingRawRouteType UsingRawRouteType_MIN = kRouteRaw;
constexpr UsingRawRouteType UsingRawRouteType_MAX = kRouteUsing;
constexpr int UsingRawRouteType_ARRAYSIZE = UsingRawRouteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsingRawRouteType_descriptor();
template<typename T>
inline const std::string& UsingRawRouteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsingRawRouteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsingRawRouteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsingRawRouteType_descriptor(), enum_t_value);
}
inline bool UsingRawRouteType_Parse(
    const std::string& name, UsingRawRouteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsingRawRouteType>(
    UsingRawRouteType_descriptor(), name, value);
}
enum PathType : int {
  RESERVED = 0,
  WORKING_DAY_PATH = 1,
  WEEKEND_DAY_PATH = 2,
  CUSTOMIZE = 3,
  PathType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PathType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PathType_IsValid(int value);
constexpr PathType PathType_MIN = RESERVED;
constexpr PathType PathType_MAX = CUSTOMIZE;
constexpr int PathType_ARRAYSIZE = PathType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathType_descriptor();
template<typename T>
inline const std::string& PathType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PathType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PathType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PathType_descriptor(), enum_t_value);
}
inline bool PathType_Parse(
    const std::string& name, PathType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PathType>(
    PathType_descriptor(), name, value);
}
enum ManeuverType : int {
  TURN_DEFAULT = 0,
  TURN_LEFT_2km = 1,
  TURN_LEFT_1km = 2,
  TURN_LEFT_500m = 3,
  TURN_LEFT_200m = 4,
  TURN_LEFT_NOW = 5,
  TURN_RIGHT_2km = 6,
  TURN_RIGHT_1km = 7,
  TURN_RIGHT_500m = 8,
  TURN_RIGHT_200m = 9,
  TURN_RIGHT_NOW = 10,
  TURN_BACK_2km = 11,
  TURN_BACK_1km = 12,
  TURN_BACK_500m = 13,
  TURN_BACK_200m = 14,
  TURN_BACK_NOW = 15,
  STRAIGHT_2km = 16,
  STRAIGHT_1km = 17,
  STRAIGHT_500m = 18,
  STRAIGHT_200m = 19,
  STRAIGHT_NOW = 20,
  PASS_ROUNDABOUT_2km = 21,
  PASS_ROUNDABOUT_1km = 22,
  PASS_ROUNDABOUT_500m = 23,
  PASS_ROUNDABOUT_200m = 24,
  PASS_ROUNDABOUT_NOW = 25,
  ManeuverType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ManeuverType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ManeuverType_IsValid(int value);
constexpr ManeuverType ManeuverType_MIN = TURN_DEFAULT;
constexpr ManeuverType ManeuverType_MAX = PASS_ROUNDABOUT_NOW;
constexpr int ManeuverType_ARRAYSIZE = ManeuverType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManeuverType_descriptor();
template<typename T>
inline const std::string& ManeuverType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ManeuverType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ManeuverType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ManeuverType_descriptor(), enum_t_value);
}
inline bool ManeuverType_Parse(
    const std::string& name, ManeuverType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ManeuverType>(
    ManeuverType_descriptor(), name, value);
}
enum ManeuverDirection : int {
  DEFAULT = 0,
  TURN_LEFT = 1,
  TURN_RIGHT = 2,
  TURN_BACK = 3,
  STRAIGHT = 4,
  PASS_ROUNDABOUT = 5,
  ManeuverDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ManeuverDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ManeuverDirection_IsValid(int value);
constexpr ManeuverDirection ManeuverDirection_MIN = DEFAULT;
constexpr ManeuverDirection ManeuverDirection_MAX = PASS_ROUNDABOUT;
constexpr int ManeuverDirection_ARRAYSIZE = ManeuverDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ManeuverDirection_descriptor();
template<typename T>
inline const std::string& ManeuverDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ManeuverDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ManeuverDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ManeuverDirection_descriptor(), enum_t_value);
}
inline bool ManeuverDirection_Parse(
    const std::string& name, ManeuverDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ManeuverDirection>(
    ManeuverDirection_descriptor(), name, value);
}
enum FNgpStatus : int {
  FNGP_STATUS_NOT_AVAILABLE = 0,
  FNGP_STATUS_OUT_OF_RANGE = 1,
  FNGP_STATUS_IN_RANGE = 2,
  FNGP_STATUS_DRIVING = 3,
  FNGP_STATUS_GRAY_WAY = 4,
  FNGP_STATUS_DRIVING_END = 5,
  FNgpStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FNgpStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FNgpStatus_IsValid(int value);
constexpr FNgpStatus FNgpStatus_MIN = FNGP_STATUS_NOT_AVAILABLE;
constexpr FNgpStatus FNgpStatus_MAX = FNGP_STATUS_DRIVING_END;
constexpr int FNgpStatus_ARRAYSIZE = FNgpStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FNgpStatus_descriptor();
template<typename T>
inline const std::string& FNgpStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FNgpStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FNgpStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FNgpStatus_descriptor(), enum_t_value);
}
inline bool FNgpStatus_Parse(
    const std::string& name, FNgpStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FNgpStatus>(
    FNgpStatus_descriptor(), name, value);
}
enum StateRemindType : int {
  kDisplayNone = 0,
  kDisplayBriefList = 1,
  kDisplayEmulatorNavigation = 2,
  StateRemindType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateRemindType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateRemindType_IsValid(int value);
constexpr StateRemindType StateRemindType_MIN = kDisplayNone;
constexpr StateRemindType StateRemindType_MAX = kDisplayEmulatorNavigation;
constexpr int StateRemindType_ARRAYSIZE = StateRemindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateRemindType_descriptor();
template<typename T>
inline const std::string& StateRemindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateRemindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateRemindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateRemindType_descriptor(), enum_t_value);
}
inline bool StateRemindType_Parse(
    const std::string& name, StateRemindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateRemindType>(
    StateRemindType_descriptor(), name, value);
}
enum PriorityInfo : int {
  FNGP_NO_LABEL = 0,
  FNGP_HIGH_FREQUENCY = 1,
  FNGP_HIGH_EFFICIENCY = 2,
  FNGP_LATEST_USED = 3,
  PriorityInfo_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PriorityInfo_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PriorityInfo_IsValid(int value);
constexpr PriorityInfo PriorityInfo_MIN = FNGP_NO_LABEL;
constexpr PriorityInfo PriorityInfo_MAX = FNGP_LATEST_USED;
constexpr int PriorityInfo_ARRAYSIZE = PriorityInfo_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PriorityInfo_descriptor();
template<typename T>
inline const std::string& PriorityInfo_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PriorityInfo>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PriorityInfo_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PriorityInfo_descriptor(), enum_t_value);
}
inline bool PriorityInfo_Parse(
    const std::string& name, PriorityInfo* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PriorityInfo>(
    PriorityInfo_descriptor(), name, value);
}
// ===================================================================

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class SegmentInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SegmentInfo) */ {
 public:
  inline SegmentInfo() : SegmentInfo(nullptr) {};
  virtual ~SegmentInfo();

  SegmentInfo(const SegmentInfo& from);
  SegmentInfo(SegmentInfo&& from) noexcept
    : SegmentInfo() {
    *this = ::std::move(from);
  }

  inline SegmentInfo& operator=(const SegmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentInfo& operator=(SegmentInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentInfo* internal_default_instance() {
    return reinterpret_cast<const SegmentInfo*>(
               &_SegmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SegmentInfo& a, SegmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentInfo* New() const final {
    return CreateMaybeMessage<SegmentInfo>(nullptr);
  }

  SegmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentInfo& from);
  void MergeFrom(const SegmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SegmentInfo";
  }
  protected:
  explicit SegmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMileageFieldNumber = 1,
    kStatusFieldNumber = 2,
    kBeginIndexFieldNumber = 3,
    kEndIndexFieldNumber = 4,
    kDescFieldNumber = 5,
    kBeginOffsetFieldNumber = 6,
    kEndOffsetFieldNumber = 7,
  };
  // int32 mileage = 1;
  void clear_mileage();
  ::PROTOBUF_NAMESPACE_ID::int32 mileage() const;
  void set_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mileage() const;
  void _internal_set_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .SegmentAvailableStatus status = 2;
  void clear_status();
  ::SegmentAvailableStatus status() const;
  void set_status(::SegmentAvailableStatus value);
  private:
  ::SegmentAvailableStatus _internal_status() const;
  void _internal_set_status(::SegmentAvailableStatus value);
  public:

  // int32 begin_index = 3;
  void clear_begin_index();
  ::PROTOBUF_NAMESPACE_ID::int32 begin_index() const;
  void set_begin_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_begin_index() const;
  void _internal_set_begin_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_index = 4;
  void clear_end_index();
  ::PROTOBUF_NAMESPACE_ID::int32 end_index() const;
  void set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_index() const;
  void _internal_set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 desc = 5;
  void clear_desc();
  ::PROTOBUF_NAMESPACE_ID::int32 desc() const;
  void set_desc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_desc() const;
  void _internal_set_desc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 begin_offset = 6;
  void clear_begin_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 begin_offset() const;
  void set_begin_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_begin_offset() const;
  void _internal_set_begin_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_offset = 7;
  void clear_end_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 end_offset() const;
  void set_end_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_offset() const;
  void _internal_set_end_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SegmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mileage_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 begin_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 desc_;
  ::PROTOBUF_NAMESPACE_ID::int32 begin_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpRouteBrief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpRouteBrief) */ {
 public:
  inline FNgpRouteBrief() : FNgpRouteBrief(nullptr) {};
  virtual ~FNgpRouteBrief();

  FNgpRouteBrief(const FNgpRouteBrief& from);
  FNgpRouteBrief(FNgpRouteBrief&& from) noexcept
    : FNgpRouteBrief() {
    *this = ::std::move(from);
  }

  inline FNgpRouteBrief& operator=(const FNgpRouteBrief& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpRouteBrief& operator=(FNgpRouteBrief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpRouteBrief& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpRouteBrief* internal_default_instance() {
    return reinterpret_cast<const FNgpRouteBrief*>(
               &_FNgpRouteBrief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FNgpRouteBrief& a, FNgpRouteBrief& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpRouteBrief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpRouteBrief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpRouteBrief* New() const final {
    return CreateMaybeMessage<FNgpRouteBrief>(nullptr);
  }

  FNgpRouteBrief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpRouteBrief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpRouteBrief& from);
  void MergeFrom(const FNgpRouteBrief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpRouteBrief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpRouteBrief";
  }
  protected:
  explicit FNgpRouteBrief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginPointNameFieldNumber = 4,
    kEndPointNameFieldNumber = 6,
    kNameFieldNumber = 15,
    kBeginLonlatPointFieldNumber = 3,
    kEndLonlatPointFieldNumber = 5,
    kCustomStatusMsgFieldNumber = 27,
    kRouteIdFieldNumber = 1,
    kPredictTimeDurationFieldNumber = 7,
    kTotalMileageFieldNumber = 2,
    kIsSelectedFieldNumber = 9,
    kIsLockFieldNumber = 11,
    kCreateTimeFieldNumber = 8,
    kLastUseTimeFieldNumber = 10,
    kFngpStatusFieldNumber = 12,
    kPathTypeFieldNumber = 13,
    kPriorityFieldNumber = 14,
    kTotalOddMilageFieldNumber = 16,
    kRouteShowStatusFieldNumber = 17,
    kPriorityInfoFieldNumber = 18,
    kIsRenamedRouteFieldNumber = 19,
    kIsNaviEndMatchFieldNumber = 20,
    kClusterNumberFieldNumber = 21,
    kLearnStatusFieldNumber = 22,
    kRouteScoreFieldNumber = 23,
    kUsingRawRouteTypeFieldNumber = 24,
    kStartEndClusterNumberFieldNumber = 25,
    kIsCustomFieldNumber = 26,
  };
  // string begin_point_name = 4;
  void clear_begin_point_name();
  const std::string& begin_point_name() const;
  void set_begin_point_name(const std::string& value);
  void set_begin_point_name(std::string&& value);
  void set_begin_point_name(const char* value);
  void set_begin_point_name(const char* value, size_t size);
  std::string* mutable_begin_point_name();
  std::string* release_begin_point_name();
  void set_allocated_begin_point_name(std::string* begin_point_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_begin_point_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_begin_point_name(
      std::string* begin_point_name);
  private:
  const std::string& _internal_begin_point_name() const;
  void _internal_set_begin_point_name(const std::string& value);
  std::string* _internal_mutable_begin_point_name();
  public:

  // string end_point_name = 6;
  void clear_end_point_name();
  const std::string& end_point_name() const;
  void set_end_point_name(const std::string& value);
  void set_end_point_name(std::string&& value);
  void set_end_point_name(const char* value);
  void set_end_point_name(const char* value, size_t size);
  std::string* mutable_end_point_name();
  std::string* release_end_point_name();
  void set_allocated_end_point_name(std::string* end_point_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_point_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_point_name(
      std::string* end_point_name);
  private:
  const std::string& _internal_end_point_name() const;
  void _internal_set_end_point_name(const std::string& value);
  std::string* _internal_mutable_end_point_name();
  public:

  // string name = 15;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Point begin_lonlat_point = 3;
  bool has_begin_lonlat_point() const;
  private:
  bool _internal_has_begin_lonlat_point() const;
  public:
  void clear_begin_lonlat_point();
  const ::Point& begin_lonlat_point() const;
  ::Point* release_begin_lonlat_point();
  ::Point* mutable_begin_lonlat_point();
  void set_allocated_begin_lonlat_point(::Point* begin_lonlat_point);
  private:
  const ::Point& _internal_begin_lonlat_point() const;
  ::Point* _internal_mutable_begin_lonlat_point();
  public:
  void unsafe_arena_set_allocated_begin_lonlat_point(
      ::Point* begin_lonlat_point);
  ::Point* unsafe_arena_release_begin_lonlat_point();

  // .Point end_lonlat_point = 5;
  bool has_end_lonlat_point() const;
  private:
  bool _internal_has_end_lonlat_point() const;
  public:
  void clear_end_lonlat_point();
  const ::Point& end_lonlat_point() const;
  ::Point* release_end_lonlat_point();
  ::Point* mutable_end_lonlat_point();
  void set_allocated_end_lonlat_point(::Point* end_lonlat_point);
  private:
  const ::Point& _internal_end_lonlat_point() const;
  ::Point* _internal_mutable_end_lonlat_point();
  public:
  void unsafe_arena_set_allocated_end_lonlat_point(
      ::Point* end_lonlat_point);
  ::Point* unsafe_arena_release_end_lonlat_point();

  // .CustomStatusMsg custom_status_msg = 27;
  bool has_custom_status_msg() const;
  private:
  bool _internal_has_custom_status_msg() const;
  public:
  void clear_custom_status_msg();
  const ::CustomStatusMsg& custom_status_msg() const;
  ::CustomStatusMsg* release_custom_status_msg();
  ::CustomStatusMsg* mutable_custom_status_msg();
  void set_allocated_custom_status_msg(::CustomStatusMsg* custom_status_msg);
  private:
  const ::CustomStatusMsg& _internal_custom_status_msg() const;
  ::CustomStatusMsg* _internal_mutable_custom_status_msg();
  public:
  void unsafe_arena_set_allocated_custom_status_msg(
      ::CustomStatusMsg* custom_status_msg);
  ::CustomStatusMsg* unsafe_arena_release_custom_status_msg();

  // int64 route_id = 1;
  void clear_route_id();
  ::PROTOBUF_NAMESPACE_ID::int64 route_id() const;
  void set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_route_id() const;
  void _internal_set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 predict_time_duration = 7;
  void clear_predict_time_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 predict_time_duration() const;
  void set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_predict_time_duration() const;
  void _internal_set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 total_mileage = 2;
  void clear_total_mileage();
  ::PROTOBUF_NAMESPACE_ID::int32 total_mileage() const;
  void set_total_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_mileage() const;
  void _internal_set_total_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_selected = 9;
  void clear_is_selected();
  bool is_selected() const;
  void set_is_selected(bool value);
  private:
  bool _internal_is_selected() const;
  void _internal_set_is_selected(bool value);
  public:

  // bool is_lock = 11;
  void clear_is_lock();
  bool is_lock() const;
  void set_is_lock(bool value);
  private:
  bool _internal_is_lock() const;
  void _internal_set_is_lock(bool value);
  public:

  // int64 create_time = 8;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_use_time = 10;
  void clear_last_use_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_use_time() const;
  void set_last_use_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_use_time() const;
  void _internal_set_last_use_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .FNgpStatus fngp_status = 12;
  void clear_fngp_status();
  ::FNgpStatus fngp_status() const;
  void set_fngp_status(::FNgpStatus value);
  private:
  ::FNgpStatus _internal_fngp_status() const;
  void _internal_set_fngp_status(::FNgpStatus value);
  public:

  // .PathType path_type = 13;
  void clear_path_type();
  ::PathType path_type() const;
  void set_path_type(::PathType value);
  private:
  ::PathType _internal_path_type() const;
  void _internal_set_path_type(::PathType value);
  public:

  // int32 priority = 14;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_odd_milage = 16;
  void clear_total_odd_milage();
  ::PROTOBUF_NAMESPACE_ID::int32 total_odd_milage() const;
  void set_total_odd_milage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_odd_milage() const;
  void _internal_set_total_odd_milage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 route_show_status = 17;
  void clear_route_show_status();
  ::PROTOBUF_NAMESPACE_ID::int32 route_show_status() const;
  void set_route_show_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route_show_status() const;
  void _internal_set_route_show_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PriorityInfo priority_info = 18;
  void clear_priority_info();
  ::PriorityInfo priority_info() const;
  void set_priority_info(::PriorityInfo value);
  private:
  ::PriorityInfo _internal_priority_info() const;
  void _internal_set_priority_info(::PriorityInfo value);
  public:

  // int32 is_renamed_route = 19;
  void clear_is_renamed_route();
  ::PROTOBUF_NAMESPACE_ID::int32 is_renamed_route() const;
  void set_is_renamed_route(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_renamed_route() const;
  void _internal_set_is_renamed_route(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_navi_end_match = 20;
  void clear_is_navi_end_match();
  ::PROTOBUF_NAMESPACE_ID::int32 is_navi_end_match() const;
  void set_is_navi_end_match(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_navi_end_match() const;
  void _internal_set_is_navi_end_match(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cluster_number = 21;
  void clear_cluster_number();
  ::PROTOBUF_NAMESPACE_ID::int32 cluster_number() const;
  void set_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cluster_number() const;
  void _internal_set_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PathLearnStatus learn_status = 22;
  void clear_learn_status();
  ::PathLearnStatus learn_status() const;
  void set_learn_status(::PathLearnStatus value);
  private:
  ::PathLearnStatus _internal_learn_status() const;
  void _internal_set_learn_status(::PathLearnStatus value);
  public:

  // double route_score = 23;
  void clear_route_score();
  double route_score() const;
  void set_route_score(double value);
  private:
  double _internal_route_score() const;
  void _internal_set_route_score(double value);
  public:

  // .UsingRawRouteType using_raw_route_type = 24;
  void clear_using_raw_route_type();
  ::UsingRawRouteType using_raw_route_type() const;
  void set_using_raw_route_type(::UsingRawRouteType value);
  private:
  ::UsingRawRouteType _internal_using_raw_route_type() const;
  void _internal_set_using_raw_route_type(::UsingRawRouteType value);
  public:

  // int32 start_end_cluster_number = 25;
  void clear_start_end_cluster_number();
  ::PROTOBUF_NAMESPACE_ID::int32 start_end_cluster_number() const;
  void set_start_end_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_end_cluster_number() const;
  void _internal_set_start_end_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_custom = 26;
  void clear_is_custom();
  ::PROTOBUF_NAMESPACE_ID::int32 is_custom() const;
  void set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_custom() const;
  void _internal_set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FNgpRouteBrief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begin_point_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_point_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Point* begin_lonlat_point_;
  ::Point* end_lonlat_point_;
  ::CustomStatusMsg* custom_status_msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 route_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 predict_time_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_mileage_;
  bool is_selected_;
  bool is_lock_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_use_time_;
  int fngp_status_;
  int path_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_odd_milage_;
  ::PROTOBUF_NAMESPACE_ID::int32 route_show_status_;
  int priority_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_renamed_route_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_navi_end_match_;
  ::PROTOBUF_NAMESPACE_ID::int32 cluster_number_;
  int learn_status_;
  double route_score_;
  int using_raw_route_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_end_cluster_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_custom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpRouteBriefList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpRouteBriefList) */ {
 public:
  inline FNgpRouteBriefList() : FNgpRouteBriefList(nullptr) {};
  virtual ~FNgpRouteBriefList();

  FNgpRouteBriefList(const FNgpRouteBriefList& from);
  FNgpRouteBriefList(FNgpRouteBriefList&& from) noexcept
    : FNgpRouteBriefList() {
    *this = ::std::move(from);
  }

  inline FNgpRouteBriefList& operator=(const FNgpRouteBriefList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpRouteBriefList& operator=(FNgpRouteBriefList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpRouteBriefList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpRouteBriefList* internal_default_instance() {
    return reinterpret_cast<const FNgpRouteBriefList*>(
               &_FNgpRouteBriefList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FNgpRouteBriefList& a, FNgpRouteBriefList& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpRouteBriefList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpRouteBriefList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpRouteBriefList* New() const final {
    return CreateMaybeMessage<FNgpRouteBriefList>(nullptr);
  }

  FNgpRouteBriefList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpRouteBriefList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpRouteBriefList& from);
  void MergeFrom(const FNgpRouteBriefList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpRouteBriefList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpRouteBriefList";
  }
  protected:
  explicit FNgpRouteBriefList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFngpRouteBriefListFieldNumber = 1,
    kFngpEmulatorNavigationFieldNumber = 2,
    kSequenceIdFieldNumber = 4,
    kStateRemindFieldNumber = 3,
  };
  // repeated .FNgpRouteBrief fngp_route_brief_list = 1;
  int fngp_route_brief_list_size() const;
  private:
  int _internal_fngp_route_brief_list_size() const;
  public:
  void clear_fngp_route_brief_list();
  ::FNgpRouteBrief* mutable_fngp_route_brief_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteBrief >*
      mutable_fngp_route_brief_list();
  private:
  const ::FNgpRouteBrief& _internal_fngp_route_brief_list(int index) const;
  ::FNgpRouteBrief* _internal_add_fngp_route_brief_list();
  public:
  const ::FNgpRouteBrief& fngp_route_brief_list(int index) const;
  ::FNgpRouteBrief* add_fngp_route_brief_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteBrief >&
      fngp_route_brief_list() const;

  // .FNgpEmulatorNavigation fngp_emulator_navigation = 2;
  bool has_fngp_emulator_navigation() const;
  private:
  bool _internal_has_fngp_emulator_navigation() const;
  public:
  void clear_fngp_emulator_navigation();
  const ::FNgpEmulatorNavigation& fngp_emulator_navigation() const;
  ::FNgpEmulatorNavigation* release_fngp_emulator_navigation();
  ::FNgpEmulatorNavigation* mutable_fngp_emulator_navigation();
  void set_allocated_fngp_emulator_navigation(::FNgpEmulatorNavigation* fngp_emulator_navigation);
  private:
  const ::FNgpEmulatorNavigation& _internal_fngp_emulator_navigation() const;
  ::FNgpEmulatorNavigation* _internal_mutable_fngp_emulator_navigation();
  public:
  void unsafe_arena_set_allocated_fngp_emulator_navigation(
      ::FNgpEmulatorNavigation* fngp_emulator_navigation);
  ::FNgpEmulatorNavigation* unsafe_arena_release_fngp_emulator_navigation();

  // int64 sequence_id = 4;
  void clear_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_id() const;
  void set_sequence_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence_id() const;
  void _internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .StateRemindType state_remind = 3;
  void clear_state_remind();
  ::StateRemindType state_remind() const;
  void set_state_remind(::StateRemindType value);
  private:
  ::StateRemindType _internal_state_remind() const;
  void _internal_set_state_remind(::StateRemindType value);
  public:

  // @@protoc_insertion_point(class_scope:FNgpRouteBriefList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteBrief > fngp_route_brief_list_;
  ::FNgpEmulatorNavigation* fngp_emulator_navigation_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_id_;
  int state_remind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpRouteDetailList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpRouteDetailList) */ {
 public:
  inline FNgpRouteDetailList() : FNgpRouteDetailList(nullptr) {};
  virtual ~FNgpRouteDetailList();

  FNgpRouteDetailList(const FNgpRouteDetailList& from);
  FNgpRouteDetailList(FNgpRouteDetailList&& from) noexcept
    : FNgpRouteDetailList() {
    *this = ::std::move(from);
  }

  inline FNgpRouteDetailList& operator=(const FNgpRouteDetailList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpRouteDetailList& operator=(FNgpRouteDetailList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpRouteDetailList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpRouteDetailList* internal_default_instance() {
    return reinterpret_cast<const FNgpRouteDetailList*>(
               &_FNgpRouteDetailList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FNgpRouteDetailList& a, FNgpRouteDetailList& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpRouteDetailList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpRouteDetailList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpRouteDetailList* New() const final {
    return CreateMaybeMessage<FNgpRouteDetailList>(nullptr);
  }

  FNgpRouteDetailList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpRouteDetailList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpRouteDetailList& from);
  void MergeFrom(const FNgpRouteDetailList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpRouteDetailList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpRouteDetailList";
  }
  protected:
  explicit FNgpRouteDetailList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFngpRouteDefailListFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // repeated .FNgpRouteDetail fngp_route_defail_list = 2;
  int fngp_route_defail_list_size() const;
  private:
  int _internal_fngp_route_defail_list_size() const;
  public:
  void clear_fngp_route_defail_list();
  ::FNgpRouteDetail* mutable_fngp_route_defail_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteDetail >*
      mutable_fngp_route_defail_list();
  private:
  const ::FNgpRouteDetail& _internal_fngp_route_defail_list(int index) const;
  ::FNgpRouteDetail* _internal_add_fngp_route_defail_list();
  public:
  const ::FNgpRouteDetail& fngp_route_defail_list(int index) const;
  ::FNgpRouteDetail* add_fngp_route_defail_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteDetail >&
      fngp_route_defail_list() const;

  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FNgpRouteDetailList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteDetail > fngp_route_defail_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpRouteDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpRouteDetail) */ {
 public:
  inline FNgpRouteDetail() : FNgpRouteDetail(nullptr) {};
  virtual ~FNgpRouteDetail();

  FNgpRouteDetail(const FNgpRouteDetail& from);
  FNgpRouteDetail(FNgpRouteDetail&& from) noexcept
    : FNgpRouteDetail() {
    *this = ::std::move(from);
  }

  inline FNgpRouteDetail& operator=(const FNgpRouteDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpRouteDetail& operator=(FNgpRouteDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpRouteDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpRouteDetail* internal_default_instance() {
    return reinterpret_cast<const FNgpRouteDetail*>(
               &_FNgpRouteDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FNgpRouteDetail& a, FNgpRouteDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpRouteDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpRouteDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpRouteDetail* New() const final {
    return CreateMaybeMessage<FNgpRouteDetail>(nullptr);
  }

  FNgpRouteDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpRouteDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpRouteDetail& from);
  void MergeFrom(const FNgpRouteDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpRouteDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpRouteDetail";
  }
  protected:
  explicit FNgpRouteDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV2PointListFieldNumber = 2,
    kSegmentListFieldNumber = 3,
    kFngpRouteBriefFieldNumber = 1,
  };
  // repeated .Point v2_point_list = 2;
  int v2_point_list_size() const;
  private:
  int _internal_v2_point_list_size() const;
  public:
  void clear_v2_point_list();
  ::Point* mutable_v2_point_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
      mutable_v2_point_list();
  private:
  const ::Point& _internal_v2_point_list(int index) const;
  ::Point* _internal_add_v2_point_list();
  public:
  const ::Point& v2_point_list(int index) const;
  ::Point* add_v2_point_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
      v2_point_list() const;

  // repeated .SegmentInfo segment_list = 3;
  int segment_list_size() const;
  private:
  int _internal_segment_list_size() const;
  public:
  void clear_segment_list();
  ::SegmentInfo* mutable_segment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >*
      mutable_segment_list();
  private:
  const ::SegmentInfo& _internal_segment_list(int index) const;
  ::SegmentInfo* _internal_add_segment_list();
  public:
  const ::SegmentInfo& segment_list(int index) const;
  ::SegmentInfo* add_segment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >&
      segment_list() const;

  // .FNgpRouteBrief fngp_route_brief = 1;
  bool has_fngp_route_brief() const;
  private:
  bool _internal_has_fngp_route_brief() const;
  public:
  void clear_fngp_route_brief();
  const ::FNgpRouteBrief& fngp_route_brief() const;
  ::FNgpRouteBrief* release_fngp_route_brief();
  ::FNgpRouteBrief* mutable_fngp_route_brief();
  void set_allocated_fngp_route_brief(::FNgpRouteBrief* fngp_route_brief);
  private:
  const ::FNgpRouteBrief& _internal_fngp_route_brief() const;
  ::FNgpRouteBrief* _internal_mutable_fngp_route_brief();
  public:
  void unsafe_arena_set_allocated_fngp_route_brief(
      ::FNgpRouteBrief* fngp_route_brief);
  ::FNgpRouteBrief* unsafe_arena_release_fngp_route_brief();

  // @@protoc_insertion_point(class_scope:FNgpRouteDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point > v2_point_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo > segment_list_;
  ::FNgpRouteBrief* fngp_route_brief_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpRouteWayPointsSpecified PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpRouteWayPointsSpecified) */ {
 public:
  inline FNgpRouteWayPointsSpecified() : FNgpRouteWayPointsSpecified(nullptr) {};
  virtual ~FNgpRouteWayPointsSpecified();

  FNgpRouteWayPointsSpecified(const FNgpRouteWayPointsSpecified& from);
  FNgpRouteWayPointsSpecified(FNgpRouteWayPointsSpecified&& from) noexcept
    : FNgpRouteWayPointsSpecified() {
    *this = ::std::move(from);
  }

  inline FNgpRouteWayPointsSpecified& operator=(const FNgpRouteWayPointsSpecified& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpRouteWayPointsSpecified& operator=(FNgpRouteWayPointsSpecified&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpRouteWayPointsSpecified& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpRouteWayPointsSpecified* internal_default_instance() {
    return reinterpret_cast<const FNgpRouteWayPointsSpecified*>(
               &_FNgpRouteWayPointsSpecified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FNgpRouteWayPointsSpecified& a, FNgpRouteWayPointsSpecified& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpRouteWayPointsSpecified* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpRouteWayPointsSpecified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpRouteWayPointsSpecified* New() const final {
    return CreateMaybeMessage<FNgpRouteWayPointsSpecified>(nullptr);
  }

  FNgpRouteWayPointsSpecified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpRouteWayPointsSpecified>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpRouteWayPointsSpecified& from);
  void MergeFrom(const FNgpRouteWayPointsSpecified& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpRouteWayPointsSpecified* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpRouteWayPointsSpecified";
  }
  protected:
  explicit FNgpRouteWayPointsSpecified(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV2PointListSpecifiedFieldNumber = 1,
  };
  // repeated .Point v2_point_list_Specified = 1;
  int v2_point_list_specified_size() const;
  private:
  int _internal_v2_point_list_specified_size() const;
  public:
  void clear_v2_point_list_specified();
  ::Point* mutable_v2_point_list_specified(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
      mutable_v2_point_list_specified();
  private:
  const ::Point& _internal_v2_point_list_specified(int index) const;
  ::Point* _internal_add_v2_point_list_specified();
  public:
  const ::Point& v2_point_list_specified(int index) const;
  ::Point* add_v2_point_list_specified();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
      v2_point_list_specified() const;

  // @@protoc_insertion_point(class_scope:FNgpRouteWayPointsSpecified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point > v2_point_list_specified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpEmulatorNavigation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpEmulatorNavigation) */ {
 public:
  inline FNgpEmulatorNavigation() : FNgpEmulatorNavigation(nullptr) {};
  virtual ~FNgpEmulatorNavigation();

  FNgpEmulatorNavigation(const FNgpEmulatorNavigation& from);
  FNgpEmulatorNavigation(FNgpEmulatorNavigation&& from) noexcept
    : FNgpEmulatorNavigation() {
    *this = ::std::move(from);
  }

  inline FNgpEmulatorNavigation& operator=(const FNgpEmulatorNavigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpEmulatorNavigation& operator=(FNgpEmulatorNavigation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpEmulatorNavigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpEmulatorNavigation* internal_default_instance() {
    return reinterpret_cast<const FNgpEmulatorNavigation*>(
               &_FNgpEmulatorNavigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FNgpEmulatorNavigation& a, FNgpEmulatorNavigation& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpEmulatorNavigation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpEmulatorNavigation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpEmulatorNavigation* New() const final {
    return CreateMaybeMessage<FNgpEmulatorNavigation>(nullptr);
  }

  FNgpEmulatorNavigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpEmulatorNavigation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpEmulatorNavigation& from);
  void MergeFrom(const FNgpEmulatorNavigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpEmulatorNavigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpEmulatorNavigation";
  }
  protected:
  explicit FNgpEmulatorNavigation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetSegmentListFieldNumber = 12,
    kEndPointNameFieldNumber = 13,
    kCurrentLonlatPointFieldNumber = 3,
    kRouteIdFieldNumber = 1,
    kCurrentPointIndexInV2ListFieldNumber = 2,
    kRemainMileageFieldNumber = 4,
    kPredictTimeDurationFieldNumber = 6,
    kPassedMileageFieldNumber = 5,
    kManeuverTypeFieldNumber = 8,
    kArriveTimeFieldNumber = 7,
    kManeuverDirectionFieldNumber = 9,
    kManeuverDistanceFieldNumber = 10,
    kCurrentOffsetFieldNumber = 11,
  };
  // repeated .SegmentInfo offset_segment_list = 12;
  int offset_segment_list_size() const;
  private:
  int _internal_offset_segment_list_size() const;
  public:
  void clear_offset_segment_list();
  ::SegmentInfo* mutable_offset_segment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >*
      mutable_offset_segment_list();
  private:
  const ::SegmentInfo& _internal_offset_segment_list(int index) const;
  ::SegmentInfo* _internal_add_offset_segment_list();
  public:
  const ::SegmentInfo& offset_segment_list(int index) const;
  ::SegmentInfo* add_offset_segment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >&
      offset_segment_list() const;

  // string end_point_name = 13;
  void clear_end_point_name();
  const std::string& end_point_name() const;
  void set_end_point_name(const std::string& value);
  void set_end_point_name(std::string&& value);
  void set_end_point_name(const char* value);
  void set_end_point_name(const char* value, size_t size);
  std::string* mutable_end_point_name();
  std::string* release_end_point_name();
  void set_allocated_end_point_name(std::string* end_point_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_point_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_point_name(
      std::string* end_point_name);
  private:
  const std::string& _internal_end_point_name() const;
  void _internal_set_end_point_name(const std::string& value);
  std::string* _internal_mutable_end_point_name();
  public:

  // .Point current_lonlat_point = 3;
  bool has_current_lonlat_point() const;
  private:
  bool _internal_has_current_lonlat_point() const;
  public:
  void clear_current_lonlat_point();
  const ::Point& current_lonlat_point() const;
  ::Point* release_current_lonlat_point();
  ::Point* mutable_current_lonlat_point();
  void set_allocated_current_lonlat_point(::Point* current_lonlat_point);
  private:
  const ::Point& _internal_current_lonlat_point() const;
  ::Point* _internal_mutable_current_lonlat_point();
  public:
  void unsafe_arena_set_allocated_current_lonlat_point(
      ::Point* current_lonlat_point);
  ::Point* unsafe_arena_release_current_lonlat_point();

  // int64 route_id = 1;
  void clear_route_id();
  ::PROTOBUF_NAMESPACE_ID::int64 route_id() const;
  void set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_route_id() const;
  void _internal_set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 current_point_index_in_v2list = 2;
  void clear_current_point_index_in_v2list();
  ::PROTOBUF_NAMESPACE_ID::int32 current_point_index_in_v2list() const;
  void set_current_point_index_in_v2list(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_point_index_in_v2list() const;
  void _internal_set_current_point_index_in_v2list(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain_mileage = 4;
  void clear_remain_mileage();
  ::PROTOBUF_NAMESPACE_ID::int32 remain_mileage() const;
  void set_remain_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain_mileage() const;
  void _internal_set_remain_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 predict_time_duration = 6;
  void clear_predict_time_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 predict_time_duration() const;
  void set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_predict_time_duration() const;
  void _internal_set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 passed_mileage = 5;
  void clear_passed_mileage();
  ::PROTOBUF_NAMESPACE_ID::int32 passed_mileage() const;
  void set_passed_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passed_mileage() const;
  void _internal_set_passed_mileage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ManeuverType maneuver_type = 8;
  void clear_maneuver_type();
  ::ManeuverType maneuver_type() const;
  void set_maneuver_type(::ManeuverType value);
  private:
  ::ManeuverType _internal_maneuver_type() const;
  void _internal_set_maneuver_type(::ManeuverType value);
  public:

  // int64 arrive_time = 7;
  void clear_arrive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 arrive_time() const;
  void set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_arrive_time() const;
  void _internal_set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ManeuverDirection maneuver_direction = 9;
  void clear_maneuver_direction();
  ::ManeuverDirection maneuver_direction() const;
  void set_maneuver_direction(::ManeuverDirection value);
  private:
  ::ManeuverDirection _internal_maneuver_direction() const;
  void _internal_set_maneuver_direction(::ManeuverDirection value);
  public:

  // int32 maneuver_distance = 10;
  void clear_maneuver_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 maneuver_distance() const;
  void set_maneuver_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maneuver_distance() const;
  void _internal_set_maneuver_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 current_offset = 11;
  void clear_current_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 current_offset() const;
  void set_current_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_offset() const;
  void _internal_set_current_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FNgpEmulatorNavigation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo > offset_segment_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_point_name_;
  ::Point* current_lonlat_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 route_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_point_index_in_v2list_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_mileage_;
  ::PROTOBUF_NAMESPACE_ID::int64 predict_time_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 passed_mileage_;
  int maneuver_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 arrive_time_;
  int maneuver_direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 maneuver_distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class CustomStatusMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CustomStatusMsg) */ {
 public:
  inline CustomStatusMsg() : CustomStatusMsg(nullptr) {};
  virtual ~CustomStatusMsg();

  CustomStatusMsg(const CustomStatusMsg& from);
  CustomStatusMsg(CustomStatusMsg&& from) noexcept
    : CustomStatusMsg() {
    *this = ::std::move(from);
  }

  inline CustomStatusMsg& operator=(const CustomStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomStatusMsg& operator=(CustomStatusMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomStatusMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomStatusMsg* internal_default_instance() {
    return reinterpret_cast<const CustomStatusMsg*>(
               &_CustomStatusMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CustomStatusMsg& a, CustomStatusMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomStatusMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomStatusMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomStatusMsg* New() const final {
    return CreateMaybeMessage<CustomStatusMsg>(nullptr);
  }

  CustomStatusMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomStatusMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomStatusMsg& from);
  void MergeFrom(const CustomStatusMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomStatusMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CustomStatusMsg";
  }
  protected:
  explicit CustomStatusMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CustomStatusMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// -------------------------------------------------------------------

class FNgpRecordingState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FNgpRecordingState) */ {
 public:
  inline FNgpRecordingState() : FNgpRecordingState(nullptr) {};
  virtual ~FNgpRecordingState();

  FNgpRecordingState(const FNgpRecordingState& from);
  FNgpRecordingState(FNgpRecordingState&& from) noexcept
    : FNgpRecordingState() {
    *this = ::std::move(from);
  }

  inline FNgpRecordingState& operator=(const FNgpRecordingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FNgpRecordingState& operator=(FNgpRecordingState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FNgpRecordingState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FNgpRecordingState* internal_default_instance() {
    return reinterpret_cast<const FNgpRecordingState*>(
               &_FNgpRecordingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FNgpRecordingState& a, FNgpRecordingState& b) {
    a.Swap(&b);
  }
  inline void Swap(FNgpRecordingState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FNgpRecordingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FNgpRecordingState* New() const final {
    return CreateMaybeMessage<FNgpRecordingState>(nullptr);
  }

  FNgpRecordingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FNgpRecordingState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FNgpRecordingState& from);
  void MergeFrom(const FNgpRecordingState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FNgpRecordingState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FNgpRecordingState";
  }
  protected:
  explicit FNgpRecordingState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto);
    return ::descriptor_table_proto_5fap_2ffngp_5froute_5fmgr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kRouteIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kRecordingStatusFieldNumber = 2,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 route_id = 1;
  void clear_route_id();
  ::PROTOBUF_NAMESPACE_ID::int64 route_id() const;
  void set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_route_id() const;
  void _internal_set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 recording_status = 2;
  void clear_recording_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 recording_status() const;
  void set_recording_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recording_status() const;
  void _internal_set_recording_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:FNgpRecordingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 route_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recording_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2ffngp_5froute_5fmgr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Point.y)
}

// double z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline double Point::_internal_z() const {
  return z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Point.z)
}

// -------------------------------------------------------------------

// SegmentInfo

// int32 mileage = 1;
inline void SegmentInfo::clear_mileage() {
  mileage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::_internal_mileage() const {
  return mileage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::mileage() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.mileage)
  return _internal_mileage();
}
inline void SegmentInfo::_internal_set_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mileage_ = value;
}
inline void SegmentInfo::set_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mileage(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.mileage)
}

// .SegmentAvailableStatus status = 2;
inline void SegmentInfo::clear_status() {
  status_ = 0;
}
inline ::SegmentAvailableStatus SegmentInfo::_internal_status() const {
  return static_cast< ::SegmentAvailableStatus >(status_);
}
inline ::SegmentAvailableStatus SegmentInfo::status() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.status)
  return _internal_status();
}
inline void SegmentInfo::_internal_set_status(::SegmentAvailableStatus value) {
  
  status_ = value;
}
inline void SegmentInfo::set_status(::SegmentAvailableStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.status)
}

// int32 begin_index = 3;
inline void SegmentInfo::clear_begin_index() {
  begin_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::_internal_begin_index() const {
  return begin_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::begin_index() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.begin_index)
  return _internal_begin_index();
}
inline void SegmentInfo::_internal_set_begin_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  begin_index_ = value;
}
inline void SegmentInfo::set_begin_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_begin_index(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.begin_index)
}

// int32 end_index = 4;
inline void SegmentInfo::clear_end_index() {
  end_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::_internal_end_index() const {
  return end_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::end_index() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.end_index)
  return _internal_end_index();
}
inline void SegmentInfo::_internal_set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_index_ = value;
}
inline void SegmentInfo::set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_index(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.end_index)
}

// int32 desc = 5;
inline void SegmentInfo::clear_desc() {
  desc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::_internal_desc() const {
  return desc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::desc() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.desc)
  return _internal_desc();
}
inline void SegmentInfo::_internal_set_desc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  desc_ = value;
}
inline void SegmentInfo::set_desc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.desc)
}

// int32 begin_offset = 6;
inline void SegmentInfo::clear_begin_offset() {
  begin_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::_internal_begin_offset() const {
  return begin_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::begin_offset() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.begin_offset)
  return _internal_begin_offset();
}
inline void SegmentInfo::_internal_set_begin_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  begin_offset_ = value;
}
inline void SegmentInfo::set_begin_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_begin_offset(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.begin_offset)
}

// int32 end_offset = 7;
inline void SegmentInfo::clear_end_offset() {
  end_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::_internal_end_offset() const {
  return end_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SegmentInfo::end_offset() const {
  // @@protoc_insertion_point(field_get:SegmentInfo.end_offset)
  return _internal_end_offset();
}
inline void SegmentInfo::_internal_set_end_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_offset_ = value;
}
inline void SegmentInfo::set_end_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:SegmentInfo.end_offset)
}

// -------------------------------------------------------------------

// FNgpRouteBrief

// int64 route_id = 1;
inline void FNgpRouteBrief::clear_route_id() {
  route_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::_internal_route_id() const {
  return route_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::route_id() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.route_id)
  return _internal_route_id();
}
inline void FNgpRouteBrief::_internal_set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  route_id_ = value;
}
inline void FNgpRouteBrief::set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_route_id(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.route_id)
}

// int32 total_mileage = 2;
inline void FNgpRouteBrief::clear_total_mileage() {
  total_mileage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_total_mileage() const {
  return total_mileage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::total_mileage() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.total_mileage)
  return _internal_total_mileage();
}
inline void FNgpRouteBrief::_internal_set_total_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_mileage_ = value;
}
inline void FNgpRouteBrief::set_total_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_mileage(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.total_mileage)
}

// .Point begin_lonlat_point = 3;
inline bool FNgpRouteBrief::_internal_has_begin_lonlat_point() const {
  return this != internal_default_instance() && begin_lonlat_point_ != nullptr;
}
inline bool FNgpRouteBrief::has_begin_lonlat_point() const {
  return _internal_has_begin_lonlat_point();
}
inline void FNgpRouteBrief::clear_begin_lonlat_point() {
  if (GetArena() == nullptr && begin_lonlat_point_ != nullptr) {
    delete begin_lonlat_point_;
  }
  begin_lonlat_point_ = nullptr;
}
inline const ::Point& FNgpRouteBrief::_internal_begin_lonlat_point() const {
  const ::Point* p = begin_lonlat_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& FNgpRouteBrief::begin_lonlat_point() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.begin_lonlat_point)
  return _internal_begin_lonlat_point();
}
inline void FNgpRouteBrief::unsafe_arena_set_allocated_begin_lonlat_point(
    ::Point* begin_lonlat_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(begin_lonlat_point_);
  }
  begin_lonlat_point_ = begin_lonlat_point;
  if (begin_lonlat_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBrief.begin_lonlat_point)
}
inline ::Point* FNgpRouteBrief::release_begin_lonlat_point() {
  auto temp = unsafe_arena_release_begin_lonlat_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Point* FNgpRouteBrief::unsafe_arena_release_begin_lonlat_point() {
  // @@protoc_insertion_point(field_release:FNgpRouteBrief.begin_lonlat_point)
  
  ::Point* temp = begin_lonlat_point_;
  begin_lonlat_point_ = nullptr;
  return temp;
}
inline ::Point* FNgpRouteBrief::_internal_mutable_begin_lonlat_point() {
  
  if (begin_lonlat_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArena());
    begin_lonlat_point_ = p;
  }
  return begin_lonlat_point_;
}
inline ::Point* FNgpRouteBrief::mutable_begin_lonlat_point() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBrief.begin_lonlat_point)
  return _internal_mutable_begin_lonlat_point();
}
inline void FNgpRouteBrief::set_allocated_begin_lonlat_point(::Point* begin_lonlat_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete begin_lonlat_point_;
  }
  if (begin_lonlat_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(begin_lonlat_point);
    if (message_arena != submessage_arena) {
      begin_lonlat_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_lonlat_point, submessage_arena);
    }
    
  } else {
    
  }
  begin_lonlat_point_ = begin_lonlat_point;
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBrief.begin_lonlat_point)
}

// string begin_point_name = 4;
inline void FNgpRouteBrief::clear_begin_point_name() {
  begin_point_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FNgpRouteBrief::begin_point_name() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.begin_point_name)
  return _internal_begin_point_name();
}
inline void FNgpRouteBrief::set_begin_point_name(const std::string& value) {
  _internal_set_begin_point_name(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.begin_point_name)
}
inline std::string* FNgpRouteBrief::mutable_begin_point_name() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBrief.begin_point_name)
  return _internal_mutable_begin_point_name();
}
inline const std::string& FNgpRouteBrief::_internal_begin_point_name() const {
  return begin_point_name_.Get();
}
inline void FNgpRouteBrief::_internal_set_begin_point_name(const std::string& value) {
  
  begin_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FNgpRouteBrief::set_begin_point_name(std::string&& value) {
  
  begin_point_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FNgpRouteBrief.begin_point_name)
}
inline void FNgpRouteBrief::set_begin_point_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  begin_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FNgpRouteBrief.begin_point_name)
}
inline void FNgpRouteBrief::set_begin_point_name(const char* value,
    size_t size) {
  
  begin_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FNgpRouteBrief.begin_point_name)
}
inline std::string* FNgpRouteBrief::_internal_mutable_begin_point_name() {
  
  return begin_point_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FNgpRouteBrief::release_begin_point_name() {
  // @@protoc_insertion_point(field_release:FNgpRouteBrief.begin_point_name)
  return begin_point_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FNgpRouteBrief::set_allocated_begin_point_name(std::string* begin_point_name) {
  if (begin_point_name != nullptr) {
    
  } else {
    
  }
  begin_point_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), begin_point_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBrief.begin_point_name)
}
inline std::string* FNgpRouteBrief::unsafe_arena_release_begin_point_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FNgpRouteBrief.begin_point_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return begin_point_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FNgpRouteBrief::unsafe_arena_set_allocated_begin_point_name(
    std::string* begin_point_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (begin_point_name != nullptr) {
    
  } else {
    
  }
  begin_point_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      begin_point_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBrief.begin_point_name)
}

// .Point end_lonlat_point = 5;
inline bool FNgpRouteBrief::_internal_has_end_lonlat_point() const {
  return this != internal_default_instance() && end_lonlat_point_ != nullptr;
}
inline bool FNgpRouteBrief::has_end_lonlat_point() const {
  return _internal_has_end_lonlat_point();
}
inline void FNgpRouteBrief::clear_end_lonlat_point() {
  if (GetArena() == nullptr && end_lonlat_point_ != nullptr) {
    delete end_lonlat_point_;
  }
  end_lonlat_point_ = nullptr;
}
inline const ::Point& FNgpRouteBrief::_internal_end_lonlat_point() const {
  const ::Point* p = end_lonlat_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& FNgpRouteBrief::end_lonlat_point() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.end_lonlat_point)
  return _internal_end_lonlat_point();
}
inline void FNgpRouteBrief::unsafe_arena_set_allocated_end_lonlat_point(
    ::Point* end_lonlat_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_lonlat_point_);
  }
  end_lonlat_point_ = end_lonlat_point;
  if (end_lonlat_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBrief.end_lonlat_point)
}
inline ::Point* FNgpRouteBrief::release_end_lonlat_point() {
  auto temp = unsafe_arena_release_end_lonlat_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Point* FNgpRouteBrief::unsafe_arena_release_end_lonlat_point() {
  // @@protoc_insertion_point(field_release:FNgpRouteBrief.end_lonlat_point)
  
  ::Point* temp = end_lonlat_point_;
  end_lonlat_point_ = nullptr;
  return temp;
}
inline ::Point* FNgpRouteBrief::_internal_mutable_end_lonlat_point() {
  
  if (end_lonlat_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArena());
    end_lonlat_point_ = p;
  }
  return end_lonlat_point_;
}
inline ::Point* FNgpRouteBrief::mutable_end_lonlat_point() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBrief.end_lonlat_point)
  return _internal_mutable_end_lonlat_point();
}
inline void FNgpRouteBrief::set_allocated_end_lonlat_point(::Point* end_lonlat_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_lonlat_point_;
  }
  if (end_lonlat_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_lonlat_point);
    if (message_arena != submessage_arena) {
      end_lonlat_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_lonlat_point, submessage_arena);
    }
    
  } else {
    
  }
  end_lonlat_point_ = end_lonlat_point;
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBrief.end_lonlat_point)
}

// string end_point_name = 6;
inline void FNgpRouteBrief::clear_end_point_name() {
  end_point_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FNgpRouteBrief::end_point_name() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.end_point_name)
  return _internal_end_point_name();
}
inline void FNgpRouteBrief::set_end_point_name(const std::string& value) {
  _internal_set_end_point_name(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.end_point_name)
}
inline std::string* FNgpRouteBrief::mutable_end_point_name() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBrief.end_point_name)
  return _internal_mutable_end_point_name();
}
inline const std::string& FNgpRouteBrief::_internal_end_point_name() const {
  return end_point_name_.Get();
}
inline void FNgpRouteBrief::_internal_set_end_point_name(const std::string& value) {
  
  end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FNgpRouteBrief::set_end_point_name(std::string&& value) {
  
  end_point_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FNgpRouteBrief.end_point_name)
}
inline void FNgpRouteBrief::set_end_point_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FNgpRouteBrief.end_point_name)
}
inline void FNgpRouteBrief::set_end_point_name(const char* value,
    size_t size) {
  
  end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FNgpRouteBrief.end_point_name)
}
inline std::string* FNgpRouteBrief::_internal_mutable_end_point_name() {
  
  return end_point_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FNgpRouteBrief::release_end_point_name() {
  // @@protoc_insertion_point(field_release:FNgpRouteBrief.end_point_name)
  return end_point_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FNgpRouteBrief::set_allocated_end_point_name(std::string* end_point_name) {
  if (end_point_name != nullptr) {
    
  } else {
    
  }
  end_point_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_point_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBrief.end_point_name)
}
inline std::string* FNgpRouteBrief::unsafe_arena_release_end_point_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FNgpRouteBrief.end_point_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_point_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FNgpRouteBrief::unsafe_arena_set_allocated_end_point_name(
    std::string* end_point_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_point_name != nullptr) {
    
  } else {
    
  }
  end_point_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_point_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBrief.end_point_name)
}

// int64 predict_time_duration = 7;
inline void FNgpRouteBrief::clear_predict_time_duration() {
  predict_time_duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::_internal_predict_time_duration() const {
  return predict_time_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::predict_time_duration() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.predict_time_duration)
  return _internal_predict_time_duration();
}
inline void FNgpRouteBrief::_internal_set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  predict_time_duration_ = value;
}
inline void FNgpRouteBrief::set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_predict_time_duration(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.predict_time_duration)
}

// int64 create_time = 8;
inline void FNgpRouteBrief::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::create_time() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.create_time)
  return _internal_create_time();
}
inline void FNgpRouteBrief::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
}
inline void FNgpRouteBrief::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.create_time)
}

// bool is_selected = 9;
inline void FNgpRouteBrief::clear_is_selected() {
  is_selected_ = false;
}
inline bool FNgpRouteBrief::_internal_is_selected() const {
  return is_selected_;
}
inline bool FNgpRouteBrief::is_selected() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.is_selected)
  return _internal_is_selected();
}
inline void FNgpRouteBrief::_internal_set_is_selected(bool value) {
  
  is_selected_ = value;
}
inline void FNgpRouteBrief::set_is_selected(bool value) {
  _internal_set_is_selected(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.is_selected)
}

// int64 last_use_time = 10;
inline void FNgpRouteBrief::clear_last_use_time() {
  last_use_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::_internal_last_use_time() const {
  return last_use_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBrief::last_use_time() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.last_use_time)
  return _internal_last_use_time();
}
inline void FNgpRouteBrief::_internal_set_last_use_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_use_time_ = value;
}
inline void FNgpRouteBrief::set_last_use_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_use_time(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.last_use_time)
}

// bool is_lock = 11;
inline void FNgpRouteBrief::clear_is_lock() {
  is_lock_ = false;
}
inline bool FNgpRouteBrief::_internal_is_lock() const {
  return is_lock_;
}
inline bool FNgpRouteBrief::is_lock() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.is_lock)
  return _internal_is_lock();
}
inline void FNgpRouteBrief::_internal_set_is_lock(bool value) {
  
  is_lock_ = value;
}
inline void FNgpRouteBrief::set_is_lock(bool value) {
  _internal_set_is_lock(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.is_lock)
}

// .FNgpStatus fngp_status = 12;
inline void FNgpRouteBrief::clear_fngp_status() {
  fngp_status_ = 0;
}
inline ::FNgpStatus FNgpRouteBrief::_internal_fngp_status() const {
  return static_cast< ::FNgpStatus >(fngp_status_);
}
inline ::FNgpStatus FNgpRouteBrief::fngp_status() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.fngp_status)
  return _internal_fngp_status();
}
inline void FNgpRouteBrief::_internal_set_fngp_status(::FNgpStatus value) {
  
  fngp_status_ = value;
}
inline void FNgpRouteBrief::set_fngp_status(::FNgpStatus value) {
  _internal_set_fngp_status(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.fngp_status)
}

// .PathType path_type = 13;
inline void FNgpRouteBrief::clear_path_type() {
  path_type_ = 0;
}
inline ::PathType FNgpRouteBrief::_internal_path_type() const {
  return static_cast< ::PathType >(path_type_);
}
inline ::PathType FNgpRouteBrief::path_type() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.path_type)
  return _internal_path_type();
}
inline void FNgpRouteBrief::_internal_set_path_type(::PathType value) {
  
  path_type_ = value;
}
inline void FNgpRouteBrief::set_path_type(::PathType value) {
  _internal_set_path_type(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.path_type)
}

// int32 priority = 14;
inline void FNgpRouteBrief::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::priority() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.priority)
  return _internal_priority();
}
inline void FNgpRouteBrief::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void FNgpRouteBrief::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.priority)
}

// string name = 15;
inline void FNgpRouteBrief::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FNgpRouteBrief::name() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.name)
  return _internal_name();
}
inline void FNgpRouteBrief::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.name)
}
inline std::string* FNgpRouteBrief::mutable_name() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBrief.name)
  return _internal_mutable_name();
}
inline const std::string& FNgpRouteBrief::_internal_name() const {
  return name_.Get();
}
inline void FNgpRouteBrief::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FNgpRouteBrief::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FNgpRouteBrief.name)
}
inline void FNgpRouteBrief::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FNgpRouteBrief.name)
}
inline void FNgpRouteBrief::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FNgpRouteBrief.name)
}
inline std::string* FNgpRouteBrief::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FNgpRouteBrief::release_name() {
  // @@protoc_insertion_point(field_release:FNgpRouteBrief.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FNgpRouteBrief::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBrief.name)
}
inline std::string* FNgpRouteBrief::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FNgpRouteBrief.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FNgpRouteBrief::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBrief.name)
}

// int32 total_odd_milage = 16;
inline void FNgpRouteBrief::clear_total_odd_milage() {
  total_odd_milage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_total_odd_milage() const {
  return total_odd_milage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::total_odd_milage() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.total_odd_milage)
  return _internal_total_odd_milage();
}
inline void FNgpRouteBrief::_internal_set_total_odd_milage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_odd_milage_ = value;
}
inline void FNgpRouteBrief::set_total_odd_milage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_odd_milage(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.total_odd_milage)
}

// int32 route_show_status = 17;
inline void FNgpRouteBrief::clear_route_show_status() {
  route_show_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_route_show_status() const {
  return route_show_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::route_show_status() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.route_show_status)
  return _internal_route_show_status();
}
inline void FNgpRouteBrief::_internal_set_route_show_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  route_show_status_ = value;
}
inline void FNgpRouteBrief::set_route_show_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_route_show_status(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.route_show_status)
}

// .PriorityInfo priority_info = 18;
inline void FNgpRouteBrief::clear_priority_info() {
  priority_info_ = 0;
}
inline ::PriorityInfo FNgpRouteBrief::_internal_priority_info() const {
  return static_cast< ::PriorityInfo >(priority_info_);
}
inline ::PriorityInfo FNgpRouteBrief::priority_info() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.priority_info)
  return _internal_priority_info();
}
inline void FNgpRouteBrief::_internal_set_priority_info(::PriorityInfo value) {
  
  priority_info_ = value;
}
inline void FNgpRouteBrief::set_priority_info(::PriorityInfo value) {
  _internal_set_priority_info(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.priority_info)
}

// int32 is_renamed_route = 19;
inline void FNgpRouteBrief::clear_is_renamed_route() {
  is_renamed_route_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_is_renamed_route() const {
  return is_renamed_route_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::is_renamed_route() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.is_renamed_route)
  return _internal_is_renamed_route();
}
inline void FNgpRouteBrief::_internal_set_is_renamed_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_renamed_route_ = value;
}
inline void FNgpRouteBrief::set_is_renamed_route(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_renamed_route(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.is_renamed_route)
}

// int32 is_navi_end_match = 20;
inline void FNgpRouteBrief::clear_is_navi_end_match() {
  is_navi_end_match_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_is_navi_end_match() const {
  return is_navi_end_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::is_navi_end_match() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.is_navi_end_match)
  return _internal_is_navi_end_match();
}
inline void FNgpRouteBrief::_internal_set_is_navi_end_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_navi_end_match_ = value;
}
inline void FNgpRouteBrief::set_is_navi_end_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_navi_end_match(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.is_navi_end_match)
}

// int32 cluster_number = 21;
inline void FNgpRouteBrief::clear_cluster_number() {
  cluster_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_cluster_number() const {
  return cluster_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::cluster_number() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.cluster_number)
  return _internal_cluster_number();
}
inline void FNgpRouteBrief::_internal_set_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cluster_number_ = value;
}
inline void FNgpRouteBrief::set_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cluster_number(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.cluster_number)
}

// .PathLearnStatus learn_status = 22;
inline void FNgpRouteBrief::clear_learn_status() {
  learn_status_ = 0;
}
inline ::PathLearnStatus FNgpRouteBrief::_internal_learn_status() const {
  return static_cast< ::PathLearnStatus >(learn_status_);
}
inline ::PathLearnStatus FNgpRouteBrief::learn_status() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.learn_status)
  return _internal_learn_status();
}
inline void FNgpRouteBrief::_internal_set_learn_status(::PathLearnStatus value) {
  
  learn_status_ = value;
}
inline void FNgpRouteBrief::set_learn_status(::PathLearnStatus value) {
  _internal_set_learn_status(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.learn_status)
}

// double route_score = 23;
inline void FNgpRouteBrief::clear_route_score() {
  route_score_ = 0;
}
inline double FNgpRouteBrief::_internal_route_score() const {
  return route_score_;
}
inline double FNgpRouteBrief::route_score() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.route_score)
  return _internal_route_score();
}
inline void FNgpRouteBrief::_internal_set_route_score(double value) {
  
  route_score_ = value;
}
inline void FNgpRouteBrief::set_route_score(double value) {
  _internal_set_route_score(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.route_score)
}

// .UsingRawRouteType using_raw_route_type = 24;
inline void FNgpRouteBrief::clear_using_raw_route_type() {
  using_raw_route_type_ = 0;
}
inline ::UsingRawRouteType FNgpRouteBrief::_internal_using_raw_route_type() const {
  return static_cast< ::UsingRawRouteType >(using_raw_route_type_);
}
inline ::UsingRawRouteType FNgpRouteBrief::using_raw_route_type() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.using_raw_route_type)
  return _internal_using_raw_route_type();
}
inline void FNgpRouteBrief::_internal_set_using_raw_route_type(::UsingRawRouteType value) {
  
  using_raw_route_type_ = value;
}
inline void FNgpRouteBrief::set_using_raw_route_type(::UsingRawRouteType value) {
  _internal_set_using_raw_route_type(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.using_raw_route_type)
}

// int32 start_end_cluster_number = 25;
inline void FNgpRouteBrief::clear_start_end_cluster_number() {
  start_end_cluster_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_start_end_cluster_number() const {
  return start_end_cluster_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::start_end_cluster_number() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.start_end_cluster_number)
  return _internal_start_end_cluster_number();
}
inline void FNgpRouteBrief::_internal_set_start_end_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_end_cluster_number_ = value;
}
inline void FNgpRouteBrief::set_start_end_cluster_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_end_cluster_number(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.start_end_cluster_number)
}

// int32 is_custom = 26;
inline void FNgpRouteBrief::clear_is_custom() {
  is_custom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::_internal_is_custom() const {
  return is_custom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteBrief::is_custom() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.is_custom)
  return _internal_is_custom();
}
inline void FNgpRouteBrief::_internal_set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_custom_ = value;
}
inline void FNgpRouteBrief::set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_custom(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBrief.is_custom)
}

// .CustomStatusMsg custom_status_msg = 27;
inline bool FNgpRouteBrief::_internal_has_custom_status_msg() const {
  return this != internal_default_instance() && custom_status_msg_ != nullptr;
}
inline bool FNgpRouteBrief::has_custom_status_msg() const {
  return _internal_has_custom_status_msg();
}
inline void FNgpRouteBrief::clear_custom_status_msg() {
  if (GetArena() == nullptr && custom_status_msg_ != nullptr) {
    delete custom_status_msg_;
  }
  custom_status_msg_ = nullptr;
}
inline const ::CustomStatusMsg& FNgpRouteBrief::_internal_custom_status_msg() const {
  const ::CustomStatusMsg* p = custom_status_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CustomStatusMsg*>(
      &::_CustomStatusMsg_default_instance_);
}
inline const ::CustomStatusMsg& FNgpRouteBrief::custom_status_msg() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBrief.custom_status_msg)
  return _internal_custom_status_msg();
}
inline void FNgpRouteBrief::unsafe_arena_set_allocated_custom_status_msg(
    ::CustomStatusMsg* custom_status_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_status_msg_);
  }
  custom_status_msg_ = custom_status_msg;
  if (custom_status_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBrief.custom_status_msg)
}
inline ::CustomStatusMsg* FNgpRouteBrief::release_custom_status_msg() {
  auto temp = unsafe_arena_release_custom_status_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CustomStatusMsg* FNgpRouteBrief::unsafe_arena_release_custom_status_msg() {
  // @@protoc_insertion_point(field_release:FNgpRouteBrief.custom_status_msg)
  
  ::CustomStatusMsg* temp = custom_status_msg_;
  custom_status_msg_ = nullptr;
  return temp;
}
inline ::CustomStatusMsg* FNgpRouteBrief::_internal_mutable_custom_status_msg() {
  
  if (custom_status_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CustomStatusMsg>(GetArena());
    custom_status_msg_ = p;
  }
  return custom_status_msg_;
}
inline ::CustomStatusMsg* FNgpRouteBrief::mutable_custom_status_msg() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBrief.custom_status_msg)
  return _internal_mutable_custom_status_msg();
}
inline void FNgpRouteBrief::set_allocated_custom_status_msg(::CustomStatusMsg* custom_status_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete custom_status_msg_;
  }
  if (custom_status_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom_status_msg);
    if (message_arena != submessage_arena) {
      custom_status_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_status_msg, submessage_arena);
    }
    
  } else {
    
  }
  custom_status_msg_ = custom_status_msg;
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBrief.custom_status_msg)
}

// -------------------------------------------------------------------

// FNgpRouteBriefList

// repeated .FNgpRouteBrief fngp_route_brief_list = 1;
inline int FNgpRouteBriefList::_internal_fngp_route_brief_list_size() const {
  return fngp_route_brief_list_.size();
}
inline int FNgpRouteBriefList::fngp_route_brief_list_size() const {
  return _internal_fngp_route_brief_list_size();
}
inline void FNgpRouteBriefList::clear_fngp_route_brief_list() {
  fngp_route_brief_list_.Clear();
}
inline ::FNgpRouteBrief* FNgpRouteBriefList::mutable_fngp_route_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBriefList.fngp_route_brief_list)
  return fngp_route_brief_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteBrief >*
FNgpRouteBriefList::mutable_fngp_route_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:FNgpRouteBriefList.fngp_route_brief_list)
  return &fngp_route_brief_list_;
}
inline const ::FNgpRouteBrief& FNgpRouteBriefList::_internal_fngp_route_brief_list(int index) const {
  return fngp_route_brief_list_.Get(index);
}
inline const ::FNgpRouteBrief& FNgpRouteBriefList::fngp_route_brief_list(int index) const {
  // @@protoc_insertion_point(field_get:FNgpRouteBriefList.fngp_route_brief_list)
  return _internal_fngp_route_brief_list(index);
}
inline ::FNgpRouteBrief* FNgpRouteBriefList::_internal_add_fngp_route_brief_list() {
  return fngp_route_brief_list_.Add();
}
inline ::FNgpRouteBrief* FNgpRouteBriefList::add_fngp_route_brief_list() {
  // @@protoc_insertion_point(field_add:FNgpRouteBriefList.fngp_route_brief_list)
  return _internal_add_fngp_route_brief_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteBrief >&
FNgpRouteBriefList::fngp_route_brief_list() const {
  // @@protoc_insertion_point(field_list:FNgpRouteBriefList.fngp_route_brief_list)
  return fngp_route_brief_list_;
}

// .FNgpEmulatorNavigation fngp_emulator_navigation = 2;
inline bool FNgpRouteBriefList::_internal_has_fngp_emulator_navigation() const {
  return this != internal_default_instance() && fngp_emulator_navigation_ != nullptr;
}
inline bool FNgpRouteBriefList::has_fngp_emulator_navigation() const {
  return _internal_has_fngp_emulator_navigation();
}
inline void FNgpRouteBriefList::clear_fngp_emulator_navigation() {
  if (GetArena() == nullptr && fngp_emulator_navigation_ != nullptr) {
    delete fngp_emulator_navigation_;
  }
  fngp_emulator_navigation_ = nullptr;
}
inline const ::FNgpEmulatorNavigation& FNgpRouteBriefList::_internal_fngp_emulator_navigation() const {
  const ::FNgpEmulatorNavigation* p = fngp_emulator_navigation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FNgpEmulatorNavigation*>(
      &::_FNgpEmulatorNavigation_default_instance_);
}
inline const ::FNgpEmulatorNavigation& FNgpRouteBriefList::fngp_emulator_navigation() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBriefList.fngp_emulator_navigation)
  return _internal_fngp_emulator_navigation();
}
inline void FNgpRouteBriefList::unsafe_arena_set_allocated_fngp_emulator_navigation(
    ::FNgpEmulatorNavigation* fngp_emulator_navigation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fngp_emulator_navigation_);
  }
  fngp_emulator_navigation_ = fngp_emulator_navigation;
  if (fngp_emulator_navigation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteBriefList.fngp_emulator_navigation)
}
inline ::FNgpEmulatorNavigation* FNgpRouteBriefList::release_fngp_emulator_navigation() {
  auto temp = unsafe_arena_release_fngp_emulator_navigation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FNgpEmulatorNavigation* FNgpRouteBriefList::unsafe_arena_release_fngp_emulator_navigation() {
  // @@protoc_insertion_point(field_release:FNgpRouteBriefList.fngp_emulator_navigation)
  
  ::FNgpEmulatorNavigation* temp = fngp_emulator_navigation_;
  fngp_emulator_navigation_ = nullptr;
  return temp;
}
inline ::FNgpEmulatorNavigation* FNgpRouteBriefList::_internal_mutable_fngp_emulator_navigation() {
  
  if (fngp_emulator_navigation_ == nullptr) {
    auto* p = CreateMaybeMessage<::FNgpEmulatorNavigation>(GetArena());
    fngp_emulator_navigation_ = p;
  }
  return fngp_emulator_navigation_;
}
inline ::FNgpEmulatorNavigation* FNgpRouteBriefList::mutable_fngp_emulator_navigation() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteBriefList.fngp_emulator_navigation)
  return _internal_mutable_fngp_emulator_navigation();
}
inline void FNgpRouteBriefList::set_allocated_fngp_emulator_navigation(::FNgpEmulatorNavigation* fngp_emulator_navigation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fngp_emulator_navigation_;
  }
  if (fngp_emulator_navigation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fngp_emulator_navigation);
    if (message_arena != submessage_arena) {
      fngp_emulator_navigation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fngp_emulator_navigation, submessage_arena);
    }
    
  } else {
    
  }
  fngp_emulator_navigation_ = fngp_emulator_navigation;
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteBriefList.fngp_emulator_navigation)
}

// .StateRemindType state_remind = 3;
inline void FNgpRouteBriefList::clear_state_remind() {
  state_remind_ = 0;
}
inline ::StateRemindType FNgpRouteBriefList::_internal_state_remind() const {
  return static_cast< ::StateRemindType >(state_remind_);
}
inline ::StateRemindType FNgpRouteBriefList::state_remind() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBriefList.state_remind)
  return _internal_state_remind();
}
inline void FNgpRouteBriefList::_internal_set_state_remind(::StateRemindType value) {
  
  state_remind_ = value;
}
inline void FNgpRouteBriefList::set_state_remind(::StateRemindType value) {
  _internal_set_state_remind(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBriefList.state_remind)
}

// int64 sequence_id = 4;
inline void FNgpRouteBriefList::clear_sequence_id() {
  sequence_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBriefList::_internal_sequence_id() const {
  return sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRouteBriefList::sequence_id() const {
  // @@protoc_insertion_point(field_get:FNgpRouteBriefList.sequence_id)
  return _internal_sequence_id();
}
inline void FNgpRouteBriefList::_internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_id_ = value;
}
inline void FNgpRouteBriefList::set_sequence_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:FNgpRouteBriefList.sequence_id)
}

// -------------------------------------------------------------------

// FNgpRouteDetailList

// int32 flag = 1;
inline void FNgpRouteDetailList::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteDetailList::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpRouteDetailList::flag() const {
  // @@protoc_insertion_point(field_get:FNgpRouteDetailList.flag)
  return _internal_flag();
}
inline void FNgpRouteDetailList::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void FNgpRouteDetailList::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:FNgpRouteDetailList.flag)
}

// repeated .FNgpRouteDetail fngp_route_defail_list = 2;
inline int FNgpRouteDetailList::_internal_fngp_route_defail_list_size() const {
  return fngp_route_defail_list_.size();
}
inline int FNgpRouteDetailList::fngp_route_defail_list_size() const {
  return _internal_fngp_route_defail_list_size();
}
inline void FNgpRouteDetailList::clear_fngp_route_defail_list() {
  fngp_route_defail_list_.Clear();
}
inline ::FNgpRouteDetail* FNgpRouteDetailList::mutable_fngp_route_defail_list(int index) {
  // @@protoc_insertion_point(field_mutable:FNgpRouteDetailList.fngp_route_defail_list)
  return fngp_route_defail_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteDetail >*
FNgpRouteDetailList::mutable_fngp_route_defail_list() {
  // @@protoc_insertion_point(field_mutable_list:FNgpRouteDetailList.fngp_route_defail_list)
  return &fngp_route_defail_list_;
}
inline const ::FNgpRouteDetail& FNgpRouteDetailList::_internal_fngp_route_defail_list(int index) const {
  return fngp_route_defail_list_.Get(index);
}
inline const ::FNgpRouteDetail& FNgpRouteDetailList::fngp_route_defail_list(int index) const {
  // @@protoc_insertion_point(field_get:FNgpRouteDetailList.fngp_route_defail_list)
  return _internal_fngp_route_defail_list(index);
}
inline ::FNgpRouteDetail* FNgpRouteDetailList::_internal_add_fngp_route_defail_list() {
  return fngp_route_defail_list_.Add();
}
inline ::FNgpRouteDetail* FNgpRouteDetailList::add_fngp_route_defail_list() {
  // @@protoc_insertion_point(field_add:FNgpRouteDetailList.fngp_route_defail_list)
  return _internal_add_fngp_route_defail_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FNgpRouteDetail >&
FNgpRouteDetailList::fngp_route_defail_list() const {
  // @@protoc_insertion_point(field_list:FNgpRouteDetailList.fngp_route_defail_list)
  return fngp_route_defail_list_;
}

// -------------------------------------------------------------------

// FNgpRouteDetail

// .FNgpRouteBrief fngp_route_brief = 1;
inline bool FNgpRouteDetail::_internal_has_fngp_route_brief() const {
  return this != internal_default_instance() && fngp_route_brief_ != nullptr;
}
inline bool FNgpRouteDetail::has_fngp_route_brief() const {
  return _internal_has_fngp_route_brief();
}
inline void FNgpRouteDetail::clear_fngp_route_brief() {
  if (GetArena() == nullptr && fngp_route_brief_ != nullptr) {
    delete fngp_route_brief_;
  }
  fngp_route_brief_ = nullptr;
}
inline const ::FNgpRouteBrief& FNgpRouteDetail::_internal_fngp_route_brief() const {
  const ::FNgpRouteBrief* p = fngp_route_brief_;
  return p != nullptr ? *p : *reinterpret_cast<const ::FNgpRouteBrief*>(
      &::_FNgpRouteBrief_default_instance_);
}
inline const ::FNgpRouteBrief& FNgpRouteDetail::fngp_route_brief() const {
  // @@protoc_insertion_point(field_get:FNgpRouteDetail.fngp_route_brief)
  return _internal_fngp_route_brief();
}
inline void FNgpRouteDetail::unsafe_arena_set_allocated_fngp_route_brief(
    ::FNgpRouteBrief* fngp_route_brief) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fngp_route_brief_);
  }
  fngp_route_brief_ = fngp_route_brief;
  if (fngp_route_brief) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRouteDetail.fngp_route_brief)
}
inline ::FNgpRouteBrief* FNgpRouteDetail::release_fngp_route_brief() {
  auto temp = unsafe_arena_release_fngp_route_brief();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FNgpRouteBrief* FNgpRouteDetail::unsafe_arena_release_fngp_route_brief() {
  // @@protoc_insertion_point(field_release:FNgpRouteDetail.fngp_route_brief)
  
  ::FNgpRouteBrief* temp = fngp_route_brief_;
  fngp_route_brief_ = nullptr;
  return temp;
}
inline ::FNgpRouteBrief* FNgpRouteDetail::_internal_mutable_fngp_route_brief() {
  
  if (fngp_route_brief_ == nullptr) {
    auto* p = CreateMaybeMessage<::FNgpRouteBrief>(GetArena());
    fngp_route_brief_ = p;
  }
  return fngp_route_brief_;
}
inline ::FNgpRouteBrief* FNgpRouteDetail::mutable_fngp_route_brief() {
  // @@protoc_insertion_point(field_mutable:FNgpRouteDetail.fngp_route_brief)
  return _internal_mutable_fngp_route_brief();
}
inline void FNgpRouteDetail::set_allocated_fngp_route_brief(::FNgpRouteBrief* fngp_route_brief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fngp_route_brief_;
  }
  if (fngp_route_brief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fngp_route_brief);
    if (message_arena != submessage_arena) {
      fngp_route_brief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fngp_route_brief, submessage_arena);
    }
    
  } else {
    
  }
  fngp_route_brief_ = fngp_route_brief;
  // @@protoc_insertion_point(field_set_allocated:FNgpRouteDetail.fngp_route_brief)
}

// repeated .Point v2_point_list = 2;
inline int FNgpRouteDetail::_internal_v2_point_list_size() const {
  return v2_point_list_.size();
}
inline int FNgpRouteDetail::v2_point_list_size() const {
  return _internal_v2_point_list_size();
}
inline void FNgpRouteDetail::clear_v2_point_list() {
  v2_point_list_.Clear();
}
inline ::Point* FNgpRouteDetail::mutable_v2_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:FNgpRouteDetail.v2_point_list)
  return v2_point_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
FNgpRouteDetail::mutable_v2_point_list() {
  // @@protoc_insertion_point(field_mutable_list:FNgpRouteDetail.v2_point_list)
  return &v2_point_list_;
}
inline const ::Point& FNgpRouteDetail::_internal_v2_point_list(int index) const {
  return v2_point_list_.Get(index);
}
inline const ::Point& FNgpRouteDetail::v2_point_list(int index) const {
  // @@protoc_insertion_point(field_get:FNgpRouteDetail.v2_point_list)
  return _internal_v2_point_list(index);
}
inline ::Point* FNgpRouteDetail::_internal_add_v2_point_list() {
  return v2_point_list_.Add();
}
inline ::Point* FNgpRouteDetail::add_v2_point_list() {
  // @@protoc_insertion_point(field_add:FNgpRouteDetail.v2_point_list)
  return _internal_add_v2_point_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
FNgpRouteDetail::v2_point_list() const {
  // @@protoc_insertion_point(field_list:FNgpRouteDetail.v2_point_list)
  return v2_point_list_;
}

// repeated .SegmentInfo segment_list = 3;
inline int FNgpRouteDetail::_internal_segment_list_size() const {
  return segment_list_.size();
}
inline int FNgpRouteDetail::segment_list_size() const {
  return _internal_segment_list_size();
}
inline void FNgpRouteDetail::clear_segment_list() {
  segment_list_.Clear();
}
inline ::SegmentInfo* FNgpRouteDetail::mutable_segment_list(int index) {
  // @@protoc_insertion_point(field_mutable:FNgpRouteDetail.segment_list)
  return segment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >*
FNgpRouteDetail::mutable_segment_list() {
  // @@protoc_insertion_point(field_mutable_list:FNgpRouteDetail.segment_list)
  return &segment_list_;
}
inline const ::SegmentInfo& FNgpRouteDetail::_internal_segment_list(int index) const {
  return segment_list_.Get(index);
}
inline const ::SegmentInfo& FNgpRouteDetail::segment_list(int index) const {
  // @@protoc_insertion_point(field_get:FNgpRouteDetail.segment_list)
  return _internal_segment_list(index);
}
inline ::SegmentInfo* FNgpRouteDetail::_internal_add_segment_list() {
  return segment_list_.Add();
}
inline ::SegmentInfo* FNgpRouteDetail::add_segment_list() {
  // @@protoc_insertion_point(field_add:FNgpRouteDetail.segment_list)
  return _internal_add_segment_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >&
FNgpRouteDetail::segment_list() const {
  // @@protoc_insertion_point(field_list:FNgpRouteDetail.segment_list)
  return segment_list_;
}

// -------------------------------------------------------------------

// FNgpRouteWayPointsSpecified

// repeated .Point v2_point_list_Specified = 1;
inline int FNgpRouteWayPointsSpecified::_internal_v2_point_list_specified_size() const {
  return v2_point_list_specified_.size();
}
inline int FNgpRouteWayPointsSpecified::v2_point_list_specified_size() const {
  return _internal_v2_point_list_specified_size();
}
inline void FNgpRouteWayPointsSpecified::clear_v2_point_list_specified() {
  v2_point_list_specified_.Clear();
}
inline ::Point* FNgpRouteWayPointsSpecified::mutable_v2_point_list_specified(int index) {
  // @@protoc_insertion_point(field_mutable:FNgpRouteWayPointsSpecified.v2_point_list_Specified)
  return v2_point_list_specified_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
FNgpRouteWayPointsSpecified::mutable_v2_point_list_specified() {
  // @@protoc_insertion_point(field_mutable_list:FNgpRouteWayPointsSpecified.v2_point_list_Specified)
  return &v2_point_list_specified_;
}
inline const ::Point& FNgpRouteWayPointsSpecified::_internal_v2_point_list_specified(int index) const {
  return v2_point_list_specified_.Get(index);
}
inline const ::Point& FNgpRouteWayPointsSpecified::v2_point_list_specified(int index) const {
  // @@protoc_insertion_point(field_get:FNgpRouteWayPointsSpecified.v2_point_list_Specified)
  return _internal_v2_point_list_specified(index);
}
inline ::Point* FNgpRouteWayPointsSpecified::_internal_add_v2_point_list_specified() {
  return v2_point_list_specified_.Add();
}
inline ::Point* FNgpRouteWayPointsSpecified::add_v2_point_list_specified() {
  // @@protoc_insertion_point(field_add:FNgpRouteWayPointsSpecified.v2_point_list_Specified)
  return _internal_add_v2_point_list_specified();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
FNgpRouteWayPointsSpecified::v2_point_list_specified() const {
  // @@protoc_insertion_point(field_list:FNgpRouteWayPointsSpecified.v2_point_list_Specified)
  return v2_point_list_specified_;
}

// -------------------------------------------------------------------

// FNgpEmulatorNavigation

// int64 route_id = 1;
inline void FNgpEmulatorNavigation::clear_route_id() {
  route_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpEmulatorNavigation::_internal_route_id() const {
  return route_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpEmulatorNavigation::route_id() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.route_id)
  return _internal_route_id();
}
inline void FNgpEmulatorNavigation::_internal_set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  route_id_ = value;
}
inline void FNgpEmulatorNavigation::set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_route_id(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.route_id)
}

// int32 current_point_index_in_v2list = 2;
inline void FNgpEmulatorNavigation::clear_current_point_index_in_v2list() {
  current_point_index_in_v2list_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::_internal_current_point_index_in_v2list() const {
  return current_point_index_in_v2list_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::current_point_index_in_v2list() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.current_point_index_in_v2list)
  return _internal_current_point_index_in_v2list();
}
inline void FNgpEmulatorNavigation::_internal_set_current_point_index_in_v2list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_point_index_in_v2list_ = value;
}
inline void FNgpEmulatorNavigation::set_current_point_index_in_v2list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_point_index_in_v2list(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.current_point_index_in_v2list)
}

// .Point current_lonlat_point = 3;
inline bool FNgpEmulatorNavigation::_internal_has_current_lonlat_point() const {
  return this != internal_default_instance() && current_lonlat_point_ != nullptr;
}
inline bool FNgpEmulatorNavigation::has_current_lonlat_point() const {
  return _internal_has_current_lonlat_point();
}
inline void FNgpEmulatorNavigation::clear_current_lonlat_point() {
  if (GetArena() == nullptr && current_lonlat_point_ != nullptr) {
    delete current_lonlat_point_;
  }
  current_lonlat_point_ = nullptr;
}
inline const ::Point& FNgpEmulatorNavigation::_internal_current_lonlat_point() const {
  const ::Point* p = current_lonlat_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& FNgpEmulatorNavigation::current_lonlat_point() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.current_lonlat_point)
  return _internal_current_lonlat_point();
}
inline void FNgpEmulatorNavigation::unsafe_arena_set_allocated_current_lonlat_point(
    ::Point* current_lonlat_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_lonlat_point_);
  }
  current_lonlat_point_ = current_lonlat_point;
  if (current_lonlat_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpEmulatorNavigation.current_lonlat_point)
}
inline ::Point* FNgpEmulatorNavigation::release_current_lonlat_point() {
  auto temp = unsafe_arena_release_current_lonlat_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Point* FNgpEmulatorNavigation::unsafe_arena_release_current_lonlat_point() {
  // @@protoc_insertion_point(field_release:FNgpEmulatorNavigation.current_lonlat_point)
  
  ::Point* temp = current_lonlat_point_;
  current_lonlat_point_ = nullptr;
  return temp;
}
inline ::Point* FNgpEmulatorNavigation::_internal_mutable_current_lonlat_point() {
  
  if (current_lonlat_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArena());
    current_lonlat_point_ = p;
  }
  return current_lonlat_point_;
}
inline ::Point* FNgpEmulatorNavigation::mutable_current_lonlat_point() {
  // @@protoc_insertion_point(field_mutable:FNgpEmulatorNavigation.current_lonlat_point)
  return _internal_mutable_current_lonlat_point();
}
inline void FNgpEmulatorNavigation::set_allocated_current_lonlat_point(::Point* current_lonlat_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_lonlat_point_;
  }
  if (current_lonlat_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_lonlat_point);
    if (message_arena != submessage_arena) {
      current_lonlat_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_lonlat_point, submessage_arena);
    }
    
  } else {
    
  }
  current_lonlat_point_ = current_lonlat_point;
  // @@protoc_insertion_point(field_set_allocated:FNgpEmulatorNavigation.current_lonlat_point)
}

// int32 remain_mileage = 4;
inline void FNgpEmulatorNavigation::clear_remain_mileage() {
  remain_mileage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::_internal_remain_mileage() const {
  return remain_mileage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::remain_mileage() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.remain_mileage)
  return _internal_remain_mileage();
}
inline void FNgpEmulatorNavigation::_internal_set_remain_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_mileage_ = value;
}
inline void FNgpEmulatorNavigation::set_remain_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain_mileage(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.remain_mileage)
}

// int32 passed_mileage = 5;
inline void FNgpEmulatorNavigation::clear_passed_mileage() {
  passed_mileage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::_internal_passed_mileage() const {
  return passed_mileage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::passed_mileage() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.passed_mileage)
  return _internal_passed_mileage();
}
inline void FNgpEmulatorNavigation::_internal_set_passed_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passed_mileage_ = value;
}
inline void FNgpEmulatorNavigation::set_passed_mileage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passed_mileage(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.passed_mileage)
}

// int64 predict_time_duration = 6;
inline void FNgpEmulatorNavigation::clear_predict_time_duration() {
  predict_time_duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpEmulatorNavigation::_internal_predict_time_duration() const {
  return predict_time_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpEmulatorNavigation::predict_time_duration() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.predict_time_duration)
  return _internal_predict_time_duration();
}
inline void FNgpEmulatorNavigation::_internal_set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  predict_time_duration_ = value;
}
inline void FNgpEmulatorNavigation::set_predict_time_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_predict_time_duration(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.predict_time_duration)
}

// int64 arrive_time = 7;
inline void FNgpEmulatorNavigation::clear_arrive_time() {
  arrive_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpEmulatorNavigation::_internal_arrive_time() const {
  return arrive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpEmulatorNavigation::arrive_time() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.arrive_time)
  return _internal_arrive_time();
}
inline void FNgpEmulatorNavigation::_internal_set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  arrive_time_ = value;
}
inline void FNgpEmulatorNavigation::set_arrive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_arrive_time(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.arrive_time)
}

// .ManeuverType maneuver_type = 8;
inline void FNgpEmulatorNavigation::clear_maneuver_type() {
  maneuver_type_ = 0;
}
inline ::ManeuverType FNgpEmulatorNavigation::_internal_maneuver_type() const {
  return static_cast< ::ManeuverType >(maneuver_type_);
}
inline ::ManeuverType FNgpEmulatorNavigation::maneuver_type() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.maneuver_type)
  return _internal_maneuver_type();
}
inline void FNgpEmulatorNavigation::_internal_set_maneuver_type(::ManeuverType value) {
  
  maneuver_type_ = value;
}
inline void FNgpEmulatorNavigation::set_maneuver_type(::ManeuverType value) {
  _internal_set_maneuver_type(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.maneuver_type)
}

// .ManeuverDirection maneuver_direction = 9;
inline void FNgpEmulatorNavigation::clear_maneuver_direction() {
  maneuver_direction_ = 0;
}
inline ::ManeuverDirection FNgpEmulatorNavigation::_internal_maneuver_direction() const {
  return static_cast< ::ManeuverDirection >(maneuver_direction_);
}
inline ::ManeuverDirection FNgpEmulatorNavigation::maneuver_direction() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.maneuver_direction)
  return _internal_maneuver_direction();
}
inline void FNgpEmulatorNavigation::_internal_set_maneuver_direction(::ManeuverDirection value) {
  
  maneuver_direction_ = value;
}
inline void FNgpEmulatorNavigation::set_maneuver_direction(::ManeuverDirection value) {
  _internal_set_maneuver_direction(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.maneuver_direction)
}

// int32 maneuver_distance = 10;
inline void FNgpEmulatorNavigation::clear_maneuver_distance() {
  maneuver_distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::_internal_maneuver_distance() const {
  return maneuver_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::maneuver_distance() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.maneuver_distance)
  return _internal_maneuver_distance();
}
inline void FNgpEmulatorNavigation::_internal_set_maneuver_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maneuver_distance_ = value;
}
inline void FNgpEmulatorNavigation::set_maneuver_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maneuver_distance(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.maneuver_distance)
}

// int32 current_offset = 11;
inline void FNgpEmulatorNavigation::clear_current_offset() {
  current_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::_internal_current_offset() const {
  return current_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FNgpEmulatorNavigation::current_offset() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.current_offset)
  return _internal_current_offset();
}
inline void FNgpEmulatorNavigation::_internal_set_current_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_offset_ = value;
}
inline void FNgpEmulatorNavigation::set_current_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_offset(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.current_offset)
}

// repeated .SegmentInfo offset_segment_list = 12;
inline int FNgpEmulatorNavigation::_internal_offset_segment_list_size() const {
  return offset_segment_list_.size();
}
inline int FNgpEmulatorNavigation::offset_segment_list_size() const {
  return _internal_offset_segment_list_size();
}
inline void FNgpEmulatorNavigation::clear_offset_segment_list() {
  offset_segment_list_.Clear();
}
inline ::SegmentInfo* FNgpEmulatorNavigation::mutable_offset_segment_list(int index) {
  // @@protoc_insertion_point(field_mutable:FNgpEmulatorNavigation.offset_segment_list)
  return offset_segment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >*
FNgpEmulatorNavigation::mutable_offset_segment_list() {
  // @@protoc_insertion_point(field_mutable_list:FNgpEmulatorNavigation.offset_segment_list)
  return &offset_segment_list_;
}
inline const ::SegmentInfo& FNgpEmulatorNavigation::_internal_offset_segment_list(int index) const {
  return offset_segment_list_.Get(index);
}
inline const ::SegmentInfo& FNgpEmulatorNavigation::offset_segment_list(int index) const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.offset_segment_list)
  return _internal_offset_segment_list(index);
}
inline ::SegmentInfo* FNgpEmulatorNavigation::_internal_add_offset_segment_list() {
  return offset_segment_list_.Add();
}
inline ::SegmentInfo* FNgpEmulatorNavigation::add_offset_segment_list() {
  // @@protoc_insertion_point(field_add:FNgpEmulatorNavigation.offset_segment_list)
  return _internal_add_offset_segment_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentInfo >&
FNgpEmulatorNavigation::offset_segment_list() const {
  // @@protoc_insertion_point(field_list:FNgpEmulatorNavigation.offset_segment_list)
  return offset_segment_list_;
}

// string end_point_name = 13;
inline void FNgpEmulatorNavigation::clear_end_point_name() {
  end_point_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FNgpEmulatorNavigation::end_point_name() const {
  // @@protoc_insertion_point(field_get:FNgpEmulatorNavigation.end_point_name)
  return _internal_end_point_name();
}
inline void FNgpEmulatorNavigation::set_end_point_name(const std::string& value) {
  _internal_set_end_point_name(value);
  // @@protoc_insertion_point(field_set:FNgpEmulatorNavigation.end_point_name)
}
inline std::string* FNgpEmulatorNavigation::mutable_end_point_name() {
  // @@protoc_insertion_point(field_mutable:FNgpEmulatorNavigation.end_point_name)
  return _internal_mutable_end_point_name();
}
inline const std::string& FNgpEmulatorNavigation::_internal_end_point_name() const {
  return end_point_name_.Get();
}
inline void FNgpEmulatorNavigation::_internal_set_end_point_name(const std::string& value) {
  
  end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FNgpEmulatorNavigation::set_end_point_name(std::string&& value) {
  
  end_point_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FNgpEmulatorNavigation.end_point_name)
}
inline void FNgpEmulatorNavigation::set_end_point_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FNgpEmulatorNavigation.end_point_name)
}
inline void FNgpEmulatorNavigation::set_end_point_name(const char* value,
    size_t size) {
  
  end_point_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FNgpEmulatorNavigation.end_point_name)
}
inline std::string* FNgpEmulatorNavigation::_internal_mutable_end_point_name() {
  
  return end_point_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FNgpEmulatorNavigation::release_end_point_name() {
  // @@protoc_insertion_point(field_release:FNgpEmulatorNavigation.end_point_name)
  return end_point_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FNgpEmulatorNavigation::set_allocated_end_point_name(std::string* end_point_name) {
  if (end_point_name != nullptr) {
    
  } else {
    
  }
  end_point_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_point_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FNgpEmulatorNavigation.end_point_name)
}
inline std::string* FNgpEmulatorNavigation::unsafe_arena_release_end_point_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FNgpEmulatorNavigation.end_point_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_point_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FNgpEmulatorNavigation::unsafe_arena_set_allocated_end_point_name(
    std::string* end_point_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_point_name != nullptr) {
    
  } else {
    
  }
  end_point_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_point_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpEmulatorNavigation.end_point_name)
}

// -------------------------------------------------------------------

// CustomStatusMsg

// int32 code = 1;
inline void CustomStatusMsg::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomStatusMsg::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CustomStatusMsg::code() const {
  // @@protoc_insertion_point(field_get:CustomStatusMsg.code)
  return _internal_code();
}
inline void CustomStatusMsg::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CustomStatusMsg::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:CustomStatusMsg.code)
}

// string message = 2;
inline void CustomStatusMsg::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomStatusMsg::message() const {
  // @@protoc_insertion_point(field_get:CustomStatusMsg.message)
  return _internal_message();
}
inline void CustomStatusMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CustomStatusMsg.message)
}
inline std::string* CustomStatusMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CustomStatusMsg.message)
  return _internal_mutable_message();
}
inline const std::string& CustomStatusMsg::_internal_message() const {
  return message_.Get();
}
inline void CustomStatusMsg::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomStatusMsg::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CustomStatusMsg.message)
}
inline void CustomStatusMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CustomStatusMsg.message)
}
inline void CustomStatusMsg::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CustomStatusMsg.message)
}
inline std::string* CustomStatusMsg::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomStatusMsg::release_message() {
  // @@protoc_insertion_point(field_release:CustomStatusMsg.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomStatusMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CustomStatusMsg.message)
}
inline std::string* CustomStatusMsg::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CustomStatusMsg.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomStatusMsg::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CustomStatusMsg.message)
}

// -------------------------------------------------------------------

// FNgpRecordingState

// int64 route_id = 1;
inline void FNgpRecordingState::clear_route_id() {
  route_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRecordingState::_internal_route_id() const {
  return route_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRecordingState::route_id() const {
  // @@protoc_insertion_point(field_get:FNgpRecordingState.route_id)
  return _internal_route_id();
}
inline void FNgpRecordingState::_internal_set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  route_id_ = value;
}
inline void FNgpRecordingState::set_route_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_route_id(value);
  // @@protoc_insertion_point(field_set:FNgpRecordingState.route_id)
}

// uint32 recording_status = 2;
inline void FNgpRecordingState::clear_recording_status() {
  recording_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FNgpRecordingState::_internal_recording_status() const {
  return recording_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FNgpRecordingState::recording_status() const {
  // @@protoc_insertion_point(field_get:FNgpRecordingState.recording_status)
  return _internal_recording_status();
}
inline void FNgpRecordingState::_internal_set_recording_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recording_status_ = value;
}
inline void FNgpRecordingState::set_recording_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recording_status(value);
  // @@protoc_insertion_point(field_set:FNgpRecordingState.recording_status)
}

// int64 timestamp = 3;
inline void FNgpRecordingState::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRecordingState::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FNgpRecordingState::timestamp() const {
  // @@protoc_insertion_point(field_get:FNgpRecordingState.timestamp)
  return _internal_timestamp();
}
inline void FNgpRecordingState::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void FNgpRecordingState::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:FNgpRecordingState.timestamp)
}

// string name = 4;
inline void FNgpRecordingState::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FNgpRecordingState::name() const {
  // @@protoc_insertion_point(field_get:FNgpRecordingState.name)
  return _internal_name();
}
inline void FNgpRecordingState::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:FNgpRecordingState.name)
}
inline std::string* FNgpRecordingState::mutable_name() {
  // @@protoc_insertion_point(field_mutable:FNgpRecordingState.name)
  return _internal_mutable_name();
}
inline const std::string& FNgpRecordingState::_internal_name() const {
  return name_.Get();
}
inline void FNgpRecordingState::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FNgpRecordingState::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FNgpRecordingState.name)
}
inline void FNgpRecordingState::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FNgpRecordingState.name)
}
inline void FNgpRecordingState::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FNgpRecordingState.name)
}
inline std::string* FNgpRecordingState::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FNgpRecordingState::release_name() {
  // @@protoc_insertion_point(field_release:FNgpRecordingState.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FNgpRecordingState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FNgpRecordingState.name)
}
inline std::string* FNgpRecordingState::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FNgpRecordingState.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FNgpRecordingState::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FNgpRecordingState.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SegmentAvailableStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SegmentAvailableStatus>() {
  return ::SegmentAvailableStatus_descriptor();
}
template <> struct is_proto_enum< ::PathLearnStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PathLearnStatus>() {
  return ::PathLearnStatus_descriptor();
}
template <> struct is_proto_enum< ::UsingRawRouteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UsingRawRouteType>() {
  return ::UsingRawRouteType_descriptor();
}
template <> struct is_proto_enum< ::PathType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PathType>() {
  return ::PathType_descriptor();
}
template <> struct is_proto_enum< ::ManeuverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ManeuverType>() {
  return ::ManeuverType_descriptor();
}
template <> struct is_proto_enum< ::ManeuverDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ManeuverDirection>() {
  return ::ManeuverDirection_descriptor();
}
template <> struct is_proto_enum< ::FNgpStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FNgpStatus>() {
  return ::FNgpStatus_descriptor();
}
template <> struct is_proto_enum< ::StateRemindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StateRemindType>() {
  return ::StateRemindType_descriptor();
}
template <> struct is_proto_enum< ::PriorityInfo> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PriorityInfo>() {
  return ::PriorityInfo_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2ffngp_5froute_5fmgr_2eproto
