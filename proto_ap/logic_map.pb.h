// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/logic_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2flogic_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2flogic_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto_ap/base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fap_2flogic_5fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2flogic_5fmap_2eproto;
namespace LogicMapPb {
class Intersection;
class IntersectionDefaultTypeInternal;
extern IntersectionDefaultTypeInternal _Intersection_default_instance_;
class Intersection_edge;
class Intersection_edgeDefaultTypeInternal;
extern Intersection_edgeDefaultTypeInternal _Intersection_edge_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Line_curve;
class Line_curveDefaultTypeInternal;
extern Line_curveDefaultTypeInternal _Line_curve_default_instance_;
class Line_equation;
class Line_equationDefaultTypeInternal;
extern Line_equationDefaultTypeInternal _Line_equation_default_instance_;
class LogicMap;
class LogicMapDefaultTypeInternal;
extern LogicMapDefaultTypeInternal _LogicMap_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object_logicpt;
class Object_logicptDefaultTypeInternal;
extern Object_logicptDefaultTypeInternal _Object_logicpt_default_instance_;
class RoadSection;
class RoadSectionDefaultTypeInternal;
extern RoadSectionDefaultTypeInternal _RoadSection_default_instance_;
class RoadSection_roadedge;
class RoadSection_roadedgeDefaultTypeInternal;
extern RoadSection_roadedgeDefaultTypeInternal _RoadSection_roadedge_default_instance_;
class connectedLane;
class connectedLaneDefaultTypeInternal;
extern connectedLaneDefaultTypeInternal _connectedLane_default_instance_;
class lane;
class laneDefaultTypeInternal;
extern laneDefaultTypeInternal _lane_default_instance_;
class secIDtype;
class secIDtypeDefaultTypeInternal;
extern secIDtypeDefaultTypeInternal _secIDtype_default_instance_;
class secTypeNode;
class secTypeNodeDefaultTypeInternal;
extern secTypeNodeDefaultTypeInternal _secTypeNode_default_instance_;
}  // namespace LogicMapPb
PROTOBUF_NAMESPACE_OPEN
template<> ::LogicMapPb::Intersection* Arena::CreateMaybeMessage<::LogicMapPb::Intersection>(Arena*);
template<> ::LogicMapPb::Intersection_edge* Arena::CreateMaybeMessage<::LogicMapPb::Intersection_edge>(Arena*);
template<> ::LogicMapPb::Line* Arena::CreateMaybeMessage<::LogicMapPb::Line>(Arena*);
template<> ::LogicMapPb::Line_curve* Arena::CreateMaybeMessage<::LogicMapPb::Line_curve>(Arena*);
template<> ::LogicMapPb::Line_equation* Arena::CreateMaybeMessage<::LogicMapPb::Line_equation>(Arena*);
template<> ::LogicMapPb::LogicMap* Arena::CreateMaybeMessage<::LogicMapPb::LogicMap>(Arena*);
template<> ::LogicMapPb::Node* Arena::CreateMaybeMessage<::LogicMapPb::Node>(Arena*);
template<> ::LogicMapPb::Object* Arena::CreateMaybeMessage<::LogicMapPb::Object>(Arena*);
template<> ::LogicMapPb::Object_logicpt* Arena::CreateMaybeMessage<::LogicMapPb::Object_logicpt>(Arena*);
template<> ::LogicMapPb::RoadSection* Arena::CreateMaybeMessage<::LogicMapPb::RoadSection>(Arena*);
template<> ::LogicMapPb::RoadSection_roadedge* Arena::CreateMaybeMessage<::LogicMapPb::RoadSection_roadedge>(Arena*);
template<> ::LogicMapPb::connectedLane* Arena::CreateMaybeMessage<::LogicMapPb::connectedLane>(Arena*);
template<> ::LogicMapPb::lane* Arena::CreateMaybeMessage<::LogicMapPb::lane>(Arena*);
template<> ::LogicMapPb::secIDtype* Arena::CreateMaybeMessage<::LogicMapPb::secIDtype>(Arena*);
template<> ::LogicMapPb::secTypeNode* Arena::CreateMaybeMessage<::LogicMapPb::secTypeNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LogicMapPb {

// ===================================================================

class secIDtype PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.secIDtype) */ {
 public:
  inline secIDtype() : secIDtype(nullptr) {};
  virtual ~secIDtype();

  secIDtype(const secIDtype& from);
  secIDtype(secIDtype&& from) noexcept
    : secIDtype() {
    *this = ::std::move(from);
  }

  inline secIDtype& operator=(const secIDtype& from) {
    CopyFrom(from);
    return *this;
  }
  inline secIDtype& operator=(secIDtype&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const secIDtype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const secIDtype* internal_default_instance() {
    return reinterpret_cast<const secIDtype*>(
               &_secIDtype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(secIDtype& a, secIDtype& b) {
    a.Swap(&b);
  }
  inline void Swap(secIDtype* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(secIDtype* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline secIDtype* New() const final {
    return CreateMaybeMessage<secIDtype>(nullptr);
  }

  secIDtype* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<secIDtype>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const secIDtype& from);
  void MergeFrom(const secIDtype& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(secIDtype* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.secIDtype";
  }
  protected:
  explicit secIDtype(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecIdFieldNumber = 1,
    kSecTypeFieldNumber = 2,
  };
  // int32 sec_id = 1;
  void clear_sec_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sec_id() const;
  void set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec_id() const;
  void _internal_set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec_type = 2;
  void clear_sec_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sec_type() const;
  void set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec_type() const;
  void _internal_set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.secIDtype)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Node) */ {
 public:
  inline Node() : Node(nullptr) {};
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecIdTypesFieldNumber = 3,
    kPosiFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .LogicMapPb.secIDtype sec_id_types = 3;
  int sec_id_types_size() const;
  private:
  int _internal_sec_id_types_size() const;
  public:
  void clear_sec_id_types();
  ::LogicMapPb::secIDtype* mutable_sec_id_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secIDtype >*
      mutable_sec_id_types();
  private:
  const ::LogicMapPb::secIDtype& _internal_sec_id_types(int index) const;
  ::LogicMapPb::secIDtype* _internal_add_sec_id_types();
  public:
  const ::LogicMapPb::secIDtype& sec_id_types(int index) const;
  ::LogicMapPb::secIDtype* add_sec_id_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secIDtype >&
      sec_id_types() const;

  // .SRprotobuf.Point3f posi = 4;
  bool has_posi() const;
  private:
  bool _internal_has_posi() const;
  public:
  void clear_posi();
  const ::SRprotobuf::Point3f& posi() const;
  ::SRprotobuf::Point3f* release_posi();
  ::SRprotobuf::Point3f* mutable_posi();
  void set_allocated_posi(::SRprotobuf::Point3f* posi);
  private:
  const ::SRprotobuf::Point3f& _internal_posi() const;
  ::SRprotobuf::Point3f* _internal_mutable_posi();
  public:
  void unsafe_arena_set_allocated_posi(
      ::SRprotobuf::Point3f* posi);
  ::SRprotobuf::Point3f* unsafe_arena_release_posi();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secIDtype > sec_id_types_;
  ::SRprotobuf::Point3f* posi_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class secTypeNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.secTypeNode) */ {
 public:
  inline secTypeNode() : secTypeNode(nullptr) {};
  virtual ~secTypeNode();

  secTypeNode(const secTypeNode& from);
  secTypeNode(secTypeNode&& from) noexcept
    : secTypeNode() {
    *this = ::std::move(from);
  }

  inline secTypeNode& operator=(const secTypeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline secTypeNode& operator=(secTypeNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const secTypeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const secTypeNode* internal_default_instance() {
    return reinterpret_cast<const secTypeNode*>(
               &_secTypeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(secTypeNode& a, secTypeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(secTypeNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(secTypeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline secTypeNode* New() const final {
    return CreateMaybeMessage<secTypeNode>(nullptr);
  }

  secTypeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<secTypeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const secTypeNode& from);
  void MergeFrom(const secTypeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(secTypeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.secTypeNode";
  }
  protected:
  explicit secTypeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecIdFieldNumber = 1,
    kSecTypeFieldNumber = 2,
    kNodeIdFieldNumber = 3,
  };
  // int32 sec_id = 1;
  void clear_sec_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sec_id() const;
  void set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec_id() const;
  void _internal_set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec_type = 2;
  void clear_sec_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sec_type() const;
  void set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec_type() const;
  void _internal_set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 node_id = 3;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.secTypeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class connectedLane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.connectedLane) */ {
 public:
  inline connectedLane() : connectedLane(nullptr) {};
  virtual ~connectedLane();

  connectedLane(const connectedLane& from);
  connectedLane(connectedLane&& from) noexcept
    : connectedLane() {
    *this = ::std::move(from);
  }

  inline connectedLane& operator=(const connectedLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline connectedLane& operator=(connectedLane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const connectedLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const connectedLane* internal_default_instance() {
    return reinterpret_cast<const connectedLane*>(
               &_connectedLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(connectedLane& a, connectedLane& b) {
    a.Swap(&b);
  }
  inline void Swap(connectedLane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(connectedLane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline connectedLane* New() const final {
    return CreateMaybeMessage<connectedLane>(nullptr);
  }

  connectedLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<connectedLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const connectedLane& from);
  void MergeFrom(const connectedLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(connectedLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.connectedLane";
  }
  protected:
  explicit connectedLane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationFieldNumber = 1,
    kSecIdFieldNumber = 2,
    kSecTypeFieldNumber = 3,
    kLaneIndexFieldNumber = 4,
  };
  // int32 relation = 1;
  void clear_relation();
  ::PROTOBUF_NAMESPACE_ID::int32 relation() const;
  void set_relation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relation() const;
  void _internal_set_relation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec_id = 2;
  void clear_sec_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sec_id() const;
  void set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec_id() const;
  void _internal_set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sec_type = 3;
  void clear_sec_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sec_type() const;
  void set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec_type() const;
  void _internal_set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lane_index = 4;
  void clear_lane_index();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_index() const;
  void set_lane_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_index() const;
  void _internal_set_lane_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.connectedLane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 relation_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class lane PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.lane) */ {
 public:
  inline lane() : lane(nullptr) {};
  virtual ~lane();

  lane(const lane& from);
  lane(lane&& from) noexcept
    : lane() {
    *this = ::std::move(from);
  }

  inline lane& operator=(const lane& from) {
    CopyFrom(from);
    return *this;
  }
  inline lane& operator=(lane&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const lane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lane* internal_default_instance() {
    return reinterpret_cast<const lane*>(
               &_lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(lane& a, lane& b) {
    a.Swap(&b);
  }
  inline void Swap(lane* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lane* New() const final {
    return CreateMaybeMessage<lane>(nullptr);
  }

  lane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lane& from);
  void MergeFrom(const lane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.lane";
  }
  protected:
  explicit lane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 6,
    kLeftsFieldNumber = 7,
    kRightsFieldNumber = 8,
    kAvpLineIdsFieldNumber = 10,
    kConnectedLanesFieldNumber = 11,
    kIndexFieldNumber = 1,
    kIsVirtualFieldNumber = 2,
    kDirFieldNumber = 3,
    kFromNodeIdFieldNumber = 4,
    kToNodeIdFieldNumber = 5,
    kCenterFieldNumber = 9,
  };
  // repeated int32 object_ids = 6;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_object_ids() const;
  void _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_object_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 object_ids(int index) const;
  void set_object_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_object_ids();

  // repeated int32 lefts = 7;
  int lefts_size() const;
  private:
  int _internal_lefts_size() const;
  public:
  void clear_lefts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lefts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_lefts() const;
  void _internal_add_lefts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_lefts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 lefts(int index) const;
  void set_lefts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_lefts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      lefts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_lefts();

  // repeated int32 rights = 8;
  int rights_size() const;
  private:
  int _internal_rights_size() const;
  public:
  void clear_rights();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_rights() const;
  void _internal_add_rights(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_rights();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 rights(int index) const;
  void set_rights(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_rights(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      rights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_rights();

  // repeated int32 avp_line_ids = 10;
  int avp_line_ids_size() const;
  private:
  int _internal_avp_line_ids_size() const;
  public:
  void clear_avp_line_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avp_line_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_avp_line_ids() const;
  void _internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_avp_line_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 avp_line_ids(int index) const;
  void set_avp_line_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      avp_line_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_avp_line_ids();

  // repeated .LogicMapPb.connectedLane connected_lanes = 11;
  int connected_lanes_size() const;
  private:
  int _internal_connected_lanes_size() const;
  public:
  void clear_connected_lanes();
  ::LogicMapPb::connectedLane* mutable_connected_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::connectedLane >*
      mutable_connected_lanes();
  private:
  const ::LogicMapPb::connectedLane& _internal_connected_lanes(int index) const;
  ::LogicMapPb::connectedLane* _internal_add_connected_lanes();
  public:
  const ::LogicMapPb::connectedLane& connected_lanes(int index) const;
  ::LogicMapPb::connectedLane* add_connected_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::connectedLane >&
      connected_lanes() const;

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_virtual = 2;
  void clear_is_virtual();
  ::PROTOBUF_NAMESPACE_ID::int32 is_virtual() const;
  void set_is_virtual(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_virtual() const;
  void _internal_set_is_virtual(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dir = 3;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::int32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dir() const;
  void _internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from_node_id = 4;
  void clear_from_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_node_id() const;
  void set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_node_id() const;
  void _internal_set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_node_id = 5;
  void clear_to_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_node_id() const;
  void set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_node_id() const;
  void _internal_set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 center = 9;
  void clear_center();
  ::PROTOBUF_NAMESPACE_ID::int32 center() const;
  void set_center(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_center() const;
  void _internal_set_center(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.lane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > object_ids_;
  mutable std::atomic<int> _object_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > lefts_;
  mutable std::atomic<int> _lefts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > rights_;
  mutable std::atomic<int> _rights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > avp_line_ids_;
  mutable std::atomic<int> _avp_line_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::connectedLane > connected_lanes_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_virtual_;
  ::PROTOBUF_NAMESPACE_ID::int32 dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 center_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class RoadSection_roadedge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.RoadSection.roadedge) */ {
 public:
  inline RoadSection_roadedge() : RoadSection_roadedge(nullptr) {};
  virtual ~RoadSection_roadedge();

  RoadSection_roadedge(const RoadSection_roadedge& from);
  RoadSection_roadedge(RoadSection_roadedge&& from) noexcept
    : RoadSection_roadedge() {
    *this = ::std::move(from);
  }

  inline RoadSection_roadedge& operator=(const RoadSection_roadedge& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSection_roadedge& operator=(RoadSection_roadedge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadSection_roadedge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadSection_roadedge* internal_default_instance() {
    return reinterpret_cast<const RoadSection_roadedge*>(
               &_RoadSection_roadedge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoadSection_roadedge& a, RoadSection_roadedge& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSection_roadedge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSection_roadedge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadSection_roadedge* New() const final {
    return CreateMaybeMessage<RoadSection_roadedge>(nullptr);
  }

  RoadSection_roadedge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadSection_roadedge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadSection_roadedge& from);
  void MergeFrom(const RoadSection_roadedge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSection_roadedge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.RoadSection.roadedge";
  }
  protected:
  explicit RoadSection_roadedge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIsLeftFieldNumber = 3,
    kHeightFieldNumber = 4,
    kLineIdFieldNumber = 5,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_left = 3;
  void clear_is_left();
  ::PROTOBUF_NAMESPACE_ID::int32 is_left() const;
  void set_is_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_left() const;
  void _internal_set_is_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float height = 4;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // int32 line_id = 5;
  void clear_line_id();
  ::PROTOBUF_NAMESPACE_ID::int32 line_id() const;
  void set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_id() const;
  void _internal_set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.RoadSection.roadedge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_left_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class RoadSection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.RoadSection) */ {
 public:
  inline RoadSection() : RoadSection(nullptr) {};
  virtual ~RoadSection();

  RoadSection(const RoadSection& from);
  RoadSection(RoadSection&& from) noexcept
    : RoadSection() {
    *this = ::std::move(from);
  }

  inline RoadSection& operator=(const RoadSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSection& operator=(RoadSection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadSection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadSection* internal_default_instance() {
    return reinterpret_cast<const RoadSection*>(
               &_RoadSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoadSection& a, RoadSection& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadSection* New() const final {
    return CreateMaybeMessage<RoadSection>(nullptr);
  }

  RoadSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadSection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadSection& from);
  void MergeFrom(const RoadSection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.RoadSection";
  }
  protected:
  explicit RoadSection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoadSection_roadedge roadedge;

  // accessors -------------------------------------------------------

  enum : int {
    kWayNodesFieldNumber = 6,
    kSecTypeNodesFieldNumber = 9,
    kObjectIdsFieldNumber = 10,
    kLanesFieldNumber = 11,
    kJointIdsFieldNumber = 13,
    kRoadedgesFieldNumber = 14,
    kAvpLineIdsFieldNumber = 15,
    kFloorLevelFieldNumber = 16,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLengthFieldNumber = 3,
    kNodeAFieldNumber = 4,
    kNodeBFieldNumber = 5,
    kConfidenceFieldNumber = 7,
    kAvailableFieldNumber = 8,
    kLinkIdFieldNumber = 12,
  };
  // repeated .SRprotobuf.Point3f way_nodes = 6;
  int way_nodes_size() const;
  private:
  int _internal_way_nodes_size() const;
  public:
  void clear_way_nodes();
  ::SRprotobuf::Point3f* mutable_way_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
      mutable_way_nodes();
  private:
  const ::SRprotobuf::Point3f& _internal_way_nodes(int index) const;
  ::SRprotobuf::Point3f* _internal_add_way_nodes();
  public:
  const ::SRprotobuf::Point3f& way_nodes(int index) const;
  ::SRprotobuf::Point3f* add_way_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
      way_nodes() const;

  // repeated .LogicMapPb.secTypeNode sec_type_nodes = 9;
  int sec_type_nodes_size() const;
  private:
  int _internal_sec_type_nodes_size() const;
  public:
  void clear_sec_type_nodes();
  ::LogicMapPb::secTypeNode* mutable_sec_type_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >*
      mutable_sec_type_nodes();
  private:
  const ::LogicMapPb::secTypeNode& _internal_sec_type_nodes(int index) const;
  ::LogicMapPb::secTypeNode* _internal_add_sec_type_nodes();
  public:
  const ::LogicMapPb::secTypeNode& sec_type_nodes(int index) const;
  ::LogicMapPb::secTypeNode* add_sec_type_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >&
      sec_type_nodes() const;

  // repeated int32 object_ids = 10;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_object_ids() const;
  void _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_object_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 object_ids(int index) const;
  void set_object_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_object_ids();

  // repeated .LogicMapPb.lane lanes = 11;
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  ::LogicMapPb::lane* mutable_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >*
      mutable_lanes();
  private:
  const ::LogicMapPb::lane& _internal_lanes(int index) const;
  ::LogicMapPb::lane* _internal_add_lanes();
  public:
  const ::LogicMapPb::lane& lanes(int index) const;
  ::LogicMapPb::lane* add_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >&
      lanes() const;

  // repeated int32 joint_ids = 13;
  int joint_ids_size() const;
  private:
  int _internal_joint_ids_size() const;
  public:
  void clear_joint_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joint_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_joint_ids() const;
  void _internal_add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_joint_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 joint_ids(int index) const;
  void set_joint_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      joint_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_joint_ids();

  // repeated .LogicMapPb.RoadSection.roadedge roadedges = 14;
  int roadedges_size() const;
  private:
  int _internal_roadedges_size() const;
  public:
  void clear_roadedges();
  ::LogicMapPb::RoadSection_roadedge* mutable_roadedges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection_roadedge >*
      mutable_roadedges();
  private:
  const ::LogicMapPb::RoadSection_roadedge& _internal_roadedges(int index) const;
  ::LogicMapPb::RoadSection_roadedge* _internal_add_roadedges();
  public:
  const ::LogicMapPb::RoadSection_roadedge& roadedges(int index) const;
  ::LogicMapPb::RoadSection_roadedge* add_roadedges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection_roadedge >&
      roadedges() const;

  // repeated int32 avp_line_ids = 15;
  int avp_line_ids_size() const;
  private:
  int _internal_avp_line_ids_size() const;
  public:
  void clear_avp_line_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avp_line_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_avp_line_ids() const;
  void _internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_avp_line_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 avp_line_ids(int index) const;
  void set_avp_line_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      avp_line_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_avp_line_ids();

  // .SRprotobuf.FloorLevel floor_level = 16;
  bool has_floor_level() const;
  private:
  bool _internal_has_floor_level() const;
  public:
  void clear_floor_level();
  const ::SRprotobuf::FloorLevel& floor_level() const;
  ::SRprotobuf::FloorLevel* release_floor_level();
  ::SRprotobuf::FloorLevel* mutable_floor_level();
  void set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level);
  private:
  const ::SRprotobuf::FloorLevel& _internal_floor_level() const;
  ::SRprotobuf::FloorLevel* _internal_mutable_floor_level();
  public:
  void unsafe_arena_set_allocated_floor_level(
      ::SRprotobuf::FloorLevel* floor_level);
  ::SRprotobuf::FloorLevel* unsafe_arena_release_floor_level();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float length = 3;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // int32 node_A = 4;
  void clear_node_a();
  ::PROTOBUF_NAMESPACE_ID::int32 node_a() const;
  void set_node_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_a() const;
  void _internal_set_node_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 node_B = 5;
  void clear_node_b();
  ::PROTOBUF_NAMESPACE_ID::int32 node_b() const;
  void set_node_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_node_b() const;
  void _internal_set_node_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float confidence = 7;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 available = 8;
  void clear_available();
  ::PROTOBUF_NAMESPACE_ID::int32 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available() const;
  void _internal_set_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 link_id = 12;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::int32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.RoadSection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f > way_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode > sec_type_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > object_ids_;
  mutable std::atomic<int> _object_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane > lanes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > joint_ids_;
  mutable std::atomic<int> _joint_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection_roadedge > roadedges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > avp_line_ids_;
  mutable std::atomic<int> _avp_line_ids_cached_byte_size_;
  ::SRprotobuf::FloorLevel* floor_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float length_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_a_;
  ::PROTOBUF_NAMESPACE_ID::int32 node_b_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Line_equation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Line.equation) */ {
 public:
  inline Line_equation() : Line_equation(nullptr) {};
  virtual ~Line_equation();

  Line_equation(const Line_equation& from);
  Line_equation(Line_equation&& from) noexcept
    : Line_equation() {
    *this = ::std::move(from);
  }

  inline Line_equation& operator=(const Line_equation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line_equation& operator=(Line_equation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line_equation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line_equation* internal_default_instance() {
    return reinterpret_cast<const Line_equation*>(
               &_Line_equation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Line_equation& a, Line_equation& b) {
    a.Swap(&b);
  }
  inline void Swap(Line_equation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line_equation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line_equation* New() const final {
    return CreateMaybeMessage<Line_equation>(nullptr);
  }

  Line_equation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line_equation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line_equation& from);
  void MergeFrom(const Line_equation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line_equation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Line.equation";
  }
  protected:
  explicit Line_equation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogicMapPb.Line.equation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Line_curve PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Line.curve) */ {
 public:
  inline Line_curve() : Line_curve(nullptr) {};
  virtual ~Line_curve();

  Line_curve(const Line_curve& from);
  Line_curve(Line_curve&& from) noexcept
    : Line_curve() {
    *this = ::std::move(from);
  }

  inline Line_curve& operator=(const Line_curve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line_curve& operator=(Line_curve&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line_curve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line_curve* internal_default_instance() {
    return reinterpret_cast<const Line_curve*>(
               &_Line_curve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Line_curve& a, Line_curve& b) {
    a.Swap(&b);
  }
  inline void Swap(Line_curve* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line_curve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line_curve* New() const final {
    return CreateMaybeMessage<Line_curve>(nullptr);
  }

  Line_curve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line_curve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line_curve& from);
  void MergeFrom(const Line_curve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line_curve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Line.curve";
  }
  protected:
  explicit Line_curve(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurvePtsFieldNumber = 5,
    kEquaFieldNumber = 6,
    kIndexFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLengthFieldNumber = 3,
    kConfidenceFieldNumber = 4,
  };
  // repeated .SRprotobuf.Point3f curve_pts = 5;
  int curve_pts_size() const;
  private:
  int _internal_curve_pts_size() const;
  public:
  void clear_curve_pts();
  ::SRprotobuf::Point3f* mutable_curve_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
      mutable_curve_pts();
  private:
  const ::SRprotobuf::Point3f& _internal_curve_pts(int index) const;
  ::SRprotobuf::Point3f* _internal_add_curve_pts();
  public:
  const ::SRprotobuf::Point3f& curve_pts(int index) const;
  ::SRprotobuf::Point3f* add_curve_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
      curve_pts() const;

  // .LogicMapPb.Line.equation equa = 6;
  bool has_equa() const;
  private:
  bool _internal_has_equa() const;
  public:
  void clear_equa();
  const ::LogicMapPb::Line_equation& equa() const;
  ::LogicMapPb::Line_equation* release_equa();
  ::LogicMapPb::Line_equation* mutable_equa();
  void set_allocated_equa(::LogicMapPb::Line_equation* equa);
  private:
  const ::LogicMapPb::Line_equation& _internal_equa() const;
  ::LogicMapPb::Line_equation* _internal_mutable_equa();
  public:
  void unsafe_arena_set_allocated_equa(
      ::LogicMapPb::Line_equation* equa);
  ::LogicMapPb::Line_equation* unsafe_arena_release_equa();

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float length = 3;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.Line.curve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f > curve_pts_;
  ::LogicMapPb::Line_equation* equa_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float length_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Line PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Line) */ {
 public:
  inline Line() : Line(nullptr) {};
  virtual ~Line();

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(nullptr);
  }

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Line_equation equation;
  typedef Line_curve curve;

  // accessors -------------------------------------------------------

  enum : int {
    kCurvesFieldNumber = 5,
    kSecIdTypeFieldNumber = 6,
    kIdFieldNumber = 1,
    kFromNodeIdFieldNumber = 2,
    kToNodeIdFieldNumber = 3,
    kLengthFieldNumber = 4,
  };
  // repeated .LogicMapPb.Line.curve curves = 5;
  int curves_size() const;
  private:
  int _internal_curves_size() const;
  public:
  void clear_curves();
  ::LogicMapPb::Line_curve* mutable_curves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line_curve >*
      mutable_curves();
  private:
  const ::LogicMapPb::Line_curve& _internal_curves(int index) const;
  ::LogicMapPb::Line_curve* _internal_add_curves();
  public:
  const ::LogicMapPb::Line_curve& curves(int index) const;
  ::LogicMapPb::Line_curve* add_curves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line_curve >&
      curves() const;

  // .LogicMapPb.secIDtype sec_id_type = 6;
  bool has_sec_id_type() const;
  private:
  bool _internal_has_sec_id_type() const;
  public:
  void clear_sec_id_type();
  const ::LogicMapPb::secIDtype& sec_id_type() const;
  ::LogicMapPb::secIDtype* release_sec_id_type();
  ::LogicMapPb::secIDtype* mutable_sec_id_type();
  void set_allocated_sec_id_type(::LogicMapPb::secIDtype* sec_id_type);
  private:
  const ::LogicMapPb::secIDtype& _internal_sec_id_type() const;
  ::LogicMapPb::secIDtype* _internal_mutable_sec_id_type();
  public:
  void unsafe_arena_set_allocated_sec_id_type(
      ::LogicMapPb::secIDtype* sec_id_type);
  ::LogicMapPb::secIDtype* unsafe_arena_release_sec_id_type();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from_node_id = 2;
  void clear_from_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_node_id() const;
  void set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_node_id() const;
  void _internal_set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to_node_id = 3;
  void clear_to_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_node_id() const;
  void set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_node_id() const;
  void _internal_set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float length = 4;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line_curve > curves_;
  ::LogicMapPb::secIDtype* sec_id_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_node_id_;
  float length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Intersection_edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Intersection.edge) */ {
 public:
  inline Intersection_edge() : Intersection_edge(nullptr) {};
  virtual ~Intersection_edge();

  Intersection_edge(const Intersection_edge& from);
  Intersection_edge(Intersection_edge&& from) noexcept
    : Intersection_edge() {
    *this = ::std::move(from);
  }

  inline Intersection_edge& operator=(const Intersection_edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intersection_edge& operator=(Intersection_edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Intersection_edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intersection_edge* internal_default_instance() {
    return reinterpret_cast<const Intersection_edge*>(
               &_Intersection_edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Intersection_edge& a, Intersection_edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Intersection_edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intersection_edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Intersection_edge* New() const final {
    return CreateMaybeMessage<Intersection_edge>(nullptr);
  }

  Intersection_edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Intersection_edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Intersection_edge& from);
  void MergeFrom(const Intersection_edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intersection_edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Intersection.edge";
  }
  protected:
  explicit Intersection_edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
    kDirFieldNumber = 4,
    kLinkIdFieldNumber = 6,
    kDirectionFieldNumber = 7,
  };
  // repeated int32 pts = 5;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pts() const;
  void _internal_add_pts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pts(int index) const;
  void set_pts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pts();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 subtype = 3;
  void clear_subtype();
  ::PROTOBUF_NAMESPACE_ID::int32 subtype() const;
  void set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subtype() const;
  void _internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dir = 4;
  void clear_dir();
  ::PROTOBUF_NAMESPACE_ID::int32 dir() const;
  void set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dir() const;
  void _internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 link_id = 6;
  void clear_link_id();
  ::PROTOBUF_NAMESPACE_ID::int32 link_id() const;
  void set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_link_id() const;
  void _internal_set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float direction = 7;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.Intersection.edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pts_;
  mutable std::atomic<int> _pts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 subtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 link_id_;
  float direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Intersection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Intersection) */ {
 public:
  inline Intersection() : Intersection(nullptr) {};
  virtual ~Intersection();

  Intersection(const Intersection& from);
  Intersection(Intersection&& from) noexcept
    : Intersection() {
    *this = ::std::move(from);
  }

  inline Intersection& operator=(const Intersection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Intersection& operator=(Intersection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Intersection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intersection* internal_default_instance() {
    return reinterpret_cast<const Intersection*>(
               &_Intersection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Intersection& a, Intersection& b) {
    a.Swap(&b);
  }
  inline void Swap(Intersection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Intersection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Intersection* New() const final {
    return CreateMaybeMessage<Intersection>(nullptr);
  }

  Intersection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Intersection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Intersection& from);
  void MergeFrom(const Intersection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intersection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Intersection";
  }
  protected:
  explicit Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Intersection_edge edge;

  // accessors -------------------------------------------------------

  enum : int {
    kJointIdsFieldNumber = 3,
    kSecTypeNodesFieldNumber = 6,
    kObjectIdsFieldNumber = 7,
    kVertexesFieldNumber = 8,
    kEdgesFieldNumber = 9,
    kLanesFieldNumber = 10,
    kAvpLineIdsFieldNumber = 11,
    kFloorLevelFieldNumber = 12,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLocInsecIdFieldNumber = 4,
    kAvailableFieldNumber = 5,
  };
  // repeated int32 joint_ids = 3;
  int joint_ids_size() const;
  private:
  int _internal_joint_ids_size() const;
  public:
  void clear_joint_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joint_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_joint_ids() const;
  void _internal_add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_joint_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 joint_ids(int index) const;
  void set_joint_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      joint_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_joint_ids();

  // repeated .LogicMapPb.secTypeNode sec_type_nodes = 6;
  int sec_type_nodes_size() const;
  private:
  int _internal_sec_type_nodes_size() const;
  public:
  void clear_sec_type_nodes();
  ::LogicMapPb::secTypeNode* mutable_sec_type_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >*
      mutable_sec_type_nodes();
  private:
  const ::LogicMapPb::secTypeNode& _internal_sec_type_nodes(int index) const;
  ::LogicMapPb::secTypeNode* _internal_add_sec_type_nodes();
  public:
  const ::LogicMapPb::secTypeNode& sec_type_nodes(int index) const;
  ::LogicMapPb::secTypeNode* add_sec_type_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >&
      sec_type_nodes() const;

  // repeated int32 object_ids = 7;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_object_ids() const;
  void _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_object_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 object_ids(int index) const;
  void set_object_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_object_ids();

  // repeated .SRprotobuf.Point3f vertexes = 8;
  int vertexes_size() const;
  private:
  int _internal_vertexes_size() const;
  public:
  void clear_vertexes();
  ::SRprotobuf::Point3f* mutable_vertexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
      mutable_vertexes();
  private:
  const ::SRprotobuf::Point3f& _internal_vertexes(int index) const;
  ::SRprotobuf::Point3f* _internal_add_vertexes();
  public:
  const ::SRprotobuf::Point3f& vertexes(int index) const;
  ::SRprotobuf::Point3f* add_vertexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
      vertexes() const;

  // repeated .LogicMapPb.Intersection.edge edges = 9;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::LogicMapPb::Intersection_edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection_edge >*
      mutable_edges();
  private:
  const ::LogicMapPb::Intersection_edge& _internal_edges(int index) const;
  ::LogicMapPb::Intersection_edge* _internal_add_edges();
  public:
  const ::LogicMapPb::Intersection_edge& edges(int index) const;
  ::LogicMapPb::Intersection_edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection_edge >&
      edges() const;

  // repeated .LogicMapPb.lane lanes = 10;
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  ::LogicMapPb::lane* mutable_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >*
      mutable_lanes();
  private:
  const ::LogicMapPb::lane& _internal_lanes(int index) const;
  ::LogicMapPb::lane* _internal_add_lanes();
  public:
  const ::LogicMapPb::lane& lanes(int index) const;
  ::LogicMapPb::lane* add_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >&
      lanes() const;

  // repeated int32 avp_line_ids = 11;
  int avp_line_ids_size() const;
  private:
  int _internal_avp_line_ids_size() const;
  public:
  void clear_avp_line_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avp_line_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_avp_line_ids() const;
  void _internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_avp_line_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 avp_line_ids(int index) const;
  void set_avp_line_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      avp_line_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_avp_line_ids();

  // .SRprotobuf.FloorLevel floor_level = 12;
  bool has_floor_level() const;
  private:
  bool _internal_has_floor_level() const;
  public:
  void clear_floor_level();
  const ::SRprotobuf::FloorLevel& floor_level() const;
  ::SRprotobuf::FloorLevel* release_floor_level();
  ::SRprotobuf::FloorLevel* mutable_floor_level();
  void set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level);
  private:
  const ::SRprotobuf::FloorLevel& _internal_floor_level() const;
  ::SRprotobuf::FloorLevel* _internal_mutable_floor_level();
  public:
  void unsafe_arena_set_allocated_floor_level(
      ::SRprotobuf::FloorLevel* floor_level);
  ::SRprotobuf::FloorLevel* unsafe_arena_release_floor_level();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 loc_insec_id = 4;
  void clear_loc_insec_id();
  ::PROTOBUF_NAMESPACE_ID::int32 loc_insec_id() const;
  void set_loc_insec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loc_insec_id() const;
  void _internal_set_loc_insec_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 available = 5;
  void clear_available();
  ::PROTOBUF_NAMESPACE_ID::int32 available() const;
  void set_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_available() const;
  void _internal_set_available(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.Intersection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > joint_ids_;
  mutable std::atomic<int> _joint_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode > sec_type_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > object_ids_;
  mutable std::atomic<int> _object_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f > vertexes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection_edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane > lanes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > avp_line_ids_;
  mutable std::atomic<int> _avp_line_ids_cached_byte_size_;
  ::SRprotobuf::FloorLevel* floor_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 loc_insec_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 available_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Object_logicpt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Object.logicpt) */ {
 public:
  inline Object_logicpt() : Object_logicpt(nullptr) {};
  virtual ~Object_logicpt();

  Object_logicpt(const Object_logicpt& from);
  Object_logicpt(Object_logicpt&& from) noexcept
    : Object_logicpt() {
    *this = ::std::move(from);
  }

  inline Object_logicpt& operator=(const Object_logicpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_logicpt& operator=(Object_logicpt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object_logicpt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object_logicpt* internal_default_instance() {
    return reinterpret_cast<const Object_logicpt*>(
               &_Object_logicpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Object_logicpt& a, Object_logicpt& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_logicpt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_logicpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_logicpt* New() const final {
    return CreateMaybeMessage<Object_logicpt>(nullptr);
  }

  Object_logicpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_logicpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_logicpt& from);
  void MergeFrom(const Object_logicpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_logicpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Object.logicpt";
  }
  protected:
  explicit Object_logicpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogicMapPb.Object.logicpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.Object) */ {
 public:
  inline Object() : Object(nullptr) {};
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Object_logicpt logicpt;

  // accessors -------------------------------------------------------

  enum : int {
    kPtsFieldNumber = 5,
    kLogicptsFieldNumber = 6,
    kSecIdTypeFieldNumber = 4,
    kIdFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated .SRprotobuf.Point3f pts = 5;
  int pts_size() const;
  private:
  int _internal_pts_size() const;
  public:
  void clear_pts();
  ::SRprotobuf::Point3f* mutable_pts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
      mutable_pts();
  private:
  const ::SRprotobuf::Point3f& _internal_pts(int index) const;
  ::SRprotobuf::Point3f* _internal_add_pts();
  public:
  const ::SRprotobuf::Point3f& pts(int index) const;
  ::SRprotobuf::Point3f* add_pts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
      pts() const;

  // repeated .LogicMapPb.Object.logicpt logicpts = 6;
  int logicpts_size() const;
  private:
  int _internal_logicpts_size() const;
  public:
  void clear_logicpts();
  ::LogicMapPb::Object_logicpt* mutable_logicpts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object_logicpt >*
      mutable_logicpts();
  private:
  const ::LogicMapPb::Object_logicpt& _internal_logicpts(int index) const;
  ::LogicMapPb::Object_logicpt* _internal_add_logicpts();
  public:
  const ::LogicMapPb::Object_logicpt& logicpts(int index) const;
  ::LogicMapPb::Object_logicpt* add_logicpts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object_logicpt >&
      logicpts() const;

  // .LogicMapPb.secIDtype sec_id_type = 4;
  bool has_sec_id_type() const;
  private:
  bool _internal_has_sec_id_type() const;
  public:
  void clear_sec_id_type();
  const ::LogicMapPb::secIDtype& sec_id_type() const;
  ::LogicMapPb::secIDtype* release_sec_id_type();
  ::LogicMapPb::secIDtype* mutable_sec_id_type();
  void set_allocated_sec_id_type(::LogicMapPb::secIDtype* sec_id_type);
  private:
  const ::LogicMapPb::secIDtype& _internal_sec_id_type() const;
  ::LogicMapPb::secIDtype* _internal_mutable_sec_id_type();
  public:
  void unsafe_arena_set_allocated_sec_id_type(
      ::LogicMapPb::secIDtype* sec_id_type);
  ::LogicMapPb::secIDtype* unsafe_arena_release_sec_id_type();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogicMapPb.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f > pts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object_logicpt > logicpts_;
  ::LogicMapPb::secIDtype* sec_id_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// -------------------------------------------------------------------

class LogicMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogicMapPb.LogicMap) */ {
 public:
  inline LogicMap() : LogicMap(nullptr) {};
  virtual ~LogicMap();

  LogicMap(const LogicMap& from);
  LogicMap(LogicMap&& from) noexcept
    : LogicMap() {
    *this = ::std::move(from);
  }

  inline LogicMap& operator=(const LogicMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicMap& operator=(LogicMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicMap* internal_default_instance() {
    return reinterpret_cast<const LogicMap*>(
               &_LogicMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LogicMap& a, LogicMap& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicMap* New() const final {
    return CreateMaybeMessage<LogicMap>(nullptr);
  }

  LogicMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicMap& from);
  void MergeFrom(const LogicMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogicMapPb.LogicMap";
  }
  protected:
  explicit LogicMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2flogic_5fmap_2eproto);
    return ::descriptor_table_proto_5fap_2flogic_5fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kRoadSectionsFieldNumber = 2,
    kLinesFieldNumber = 3,
    kIntersectionsFieldNumber = 4,
    kObjectsFieldNumber = 5,
  };
  // repeated .LogicMapPb.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::LogicMapPb::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Node >*
      mutable_nodes();
  private:
  const ::LogicMapPb::Node& _internal_nodes(int index) const;
  ::LogicMapPb::Node* _internal_add_nodes();
  public:
  const ::LogicMapPb::Node& nodes(int index) const;
  ::LogicMapPb::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Node >&
      nodes() const;

  // repeated .LogicMapPb.RoadSection roadSections = 2;
  int roadsections_size() const;
  private:
  int _internal_roadsections_size() const;
  public:
  void clear_roadsections();
  ::LogicMapPb::RoadSection* mutable_roadsections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection >*
      mutable_roadsections();
  private:
  const ::LogicMapPb::RoadSection& _internal_roadsections(int index) const;
  ::LogicMapPb::RoadSection* _internal_add_roadsections();
  public:
  const ::LogicMapPb::RoadSection& roadsections(int index) const;
  ::LogicMapPb::RoadSection* add_roadsections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection >&
      roadsections() const;

  // repeated .LogicMapPb.Line lines = 3;
  int lines_size() const;
  private:
  int _internal_lines_size() const;
  public:
  void clear_lines();
  ::LogicMapPb::Line* mutable_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line >*
      mutable_lines();
  private:
  const ::LogicMapPb::Line& _internal_lines(int index) const;
  ::LogicMapPb::Line* _internal_add_lines();
  public:
  const ::LogicMapPb::Line& lines(int index) const;
  ::LogicMapPb::Line* add_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line >&
      lines() const;

  // repeated .LogicMapPb.Intersection intersections = 4;
  int intersections_size() const;
  private:
  int _internal_intersections_size() const;
  public:
  void clear_intersections();
  ::LogicMapPb::Intersection* mutable_intersections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection >*
      mutable_intersections();
  private:
  const ::LogicMapPb::Intersection& _internal_intersections(int index) const;
  ::LogicMapPb::Intersection* _internal_add_intersections();
  public:
  const ::LogicMapPb::Intersection& intersections(int index) const;
  ::LogicMapPb::Intersection* add_intersections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection >&
      intersections() const;

  // repeated .LogicMapPb.Object objects = 5;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::LogicMapPb::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object >*
      mutable_objects();
  private:
  const ::LogicMapPb::Object& _internal_objects(int index) const;
  ::LogicMapPb::Object* _internal_add_objects();
  public:
  const ::LogicMapPb::Object& objects(int index) const;
  ::LogicMapPb::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:LogicMapPb.LogicMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection > roadsections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line > lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection > intersections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object > objects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2flogic_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// secIDtype

// int32 sec_id = 1;
inline void secIDtype::clear_sec_id() {
  sec_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secIDtype::_internal_sec_id() const {
  return sec_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secIDtype::sec_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.secIDtype.sec_id)
  return _internal_sec_id();
}
inline void secIDtype::_internal_set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_id_ = value;
}
inline void secIDtype::set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.secIDtype.sec_id)
}

// int32 sec_type = 2;
inline void secIDtype::clear_sec_type() {
  sec_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secIDtype::_internal_sec_type() const {
  return sec_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secIDtype::sec_type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.secIDtype.sec_type)
  return _internal_sec_type();
}
inline void secIDtype::_internal_set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_type_ = value;
}
inline void secIDtype::set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.secIDtype.sec_type)
}

// -------------------------------------------------------------------

// Node

// int32 id = 1;
inline void Node::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Node::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Node.id)
}

// int32 type = 2;
inline void Node::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Node.type)
  return _internal_type();
}
inline void Node::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Node::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Node.type)
}

// repeated .LogicMapPb.secIDtype sec_id_types = 3;
inline int Node::_internal_sec_id_types_size() const {
  return sec_id_types_.size();
}
inline int Node::sec_id_types_size() const {
  return _internal_sec_id_types_size();
}
inline void Node::clear_sec_id_types() {
  sec_id_types_.Clear();
}
inline ::LogicMapPb::secIDtype* Node::mutable_sec_id_types(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Node.sec_id_types)
  return sec_id_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secIDtype >*
Node::mutable_sec_id_types() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Node.sec_id_types)
  return &sec_id_types_;
}
inline const ::LogicMapPb::secIDtype& Node::_internal_sec_id_types(int index) const {
  return sec_id_types_.Get(index);
}
inline const ::LogicMapPb::secIDtype& Node::sec_id_types(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Node.sec_id_types)
  return _internal_sec_id_types(index);
}
inline ::LogicMapPb::secIDtype* Node::_internal_add_sec_id_types() {
  return sec_id_types_.Add();
}
inline ::LogicMapPb::secIDtype* Node::add_sec_id_types() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Node.sec_id_types)
  return _internal_add_sec_id_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secIDtype >&
Node::sec_id_types() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Node.sec_id_types)
  return sec_id_types_;
}

// .SRprotobuf.Point3f posi = 4;
inline bool Node::_internal_has_posi() const {
  return this != internal_default_instance() && posi_ != nullptr;
}
inline bool Node::has_posi() const {
  return _internal_has_posi();
}
inline const ::SRprotobuf::Point3f& Node::_internal_posi() const {
  const ::SRprotobuf::Point3f* p = posi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Node::posi() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Node.posi)
  return _internal_posi();
}
inline void Node::unsafe_arena_set_allocated_posi(
    ::SRprotobuf::Point3f* posi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posi_);
  }
  posi_ = posi;
  if (posi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LogicMapPb.Node.posi)
}
inline ::SRprotobuf::Point3f* Node::release_posi() {
  auto temp = unsafe_arena_release_posi();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Node::unsafe_arena_release_posi() {
  // @@protoc_insertion_point(field_release:LogicMapPb.Node.posi)
  
  ::SRprotobuf::Point3f* temp = posi_;
  posi_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Node::_internal_mutable_posi() {
  
  if (posi_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    posi_ = p;
  }
  return posi_;
}
inline ::SRprotobuf::Point3f* Node::mutable_posi() {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Node.posi)
  return _internal_mutable_posi();
}
inline void Node::set_allocated_posi(::SRprotobuf::Point3f* posi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posi_);
  }
  if (posi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posi)->GetArena();
    if (message_arena != submessage_arena) {
      posi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posi, submessage_arena);
    }
    
  } else {
    
  }
  posi_ = posi;
  // @@protoc_insertion_point(field_set_allocated:LogicMapPb.Node.posi)
}

// -------------------------------------------------------------------

// secTypeNode

// int32 sec_id = 1;
inline void secTypeNode::clear_sec_id() {
  sec_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secTypeNode::_internal_sec_id() const {
  return sec_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secTypeNode::sec_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.secTypeNode.sec_id)
  return _internal_sec_id();
}
inline void secTypeNode::_internal_set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_id_ = value;
}
inline void secTypeNode::set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.secTypeNode.sec_id)
}

// int32 sec_type = 2;
inline void secTypeNode::clear_sec_type() {
  sec_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secTypeNode::_internal_sec_type() const {
  return sec_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secTypeNode::sec_type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.secTypeNode.sec_type)
  return _internal_sec_type();
}
inline void secTypeNode::_internal_set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_type_ = value;
}
inline void secTypeNode::set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.secTypeNode.sec_type)
}

// int32 node_id = 3;
inline void secTypeNode::clear_node_id() {
  node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secTypeNode::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 secTypeNode::node_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.secTypeNode.node_id)
  return _internal_node_id();
}
inline void secTypeNode::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_id_ = value;
}
inline void secTypeNode::set_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.secTypeNode.node_id)
}

// -------------------------------------------------------------------

// connectedLane

// int32 relation = 1;
inline void connectedLane::clear_relation() {
  relation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::_internal_relation() const {
  return relation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::relation() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.connectedLane.relation)
  return _internal_relation();
}
inline void connectedLane::_internal_set_relation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  relation_ = value;
}
inline void connectedLane::set_relation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relation(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.connectedLane.relation)
}

// int32 sec_id = 2;
inline void connectedLane::clear_sec_id() {
  sec_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::_internal_sec_id() const {
  return sec_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::sec_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.connectedLane.sec_id)
  return _internal_sec_id();
}
inline void connectedLane::_internal_set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_id_ = value;
}
inline void connectedLane::set_sec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.connectedLane.sec_id)
}

// int32 sec_type = 3;
inline void connectedLane::clear_sec_type() {
  sec_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::_internal_sec_type() const {
  return sec_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::sec_type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.connectedLane.sec_type)
  return _internal_sec_type();
}
inline void connectedLane::_internal_set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_type_ = value;
}
inline void connectedLane::set_sec_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.connectedLane.sec_type)
}

// int32 lane_index = 4;
inline void connectedLane::clear_lane_index() {
  lane_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::_internal_lane_index() const {
  return lane_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 connectedLane::lane_index() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.connectedLane.lane_index)
  return _internal_lane_index();
}
inline void connectedLane::_internal_set_lane_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lane_index_ = value;
}
inline void connectedLane::set_lane_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_index(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.connectedLane.lane_index)
}

// -------------------------------------------------------------------

// lane

// int32 index = 1;
inline void lane::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::index() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.index)
  return _internal_index();
}
inline void lane::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void lane::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.index)
}

// int32 is_virtual = 2;
inline void lane::clear_is_virtual() {
  is_virtual_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_is_virtual() const {
  return is_virtual_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::is_virtual() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.is_virtual)
  return _internal_is_virtual();
}
inline void lane::_internal_set_is_virtual(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_virtual_ = value;
}
inline void lane::set_is_virtual(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_virtual(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.is_virtual)
}

// int32 dir = 3;
inline void lane::clear_dir() {
  dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_dir() const {
  return dir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::dir() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.dir)
  return _internal_dir();
}
inline void lane::_internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dir_ = value;
}
inline void lane::set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.dir)
}

// int32 from_node_id = 4;
inline void lane::clear_from_node_id() {
  from_node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_from_node_id() const {
  return from_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::from_node_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.from_node_id)
  return _internal_from_node_id();
}
inline void lane::_internal_set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_node_id_ = value;
}
inline void lane::set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_node_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.from_node_id)
}

// int32 to_node_id = 5;
inline void lane::clear_to_node_id() {
  to_node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_to_node_id() const {
  return to_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::to_node_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.to_node_id)
  return _internal_to_node_id();
}
inline void lane::_internal_set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_node_id_ = value;
}
inline void lane::set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_node_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.to_node_id)
}

// repeated int32 object_ids = 6;
inline int lane::_internal_object_ids_size() const {
  return object_ids_.size();
}
inline int lane::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void lane::clear_object_ids() {
  object_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_object_ids(int index) const {
  return object_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.object_ids)
  return _internal_object_ids(index);
}
inline void lane::set_object_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.object_ids)
}
inline void lane::_internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  object_ids_.Add(value);
}
inline void lane::add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.lane.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::_internal_object_ids() const {
  return object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::object_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.lane.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::_internal_mutable_object_ids() {
  return &object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.lane.object_ids)
  return _internal_mutable_object_ids();
}

// repeated int32 lefts = 7;
inline int lane::_internal_lefts_size() const {
  return lefts_.size();
}
inline int lane::lefts_size() const {
  return _internal_lefts_size();
}
inline void lane::clear_lefts() {
  lefts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_lefts(int index) const {
  return lefts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::lefts(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.lefts)
  return _internal_lefts(index);
}
inline void lane::set_lefts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  lefts_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.lefts)
}
inline void lane::_internal_add_lefts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  lefts_.Add(value);
}
inline void lane::add_lefts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_lefts(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.lane.lefts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::_internal_lefts() const {
  return lefts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::lefts() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.lane.lefts)
  return _internal_lefts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::_internal_mutable_lefts() {
  return &lefts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::mutable_lefts() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.lane.lefts)
  return _internal_mutable_lefts();
}

// repeated int32 rights = 8;
inline int lane::_internal_rights_size() const {
  return rights_.size();
}
inline int lane::rights_size() const {
  return _internal_rights_size();
}
inline void lane::clear_rights() {
  rights_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_rights(int index) const {
  return rights_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::rights(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.rights)
  return _internal_rights(index);
}
inline void lane::set_rights(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  rights_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.rights)
}
inline void lane::_internal_add_rights(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rights_.Add(value);
}
inline void lane::add_rights(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_rights(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.lane.rights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::_internal_rights() const {
  return rights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::rights() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.lane.rights)
  return _internal_rights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::_internal_mutable_rights() {
  return &rights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::mutable_rights() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.lane.rights)
  return _internal_mutable_rights();
}

// int32 center = 9;
inline void lane::clear_center() {
  center_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_center() const {
  return center_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::center() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.center)
  return _internal_center();
}
inline void lane::_internal_set_center(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  center_ = value;
}
inline void lane::set_center(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_center(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.center)
}

// repeated int32 avp_line_ids = 10;
inline int lane::_internal_avp_line_ids_size() const {
  return avp_line_ids_.size();
}
inline int lane::avp_line_ids_size() const {
  return _internal_avp_line_ids_size();
}
inline void lane::clear_avp_line_ids() {
  avp_line_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::_internal_avp_line_ids(int index) const {
  return avp_line_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lane::avp_line_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.avp_line_ids)
  return _internal_avp_line_ids(index);
}
inline void lane::set_avp_line_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  avp_line_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.lane.avp_line_ids)
}
inline void lane::_internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  avp_line_ids_.Add(value);
}
inline void lane::add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_avp_line_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.lane.avp_line_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::_internal_avp_line_ids() const {
  return avp_line_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
lane::avp_line_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.lane.avp_line_ids)
  return _internal_avp_line_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::_internal_mutable_avp_line_ids() {
  return &avp_line_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
lane::mutable_avp_line_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.lane.avp_line_ids)
  return _internal_mutable_avp_line_ids();
}

// repeated .LogicMapPb.connectedLane connected_lanes = 11;
inline int lane::_internal_connected_lanes_size() const {
  return connected_lanes_.size();
}
inline int lane::connected_lanes_size() const {
  return _internal_connected_lanes_size();
}
inline void lane::clear_connected_lanes() {
  connected_lanes_.Clear();
}
inline ::LogicMapPb::connectedLane* lane::mutable_connected_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.lane.connected_lanes)
  return connected_lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::connectedLane >*
lane::mutable_connected_lanes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.lane.connected_lanes)
  return &connected_lanes_;
}
inline const ::LogicMapPb::connectedLane& lane::_internal_connected_lanes(int index) const {
  return connected_lanes_.Get(index);
}
inline const ::LogicMapPb::connectedLane& lane::connected_lanes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.lane.connected_lanes)
  return _internal_connected_lanes(index);
}
inline ::LogicMapPb::connectedLane* lane::_internal_add_connected_lanes() {
  return connected_lanes_.Add();
}
inline ::LogicMapPb::connectedLane* lane::add_connected_lanes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.lane.connected_lanes)
  return _internal_add_connected_lanes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::connectedLane >&
lane::connected_lanes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.lane.connected_lanes)
  return connected_lanes_;
}

// -------------------------------------------------------------------

// RoadSection_roadedge

// int32 index = 1;
inline void RoadSection_roadedge::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::index() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.roadedge.index)
  return _internal_index();
}
inline void RoadSection_roadedge::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void RoadSection_roadedge::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.roadedge.index)
}

// int32 type = 2;
inline void RoadSection_roadedge::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.roadedge.type)
  return _internal_type();
}
inline void RoadSection_roadedge::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RoadSection_roadedge::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.roadedge.type)
}

// int32 is_left = 3;
inline void RoadSection_roadedge::clear_is_left() {
  is_left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::_internal_is_left() const {
  return is_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::is_left() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.roadedge.is_left)
  return _internal_is_left();
}
inline void RoadSection_roadedge::_internal_set_is_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_left_ = value;
}
inline void RoadSection_roadedge::set_is_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_left(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.roadedge.is_left)
}

// float height = 4;
inline void RoadSection_roadedge::clear_height() {
  height_ = 0;
}
inline float RoadSection_roadedge::_internal_height() const {
  return height_;
}
inline float RoadSection_roadedge::height() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.roadedge.height)
  return _internal_height();
}
inline void RoadSection_roadedge::_internal_set_height(float value) {
  
  height_ = value;
}
inline void RoadSection_roadedge::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.roadedge.height)
}

// int32 line_id = 5;
inline void RoadSection_roadedge::clear_line_id() {
  line_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::_internal_line_id() const {
  return line_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection_roadedge::line_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.roadedge.line_id)
  return _internal_line_id();
}
inline void RoadSection_roadedge::_internal_set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_id_ = value;
}
inline void RoadSection_roadedge::set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.roadedge.line_id)
}

// -------------------------------------------------------------------

// RoadSection

// int32 id = 1;
inline void RoadSection::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.id)
  return _internal_id();
}
inline void RoadSection::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void RoadSection::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.id)
}

// int32 type = 2;
inline void RoadSection::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.type)
  return _internal_type();
}
inline void RoadSection::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void RoadSection::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.type)
}

// float length = 3;
inline void RoadSection::clear_length() {
  length_ = 0;
}
inline float RoadSection::_internal_length() const {
  return length_;
}
inline float RoadSection::length() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.length)
  return _internal_length();
}
inline void RoadSection::_internal_set_length(float value) {
  
  length_ = value;
}
inline void RoadSection::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.length)
}

// int32 node_A = 4;
inline void RoadSection::clear_node_a() {
  node_a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_node_a() const {
  return node_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::node_a() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.node_A)
  return _internal_node_a();
}
inline void RoadSection::_internal_set_node_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_a_ = value;
}
inline void RoadSection::set_node_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_a(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.node_A)
}

// int32 node_B = 5;
inline void RoadSection::clear_node_b() {
  node_b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_node_b() const {
  return node_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::node_b() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.node_B)
  return _internal_node_b();
}
inline void RoadSection::_internal_set_node_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  node_b_ = value;
}
inline void RoadSection::set_node_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_node_b(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.node_B)
}

// repeated .SRprotobuf.Point3f way_nodes = 6;
inline int RoadSection::_internal_way_nodes_size() const {
  return way_nodes_.size();
}
inline int RoadSection::way_nodes_size() const {
  return _internal_way_nodes_size();
}
inline ::SRprotobuf::Point3f* RoadSection::mutable_way_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.RoadSection.way_nodes)
  return way_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
RoadSection::mutable_way_nodes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.way_nodes)
  return &way_nodes_;
}
inline const ::SRprotobuf::Point3f& RoadSection::_internal_way_nodes(int index) const {
  return way_nodes_.Get(index);
}
inline const ::SRprotobuf::Point3f& RoadSection::way_nodes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.way_nodes)
  return _internal_way_nodes(index);
}
inline ::SRprotobuf::Point3f* RoadSection::_internal_add_way_nodes() {
  return way_nodes_.Add();
}
inline ::SRprotobuf::Point3f* RoadSection::add_way_nodes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.way_nodes)
  return _internal_add_way_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
RoadSection::way_nodes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.way_nodes)
  return way_nodes_;
}

// float confidence = 7;
inline void RoadSection::clear_confidence() {
  confidence_ = 0;
}
inline float RoadSection::_internal_confidence() const {
  return confidence_;
}
inline float RoadSection::confidence() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.confidence)
  return _internal_confidence();
}
inline void RoadSection::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void RoadSection::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.confidence)
}

// int32 available = 8;
inline void RoadSection::clear_available() {
  available_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_available() const {
  return available_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::available() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.available)
  return _internal_available();
}
inline void RoadSection::_internal_set_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_ = value;
}
inline void RoadSection::set_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.available)
}

// repeated .LogicMapPb.secTypeNode sec_type_nodes = 9;
inline int RoadSection::_internal_sec_type_nodes_size() const {
  return sec_type_nodes_.size();
}
inline int RoadSection::sec_type_nodes_size() const {
  return _internal_sec_type_nodes_size();
}
inline void RoadSection::clear_sec_type_nodes() {
  sec_type_nodes_.Clear();
}
inline ::LogicMapPb::secTypeNode* RoadSection::mutable_sec_type_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.RoadSection.sec_type_nodes)
  return sec_type_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >*
RoadSection::mutable_sec_type_nodes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.sec_type_nodes)
  return &sec_type_nodes_;
}
inline const ::LogicMapPb::secTypeNode& RoadSection::_internal_sec_type_nodes(int index) const {
  return sec_type_nodes_.Get(index);
}
inline const ::LogicMapPb::secTypeNode& RoadSection::sec_type_nodes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.sec_type_nodes)
  return _internal_sec_type_nodes(index);
}
inline ::LogicMapPb::secTypeNode* RoadSection::_internal_add_sec_type_nodes() {
  return sec_type_nodes_.Add();
}
inline ::LogicMapPb::secTypeNode* RoadSection::add_sec_type_nodes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.sec_type_nodes)
  return _internal_add_sec_type_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >&
RoadSection::sec_type_nodes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.sec_type_nodes)
  return sec_type_nodes_;
}

// repeated int32 object_ids = 10;
inline int RoadSection::_internal_object_ids_size() const {
  return object_ids_.size();
}
inline int RoadSection::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void RoadSection::clear_object_ids() {
  object_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_object_ids(int index) const {
  return object_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.object_ids)
  return _internal_object_ids(index);
}
inline void RoadSection::set_object_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.object_ids)
}
inline void RoadSection::_internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  object_ids_.Add(value);
}
inline void RoadSection::add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoadSection::_internal_object_ids() const {
  return object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoadSection::object_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoadSection::_internal_mutable_object_ids() {
  return &object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoadSection::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.object_ids)
  return _internal_mutable_object_ids();
}

// repeated .LogicMapPb.lane lanes = 11;
inline int RoadSection::_internal_lanes_size() const {
  return lanes_.size();
}
inline int RoadSection::lanes_size() const {
  return _internal_lanes_size();
}
inline void RoadSection::clear_lanes() {
  lanes_.Clear();
}
inline ::LogicMapPb::lane* RoadSection::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.RoadSection.lanes)
  return lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >*
RoadSection::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.lanes)
  return &lanes_;
}
inline const ::LogicMapPb::lane& RoadSection::_internal_lanes(int index) const {
  return lanes_.Get(index);
}
inline const ::LogicMapPb::lane& RoadSection::lanes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.lanes)
  return _internal_lanes(index);
}
inline ::LogicMapPb::lane* RoadSection::_internal_add_lanes() {
  return lanes_.Add();
}
inline ::LogicMapPb::lane* RoadSection::add_lanes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.lanes)
  return _internal_add_lanes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >&
RoadSection::lanes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.lanes)
  return lanes_;
}

// int32 link_id = 12;
inline void RoadSection::clear_link_id() {
  link_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::link_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.link_id)
  return _internal_link_id();
}
inline void RoadSection::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  link_id_ = value;
}
inline void RoadSection::set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.link_id)
}

// repeated int32 joint_ids = 13;
inline int RoadSection::_internal_joint_ids_size() const {
  return joint_ids_.size();
}
inline int RoadSection::joint_ids_size() const {
  return _internal_joint_ids_size();
}
inline void RoadSection::clear_joint_ids() {
  joint_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_joint_ids(int index) const {
  return joint_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::joint_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.joint_ids)
  return _internal_joint_ids(index);
}
inline void RoadSection::set_joint_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  joint_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.joint_ids)
}
inline void RoadSection::_internal_add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  joint_ids_.Add(value);
}
inline void RoadSection::add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_joint_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.joint_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoadSection::_internal_joint_ids() const {
  return joint_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoadSection::joint_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.joint_ids)
  return _internal_joint_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoadSection::_internal_mutable_joint_ids() {
  return &joint_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoadSection::mutable_joint_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.joint_ids)
  return _internal_mutable_joint_ids();
}

// repeated .LogicMapPb.RoadSection.roadedge roadedges = 14;
inline int RoadSection::_internal_roadedges_size() const {
  return roadedges_.size();
}
inline int RoadSection::roadedges_size() const {
  return _internal_roadedges_size();
}
inline void RoadSection::clear_roadedges() {
  roadedges_.Clear();
}
inline ::LogicMapPb::RoadSection_roadedge* RoadSection::mutable_roadedges(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.RoadSection.roadedges)
  return roadedges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection_roadedge >*
RoadSection::mutable_roadedges() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.roadedges)
  return &roadedges_;
}
inline const ::LogicMapPb::RoadSection_roadedge& RoadSection::_internal_roadedges(int index) const {
  return roadedges_.Get(index);
}
inline const ::LogicMapPb::RoadSection_roadedge& RoadSection::roadedges(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.roadedges)
  return _internal_roadedges(index);
}
inline ::LogicMapPb::RoadSection_roadedge* RoadSection::_internal_add_roadedges() {
  return roadedges_.Add();
}
inline ::LogicMapPb::RoadSection_roadedge* RoadSection::add_roadedges() {
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.roadedges)
  return _internal_add_roadedges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection_roadedge >&
RoadSection::roadedges() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.roadedges)
  return roadedges_;
}

// repeated int32 avp_line_ids = 15;
inline int RoadSection::_internal_avp_line_ids_size() const {
  return avp_line_ids_.size();
}
inline int RoadSection::avp_line_ids_size() const {
  return _internal_avp_line_ids_size();
}
inline void RoadSection::clear_avp_line_ids() {
  avp_line_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::_internal_avp_line_ids(int index) const {
  return avp_line_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoadSection::avp_line_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.avp_line_ids)
  return _internal_avp_line_ids(index);
}
inline void RoadSection::set_avp_line_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  avp_line_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.RoadSection.avp_line_ids)
}
inline void RoadSection::_internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  avp_line_ids_.Add(value);
}
inline void RoadSection::add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_avp_line_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.RoadSection.avp_line_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoadSection::_internal_avp_line_ids() const {
  return avp_line_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RoadSection::avp_line_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.RoadSection.avp_line_ids)
  return _internal_avp_line_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoadSection::_internal_mutable_avp_line_ids() {
  return &avp_line_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RoadSection::mutable_avp_line_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.RoadSection.avp_line_ids)
  return _internal_mutable_avp_line_ids();
}

// .SRprotobuf.FloorLevel floor_level = 16;
inline bool RoadSection::_internal_has_floor_level() const {
  return this != internal_default_instance() && floor_level_ != nullptr;
}
inline bool RoadSection::has_floor_level() const {
  return _internal_has_floor_level();
}
inline const ::SRprotobuf::FloorLevel& RoadSection::_internal_floor_level() const {
  const ::SRprotobuf::FloorLevel* p = floor_level_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::FloorLevel*>(
      &::SRprotobuf::_FloorLevel_default_instance_);
}
inline const ::SRprotobuf::FloorLevel& RoadSection::floor_level() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.RoadSection.floor_level)
  return _internal_floor_level();
}
inline void RoadSection::unsafe_arena_set_allocated_floor_level(
    ::SRprotobuf::FloorLevel* floor_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  floor_level_ = floor_level;
  if (floor_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LogicMapPb.RoadSection.floor_level)
}
inline ::SRprotobuf::FloorLevel* RoadSection::release_floor_level() {
  auto temp = unsafe_arena_release_floor_level();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::FloorLevel* RoadSection::unsafe_arena_release_floor_level() {
  // @@protoc_insertion_point(field_release:LogicMapPb.RoadSection.floor_level)
  
  ::SRprotobuf::FloorLevel* temp = floor_level_;
  floor_level_ = nullptr;
  return temp;
}
inline ::SRprotobuf::FloorLevel* RoadSection::_internal_mutable_floor_level() {
  
  if (floor_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::FloorLevel>(GetArena());
    floor_level_ = p;
  }
  return floor_level_;
}
inline ::SRprotobuf::FloorLevel* RoadSection::mutable_floor_level() {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.RoadSection.floor_level)
  return _internal_mutable_floor_level();
}
inline void RoadSection::set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  if (floor_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level)->GetArena();
    if (message_arena != submessage_arena) {
      floor_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floor_level, submessage_arena);
    }
    
  } else {
    
  }
  floor_level_ = floor_level;
  // @@protoc_insertion_point(field_set_allocated:LogicMapPb.RoadSection.floor_level)
}

// -------------------------------------------------------------------

// Line_equation

// -------------------------------------------------------------------

// Line_curve

// int32 index = 1;
inline void Line_curve::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line_curve::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line_curve::index() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curve.index)
  return _internal_index();
}
inline void Line_curve::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Line_curve::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.curve.index)
}

// int32 type = 2;
inline void Line_curve::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line_curve::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line_curve::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curve.type)
  return _internal_type();
}
inline void Line_curve::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Line_curve::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.curve.type)
}

// float length = 3;
inline void Line_curve::clear_length() {
  length_ = 0;
}
inline float Line_curve::_internal_length() const {
  return length_;
}
inline float Line_curve::length() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curve.length)
  return _internal_length();
}
inline void Line_curve::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Line_curve::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.curve.length)
}

// float confidence = 4;
inline void Line_curve::clear_confidence() {
  confidence_ = 0;
}
inline float Line_curve::_internal_confidence() const {
  return confidence_;
}
inline float Line_curve::confidence() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curve.confidence)
  return _internal_confidence();
}
inline void Line_curve::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Line_curve::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.curve.confidence)
}

// repeated .SRprotobuf.Point3f curve_pts = 5;
inline int Line_curve::_internal_curve_pts_size() const {
  return curve_pts_.size();
}
inline int Line_curve::curve_pts_size() const {
  return _internal_curve_pts_size();
}
inline ::SRprotobuf::Point3f* Line_curve::mutable_curve_pts(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Line.curve.curve_pts)
  return curve_pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
Line_curve::mutable_curve_pts() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Line.curve.curve_pts)
  return &curve_pts_;
}
inline const ::SRprotobuf::Point3f& Line_curve::_internal_curve_pts(int index) const {
  return curve_pts_.Get(index);
}
inline const ::SRprotobuf::Point3f& Line_curve::curve_pts(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curve.curve_pts)
  return _internal_curve_pts(index);
}
inline ::SRprotobuf::Point3f* Line_curve::_internal_add_curve_pts() {
  return curve_pts_.Add();
}
inline ::SRprotobuf::Point3f* Line_curve::add_curve_pts() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Line.curve.curve_pts)
  return _internal_add_curve_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
Line_curve::curve_pts() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Line.curve.curve_pts)
  return curve_pts_;
}

// .LogicMapPb.Line.equation equa = 6;
inline bool Line_curve::_internal_has_equa() const {
  return this != internal_default_instance() && equa_ != nullptr;
}
inline bool Line_curve::has_equa() const {
  return _internal_has_equa();
}
inline void Line_curve::clear_equa() {
  if (GetArena() == nullptr && equa_ != nullptr) {
    delete equa_;
  }
  equa_ = nullptr;
}
inline const ::LogicMapPb::Line_equation& Line_curve::_internal_equa() const {
  const ::LogicMapPb::Line_equation* p = equa_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LogicMapPb::Line_equation*>(
      &::LogicMapPb::_Line_equation_default_instance_);
}
inline const ::LogicMapPb::Line_equation& Line_curve::equa() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curve.equa)
  return _internal_equa();
}
inline void Line_curve::unsafe_arena_set_allocated_equa(
    ::LogicMapPb::Line_equation* equa) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equa_);
  }
  equa_ = equa;
  if (equa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LogicMapPb.Line.curve.equa)
}
inline ::LogicMapPb::Line_equation* Line_curve::release_equa() {
  auto temp = unsafe_arena_release_equa();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LogicMapPb::Line_equation* Line_curve::unsafe_arena_release_equa() {
  // @@protoc_insertion_point(field_release:LogicMapPb.Line.curve.equa)
  
  ::LogicMapPb::Line_equation* temp = equa_;
  equa_ = nullptr;
  return temp;
}
inline ::LogicMapPb::Line_equation* Line_curve::_internal_mutable_equa() {
  
  if (equa_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogicMapPb::Line_equation>(GetArena());
    equa_ = p;
  }
  return equa_;
}
inline ::LogicMapPb::Line_equation* Line_curve::mutable_equa() {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Line.curve.equa)
  return _internal_mutable_equa();
}
inline void Line_curve::set_allocated_equa(::LogicMapPb::Line_equation* equa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete equa_;
  }
  if (equa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(equa);
    if (message_arena != submessage_arena) {
      equa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equa, submessage_arena);
    }
    
  } else {
    
  }
  equa_ = equa;
  // @@protoc_insertion_point(field_set_allocated:LogicMapPb.Line.curve.equa)
}

// -------------------------------------------------------------------

// Line

// int32 id = 1;
inline void Line::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.id)
  return _internal_id();
}
inline void Line::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Line::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.id)
}

// int32 from_node_id = 2;
inline void Line::clear_from_node_id() {
  from_node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_from_node_id() const {
  return from_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::from_node_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.from_node_id)
  return _internal_from_node_id();
}
inline void Line::_internal_set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_node_id_ = value;
}
inline void Line::set_from_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_node_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.from_node_id)
}

// int32 to_node_id = 3;
inline void Line::clear_to_node_id() {
  to_node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::_internal_to_node_id() const {
  return to_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Line::to_node_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.to_node_id)
  return _internal_to_node_id();
}
inline void Line::_internal_set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_node_id_ = value;
}
inline void Line::set_to_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_node_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.to_node_id)
}

// float length = 4;
inline void Line::clear_length() {
  length_ = 0;
}
inline float Line::_internal_length() const {
  return length_;
}
inline float Line::length() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.length)
  return _internal_length();
}
inline void Line::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Line::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Line.length)
}

// repeated .LogicMapPb.Line.curve curves = 5;
inline int Line::_internal_curves_size() const {
  return curves_.size();
}
inline int Line::curves_size() const {
  return _internal_curves_size();
}
inline void Line::clear_curves() {
  curves_.Clear();
}
inline ::LogicMapPb::Line_curve* Line::mutable_curves(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Line.curves)
  return curves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line_curve >*
Line::mutable_curves() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Line.curves)
  return &curves_;
}
inline const ::LogicMapPb::Line_curve& Line::_internal_curves(int index) const {
  return curves_.Get(index);
}
inline const ::LogicMapPb::Line_curve& Line::curves(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.curves)
  return _internal_curves(index);
}
inline ::LogicMapPb::Line_curve* Line::_internal_add_curves() {
  return curves_.Add();
}
inline ::LogicMapPb::Line_curve* Line::add_curves() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Line.curves)
  return _internal_add_curves();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line_curve >&
Line::curves() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Line.curves)
  return curves_;
}

// .LogicMapPb.secIDtype sec_id_type = 6;
inline bool Line::_internal_has_sec_id_type() const {
  return this != internal_default_instance() && sec_id_type_ != nullptr;
}
inline bool Line::has_sec_id_type() const {
  return _internal_has_sec_id_type();
}
inline void Line::clear_sec_id_type() {
  if (GetArena() == nullptr && sec_id_type_ != nullptr) {
    delete sec_id_type_;
  }
  sec_id_type_ = nullptr;
}
inline const ::LogicMapPb::secIDtype& Line::_internal_sec_id_type() const {
  const ::LogicMapPb::secIDtype* p = sec_id_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LogicMapPb::secIDtype*>(
      &::LogicMapPb::_secIDtype_default_instance_);
}
inline const ::LogicMapPb::secIDtype& Line::sec_id_type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Line.sec_id_type)
  return _internal_sec_id_type();
}
inline void Line::unsafe_arena_set_allocated_sec_id_type(
    ::LogicMapPb::secIDtype* sec_id_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_id_type_);
  }
  sec_id_type_ = sec_id_type;
  if (sec_id_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LogicMapPb.Line.sec_id_type)
}
inline ::LogicMapPb::secIDtype* Line::release_sec_id_type() {
  auto temp = unsafe_arena_release_sec_id_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LogicMapPb::secIDtype* Line::unsafe_arena_release_sec_id_type() {
  // @@protoc_insertion_point(field_release:LogicMapPb.Line.sec_id_type)
  
  ::LogicMapPb::secIDtype* temp = sec_id_type_;
  sec_id_type_ = nullptr;
  return temp;
}
inline ::LogicMapPb::secIDtype* Line::_internal_mutable_sec_id_type() {
  
  if (sec_id_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogicMapPb::secIDtype>(GetArena());
    sec_id_type_ = p;
  }
  return sec_id_type_;
}
inline ::LogicMapPb::secIDtype* Line::mutable_sec_id_type() {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Line.sec_id_type)
  return _internal_mutable_sec_id_type();
}
inline void Line::set_allocated_sec_id_type(::LogicMapPb::secIDtype* sec_id_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sec_id_type_;
  }
  if (sec_id_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sec_id_type);
    if (message_arena != submessage_arena) {
      sec_id_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sec_id_type, submessage_arena);
    }
    
  } else {
    
  }
  sec_id_type_ = sec_id_type;
  // @@protoc_insertion_point(field_set_allocated:LogicMapPb.Line.sec_id_type)
}

// -------------------------------------------------------------------

// Intersection_edge

// int32 id = 1;
inline void Intersection_edge::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.id)
  return _internal_id();
}
inline void Intersection_edge::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Intersection_edge::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.id)
}

// int32 type = 2;
inline void Intersection_edge::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.type)
  return _internal_type();
}
inline void Intersection_edge::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Intersection_edge::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.type)
}

// int32 subtype = 3;
inline void Intersection_edge::clear_subtype() {
  subtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::_internal_subtype() const {
  return subtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::subtype() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.subtype)
  return _internal_subtype();
}
inline void Intersection_edge::_internal_set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subtype_ = value;
}
inline void Intersection_edge::set_subtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.subtype)
}

// int32 dir = 4;
inline void Intersection_edge::clear_dir() {
  dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::_internal_dir() const {
  return dir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::dir() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.dir)
  return _internal_dir();
}
inline void Intersection_edge::_internal_set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dir_ = value;
}
inline void Intersection_edge::set_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.dir)
}

// repeated int32 pts = 5;
inline int Intersection_edge::_internal_pts_size() const {
  return pts_.size();
}
inline int Intersection_edge::pts_size() const {
  return _internal_pts_size();
}
inline void Intersection_edge::clear_pts() {
  pts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::pts(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.pts)
  return _internal_pts(index);
}
inline void Intersection_edge::set_pts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pts_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.pts)
}
inline void Intersection_edge::_internal_add_pts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pts_.Add(value);
}
inline void Intersection_edge::add_pts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pts(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.edge.pts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection_edge::_internal_pts() const {
  return pts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection_edge::pts() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.edge.pts)
  return _internal_pts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection_edge::_internal_mutable_pts() {
  return &pts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection_edge::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.edge.pts)
  return _internal_mutable_pts();
}

// int32 link_id = 6;
inline void Intersection_edge::clear_link_id() {
  link_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::_internal_link_id() const {
  return link_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection_edge::link_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.link_id)
  return _internal_link_id();
}
inline void Intersection_edge::_internal_set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  link_id_ = value;
}
inline void Intersection_edge::set_link_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_link_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.link_id)
}

// float direction = 7;
inline void Intersection_edge::clear_direction() {
  direction_ = 0;
}
inline float Intersection_edge::_internal_direction() const {
  return direction_;
}
inline float Intersection_edge::direction() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edge.direction)
  return _internal_direction();
}
inline void Intersection_edge::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void Intersection_edge::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.edge.direction)
}

// -------------------------------------------------------------------

// Intersection

// int32 id = 1;
inline void Intersection::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.id)
  return _internal_id();
}
inline void Intersection::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Intersection::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.id)
}

// int32 type = 2;
inline void Intersection::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.type)
  return _internal_type();
}
inline void Intersection::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Intersection::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.type)
}

// repeated int32 joint_ids = 3;
inline int Intersection::_internal_joint_ids_size() const {
  return joint_ids_.size();
}
inline int Intersection::joint_ids_size() const {
  return _internal_joint_ids_size();
}
inline void Intersection::clear_joint_ids() {
  joint_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_joint_ids(int index) const {
  return joint_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::joint_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.joint_ids)
  return _internal_joint_ids(index);
}
inline void Intersection::set_joint_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  joint_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.joint_ids)
}
inline void Intersection::_internal_add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  joint_ids_.Add(value);
}
inline void Intersection::add_joint_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_joint_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.joint_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection::_internal_joint_ids() const {
  return joint_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection::joint_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.joint_ids)
  return _internal_joint_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection::_internal_mutable_joint_ids() {
  return &joint_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection::mutable_joint_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.joint_ids)
  return _internal_mutable_joint_ids();
}

// int32 loc_insec_id = 4;
inline void Intersection::clear_loc_insec_id() {
  loc_insec_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_loc_insec_id() const {
  return loc_insec_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::loc_insec_id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.loc_insec_id)
  return _internal_loc_insec_id();
}
inline void Intersection::_internal_set_loc_insec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loc_insec_id_ = value;
}
inline void Intersection::set_loc_insec_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loc_insec_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.loc_insec_id)
}

// int32 available = 5;
inline void Intersection::clear_available() {
  available_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_available() const {
  return available_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::available() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.available)
  return _internal_available();
}
inline void Intersection::_internal_set_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  available_ = value;
}
inline void Intersection::set_available(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.available)
}

// repeated .LogicMapPb.secTypeNode sec_type_nodes = 6;
inline int Intersection::_internal_sec_type_nodes_size() const {
  return sec_type_nodes_.size();
}
inline int Intersection::sec_type_nodes_size() const {
  return _internal_sec_type_nodes_size();
}
inline void Intersection::clear_sec_type_nodes() {
  sec_type_nodes_.Clear();
}
inline ::LogicMapPb::secTypeNode* Intersection::mutable_sec_type_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Intersection.sec_type_nodes)
  return sec_type_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >*
Intersection::mutable_sec_type_nodes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.sec_type_nodes)
  return &sec_type_nodes_;
}
inline const ::LogicMapPb::secTypeNode& Intersection::_internal_sec_type_nodes(int index) const {
  return sec_type_nodes_.Get(index);
}
inline const ::LogicMapPb::secTypeNode& Intersection::sec_type_nodes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.sec_type_nodes)
  return _internal_sec_type_nodes(index);
}
inline ::LogicMapPb::secTypeNode* Intersection::_internal_add_sec_type_nodes() {
  return sec_type_nodes_.Add();
}
inline ::LogicMapPb::secTypeNode* Intersection::add_sec_type_nodes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.sec_type_nodes)
  return _internal_add_sec_type_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::secTypeNode >&
Intersection::sec_type_nodes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.sec_type_nodes)
  return sec_type_nodes_;
}

// repeated int32 object_ids = 7;
inline int Intersection::_internal_object_ids_size() const {
  return object_ids_.size();
}
inline int Intersection::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void Intersection::clear_object_ids() {
  object_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_object_ids(int index) const {
  return object_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.object_ids)
  return _internal_object_ids(index);
}
inline void Intersection::set_object_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.object_ids)
}
inline void Intersection::_internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  object_ids_.Add(value);
}
inline void Intersection::add_object_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection::_internal_object_ids() const {
  return object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection::object_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection::_internal_mutable_object_ids() {
  return &object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.object_ids)
  return _internal_mutable_object_ids();
}

// repeated .SRprotobuf.Point3f vertexes = 8;
inline int Intersection::_internal_vertexes_size() const {
  return vertexes_.size();
}
inline int Intersection::vertexes_size() const {
  return _internal_vertexes_size();
}
inline ::SRprotobuf::Point3f* Intersection::mutable_vertexes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Intersection.vertexes)
  return vertexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
Intersection::mutable_vertexes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.vertexes)
  return &vertexes_;
}
inline const ::SRprotobuf::Point3f& Intersection::_internal_vertexes(int index) const {
  return vertexes_.Get(index);
}
inline const ::SRprotobuf::Point3f& Intersection::vertexes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.vertexes)
  return _internal_vertexes(index);
}
inline ::SRprotobuf::Point3f* Intersection::_internal_add_vertexes() {
  return vertexes_.Add();
}
inline ::SRprotobuf::Point3f* Intersection::add_vertexes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.vertexes)
  return _internal_add_vertexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
Intersection::vertexes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.vertexes)
  return vertexes_;
}

// repeated .LogicMapPb.Intersection.edge edges = 9;
inline int Intersection::_internal_edges_size() const {
  return edges_.size();
}
inline int Intersection::edges_size() const {
  return _internal_edges_size();
}
inline void Intersection::clear_edges() {
  edges_.Clear();
}
inline ::LogicMapPb::Intersection_edge* Intersection::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Intersection.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection_edge >*
Intersection::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.edges)
  return &edges_;
}
inline const ::LogicMapPb::Intersection_edge& Intersection::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::LogicMapPb::Intersection_edge& Intersection::edges(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.edges)
  return _internal_edges(index);
}
inline ::LogicMapPb::Intersection_edge* Intersection::_internal_add_edges() {
  return edges_.Add();
}
inline ::LogicMapPb::Intersection_edge* Intersection::add_edges() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection_edge >&
Intersection::edges() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.edges)
  return edges_;
}

// repeated .LogicMapPb.lane lanes = 10;
inline int Intersection::_internal_lanes_size() const {
  return lanes_.size();
}
inline int Intersection::lanes_size() const {
  return _internal_lanes_size();
}
inline void Intersection::clear_lanes() {
  lanes_.Clear();
}
inline ::LogicMapPb::lane* Intersection::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Intersection.lanes)
  return lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >*
Intersection::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.lanes)
  return &lanes_;
}
inline const ::LogicMapPb::lane& Intersection::_internal_lanes(int index) const {
  return lanes_.Get(index);
}
inline const ::LogicMapPb::lane& Intersection::lanes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.lanes)
  return _internal_lanes(index);
}
inline ::LogicMapPb::lane* Intersection::_internal_add_lanes() {
  return lanes_.Add();
}
inline ::LogicMapPb::lane* Intersection::add_lanes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.lanes)
  return _internal_add_lanes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::lane >&
Intersection::lanes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.lanes)
  return lanes_;
}

// repeated int32 avp_line_ids = 11;
inline int Intersection::_internal_avp_line_ids_size() const {
  return avp_line_ids_.size();
}
inline int Intersection::avp_line_ids_size() const {
  return _internal_avp_line_ids_size();
}
inline void Intersection::clear_avp_line_ids() {
  avp_line_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::_internal_avp_line_ids(int index) const {
  return avp_line_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Intersection::avp_line_ids(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.avp_line_ids)
  return _internal_avp_line_ids(index);
}
inline void Intersection::set_avp_line_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  avp_line_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Intersection.avp_line_ids)
}
inline void Intersection::_internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  avp_line_ids_.Add(value);
}
inline void Intersection::add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_avp_line_ids(value);
  // @@protoc_insertion_point(field_add:LogicMapPb.Intersection.avp_line_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection::_internal_avp_line_ids() const {
  return avp_line_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Intersection::avp_line_ids() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Intersection.avp_line_ids)
  return _internal_avp_line_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection::_internal_mutable_avp_line_ids() {
  return &avp_line_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Intersection::mutable_avp_line_ids() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Intersection.avp_line_ids)
  return _internal_mutable_avp_line_ids();
}

// .SRprotobuf.FloorLevel floor_level = 12;
inline bool Intersection::_internal_has_floor_level() const {
  return this != internal_default_instance() && floor_level_ != nullptr;
}
inline bool Intersection::has_floor_level() const {
  return _internal_has_floor_level();
}
inline const ::SRprotobuf::FloorLevel& Intersection::_internal_floor_level() const {
  const ::SRprotobuf::FloorLevel* p = floor_level_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::FloorLevel*>(
      &::SRprotobuf::_FloorLevel_default_instance_);
}
inline const ::SRprotobuf::FloorLevel& Intersection::floor_level() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Intersection.floor_level)
  return _internal_floor_level();
}
inline void Intersection::unsafe_arena_set_allocated_floor_level(
    ::SRprotobuf::FloorLevel* floor_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  floor_level_ = floor_level;
  if (floor_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LogicMapPb.Intersection.floor_level)
}
inline ::SRprotobuf::FloorLevel* Intersection::release_floor_level() {
  auto temp = unsafe_arena_release_floor_level();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::FloorLevel* Intersection::unsafe_arena_release_floor_level() {
  // @@protoc_insertion_point(field_release:LogicMapPb.Intersection.floor_level)
  
  ::SRprotobuf::FloorLevel* temp = floor_level_;
  floor_level_ = nullptr;
  return temp;
}
inline ::SRprotobuf::FloorLevel* Intersection::_internal_mutable_floor_level() {
  
  if (floor_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::FloorLevel>(GetArena());
    floor_level_ = p;
  }
  return floor_level_;
}
inline ::SRprotobuf::FloorLevel* Intersection::mutable_floor_level() {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Intersection.floor_level)
  return _internal_mutable_floor_level();
}
inline void Intersection::set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  if (floor_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level)->GetArena();
    if (message_arena != submessage_arena) {
      floor_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floor_level, submessage_arena);
    }
    
  } else {
    
  }
  floor_level_ = floor_level;
  // @@protoc_insertion_point(field_set_allocated:LogicMapPb.Intersection.floor_level)
}

// -------------------------------------------------------------------

// Object_logicpt

// -------------------------------------------------------------------

// Object

// int32 id = 1;
inline void Object::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Object.id)
  return _internal_id();
}
inline void Object::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Object::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Object.id)
}

// float confidence = 2;
inline void Object::clear_confidence() {
  confidence_ = 0;
}
inline float Object::_internal_confidence() const {
  return confidence_;
}
inline float Object::confidence() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Object.confidence)
  return _internal_confidence();
}
inline void Object::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void Object::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Object.confidence)
}

// int32 type = 3;
inline void Object::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Object::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:LogicMapPb.Object.type)
}

// .LogicMapPb.secIDtype sec_id_type = 4;
inline bool Object::_internal_has_sec_id_type() const {
  return this != internal_default_instance() && sec_id_type_ != nullptr;
}
inline bool Object::has_sec_id_type() const {
  return _internal_has_sec_id_type();
}
inline void Object::clear_sec_id_type() {
  if (GetArena() == nullptr && sec_id_type_ != nullptr) {
    delete sec_id_type_;
  }
  sec_id_type_ = nullptr;
}
inline const ::LogicMapPb::secIDtype& Object::_internal_sec_id_type() const {
  const ::LogicMapPb::secIDtype* p = sec_id_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LogicMapPb::secIDtype*>(
      &::LogicMapPb::_secIDtype_default_instance_);
}
inline const ::LogicMapPb::secIDtype& Object::sec_id_type() const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Object.sec_id_type)
  return _internal_sec_id_type();
}
inline void Object::unsafe_arena_set_allocated_sec_id_type(
    ::LogicMapPb::secIDtype* sec_id_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sec_id_type_);
  }
  sec_id_type_ = sec_id_type;
  if (sec_id_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LogicMapPb.Object.sec_id_type)
}
inline ::LogicMapPb::secIDtype* Object::release_sec_id_type() {
  auto temp = unsafe_arena_release_sec_id_type();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LogicMapPb::secIDtype* Object::unsafe_arena_release_sec_id_type() {
  // @@protoc_insertion_point(field_release:LogicMapPb.Object.sec_id_type)
  
  ::LogicMapPb::secIDtype* temp = sec_id_type_;
  sec_id_type_ = nullptr;
  return temp;
}
inline ::LogicMapPb::secIDtype* Object::_internal_mutable_sec_id_type() {
  
  if (sec_id_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::LogicMapPb::secIDtype>(GetArena());
    sec_id_type_ = p;
  }
  return sec_id_type_;
}
inline ::LogicMapPb::secIDtype* Object::mutable_sec_id_type() {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Object.sec_id_type)
  return _internal_mutable_sec_id_type();
}
inline void Object::set_allocated_sec_id_type(::LogicMapPb::secIDtype* sec_id_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sec_id_type_;
  }
  if (sec_id_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sec_id_type);
    if (message_arena != submessage_arena) {
      sec_id_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sec_id_type, submessage_arena);
    }
    
  } else {
    
  }
  sec_id_type_ = sec_id_type;
  // @@protoc_insertion_point(field_set_allocated:LogicMapPb.Object.sec_id_type)
}

// repeated .SRprotobuf.Point3f pts = 5;
inline int Object::_internal_pts_size() const {
  return pts_.size();
}
inline int Object::pts_size() const {
  return _internal_pts_size();
}
inline ::SRprotobuf::Point3f* Object::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Object.pts)
  return pts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
Object::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Object.pts)
  return &pts_;
}
inline const ::SRprotobuf::Point3f& Object::_internal_pts(int index) const {
  return pts_.Get(index);
}
inline const ::SRprotobuf::Point3f& Object::pts(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Object.pts)
  return _internal_pts(index);
}
inline ::SRprotobuf::Point3f* Object::_internal_add_pts() {
  return pts_.Add();
}
inline ::SRprotobuf::Point3f* Object::add_pts() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Object.pts)
  return _internal_add_pts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
Object::pts() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Object.pts)
  return pts_;
}

// repeated .LogicMapPb.Object.logicpt logicpts = 6;
inline int Object::_internal_logicpts_size() const {
  return logicpts_.size();
}
inline int Object::logicpts_size() const {
  return _internal_logicpts_size();
}
inline void Object::clear_logicpts() {
  logicpts_.Clear();
}
inline ::LogicMapPb::Object_logicpt* Object::mutable_logicpts(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.Object.logicpts)
  return logicpts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object_logicpt >*
Object::mutable_logicpts() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.Object.logicpts)
  return &logicpts_;
}
inline const ::LogicMapPb::Object_logicpt& Object::_internal_logicpts(int index) const {
  return logicpts_.Get(index);
}
inline const ::LogicMapPb::Object_logicpt& Object::logicpts(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.Object.logicpts)
  return _internal_logicpts(index);
}
inline ::LogicMapPb::Object_logicpt* Object::_internal_add_logicpts() {
  return logicpts_.Add();
}
inline ::LogicMapPb::Object_logicpt* Object::add_logicpts() {
  // @@protoc_insertion_point(field_add:LogicMapPb.Object.logicpts)
  return _internal_add_logicpts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object_logicpt >&
Object::logicpts() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.Object.logicpts)
  return logicpts_;
}

// -------------------------------------------------------------------

// LogicMap

// repeated .LogicMapPb.Node nodes = 1;
inline int LogicMap::_internal_nodes_size() const {
  return nodes_.size();
}
inline int LogicMap::nodes_size() const {
  return _internal_nodes_size();
}
inline void LogicMap::clear_nodes() {
  nodes_.Clear();
}
inline ::LogicMapPb::Node* LogicMap::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.LogicMap.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Node >*
LogicMap::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.LogicMap.nodes)
  return &nodes_;
}
inline const ::LogicMapPb::Node& LogicMap::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::LogicMapPb::Node& LogicMap::nodes(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.LogicMap.nodes)
  return _internal_nodes(index);
}
inline ::LogicMapPb::Node* LogicMap::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::LogicMapPb::Node* LogicMap::add_nodes() {
  // @@protoc_insertion_point(field_add:LogicMapPb.LogicMap.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Node >&
LogicMap::nodes() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.LogicMap.nodes)
  return nodes_;
}

// repeated .LogicMapPb.RoadSection roadSections = 2;
inline int LogicMap::_internal_roadsections_size() const {
  return roadsections_.size();
}
inline int LogicMap::roadsections_size() const {
  return _internal_roadsections_size();
}
inline void LogicMap::clear_roadsections() {
  roadsections_.Clear();
}
inline ::LogicMapPb::RoadSection* LogicMap::mutable_roadsections(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.LogicMap.roadSections)
  return roadsections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection >*
LogicMap::mutable_roadsections() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.LogicMap.roadSections)
  return &roadsections_;
}
inline const ::LogicMapPb::RoadSection& LogicMap::_internal_roadsections(int index) const {
  return roadsections_.Get(index);
}
inline const ::LogicMapPb::RoadSection& LogicMap::roadsections(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.LogicMap.roadSections)
  return _internal_roadsections(index);
}
inline ::LogicMapPb::RoadSection* LogicMap::_internal_add_roadsections() {
  return roadsections_.Add();
}
inline ::LogicMapPb::RoadSection* LogicMap::add_roadsections() {
  // @@protoc_insertion_point(field_add:LogicMapPb.LogicMap.roadSections)
  return _internal_add_roadsections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::RoadSection >&
LogicMap::roadsections() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.LogicMap.roadSections)
  return roadsections_;
}

// repeated .LogicMapPb.Line lines = 3;
inline int LogicMap::_internal_lines_size() const {
  return lines_.size();
}
inline int LogicMap::lines_size() const {
  return _internal_lines_size();
}
inline void LogicMap::clear_lines() {
  lines_.Clear();
}
inline ::LogicMapPb::Line* LogicMap::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.LogicMap.lines)
  return lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line >*
LogicMap::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.LogicMap.lines)
  return &lines_;
}
inline const ::LogicMapPb::Line& LogicMap::_internal_lines(int index) const {
  return lines_.Get(index);
}
inline const ::LogicMapPb::Line& LogicMap::lines(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.LogicMap.lines)
  return _internal_lines(index);
}
inline ::LogicMapPb::Line* LogicMap::_internal_add_lines() {
  return lines_.Add();
}
inline ::LogicMapPb::Line* LogicMap::add_lines() {
  // @@protoc_insertion_point(field_add:LogicMapPb.LogicMap.lines)
  return _internal_add_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Line >&
LogicMap::lines() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.LogicMap.lines)
  return lines_;
}

// repeated .LogicMapPb.Intersection intersections = 4;
inline int LogicMap::_internal_intersections_size() const {
  return intersections_.size();
}
inline int LogicMap::intersections_size() const {
  return _internal_intersections_size();
}
inline void LogicMap::clear_intersections() {
  intersections_.Clear();
}
inline ::LogicMapPb::Intersection* LogicMap::mutable_intersections(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.LogicMap.intersections)
  return intersections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection >*
LogicMap::mutable_intersections() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.LogicMap.intersections)
  return &intersections_;
}
inline const ::LogicMapPb::Intersection& LogicMap::_internal_intersections(int index) const {
  return intersections_.Get(index);
}
inline const ::LogicMapPb::Intersection& LogicMap::intersections(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.LogicMap.intersections)
  return _internal_intersections(index);
}
inline ::LogicMapPb::Intersection* LogicMap::_internal_add_intersections() {
  return intersections_.Add();
}
inline ::LogicMapPb::Intersection* LogicMap::add_intersections() {
  // @@protoc_insertion_point(field_add:LogicMapPb.LogicMap.intersections)
  return _internal_add_intersections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Intersection >&
LogicMap::intersections() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.LogicMap.intersections)
  return intersections_;
}

// repeated .LogicMapPb.Object objects = 5;
inline int LogicMap::_internal_objects_size() const {
  return objects_.size();
}
inline int LogicMap::objects_size() const {
  return _internal_objects_size();
}
inline void LogicMap::clear_objects() {
  objects_.Clear();
}
inline ::LogicMapPb::Object* LogicMap::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:LogicMapPb.LogicMap.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object >*
LogicMap::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:LogicMapPb.LogicMap.objects)
  return &objects_;
}
inline const ::LogicMapPb::Object& LogicMap::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::LogicMapPb::Object& LogicMap::objects(int index) const {
  // @@protoc_insertion_point(field_get:LogicMapPb.LogicMap.objects)
  return _internal_objects(index);
}
inline ::LogicMapPb::Object* LogicMap::_internal_add_objects() {
  return objects_.Add();
}
inline ::LogicMapPb::Object* LogicMap::add_objects() {
  // @@protoc_insertion_point(field_add:LogicMapPb.LogicMap.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogicMapPb::Object >&
LogicMap::objects() const {
  // @@protoc_insertion_point(field_list:LogicMapPb.LogicMap.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LogicMapPb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2flogic_5fmap_2eproto
