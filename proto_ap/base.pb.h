// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fap_2fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fbase_2eproto;
namespace SRprotobuf {
class Color3;
class Color3DefaultTypeInternal;
extern Color3DefaultTypeInternal _Color3_default_instance_;
class FloorLevel;
class FloorLevelDefaultTypeInternal;
extern FloorLevelDefaultTypeInternal _FloorLevel_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Point2f;
class Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Point3f;
class Point3fDefaultTypeInternal;
extern Point3fDefaultTypeInternal _Point3f_default_instance_;
class Pose3f;
class Pose3fDefaultTypeInternal;
extern Pose3fDefaultTypeInternal _Pose3f_default_instance_;
class Size3f;
class Size3fDefaultTypeInternal;
extern Size3fDefaultTypeInternal _Size3f_default_instance_;
class Slot;
class SlotDefaultTypeInternal;
extern SlotDefaultTypeInternal _Slot_default_instance_;
class SlotObstacle;
class SlotObstacleDefaultTypeInternal;
extern SlotObstacleDefaultTypeInternal _SlotObstacle_default_instance_;
}  // namespace SRprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::SRprotobuf::Color3* Arena::CreateMaybeMessage<::SRprotobuf::Color3>(Arena*);
template<> ::SRprotobuf::FloorLevel* Arena::CreateMaybeMessage<::SRprotobuf::FloorLevel>(Arena*);
template<> ::SRprotobuf::Location* Arena::CreateMaybeMessage<::SRprotobuf::Location>(Arena*);
template<> ::SRprotobuf::Point2f* Arena::CreateMaybeMessage<::SRprotobuf::Point2f>(Arena*);
template<> ::SRprotobuf::Point3f* Arena::CreateMaybeMessage<::SRprotobuf::Point3f>(Arena*);
template<> ::SRprotobuf::Pose3f* Arena::CreateMaybeMessage<::SRprotobuf::Pose3f>(Arena*);
template<> ::SRprotobuf::Size3f* Arena::CreateMaybeMessage<::SRprotobuf::Size3f>(Arena*);
template<> ::SRprotobuf::Slot* Arena::CreateMaybeMessage<::SRprotobuf::Slot>(Arena*);
template<> ::SRprotobuf::SlotObstacle* Arena::CreateMaybeMessage<::SRprotobuf::SlotObstacle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SRprotobuf {

enum SlotUnParkableType : int {
  kSlotUnParkableUnknown = 0,
  kStandingLockInside = 1,
  kForbidden = 2,
  kVehicleInside = 3,
  kTrafficConeInside = 4,
  SlotUnParkableType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SlotUnParkableType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SlotUnParkableType_IsValid(int value);
constexpr SlotUnParkableType SlotUnParkableType_MIN = kSlotUnParkableUnknown;
constexpr SlotUnParkableType SlotUnParkableType_MAX = kTrafficConeInside;
constexpr int SlotUnParkableType_ARRAYSIZE = SlotUnParkableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlotUnParkableType_descriptor();
template<typename T>
inline const std::string& SlotUnParkableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SlotUnParkableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SlotUnParkableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SlotUnParkableType_descriptor(), enum_t_value);
}
inline bool SlotUnParkableType_Parse(
    const std::string& name, SlotUnParkableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SlotUnParkableType>(
    SlotUnParkableType_descriptor(), name, value);
}
enum SlotObstacleType : int {
  SlotObstacle_Empty = 0,
  SlotObstacle_LockLying = 1,
  SlotObstacle_LockStanding = 2,
  SlotObstacle_Lever = 3,
  SlotObstacle_Curb = 4,
  SlotObstacle_UnknownObstacle = 5,
  SlotObstacle_MaxNum = 6,
  SlotObstacleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SlotObstacleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SlotObstacleType_IsValid(int value);
constexpr SlotObstacleType SlotObstacleType_MIN = SlotObstacle_Empty;
constexpr SlotObstacleType SlotObstacleType_MAX = SlotObstacle_MaxNum;
constexpr int SlotObstacleType_ARRAYSIZE = SlotObstacleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlotObstacleType_descriptor();
template<typename T>
inline const std::string& SlotObstacleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SlotObstacleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SlotObstacleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SlotObstacleType_descriptor(), enum_t_value);
}
inline bool SlotObstacleType_Parse(
    const std::string& name, SlotObstacleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SlotObstacleType>(
    SlotObstacleType_descriptor(), name, value);
}
// ===================================================================

class Point3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Point3f) */ {
 public:
  inline Point3f() : Point3f(nullptr) {};
  virtual ~Point3f();

  Point3f(const Point3f& from);
  Point3f(Point3f&& from) noexcept
    : Point3f() {
    *this = ::std::move(from);
  }

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3f& operator=(Point3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3f* internal_default_instance() {
    return reinterpret_cast<const Point3f*>(
               &_Point3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point3f& a, Point3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3f* New() const final {
    return CreateMaybeMessage<Point3f>(nullptr);
  }

  Point3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Point3f";
  }
  protected:
  explicit Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Point3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Point2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Point2f) */ {
 public:
  inline Point2f() : Point2f(nullptr) {};
  virtual ~Point2f();

  Point2f(const Point2f& from);
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2f& operator=(Point2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2f* New() const final {
    return CreateMaybeMessage<Point2f>(nullptr);
  }

  Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Point2f";
  }
  protected:
  explicit Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Pose3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Pose3f) */ {
 public:
  inline Pose3f() : Pose3f(nullptr) {};
  virtual ~Pose3f();

  Pose3f(const Pose3f& from);
  Pose3f(Pose3f&& from) noexcept
    : Pose3f() {
    *this = ::std::move(from);
  }

  inline Pose3f& operator=(const Pose3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose3f& operator=(Pose3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose3f* internal_default_instance() {
    return reinterpret_cast<const Pose3f*>(
               &_Pose3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pose3f& a, Pose3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose3f* New() const final {
    return CreateMaybeMessage<Pose3f>(nullptr);
  }

  Pose3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose3f& from);
  void MergeFrom(const Pose3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Pose3f";
  }
  protected:
  explicit Pose3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThetaFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // float theta = 1;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 3;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Pose3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float theta_;
  float pitch_;
  float roll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Size3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Size3f) */ {
 public:
  inline Size3f() : Size3f(nullptr) {};
  virtual ~Size3f();

  Size3f(const Size3f& from);
  Size3f(Size3f&& from) noexcept
    : Size3f() {
    *this = ::std::move(from);
  }

  inline Size3f& operator=(const Size3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size3f& operator=(Size3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Size3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Size3f* internal_default_instance() {
    return reinterpret_cast<const Size3f*>(
               &_Size3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Size3f& a, Size3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Size3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Size3f* New() const final {
    return CreateMaybeMessage<Size3f>(nullptr);
  }

  Size3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Size3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Size3f& from);
  void MergeFrom(const Size3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Size3f";
  }
  protected:
  explicit Size3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeighFieldNumber = 3,
  };
  // float length = 1;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float heigh = 3;
  void clear_heigh();
  float heigh() const;
  void set_heigh(float value);
  private:
  float _internal_heigh() const;
  void _internal_set_heigh(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Size3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float length_;
  float width_;
  float heigh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Color3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Color3) */ {
 public:
  inline Color3() : Color3(nullptr) {};
  virtual ~Color3();

  Color3(const Color3& from);
  Color3(Color3&& from) noexcept
    : Color3() {
    *this = ::std::move(from);
  }

  inline Color3& operator=(const Color3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color3& operator=(Color3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color3* internal_default_instance() {
    return reinterpret_cast<const Color3*>(
               &_Color3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Color3& a, Color3& b) {
    a.Swap(&b);
  }
  inline void Swap(Color3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color3* New() const final {
    return CreateMaybeMessage<Color3>(nullptr);
  }

  Color3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color3& from);
  void MergeFrom(const Color3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Color3";
  }
  protected:
  explicit Color3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kBFieldNumber = 2,
    kGFieldNumber = 3,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float b = 2;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float g = 3;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Color3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float b_;
  float g_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Location) */ {
 public:
  inline Location() : Location(nullptr) {};
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtFieldNumber = 1,
    kPoseFieldNumber = 2,
    kFloorLevelFieldNumber = 8,
    kVelocityFieldNumber = 3,
    kEpsangleFieldNumber = 4,
    kOdometerFieldNumber = 5,
    kIndexFieldNumber = 6,
    kIsMapPosFieldNumber = 7,
  };
  // .SRprotobuf.Point3f pt = 1;
  bool has_pt() const;
  private:
  bool _internal_has_pt() const;
  public:
  void clear_pt();
  const ::SRprotobuf::Point3f& pt() const;
  ::SRprotobuf::Point3f* release_pt();
  ::SRprotobuf::Point3f* mutable_pt();
  void set_allocated_pt(::SRprotobuf::Point3f* pt);
  private:
  const ::SRprotobuf::Point3f& _internal_pt() const;
  ::SRprotobuf::Point3f* _internal_mutable_pt();
  public:
  void unsafe_arena_set_allocated_pt(
      ::SRprotobuf::Point3f* pt);
  ::SRprotobuf::Point3f* unsafe_arena_release_pt();

  // .SRprotobuf.Pose3f pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::SRprotobuf::Pose3f& pose() const;
  ::SRprotobuf::Pose3f* release_pose();
  ::SRprotobuf::Pose3f* mutable_pose();
  void set_allocated_pose(::SRprotobuf::Pose3f* pose);
  private:
  const ::SRprotobuf::Pose3f& _internal_pose() const;
  ::SRprotobuf::Pose3f* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::SRprotobuf::Pose3f* pose);
  ::SRprotobuf::Pose3f* unsafe_arena_release_pose();

  // .SRprotobuf.FloorLevel floor_level = 8;
  bool has_floor_level() const;
  private:
  bool _internal_has_floor_level() const;
  public:
  void clear_floor_level();
  const ::SRprotobuf::FloorLevel& floor_level() const;
  ::SRprotobuf::FloorLevel* release_floor_level();
  ::SRprotobuf::FloorLevel* mutable_floor_level();
  void set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level);
  private:
  const ::SRprotobuf::FloorLevel& _internal_floor_level() const;
  ::SRprotobuf::FloorLevel* _internal_mutable_floor_level();
  public:
  void unsafe_arena_set_allocated_floor_level(
      ::SRprotobuf::FloorLevel* floor_level);
  ::SRprotobuf::FloorLevel* unsafe_arena_release_floor_level();

  // float velocity = 3;
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);
  private:
  float _internal_velocity() const;
  void _internal_set_velocity(float value);
  public:

  // float epsangle = 4;
  void clear_epsangle();
  float epsangle() const;
  void set_epsangle(float value);
  private:
  float _internal_epsangle() const;
  void _internal_set_epsangle(float value);
  public:

  // float odometer = 5;
  void clear_odometer();
  float odometer() const;
  void set_odometer(float value);
  private:
  float _internal_odometer() const;
  void _internal_set_odometer(float value);
  public:

  // int32 index = 6;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isMapPos = 7;
  void clear_ismappos();
  ::PROTOBUF_NAMESPACE_ID::int32 ismappos() const;
  void set_ismappos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ismappos() const;
  void _internal_set_ismappos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SRprotobuf::Point3f* pt_;
  ::SRprotobuf::Pose3f* pose_;
  ::SRprotobuf::FloorLevel* floor_level_;
  float velocity_;
  float epsangle_;
  float odometer_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 ismappos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class SlotObstacle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.SlotObstacle) */ {
 public:
  inline SlotObstacle() : SlotObstacle(nullptr) {};
  virtual ~SlotObstacle();

  SlotObstacle(const SlotObstacle& from);
  SlotObstacle(SlotObstacle&& from) noexcept
    : SlotObstacle() {
    *this = ::std::move(from);
  }

  inline SlotObstacle& operator=(const SlotObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlotObstacle& operator=(SlotObstacle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlotObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlotObstacle* internal_default_instance() {
    return reinterpret_cast<const SlotObstacle*>(
               &_SlotObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SlotObstacle& a, SlotObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(SlotObstacle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlotObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlotObstacle* New() const final {
    return CreateMaybeMessage<SlotObstacle>(nullptr);
  }

  SlotObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlotObstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlotObstacle& from);
  void MergeFrom(const SlotObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlotObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.SlotObstacle";
  }
  protected:
  explicit SlotObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .SRprotobuf.Point3f points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::SRprotobuf::Point3f* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
      mutable_points();
  private:
  const ::SRprotobuf::Point3f& _internal_points(int index) const;
  ::SRprotobuf::Point3f* _internal_add_points();
  public:
  const ::SRprotobuf::Point3f& points(int index) const;
  ::SRprotobuf::Point3f* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
      points() const;

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.SlotObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f > points_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Slot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.Slot) */ {
 public:
  inline Slot() : Slot(nullptr) {};
  virtual ~Slot();

  Slot(const Slot& from);
  Slot(Slot&& from) noexcept
    : Slot() {
    *this = ::std::move(from);
  }

  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slot& operator=(Slot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slot* internal_default_instance() {
    return reinterpret_cast<const Slot*>(
               &_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Slot& a, Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(Slot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slot* New() const final {
    return CreateMaybeMessage<Slot>(nullptr);
  }

  Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slot& from);
  void MergeFrom(const Slot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.Slot";
  }
  protected:
  explicit Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnparkableTypesFieldNumber = 16,
    kObstaclesFieldNumber = 20,
    kBFieldNumber = 1,
    kCFieldNumber = 2,
    kDFieldNumber = 3,
    kEFieldNumber = 4,
    kLocationFieldNumber = 7,
    kAttributeFieldNumber = 5,
    kIdFieldNumber = 6,
    kSlotShapeFieldNumber = 8,
    kChargerTypeFieldNumber = 9,
    kSlotTypeFieldNumber = 10,
    kThetaFieldNumber = 11,
    kWidthFieldNumber = 12,
    kHeightFieldNumber = 13,
    kMapSlotIdFieldNumber = 14,
    kIsFavorFieldNumber = 15,
    kEasyGetOffFieldNumber = 17,
    kIsNarrowSlotFieldNumber = 18,
    kGetOffParkInFieldNumber = 19,
    kIsSelectedFieldNumber = 21,
    kIsOpenEdgeFieldNumber = 22,
  };
  // repeated int32 unparkable_types = 16;
  int unparkable_types_size() const;
  private:
  int _internal_unparkable_types_size() const;
  public:
  void clear_unparkable_types();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unparkable_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_unparkable_types() const;
  void _internal_add_unparkable_types(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_unparkable_types();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 unparkable_types(int index) const;
  void set_unparkable_types(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_unparkable_types(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      unparkable_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_unparkable_types();

  // repeated .SRprotobuf.SlotObstacle obstacles = 20;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::SRprotobuf::SlotObstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::SlotObstacle >*
      mutable_obstacles();
  private:
  const ::SRprotobuf::SlotObstacle& _internal_obstacles(int index) const;
  ::SRprotobuf::SlotObstacle* _internal_add_obstacles();
  public:
  const ::SRprotobuf::SlotObstacle& obstacles(int index) const;
  ::SRprotobuf::SlotObstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::SlotObstacle >&
      obstacles() const;

  // .SRprotobuf.Point3f b = 1;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const ::SRprotobuf::Point3f& b() const;
  ::SRprotobuf::Point3f* release_b();
  ::SRprotobuf::Point3f* mutable_b();
  void set_allocated_b(::SRprotobuf::Point3f* b);
  private:
  const ::SRprotobuf::Point3f& _internal_b() const;
  ::SRprotobuf::Point3f* _internal_mutable_b();
  public:
  void unsafe_arena_set_allocated_b(
      ::SRprotobuf::Point3f* b);
  ::SRprotobuf::Point3f* unsafe_arena_release_b();

  // .SRprotobuf.Point3f c = 2;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  const ::SRprotobuf::Point3f& c() const;
  ::SRprotobuf::Point3f* release_c();
  ::SRprotobuf::Point3f* mutable_c();
  void set_allocated_c(::SRprotobuf::Point3f* c);
  private:
  const ::SRprotobuf::Point3f& _internal_c() const;
  ::SRprotobuf::Point3f* _internal_mutable_c();
  public:
  void unsafe_arena_set_allocated_c(
      ::SRprotobuf::Point3f* c);
  ::SRprotobuf::Point3f* unsafe_arena_release_c();

  // .SRprotobuf.Point3f d = 3;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  const ::SRprotobuf::Point3f& d() const;
  ::SRprotobuf::Point3f* release_d();
  ::SRprotobuf::Point3f* mutable_d();
  void set_allocated_d(::SRprotobuf::Point3f* d);
  private:
  const ::SRprotobuf::Point3f& _internal_d() const;
  ::SRprotobuf::Point3f* _internal_mutable_d();
  public:
  void unsafe_arena_set_allocated_d(
      ::SRprotobuf::Point3f* d);
  ::SRprotobuf::Point3f* unsafe_arena_release_d();

  // .SRprotobuf.Point3f e = 4;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const ::SRprotobuf::Point3f& e() const;
  ::SRprotobuf::Point3f* release_e();
  ::SRprotobuf::Point3f* mutable_e();
  void set_allocated_e(::SRprotobuf::Point3f* e);
  private:
  const ::SRprotobuf::Point3f& _internal_e() const;
  ::SRprotobuf::Point3f* _internal_mutable_e();
  public:
  void unsafe_arena_set_allocated_e(
      ::SRprotobuf::Point3f* e);
  ::SRprotobuf::Point3f* unsafe_arena_release_e();

  // .SRprotobuf.Point3f location = 7;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::SRprotobuf::Point3f& location() const;
  ::SRprotobuf::Point3f* release_location();
  ::SRprotobuf::Point3f* mutable_location();
  void set_allocated_location(::SRprotobuf::Point3f* location);
  private:
  const ::SRprotobuf::Point3f& _internal_location() const;
  ::SRprotobuf::Point3f* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::SRprotobuf::Point3f* location);
  ::SRprotobuf::Point3f* unsafe_arena_release_location();

  // int32 attribute = 5;
  void clear_attribute();
  ::PROTOBUF_NAMESPACE_ID::int32 attribute() const;
  void set_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attribute() const;
  void _internal_set_attribute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 6;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 slot_shape = 8;
  void clear_slot_shape();
  ::PROTOBUF_NAMESPACE_ID::int32 slot_shape() const;
  void set_slot_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot_shape() const;
  void _internal_set_slot_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 charger_type = 9;
  void clear_charger_type();
  ::PROTOBUF_NAMESPACE_ID::int32 charger_type() const;
  void set_charger_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_charger_type() const;
  void _internal_set_charger_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 slot_type = 10;
  void clear_slot_type();
  ::PROTOBUF_NAMESPACE_ID::int32 slot_type() const;
  void set_slot_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot_type() const;
  void _internal_set_slot_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float theta = 11;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // float width = 12;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 13;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // int32 map_slot_id = 14;
  void clear_map_slot_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_slot_id() const;
  void set_map_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_slot_id() const;
  void _internal_set_map_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isFavor = 15;
  void clear_isfavor();
  ::PROTOBUF_NAMESPACE_ID::int32 isfavor() const;
  void set_isfavor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isfavor() const;
  void _internal_set_isfavor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 easy_get_off = 17;
  void clear_easy_get_off();
  ::PROTOBUF_NAMESPACE_ID::int32 easy_get_off() const;
  void set_easy_get_off(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_easy_get_off() const;
  void _internal_set_easy_get_off(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_narrow_slot = 18;
  void clear_is_narrow_slot();
  bool is_narrow_slot() const;
  void set_is_narrow_slot(bool value);
  private:
  bool _internal_is_narrow_slot() const;
  void _internal_set_is_narrow_slot(bool value);
  public:

  // int32 get_off_park_in = 19;
  void clear_get_off_park_in();
  ::PROTOBUF_NAMESPACE_ID::int32 get_off_park_in() const;
  void set_get_off_park_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_get_off_park_in() const;
  void _internal_set_get_off_park_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_selected = 21;
  void clear_is_selected();
  ::PROTOBUF_NAMESPACE_ID::int32 is_selected() const;
  void set_is_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_selected() const;
  void _internal_set_is_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_open_edge = 22;
  void clear_is_open_edge();
  ::PROTOBUF_NAMESPACE_ID::int32 is_open_edge() const;
  void set_is_open_edge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_open_edge() const;
  void _internal_set_is_open_edge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > unparkable_types_;
  mutable std::atomic<int> _unparkable_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::SlotObstacle > obstacles_;
  ::SRprotobuf::Point3f* b_;
  ::SRprotobuf::Point3f* c_;
  ::SRprotobuf::Point3f* d_;
  ::SRprotobuf::Point3f* e_;
  ::SRprotobuf::Point3f* location_;
  ::PROTOBUF_NAMESPACE_ID::int32 attribute_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_shape_;
  ::PROTOBUF_NAMESPACE_ID::int32 charger_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_type_;
  float theta_;
  float width_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_slot_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 isfavor_;
  ::PROTOBUF_NAMESPACE_ID::int32 easy_get_off_;
  bool is_narrow_slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 get_off_park_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_selected_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_open_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// -------------------------------------------------------------------

class FloorLevel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SRprotobuf.FloorLevel) */ {
 public:
  inline FloorLevel() : FloorLevel(nullptr) {};
  virtual ~FloorLevel();

  FloorLevel(const FloorLevel& from);
  FloorLevel(FloorLevel&& from) noexcept
    : FloorLevel() {
    *this = ::std::move(from);
  }

  inline FloorLevel& operator=(const FloorLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloorLevel& operator=(FloorLevel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloorLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloorLevel* internal_default_instance() {
    return reinterpret_cast<const FloorLevel*>(
               &_FloorLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FloorLevel& a, FloorLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(FloorLevel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloorLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloorLevel* New() const final {
    return CreateMaybeMessage<FloorLevel>(nullptr);
  }

  FloorLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloorLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloorLevel& from);
  void MergeFrom(const FloorLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloorLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SRprotobuf.FloorLevel";
  }
  protected:
  explicit FloorLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fap_2fbase_2eproto);
    return ::descriptor_table_proto_5fap_2fbase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartLevelFieldNumber = 1,
    kEndLevelFieldNumber = 2,
  };
  // float startLevel = 1;
  void clear_startlevel();
  float startlevel() const;
  void set_startlevel(float value);
  private:
  float _internal_startlevel() const;
  void _internal_set_startlevel(float value);
  public:

  // float endLevel = 2;
  void clear_endlevel();
  float endlevel() const;
  void set_endlevel(float value);
  private:
  float _internal_endlevel() const;
  void _internal_set_endlevel(float value);
  public:

  // @@protoc_insertion_point(class_scope:SRprotobuf.FloorLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float startlevel_;
  float endlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fap_2fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3f

// float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::_internal_x() const {
  return x_;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Point3f.x)
  return _internal_x();
}
inline void Point3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Point3f.x)
}

// float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::_internal_y() const {
  return y_;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Point3f.y)
  return _internal_y();
}
inline void Point3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Point3f.y)
}

// float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::_internal_z() const {
  return z_;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Point3f.z)
  return _internal_z();
}
inline void Point3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Point3f.z)
}

// -------------------------------------------------------------------

// Point2f

// float x = 1;
inline void Point2f::clear_x() {
  x_ = 0;
}
inline float Point2f::_internal_x() const {
  return x_;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Point2f.x)
  return _internal_x();
}
inline void Point2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Point2f.x)
}

// float y = 2;
inline void Point2f::clear_y() {
  y_ = 0;
}
inline float Point2f::_internal_y() const {
  return y_;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Point2f.y)
  return _internal_y();
}
inline void Point2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Point2f.y)
}

// -------------------------------------------------------------------

// Pose3f

// float theta = 1;
inline void Pose3f::clear_theta() {
  theta_ = 0;
}
inline float Pose3f::_internal_theta() const {
  return theta_;
}
inline float Pose3f::theta() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Pose3f.theta)
  return _internal_theta();
}
inline void Pose3f::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void Pose3f::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Pose3f.theta)
}

// float pitch = 2;
inline void Pose3f::clear_pitch() {
  pitch_ = 0;
}
inline float Pose3f::_internal_pitch() const {
  return pitch_;
}
inline float Pose3f::pitch() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Pose3f.pitch)
  return _internal_pitch();
}
inline void Pose3f::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void Pose3f::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Pose3f.pitch)
}

// float roll = 3;
inline void Pose3f::clear_roll() {
  roll_ = 0;
}
inline float Pose3f::_internal_roll() const {
  return roll_;
}
inline float Pose3f::roll() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Pose3f.roll)
  return _internal_roll();
}
inline void Pose3f::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void Pose3f::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Pose3f.roll)
}

// -------------------------------------------------------------------

// Size3f

// float length = 1;
inline void Size3f::clear_length() {
  length_ = 0;
}
inline float Size3f::_internal_length() const {
  return length_;
}
inline float Size3f::length() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Size3f.length)
  return _internal_length();
}
inline void Size3f::_internal_set_length(float value) {
  
  length_ = value;
}
inline void Size3f::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Size3f.length)
}

// float width = 2;
inline void Size3f::clear_width() {
  width_ = 0;
}
inline float Size3f::_internal_width() const {
  return width_;
}
inline float Size3f::width() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Size3f.width)
  return _internal_width();
}
inline void Size3f::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Size3f::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Size3f.width)
}

// float heigh = 3;
inline void Size3f::clear_heigh() {
  heigh_ = 0;
}
inline float Size3f::_internal_heigh() const {
  return heigh_;
}
inline float Size3f::heigh() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Size3f.heigh)
  return _internal_heigh();
}
inline void Size3f::_internal_set_heigh(float value) {
  
  heigh_ = value;
}
inline void Size3f::set_heigh(float value) {
  _internal_set_heigh(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Size3f.heigh)
}

// -------------------------------------------------------------------

// Color3

// float r = 1;
inline void Color3::clear_r() {
  r_ = 0;
}
inline float Color3::_internal_r() const {
  return r_;
}
inline float Color3::r() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Color3.r)
  return _internal_r();
}
inline void Color3::_internal_set_r(float value) {
  
  r_ = value;
}
inline void Color3::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Color3.r)
}

// float g = 3;
inline void Color3::clear_g() {
  g_ = 0;
}
inline float Color3::_internal_g() const {
  return g_;
}
inline float Color3::g() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Color3.g)
  return _internal_g();
}
inline void Color3::_internal_set_g(float value) {
  
  g_ = value;
}
inline void Color3::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Color3.g)
}

// float b = 2;
inline void Color3::clear_b() {
  b_ = 0;
}
inline float Color3::_internal_b() const {
  return b_;
}
inline float Color3::b() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Color3.b)
  return _internal_b();
}
inline void Color3::_internal_set_b(float value) {
  
  b_ = value;
}
inline void Color3::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Color3.b)
}

// -------------------------------------------------------------------

// Location

// .SRprotobuf.Point3f pt = 1;
inline bool Location::_internal_has_pt() const {
  return this != internal_default_instance() && pt_ != nullptr;
}
inline bool Location::has_pt() const {
  return _internal_has_pt();
}
inline void Location::clear_pt() {
  if (GetArena() == nullptr && pt_ != nullptr) {
    delete pt_;
  }
  pt_ = nullptr;
}
inline const ::SRprotobuf::Point3f& Location::_internal_pt() const {
  const ::SRprotobuf::Point3f* p = pt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Location::pt() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.pt)
  return _internal_pt();
}
inline void Location::unsafe_arena_set_allocated_pt(
    ::SRprotobuf::Point3f* pt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pt_);
  }
  pt_ = pt;
  if (pt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Location.pt)
}
inline ::SRprotobuf::Point3f* Location::release_pt() {
  auto temp = unsafe_arena_release_pt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Location::unsafe_arena_release_pt() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Location.pt)
  
  ::SRprotobuf::Point3f* temp = pt_;
  pt_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Location::_internal_mutable_pt() {
  
  if (pt_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    pt_ = p;
  }
  return pt_;
}
inline ::SRprotobuf::Point3f* Location::mutable_pt() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Location.pt)
  return _internal_mutable_pt();
}
inline void Location::set_allocated_pt(::SRprotobuf::Point3f* pt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pt_;
  }
  if (pt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pt);
    if (message_arena != submessage_arena) {
      pt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pt, submessage_arena);
    }
    
  } else {
    
  }
  pt_ = pt;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Location.pt)
}

// .SRprotobuf.Pose3f pose = 2;
inline bool Location::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Location::has_pose() const {
  return _internal_has_pose();
}
inline void Location::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::SRprotobuf::Pose3f& Location::_internal_pose() const {
  const ::SRprotobuf::Pose3f* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Pose3f*>(
      &::SRprotobuf::_Pose3f_default_instance_);
}
inline const ::SRprotobuf::Pose3f& Location::pose() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.pose)
  return _internal_pose();
}
inline void Location::unsafe_arena_set_allocated_pose(
    ::SRprotobuf::Pose3f* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Location.pose)
}
inline ::SRprotobuf::Pose3f* Location::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Pose3f* Location::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Location.pose)
  
  ::SRprotobuf::Pose3f* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Pose3f* Location::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Pose3f>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::SRprotobuf::Pose3f* Location::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Location.pose)
  return _internal_mutable_pose();
}
inline void Location::set_allocated_pose(::SRprotobuf::Pose3f* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Location.pose)
}

// float velocity = 3;
inline void Location::clear_velocity() {
  velocity_ = 0;
}
inline float Location::_internal_velocity() const {
  return velocity_;
}
inline float Location::velocity() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.velocity)
  return _internal_velocity();
}
inline void Location::_internal_set_velocity(float value) {
  
  velocity_ = value;
}
inline void Location::set_velocity(float value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Location.velocity)
}

// float epsangle = 4;
inline void Location::clear_epsangle() {
  epsangle_ = 0;
}
inline float Location::_internal_epsangle() const {
  return epsangle_;
}
inline float Location::epsangle() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.epsangle)
  return _internal_epsangle();
}
inline void Location::_internal_set_epsangle(float value) {
  
  epsangle_ = value;
}
inline void Location::set_epsangle(float value) {
  _internal_set_epsangle(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Location.epsangle)
}

// float odometer = 5;
inline void Location::clear_odometer() {
  odometer_ = 0;
}
inline float Location::_internal_odometer() const {
  return odometer_;
}
inline float Location::odometer() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.odometer)
  return _internal_odometer();
}
inline void Location::_internal_set_odometer(float value) {
  
  odometer_ = value;
}
inline void Location::set_odometer(float value) {
  _internal_set_odometer(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Location.odometer)
}

// int32 index = 6;
inline void Location::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::index() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.index)
  return _internal_index();
}
inline void Location::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Location::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Location.index)
}

// int32 isMapPos = 7;
inline void Location::clear_ismappos() {
  ismappos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::_internal_ismappos() const {
  return ismappos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Location::ismappos() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.isMapPos)
  return _internal_ismappos();
}
inline void Location::_internal_set_ismappos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ismappos_ = value;
}
inline void Location::set_ismappos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ismappos(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Location.isMapPos)
}

// .SRprotobuf.FloorLevel floor_level = 8;
inline bool Location::_internal_has_floor_level() const {
  return this != internal_default_instance() && floor_level_ != nullptr;
}
inline bool Location::has_floor_level() const {
  return _internal_has_floor_level();
}
inline void Location::clear_floor_level() {
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
}
inline const ::SRprotobuf::FloorLevel& Location::_internal_floor_level() const {
  const ::SRprotobuf::FloorLevel* p = floor_level_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::FloorLevel*>(
      &::SRprotobuf::_FloorLevel_default_instance_);
}
inline const ::SRprotobuf::FloorLevel& Location::floor_level() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Location.floor_level)
  return _internal_floor_level();
}
inline void Location::unsafe_arena_set_allocated_floor_level(
    ::SRprotobuf::FloorLevel* floor_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(floor_level_);
  }
  floor_level_ = floor_level;
  if (floor_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Location.floor_level)
}
inline ::SRprotobuf::FloorLevel* Location::release_floor_level() {
  auto temp = unsafe_arena_release_floor_level();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::FloorLevel* Location::unsafe_arena_release_floor_level() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Location.floor_level)
  
  ::SRprotobuf::FloorLevel* temp = floor_level_;
  floor_level_ = nullptr;
  return temp;
}
inline ::SRprotobuf::FloorLevel* Location::_internal_mutable_floor_level() {
  
  if (floor_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::FloorLevel>(GetArena());
    floor_level_ = p;
  }
  return floor_level_;
}
inline ::SRprotobuf::FloorLevel* Location::mutable_floor_level() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Location.floor_level)
  return _internal_mutable_floor_level();
}
inline void Location::set_allocated_floor_level(::SRprotobuf::FloorLevel* floor_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete floor_level_;
  }
  if (floor_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(floor_level);
    if (message_arena != submessage_arena) {
      floor_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, floor_level, submessage_arena);
    }
    
  } else {
    
  }
  floor_level_ = floor_level;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Location.floor_level)
}

// -------------------------------------------------------------------

// SlotObstacle

// int32 type = 1;
inline void SlotObstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlotObstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlotObstacle::type() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.SlotObstacle.type)
  return _internal_type();
}
inline void SlotObstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SlotObstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.SlotObstacle.type)
}

// repeated .SRprotobuf.Point3f points = 2;
inline int SlotObstacle::_internal_points_size() const {
  return points_.size();
}
inline int SlotObstacle::points_size() const {
  return _internal_points_size();
}
inline void SlotObstacle::clear_points() {
  points_.Clear();
}
inline ::SRprotobuf::Point3f* SlotObstacle::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.SlotObstacle.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >*
SlotObstacle::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.SlotObstacle.points)
  return &points_;
}
inline const ::SRprotobuf::Point3f& SlotObstacle::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::SRprotobuf::Point3f& SlotObstacle::points(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.SlotObstacle.points)
  return _internal_points(index);
}
inline ::SRprotobuf::Point3f* SlotObstacle::_internal_add_points() {
  return points_.Add();
}
inline ::SRprotobuf::Point3f* SlotObstacle::add_points() {
  // @@protoc_insertion_point(field_add:SRprotobuf.SlotObstacle.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::Point3f >&
SlotObstacle::points() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.SlotObstacle.points)
  return points_;
}

// -------------------------------------------------------------------

// Slot

// .SRprotobuf.Point3f b = 1;
inline bool Slot::_internal_has_b() const {
  return this != internal_default_instance() && b_ != nullptr;
}
inline bool Slot::has_b() const {
  return _internal_has_b();
}
inline void Slot::clear_b() {
  if (GetArena() == nullptr && b_ != nullptr) {
    delete b_;
  }
  b_ = nullptr;
}
inline const ::SRprotobuf::Point3f& Slot::_internal_b() const {
  const ::SRprotobuf::Point3f* p = b_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Slot::b() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.b)
  return _internal_b();
}
inline void Slot::unsafe_arena_set_allocated_b(
    ::SRprotobuf::Point3f* b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(b_);
  }
  b_ = b;
  if (b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Slot.b)
}
inline ::SRprotobuf::Point3f* Slot::release_b() {
  auto temp = unsafe_arena_release_b();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::unsafe_arena_release_b() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Slot.b)
  
  ::SRprotobuf::Point3f* temp = b_;
  b_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::_internal_mutable_b() {
  
  if (b_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    b_ = p;
  }
  return b_;
}
inline ::SRprotobuf::Point3f* Slot::mutable_b() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Slot.b)
  return _internal_mutable_b();
}
inline void Slot::set_allocated_b(::SRprotobuf::Point3f* b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete b_;
  }
  if (b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(b);
    if (message_arena != submessage_arena) {
      b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, b, submessage_arena);
    }
    
  } else {
    
  }
  b_ = b;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Slot.b)
}

// .SRprotobuf.Point3f c = 2;
inline bool Slot::_internal_has_c() const {
  return this != internal_default_instance() && c_ != nullptr;
}
inline bool Slot::has_c() const {
  return _internal_has_c();
}
inline void Slot::clear_c() {
  if (GetArena() == nullptr && c_ != nullptr) {
    delete c_;
  }
  c_ = nullptr;
}
inline const ::SRprotobuf::Point3f& Slot::_internal_c() const {
  const ::SRprotobuf::Point3f* p = c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Slot::c() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.c)
  return _internal_c();
}
inline void Slot::unsafe_arena_set_allocated_c(
    ::SRprotobuf::Point3f* c) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c_);
  }
  c_ = c;
  if (c) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Slot.c)
}
inline ::SRprotobuf::Point3f* Slot::release_c() {
  auto temp = unsafe_arena_release_c();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::unsafe_arena_release_c() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Slot.c)
  
  ::SRprotobuf::Point3f* temp = c_;
  c_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::_internal_mutable_c() {
  
  if (c_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    c_ = p;
  }
  return c_;
}
inline ::SRprotobuf::Point3f* Slot::mutable_c() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Slot.c)
  return _internal_mutable_c();
}
inline void Slot::set_allocated_c(::SRprotobuf::Point3f* c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete c_;
  }
  if (c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c);
    if (message_arena != submessage_arena) {
      c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c, submessage_arena);
    }
    
  } else {
    
  }
  c_ = c;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Slot.c)
}

// .SRprotobuf.Point3f d = 3;
inline bool Slot::_internal_has_d() const {
  return this != internal_default_instance() && d_ != nullptr;
}
inline bool Slot::has_d() const {
  return _internal_has_d();
}
inline void Slot::clear_d() {
  if (GetArena() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
}
inline const ::SRprotobuf::Point3f& Slot::_internal_d() const {
  const ::SRprotobuf::Point3f* p = d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Slot::d() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.d)
  return _internal_d();
}
inline void Slot::unsafe_arena_set_allocated_d(
    ::SRprotobuf::Point3f* d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(d_);
  }
  d_ = d;
  if (d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Slot.d)
}
inline ::SRprotobuf::Point3f* Slot::release_d() {
  auto temp = unsafe_arena_release_d();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::unsafe_arena_release_d() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Slot.d)
  
  ::SRprotobuf::Point3f* temp = d_;
  d_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::_internal_mutable_d() {
  
  if (d_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    d_ = p;
  }
  return d_;
}
inline ::SRprotobuf::Point3f* Slot::mutable_d() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Slot.d)
  return _internal_mutable_d();
}
inline void Slot::set_allocated_d(::SRprotobuf::Point3f* d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete d_;
  }
  if (d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(d);
    if (message_arena != submessage_arena) {
      d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, d, submessage_arena);
    }
    
  } else {
    
  }
  d_ = d;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Slot.d)
}

// .SRprotobuf.Point3f e = 4;
inline bool Slot::_internal_has_e() const {
  return this != internal_default_instance() && e_ != nullptr;
}
inline bool Slot::has_e() const {
  return _internal_has_e();
}
inline void Slot::clear_e() {
  if (GetArena() == nullptr && e_ != nullptr) {
    delete e_;
  }
  e_ = nullptr;
}
inline const ::SRprotobuf::Point3f& Slot::_internal_e() const {
  const ::SRprotobuf::Point3f* p = e_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Slot::e() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.e)
  return _internal_e();
}
inline void Slot::unsafe_arena_set_allocated_e(
    ::SRprotobuf::Point3f* e) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e_);
  }
  e_ = e;
  if (e) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Slot.e)
}
inline ::SRprotobuf::Point3f* Slot::release_e() {
  auto temp = unsafe_arena_release_e();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::unsafe_arena_release_e() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Slot.e)
  
  ::SRprotobuf::Point3f* temp = e_;
  e_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::_internal_mutable_e() {
  
  if (e_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    e_ = p;
  }
  return e_;
}
inline ::SRprotobuf::Point3f* Slot::mutable_e() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Slot.e)
  return _internal_mutable_e();
}
inline void Slot::set_allocated_e(::SRprotobuf::Point3f* e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete e_;
  }
  if (e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(e);
    if (message_arena != submessage_arena) {
      e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  e_ = e;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Slot.e)
}

// int32 attribute = 5;
inline void Slot::clear_attribute() {
  attribute_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_attribute() const {
  return attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::attribute() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.attribute)
  return _internal_attribute();
}
inline void Slot::_internal_set_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attribute_ = value;
}
inline void Slot::set_attribute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.attribute)
}

// int32 id = 6;
inline void Slot::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::id() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.id)
  return _internal_id();
}
inline void Slot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Slot::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.id)
}

// .SRprotobuf.Point3f location = 7;
inline bool Slot::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Slot::has_location() const {
  return _internal_has_location();
}
inline void Slot::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::SRprotobuf::Point3f& Slot::_internal_location() const {
  const ::SRprotobuf::Point3f* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SRprotobuf::Point3f*>(
      &::SRprotobuf::_Point3f_default_instance_);
}
inline const ::SRprotobuf::Point3f& Slot::location() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.location)
  return _internal_location();
}
inline void Slot::unsafe_arena_set_allocated_location(
    ::SRprotobuf::Point3f* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SRprotobuf.Slot.location)
}
inline ::SRprotobuf::Point3f* Slot::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:SRprotobuf.Slot.location)
  
  ::SRprotobuf::Point3f* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::SRprotobuf::Point3f* Slot::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::SRprotobuf::Point3f>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::SRprotobuf::Point3f* Slot::mutable_location() {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Slot.location)
  return _internal_mutable_location();
}
inline void Slot::set_allocated_location(::SRprotobuf::Point3f* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:SRprotobuf.Slot.location)
}

// int32 slot_shape = 8;
inline void Slot::clear_slot_shape() {
  slot_shape_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_slot_shape() const {
  return slot_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::slot_shape() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.slot_shape)
  return _internal_slot_shape();
}
inline void Slot::_internal_set_slot_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slot_shape_ = value;
}
inline void Slot::set_slot_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot_shape(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.slot_shape)
}

// int32 charger_type = 9;
inline void Slot::clear_charger_type() {
  charger_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_charger_type() const {
  return charger_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::charger_type() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.charger_type)
  return _internal_charger_type();
}
inline void Slot::_internal_set_charger_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  charger_type_ = value;
}
inline void Slot::set_charger_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_charger_type(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.charger_type)
}

// int32 slot_type = 10;
inline void Slot::clear_slot_type() {
  slot_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_slot_type() const {
  return slot_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::slot_type() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.slot_type)
  return _internal_slot_type();
}
inline void Slot::_internal_set_slot_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  slot_type_ = value;
}
inline void Slot::set_slot_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot_type(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.slot_type)
}

// float theta = 11;
inline void Slot::clear_theta() {
  theta_ = 0;
}
inline float Slot::_internal_theta() const {
  return theta_;
}
inline float Slot::theta() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.theta)
  return _internal_theta();
}
inline void Slot::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void Slot::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.theta)
}

// float width = 12;
inline void Slot::clear_width() {
  width_ = 0;
}
inline float Slot::_internal_width() const {
  return width_;
}
inline float Slot::width() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.width)
  return _internal_width();
}
inline void Slot::_internal_set_width(float value) {
  
  width_ = value;
}
inline void Slot::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.width)
}

// float height = 13;
inline void Slot::clear_height() {
  height_ = 0;
}
inline float Slot::_internal_height() const {
  return height_;
}
inline float Slot::height() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.height)
  return _internal_height();
}
inline void Slot::_internal_set_height(float value) {
  
  height_ = value;
}
inline void Slot::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.height)
}

// int32 map_slot_id = 14;
inline void Slot::clear_map_slot_id() {
  map_slot_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_map_slot_id() const {
  return map_slot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::map_slot_id() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.map_slot_id)
  return _internal_map_slot_id();
}
inline void Slot::_internal_set_map_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_slot_id_ = value;
}
inline void Slot::set_map_slot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_slot_id(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.map_slot_id)
}

// int32 isFavor = 15;
inline void Slot::clear_isfavor() {
  isfavor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_isfavor() const {
  return isfavor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::isfavor() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.isFavor)
  return _internal_isfavor();
}
inline void Slot::_internal_set_isfavor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isfavor_ = value;
}
inline void Slot::set_isfavor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isfavor(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.isFavor)
}

// repeated int32 unparkable_types = 16;
inline int Slot::_internal_unparkable_types_size() const {
  return unparkable_types_.size();
}
inline int Slot::unparkable_types_size() const {
  return _internal_unparkable_types_size();
}
inline void Slot::clear_unparkable_types() {
  unparkable_types_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_unparkable_types(int index) const {
  return unparkable_types_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::unparkable_types(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.unparkable_types)
  return _internal_unparkable_types(index);
}
inline void Slot::set_unparkable_types(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  unparkable_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.unparkable_types)
}
inline void Slot::_internal_add_unparkable_types(::PROTOBUF_NAMESPACE_ID::int32 value) {
  unparkable_types_.Add(value);
}
inline void Slot::add_unparkable_types(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_unparkable_types(value);
  // @@protoc_insertion_point(field_add:SRprotobuf.Slot.unparkable_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Slot::_internal_unparkable_types() const {
  return unparkable_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Slot::unparkable_types() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.Slot.unparkable_types)
  return _internal_unparkable_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Slot::_internal_mutable_unparkable_types() {
  return &unparkable_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Slot::mutable_unparkable_types() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.Slot.unparkable_types)
  return _internal_mutable_unparkable_types();
}

// int32 easy_get_off = 17;
inline void Slot::clear_easy_get_off() {
  easy_get_off_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_easy_get_off() const {
  return easy_get_off_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::easy_get_off() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.easy_get_off)
  return _internal_easy_get_off();
}
inline void Slot::_internal_set_easy_get_off(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  easy_get_off_ = value;
}
inline void Slot::set_easy_get_off(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_easy_get_off(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.easy_get_off)
}

// bool is_narrow_slot = 18;
inline void Slot::clear_is_narrow_slot() {
  is_narrow_slot_ = false;
}
inline bool Slot::_internal_is_narrow_slot() const {
  return is_narrow_slot_;
}
inline bool Slot::is_narrow_slot() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.is_narrow_slot)
  return _internal_is_narrow_slot();
}
inline void Slot::_internal_set_is_narrow_slot(bool value) {
  
  is_narrow_slot_ = value;
}
inline void Slot::set_is_narrow_slot(bool value) {
  _internal_set_is_narrow_slot(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.is_narrow_slot)
}

// int32 get_off_park_in = 19;
inline void Slot::clear_get_off_park_in() {
  get_off_park_in_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_get_off_park_in() const {
  return get_off_park_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::get_off_park_in() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.get_off_park_in)
  return _internal_get_off_park_in();
}
inline void Slot::_internal_set_get_off_park_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  get_off_park_in_ = value;
}
inline void Slot::set_get_off_park_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_get_off_park_in(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.get_off_park_in)
}

// repeated .SRprotobuf.SlotObstacle obstacles = 20;
inline int Slot::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int Slot::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void Slot::clear_obstacles() {
  obstacles_.Clear();
}
inline ::SRprotobuf::SlotObstacle* Slot::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:SRprotobuf.Slot.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::SlotObstacle >*
Slot::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:SRprotobuf.Slot.obstacles)
  return &obstacles_;
}
inline const ::SRprotobuf::SlotObstacle& Slot::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::SRprotobuf::SlotObstacle& Slot::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.obstacles)
  return _internal_obstacles(index);
}
inline ::SRprotobuf::SlotObstacle* Slot::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::SRprotobuf::SlotObstacle* Slot::add_obstacles() {
  // @@protoc_insertion_point(field_add:SRprotobuf.Slot.obstacles)
  return _internal_add_obstacles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SRprotobuf::SlotObstacle >&
Slot::obstacles() const {
  // @@protoc_insertion_point(field_list:SRprotobuf.Slot.obstacles)
  return obstacles_;
}

// int32 is_selected = 21;
inline void Slot::clear_is_selected() {
  is_selected_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_is_selected() const {
  return is_selected_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::is_selected() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.is_selected)
  return _internal_is_selected();
}
inline void Slot::_internal_set_is_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_selected_ = value;
}
inline void Slot::set_is_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_selected(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.is_selected)
}

// int32 is_open_edge = 22;
inline void Slot::clear_is_open_edge() {
  is_open_edge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::_internal_is_open_edge() const {
  return is_open_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Slot::is_open_edge() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.Slot.is_open_edge)
  return _internal_is_open_edge();
}
inline void Slot::_internal_set_is_open_edge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_open_edge_ = value;
}
inline void Slot::set_is_open_edge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_open_edge(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.Slot.is_open_edge)
}

// -------------------------------------------------------------------

// FloorLevel

// float startLevel = 1;
inline void FloorLevel::clear_startlevel() {
  startlevel_ = 0;
}
inline float FloorLevel::_internal_startlevel() const {
  return startlevel_;
}
inline float FloorLevel::startlevel() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.FloorLevel.startLevel)
  return _internal_startlevel();
}
inline void FloorLevel::_internal_set_startlevel(float value) {
  
  startlevel_ = value;
}
inline void FloorLevel::set_startlevel(float value) {
  _internal_set_startlevel(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.FloorLevel.startLevel)
}

// float endLevel = 2;
inline void FloorLevel::clear_endlevel() {
  endlevel_ = 0;
}
inline float FloorLevel::_internal_endlevel() const {
  return endlevel_;
}
inline float FloorLevel::endlevel() const {
  // @@protoc_insertion_point(field_get:SRprotobuf.FloorLevel.endLevel)
  return _internal_endlevel();
}
inline void FloorLevel::_internal_set_endlevel(float value) {
  
  endlevel_ = value;
}
inline void FloorLevel::set_endlevel(float value) {
  _internal_set_endlevel(value);
  // @@protoc_insertion_point(field_set:SRprotobuf.FloorLevel.endLevel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SRprotobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SRprotobuf::SlotUnParkableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SRprotobuf::SlotUnParkableType>() {
  return ::SRprotobuf::SlotUnParkableType_descriptor();
}
template <> struct is_proto_enum< ::SRprotobuf::SlotObstacleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SRprotobuf::SlotObstacleType>() {
  return ::SRprotobuf::SlotObstacleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fap_2fbase_2eproto
