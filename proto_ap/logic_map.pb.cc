// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/logic_map.proto

#include "proto_ap/logic_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Object_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_lane_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2flogic_5fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloorLevel_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_proto_5fap_2fbase_2eproto;
namespace LogicMapPb {
class secIDtypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<secIDtype> _instance;
} _secIDtype_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class secTypeNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<secTypeNode> _instance;
} _secTypeNode_default_instance_;
class connectedLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<connectedLane> _instance;
} _connectedLane_default_instance_;
class laneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lane> _instance;
} _lane_default_instance_;
class RoadSection_roadedgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSection_roadedge> _instance;
} _RoadSection_roadedge_default_instance_;
class RoadSectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadSection> _instance;
} _RoadSection_default_instance_;
class Line_equationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Line_equation> _instance;
} _Line_equation_default_instance_;
class Line_curveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Line_curve> _instance;
} _Line_curve_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Line> _instance;
} _Line_default_instance_;
class Intersection_edgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Intersection_edge> _instance;
} _Intersection_edge_default_instance_;
class IntersectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Intersection> _instance;
} _Intersection_default_instance_;
class Object_logicptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object_logicpt> _instance;
} _Object_logicpt_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class LogicMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicMap> _instance;
} _LogicMap_default_instance_;
}  // namespace LogicMapPb
static void InitDefaultsscc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Intersection_default_instance_;
    new (ptr) ::LogicMapPb::Intersection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Intersection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_lane_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Intersection_edge_default_instance_;
    new (ptr) ::LogicMapPb::Intersection_edge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Intersection_edge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_Line_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Line_default_instance_;
    new (ptr) ::LogicMapPb::Line();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Line::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Line_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Line_curve_default_instance_;
    new (ptr) ::LogicMapPb::Line_curve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Line_curve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Line_equation_default_instance_;
    new (ptr) ::LogicMapPb::Line_equation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Line_equation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_LogicMap_default_instance_;
    new (ptr) ::LogicMapPb::LogicMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::LogicMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_Node_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_Line_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_Object_proto_5fap_2flogic_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Node_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Node_default_instance_;
    new (ptr) ::LogicMapPb::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Node_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Node_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_Object_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Object_default_instance_;
    new (ptr) ::LogicMapPb::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Object_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Object_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_Object_logicpt_default_instance_;
    new (ptr) ::LogicMapPb::Object_logicpt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::Object_logicpt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_RoadSection_default_instance_;
    new (ptr) ::LogicMapPb::RoadSection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::RoadSection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_lane_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto.base,
      &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_RoadSection_roadedge_default_instance_;
    new (ptr) ::LogicMapPb::RoadSection_roadedge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::RoadSection_roadedge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_connectedLane_default_instance_;
    new (ptr) ::LogicMapPb::connectedLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::connectedLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_lane_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_lane_default_instance_;
    new (ptr) ::LogicMapPb::lane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::lane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_lane_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_lane_proto_5fap_2flogic_5fmap_2eproto}, {
      &scc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto.base,}};

static void InitDefaultsscc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_secIDtype_default_instance_;
    new (ptr) ::LogicMapPb::secIDtype();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::secIDtype::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto}, {}};

static void InitDefaultsscc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LogicMapPb::_secTypeNode_default_instance_;
    new (ptr) ::LogicMapPb::secTypeNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogicMapPb::secTypeNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fap_2flogic_5fmap_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_5fap_2flogic_5fmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fap_2flogic_5fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fap_2flogic_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secIDtype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secIDtype, sec_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secIDtype, sec_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Node, id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Node, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Node, sec_id_types_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Node, posi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secTypeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secTypeNode, sec_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secTypeNode, sec_type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::secTypeNode, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::connectedLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::connectedLane, relation_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::connectedLane, sec_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::connectedLane, sec_type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::connectedLane, lane_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, index_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, is_virtual_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, dir_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, from_node_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, to_node_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, object_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, lefts_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, rights_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, center_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, avp_line_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::lane, connected_lanes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection_roadedge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection_roadedge, index_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection_roadedge, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection_roadedge, is_left_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection_roadedge, height_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection_roadedge, line_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, length_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, node_a_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, node_b_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, way_nodes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, confidence_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, available_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, sec_type_nodes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, object_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, lanes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, link_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, joint_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, roadedges_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, avp_line_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::RoadSection, floor_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_equation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, index_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, length_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, confidence_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, curve_pts_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line_curve, equa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, from_node_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, to_node_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, length_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, curves_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Line, sec_id_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, subtype_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, dir_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, pts_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, link_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection_edge, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, joint_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, loc_insec_id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, available_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, sec_type_nodes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, object_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, vertexes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, edges_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, lanes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, avp_line_ids_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Intersection, floor_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object_logicpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, id_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, confidence_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, sec_id_type_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, pts_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::Object, logicpts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::LogicMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::LogicMap, nodes_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::LogicMap, roadsections_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::LogicMap, lines_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::LogicMap, intersections_),
  PROTOBUF_FIELD_OFFSET(::LogicMapPb::LogicMap, objects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LogicMapPb::secIDtype)},
  { 7, -1, sizeof(::LogicMapPb::Node)},
  { 16, -1, sizeof(::LogicMapPb::secTypeNode)},
  { 24, -1, sizeof(::LogicMapPb::connectedLane)},
  { 33, -1, sizeof(::LogicMapPb::lane)},
  { 49, -1, sizeof(::LogicMapPb::RoadSection_roadedge)},
  { 59, -1, sizeof(::LogicMapPb::RoadSection)},
  { 80, -1, sizeof(::LogicMapPb::Line_equation)},
  { 85, -1, sizeof(::LogicMapPb::Line_curve)},
  { 96, -1, sizeof(::LogicMapPb::Line)},
  { 107, -1, sizeof(::LogicMapPb::Intersection_edge)},
  { 119, -1, sizeof(::LogicMapPb::Intersection)},
  { 136, -1, sizeof(::LogicMapPb::Object_logicpt)},
  { 141, -1, sizeof(::LogicMapPb::Object)},
  { 152, -1, sizeof(::LogicMapPb::LogicMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_secIDtype_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_secTypeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_connectedLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_lane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_RoadSection_roadedge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_RoadSection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Line_equation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Line_curve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Line_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Intersection_edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Intersection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Object_logicpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LogicMapPb::_LogicMap_default_instance_),
};

const char descriptor_table_protodef_proto_5fap_2flogic_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030proto_ap/logic_map.proto\022\nLogicMapPb\032\023"
  "proto_ap/base.proto\"-\n\tsecIDtype\022\016\n\006sec_"
  "id\030\001 \001(\005\022\020\n\010sec_type\030\002 \001(\005\"p\n\004Node\022\n\n\002id"
  "\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022+\n\014sec_id_types\030\003 \003"
  "(\0132\025.LogicMapPb.secIDtype\022!\n\004posi\030\004 \001(\0132"
  "\023.SRprotobuf.Point3f\"@\n\013secTypeNode\022\016\n\006s"
  "ec_id\030\001 \001(\005\022\020\n\010sec_type\030\002 \001(\005\022\017\n\007node_id"
  "\030\003 \001(\005\"W\n\rconnectedLane\022\020\n\010relation\030\001 \001("
  "\005\022\016\n\006sec_id\030\002 \001(\005\022\020\n\010sec_type\030\003 \001(\005\022\022\n\nl"
  "ane_index\030\004 \001(\005\"\355\001\n\004lane\022\r\n\005index\030\001 \001(\005\022"
  "\022\n\nis_virtual\030\002 \001(\005\022\013\n\003dir\030\003 \001(\005\022\024\n\014from"
  "_node_id\030\004 \001(\005\022\022\n\nto_node_id\030\005 \001(\005\022\022\n\nob"
  "ject_ids\030\006 \003(\005\022\r\n\005lefts\030\007 \003(\005\022\016\n\006rights\030"
  "\010 \003(\005\022\016\n\006center\030\t \001(\005\022\024\n\014avp_line_ids\030\n "
  "\003(\005\0222\n\017connected_lanes\030\013 \003(\0132\031.LogicMapP"
  "b.connectedLane\"\203\004\n\013RoadSection\022\n\n\002id\030\001 "
  "\001(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006length\030\003 \001(\002\022\016\n\006nod"
  "e_A\030\004 \001(\005\022\016\n\006node_B\030\005 \001(\005\022&\n\tway_nodes\030\006"
  " \003(\0132\023.SRprotobuf.Point3f\022\022\n\nconfidence\030"
  "\007 \001(\002\022\021\n\tavailable\030\010 \001(\005\022/\n\016sec_type_nod"
  "es\030\t \003(\0132\027.LogicMapPb.secTypeNode\022\022\n\nobj"
  "ect_ids\030\n \003(\005\022\037\n\005lanes\030\013 \003(\0132\020.LogicMapP"
  "b.lane\022\017\n\007link_id\030\014 \001(\005\022\021\n\tjoint_ids\030\r \003"
  "(\005\0223\n\troadedges\030\016 \003(\0132 .LogicMapPb.RoadS"
  "ection.roadedge\022\024\n\014avp_line_ids\030\017 \003(\005\022+\n"
  "\013floor_level\030\020 \001(\0132\026.SRprotobuf.FloorLev"
  "el\032Y\n\010roadedge\022\r\n\005index\030\001 \001(\005\022\014\n\004type\030\002 "
  "\001(\005\022\017\n\007is_left\030\003 \001(\005\022\016\n\006height\030\004 \001(\002\022\017\n\007"
  "line_id\030\005 \001(\005\"\310\002\n\004Line\022\n\n\002id\030\001 \001(\005\022\024\n\014fr"
  "om_node_id\030\002 \001(\005\022\022\n\nto_node_id\030\003 \001(\005\022\016\n\006"
  "length\030\004 \001(\002\022&\n\006curves\030\005 \003(\0132\026.LogicMapP"
  "b.Line.curve\022*\n\013sec_id_type\030\006 \001(\0132\025.Logi"
  "cMapPb.secIDtype\032\n\n\010equation\032\231\001\n\005curve\022\r"
  "\n\005index\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006length\030\003 "
  "\001(\002\022\022\n\nconfidence\030\004 \001(\002\022&\n\tcurve_pts\030\005 \003"
  "(\0132\023.SRprotobuf.Point3f\022\'\n\004equa\030\006 \001(\0132\031."
  "LogicMapPb.Line.equation\"\323\003\n\014Intersectio"
  "n\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tjoint_ids"
  "\030\003 \003(\005\022\024\n\014loc_insec_id\030\004 \001(\005\022\021\n\tavailabl"
  "e\030\005 \001(\005\022/\n\016sec_type_nodes\030\006 \003(\0132\027.LogicM"
  "apPb.secTypeNode\022\022\n\nobject_ids\030\007 \003(\005\022%\n\010"
  "vertexes\030\010 \003(\0132\023.SRprotobuf.Point3f\022,\n\005e"
  "dges\030\t \003(\0132\035.LogicMapPb.Intersection.edg"
  "e\022\037\n\005lanes\030\n \003(\0132\020.LogicMapPb.lane\022\024\n\014av"
  "p_line_ids\030\013 \003(\005\022+\n\013floor_level\030\014 \001(\0132\026."
  "SRprotobuf.FloorLevel\032o\n\004edge\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004type\030\002 \001(\005\022\017\n\007subtype\030\003 \001(\005\022\013\n\003dir\030"
  "\004 \001(\005\022\013\n\003pts\030\005 \003(\005\022\017\n\007link_id\030\006 \001(\005\022\021\n\td"
  "irection\030\007 \001(\002\"\275\001\n\006Object\022\n\n\002id\030\001 \001(\005\022\022\n"
  "\nconfidence\030\002 \001(\002\022\014\n\004type\030\003 \001(\005\022*\n\013sec_i"
  "d_type\030\004 \001(\0132\025.LogicMapPb.secIDtype\022 \n\003p"
  "ts\030\005 \003(\0132\023.SRprotobuf.Point3f\022,\n\010logicpt"
  "s\030\006 \003(\0132\032.LogicMapPb.Object.logicpt\032\t\n\007l"
  "ogicpt\"\321\001\n\010LogicMap\022\037\n\005nodes\030\001 \003(\0132\020.Log"
  "icMapPb.Node\022-\n\014roadSections\030\002 \003(\0132\027.Log"
  "icMapPb.RoadSection\022\037\n\005lines\030\003 \003(\0132\020.Log"
  "icMapPb.Line\022/\n\rintersections\030\004 \003(\0132\030.Lo"
  "gicMapPb.Intersection\022#\n\007objects\030\005 \003(\0132\022"
  ".LogicMapPb.Objectb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fap_2flogic_5fmap_2eproto_deps[1] = {
  &::descriptor_table_proto_5fap_2fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fap_2flogic_5fmap_2eproto_sccs[15] = {
  &scc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Line_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Node_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Object_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_lane_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto.base,
  &scc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fap_2flogic_5fmap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2flogic_5fmap_2eproto = {
  false, false, descriptor_table_protodef_proto_5fap_2flogic_5fmap_2eproto, "proto_ap/logic_map.proto", 2346,
  &descriptor_table_proto_5fap_2flogic_5fmap_2eproto_once, descriptor_table_proto_5fap_2flogic_5fmap_2eproto_sccs, descriptor_table_proto_5fap_2flogic_5fmap_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_proto_5fap_2flogic_5fmap_2eproto::offsets,
  file_level_metadata_proto_5fap_2flogic_5fmap_2eproto, 15, file_level_enum_descriptors_proto_5fap_2flogic_5fmap_2eproto, file_level_service_descriptors_proto_5fap_2flogic_5fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fap_2flogic_5fmap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fap_2flogic_5fmap_2eproto)), true);
namespace LogicMapPb {

// ===================================================================

void secIDtype::InitAsDefaultInstance() {
}
class secIDtype::_Internal {
 public:
};

secIDtype::secIDtype(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.secIDtype)
}
secIDtype::secIDtype(const secIDtype& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sec_id_, &from.sec_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sec_type_) -
    reinterpret_cast<char*>(&sec_id_)) + sizeof(sec_type_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.secIDtype)
}

void secIDtype::SharedCtor() {
  ::memset(&sec_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sec_type_) -
      reinterpret_cast<char*>(&sec_id_)) + sizeof(sec_type_));
}

secIDtype::~secIDtype() {
  // @@protoc_insertion_point(destructor:LogicMapPb.secIDtype)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void secIDtype::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void secIDtype::ArenaDtor(void* object) {
  secIDtype* _this = reinterpret_cast< secIDtype* >(object);
  (void)_this;
}
void secIDtype::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void secIDtype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const secIDtype& secIDtype::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_secIDtype_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void secIDtype::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.secIDtype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sec_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sec_type_) -
      reinterpret_cast<char*>(&sec_id_)) + sizeof(sec_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* secIDtype::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sec_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sec_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sec_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* secIDtype::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.secIDtype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sec_id = 1;
  if (this->sec_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sec_id(), target);
  }

  // int32 sec_type = 2;
  if (this->sec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sec_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.secIDtype)
  return target;
}

size_t secIDtype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.secIDtype)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sec_id = 1;
  if (this->sec_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec_id());
  }

  // int32 sec_type = 2;
  if (this->sec_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void secIDtype::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.secIDtype)
  GOOGLE_DCHECK_NE(&from, this);
  const secIDtype* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<secIDtype>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.secIDtype)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.secIDtype)
    MergeFrom(*source);
  }
}

void secIDtype::MergeFrom(const secIDtype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.secIDtype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sec_id() != 0) {
    _internal_set_sec_id(from._internal_sec_id());
  }
  if (from.sec_type() != 0) {
    _internal_set_sec_type(from._internal_sec_type());
  }
}

void secIDtype::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.secIDtype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secIDtype::CopyFrom(const secIDtype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.secIDtype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secIDtype::IsInitialized() const {
  return true;
}

void secIDtype::InternalSwap(secIDtype* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(secIDtype, sec_type_)
      + sizeof(secIDtype::sec_type_)
      - PROTOBUF_FIELD_OFFSET(secIDtype, sec_id_)>(
          reinterpret_cast<char*>(&sec_id_),
          reinterpret_cast<char*>(&other->sec_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata secIDtype::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::LogicMapPb::_Node_default_instance_._instance.get_mutable()->posi_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::SRprotobuf::Point3f& posi(const Node* msg);
};

const ::SRprotobuf::Point3f&
Node::_Internal::posi(const Node* msg) {
  return *msg->posi_;
}
void Node::clear_posi() {
  if (GetArena() == nullptr && posi_ != nullptr) {
    delete posi_;
  }
  posi_ = nullptr;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sec_id_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sec_id_types_(from.sec_id_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posi()) {
    posi_ = new ::SRprotobuf::Point3f(*from.posi_);
  } else {
    posi_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&posi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&posi_)) + sizeof(type_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete posi_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sec_id_types_.Clear();
  if (GetArena() == nullptr && posi_ != nullptr) {
    delete posi_;
  }
  posi_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.secIDtype sec_id_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sec_id_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f posi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_posi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated .LogicMapPb.secIDtype sec_id_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sec_id_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sec_id_types(i), target, stream);
  }

  // .SRprotobuf.Point3f posi = 4;
  if (this->has_posi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::posi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogicMapPb.secIDtype sec_id_types = 3;
  total_size += 1UL * this->_internal_sec_id_types_size();
  for (const auto& msg : this->sec_id_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SRprotobuf.Point3f posi = 4;
  if (this->has_posi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posi_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sec_id_types_.MergeFrom(from.sec_id_types_);
  if (from.has_posi()) {
    _internal_mutable_posi()->::SRprotobuf::Point3f::MergeFrom(from._internal_posi());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sec_id_types_.InternalSwap(&other->sec_id_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, type_)
      + sizeof(Node::type_)
      - PROTOBUF_FIELD_OFFSET(Node, posi_)>(
          reinterpret_cast<char*>(&posi_),
          reinterpret_cast<char*>(&other->posi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void secTypeNode::InitAsDefaultInstance() {
}
class secTypeNode::_Internal {
 public:
};

secTypeNode::secTypeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.secTypeNode)
}
secTypeNode::secTypeNode(const secTypeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sec_id_, &from.sec_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&sec_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.secTypeNode)
}

void secTypeNode::SharedCtor() {
  ::memset(&sec_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&sec_id_)) + sizeof(node_id_));
}

secTypeNode::~secTypeNode() {
  // @@protoc_insertion_point(destructor:LogicMapPb.secTypeNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void secTypeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void secTypeNode::ArenaDtor(void* object) {
  secTypeNode* _this = reinterpret_cast< secTypeNode* >(object);
  (void)_this;
}
void secTypeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void secTypeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const secTypeNode& secTypeNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_secTypeNode_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void secTypeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.secTypeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sec_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&sec_id_)) + sizeof(node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* secTypeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sec_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sec_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sec_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* secTypeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.secTypeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sec_id = 1;
  if (this->sec_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sec_id(), target);
  }

  // int32 sec_type = 2;
  if (this->sec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sec_type(), target);
  }

  // int32 node_id = 3;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.secTypeNode)
  return target;
}

size_t secTypeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.secTypeNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sec_id = 1;
  if (this->sec_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec_id());
  }

  // int32 sec_type = 2;
  if (this->sec_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec_type());
  }

  // int32 node_id = 3;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void secTypeNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.secTypeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const secTypeNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<secTypeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.secTypeNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.secTypeNode)
    MergeFrom(*source);
  }
}

void secTypeNode::MergeFrom(const secTypeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.secTypeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sec_id() != 0) {
    _internal_set_sec_id(from._internal_sec_id());
  }
  if (from.sec_type() != 0) {
    _internal_set_sec_type(from._internal_sec_type());
  }
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void secTypeNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.secTypeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void secTypeNode::CopyFrom(const secTypeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.secTypeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool secTypeNode::IsInitialized() const {
  return true;
}

void secTypeNode::InternalSwap(secTypeNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(secTypeNode, node_id_)
      + sizeof(secTypeNode::node_id_)
      - PROTOBUF_FIELD_OFFSET(secTypeNode, sec_id_)>(
          reinterpret_cast<char*>(&sec_id_),
          reinterpret_cast<char*>(&other->sec_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata secTypeNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void connectedLane::InitAsDefaultInstance() {
}
class connectedLane::_Internal {
 public:
};

connectedLane::connectedLane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.connectedLane)
}
connectedLane::connectedLane(const connectedLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&relation_, &from.relation_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_index_) -
    reinterpret_cast<char*>(&relation_)) + sizeof(lane_index_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.connectedLane)
}

void connectedLane::SharedCtor() {
  ::memset(&relation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_index_) -
      reinterpret_cast<char*>(&relation_)) + sizeof(lane_index_));
}

connectedLane::~connectedLane() {
  // @@protoc_insertion_point(destructor:LogicMapPb.connectedLane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void connectedLane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void connectedLane::ArenaDtor(void* object) {
  connectedLane* _this = reinterpret_cast< connectedLane* >(object);
  (void)_this;
}
void connectedLane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void connectedLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const connectedLane& connectedLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_connectedLane_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void connectedLane::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.connectedLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&relation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_index_) -
      reinterpret_cast<char*>(&relation_)) + sizeof(lane_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* connectedLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          relation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sec_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sec_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sec_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lane_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* connectedLane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.connectedLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 relation = 1;
  if (this->relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_relation(), target);
  }

  // int32 sec_id = 2;
  if (this->sec_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sec_id(), target);
  }

  // int32 sec_type = 3;
  if (this->sec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sec_type(), target);
  }

  // int32 lane_index = 4;
  if (this->lane_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lane_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.connectedLane)
  return target;
}

size_t connectedLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.connectedLane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 relation = 1;
  if (this->relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relation());
  }

  // int32 sec_id = 2;
  if (this->sec_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec_id());
  }

  // int32 sec_type = 3;
  if (this->sec_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sec_type());
  }

  // int32 lane_index = 4;
  if (this->lane_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lane_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void connectedLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.connectedLane)
  GOOGLE_DCHECK_NE(&from, this);
  const connectedLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<connectedLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.connectedLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.connectedLane)
    MergeFrom(*source);
  }
}

void connectedLane::MergeFrom(const connectedLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.connectedLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.relation() != 0) {
    _internal_set_relation(from._internal_relation());
  }
  if (from.sec_id() != 0) {
    _internal_set_sec_id(from._internal_sec_id());
  }
  if (from.sec_type() != 0) {
    _internal_set_sec_type(from._internal_sec_type());
  }
  if (from.lane_index() != 0) {
    _internal_set_lane_index(from._internal_lane_index());
  }
}

void connectedLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.connectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void connectedLane::CopyFrom(const connectedLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.connectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool connectedLane::IsInitialized() const {
  return true;
}

void connectedLane::InternalSwap(connectedLane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(connectedLane, lane_index_)
      + sizeof(connectedLane::lane_index_)
      - PROTOBUF_FIELD_OFFSET(connectedLane, relation_)>(
          reinterpret_cast<char*>(&relation_),
          reinterpret_cast<char*>(&other->relation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata connectedLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void lane::InitAsDefaultInstance() {
}
class lane::_Internal {
 public:
};

lane::lane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_ids_(arena),
  lefts_(arena),
  rights_(arena),
  avp_line_ids_(arena),
  connected_lanes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.lane)
}
lane::lane(const lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_ids_(from.object_ids_),
      lefts_(from.lefts_),
      rights_(from.rights_),
      avp_line_ids_(from.avp_line_ids_),
      connected_lanes_(from.connected_lanes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&center_) -
    reinterpret_cast<char*>(&index_)) + sizeof(center_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.lane)
}

void lane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_lane_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_) -
      reinterpret_cast<char*>(&index_)) + sizeof(center_));
}

lane::~lane() {
  // @@protoc_insertion_point(destructor:LogicMapPb.lane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void lane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void lane::ArenaDtor(void* object) {
  lane* _this = reinterpret_cast< lane* >(object);
  (void)_this;
}
void lane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lane& lane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lane_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void lane::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_ids_.Clear();
  lefts_.Clear();
  rights_.Clear();
  avp_line_ids_.Clear();
  connected_lanes_.Clear();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_) -
      reinterpret_cast<char*>(&index_)) + sizeof(center_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_virtual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 from_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          from_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          to_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 object_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 lefts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lefts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_lefts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rights = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_rights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 center = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          center_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 avp_line_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_avp_line_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.connectedLane connected_lanes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connected_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* lane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 is_virtual = 2;
  if (this->is_virtual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_virtual(), target);
  }

  // int32 dir = 3;
  if (this->dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dir(), target);
  }

  // int32 from_node_id = 4;
  if (this->from_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_from_node_id(), target);
  }

  // int32 to_node_id = 5;
  if (this->to_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_to_node_id(), target);
  }

  // repeated int32 object_ids = 6;
  {
    int byte_size = _object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_object_ids(), byte_size, target);
    }
  }

  // repeated int32 lefts = 7;
  {
    int byte_size = _lefts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_lefts(), byte_size, target);
    }
  }

  // repeated int32 rights = 8;
  {
    int byte_size = _rights_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_rights(), byte_size, target);
    }
  }

  // int32 center = 9;
  if (this->center() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_center(), target);
  }

  // repeated int32 avp_line_ids = 10;
  {
    int byte_size = _avp_line_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_avp_line_ids(), byte_size, target);
    }
  }

  // repeated .LogicMapPb.connectedLane connected_lanes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connected_lanes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_connected_lanes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.lane)
  return target;
}

size_t lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.lane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 object_ids = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 lefts = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->lefts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lefts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rights = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rights_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 avp_line_ids = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->avp_line_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _avp_line_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .LogicMapPb.connectedLane connected_lanes = 11;
  total_size += 1UL * this->_internal_connected_lanes_size();
  for (const auto& msg : this->connected_lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 is_virtual = 2;
  if (this->is_virtual() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_virtual());
  }

  // int32 dir = 3;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dir());
  }

  // int32 from_node_id = 4;
  if (this->from_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_node_id());
  }

  // int32 to_node_id = 5;
  if (this->to_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_node_id());
  }

  // int32 center = 9;
  if (this->center() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_center());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.lane)
  GOOGLE_DCHECK_NE(&from, this);
  const lane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.lane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.lane)
    MergeFrom(*source);
  }
}

void lane::MergeFrom(const lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
  lefts_.MergeFrom(from.lefts_);
  rights_.MergeFrom(from.rights_);
  avp_line_ids_.MergeFrom(from.avp_line_ids_);
  connected_lanes_.MergeFrom(from.connected_lanes_);
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.is_virtual() != 0) {
    _internal_set_is_virtual(from._internal_is_virtual());
  }
  if (from.dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (from.from_node_id() != 0) {
    _internal_set_from_node_id(from._internal_from_node_id());
  }
  if (from.to_node_id() != 0) {
    _internal_set_to_node_id(from._internal_to_node_id());
  }
  if (from.center() != 0) {
    _internal_set_center(from._internal_center());
  }
}

void lane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lane::CopyFrom(const lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lane::IsInitialized() const {
  return true;
}

void lane::InternalSwap(lane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_ids_.InternalSwap(&other->object_ids_);
  lefts_.InternalSwap(&other->lefts_);
  rights_.InternalSwap(&other->rights_);
  avp_line_ids_.InternalSwap(&other->avp_line_ids_);
  connected_lanes_.InternalSwap(&other->connected_lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(lane, center_)
      + sizeof(lane::center_)
      - PROTOBUF_FIELD_OFFSET(lane, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata lane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadSection_roadedge::InitAsDefaultInstance() {
}
class RoadSection_roadedge::_Internal {
 public:
};

RoadSection_roadedge::RoadSection_roadedge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.RoadSection.roadedge)
}
RoadSection_roadedge::RoadSection_roadedge(const RoadSection_roadedge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_id_) -
    reinterpret_cast<char*>(&index_)) + sizeof(line_id_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.RoadSection.roadedge)
}

void RoadSection_roadedge::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_id_) -
      reinterpret_cast<char*>(&index_)) + sizeof(line_id_));
}

RoadSection_roadedge::~RoadSection_roadedge() {
  // @@protoc_insertion_point(destructor:LogicMapPb.RoadSection.roadedge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSection_roadedge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadSection_roadedge::ArenaDtor(void* object) {
  RoadSection_roadedge* _this = reinterpret_cast< RoadSection_roadedge* >(object);
  (void)_this;
}
void RoadSection_roadedge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSection_roadedge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSection_roadedge& RoadSection_roadedge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSection_roadedge_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void RoadSection_roadedge::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.RoadSection.roadedge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_id_) -
      reinterpret_cast<char*>(&index_)) + sizeof(line_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSection_roadedge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 line_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          line_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSection_roadedge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.RoadSection.roadedge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 is_left = 3;
  if (this->is_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_left(), target);
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  // int32 line_id = 5;
  if (this->line_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_line_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.RoadSection.roadedge)
  return target;
}

size_t RoadSection_roadedge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.RoadSection.roadedge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 is_left = 3;
  if (this->is_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_left());
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 line_id = 5;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSection_roadedge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.RoadSection.roadedge)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSection_roadedge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSection_roadedge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.RoadSection.roadedge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.RoadSection.roadedge)
    MergeFrom(*source);
  }
}

void RoadSection_roadedge::MergeFrom(const RoadSection_roadedge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.RoadSection.roadedge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_left() != 0) {
    _internal_set_is_left(from._internal_is_left());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.line_id() != 0) {
    _internal_set_line_id(from._internal_line_id());
  }
}

void RoadSection_roadedge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.RoadSection.roadedge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection_roadedge::CopyFrom(const RoadSection_roadedge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.RoadSection.roadedge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection_roadedge::IsInitialized() const {
  return true;
}

void RoadSection_roadedge::InternalSwap(RoadSection_roadedge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSection_roadedge, line_id_)
      + sizeof(RoadSection_roadedge::line_id_)
      - PROTOBUF_FIELD_OFFSET(RoadSection_roadedge, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSection_roadedge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadSection::InitAsDefaultInstance() {
  ::LogicMapPb::_RoadSection_default_instance_._instance.get_mutable()->floor_level_ = const_cast< ::SRprotobuf::FloorLevel*>(
      ::SRprotobuf::FloorLevel::internal_default_instance());
}
class RoadSection::_Internal {
 public:
  static const ::SRprotobuf::FloorLevel& floor_level(const RoadSection* msg);
};

const ::SRprotobuf::FloorLevel&
RoadSection::_Internal::floor_level(const RoadSection* msg) {
  return *msg->floor_level_;
}
void RoadSection::clear_way_nodes() {
  way_nodes_.Clear();
}
void RoadSection::clear_floor_level() {
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
}
RoadSection::RoadSection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  way_nodes_(arena),
  sec_type_nodes_(arena),
  object_ids_(arena),
  lanes_(arena),
  joint_ids_(arena),
  roadedges_(arena),
  avp_line_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.RoadSection)
}
RoadSection::RoadSection(const RoadSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      way_nodes_(from.way_nodes_),
      sec_type_nodes_(from.sec_type_nodes_),
      object_ids_(from.object_ids_),
      lanes_(from.lanes_),
      joint_ids_(from.joint_ids_),
      roadedges_(from.roadedges_),
      avp_line_ids_(from.avp_line_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_floor_level()) {
    floor_level_ = new ::SRprotobuf::FloorLevel(*from.floor_level_);
  } else {
    floor_level_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(link_id_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.RoadSection)
}

void RoadSection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&floor_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_id_) -
      reinterpret_cast<char*>(&floor_level_)) + sizeof(link_id_));
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:LogicMapPb.RoadSection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadSection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete floor_level_;
}

void RoadSection::ArenaDtor(void* object) {
  RoadSection* _this = reinterpret_cast< RoadSection* >(object);
  (void)_this;
}
void RoadSection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadSection& RoadSection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadSection_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.RoadSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  way_nodes_.Clear();
  sec_type_nodes_.Clear();
  object_ids_.Clear();
  lanes_.Clear();
  joint_ids_.Clear();
  roadedges_.Clear();
  avp_line_ids_.Clear();
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(link_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 node_A = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          node_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_B = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          node_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Point3f way_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_way_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // float confidence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 available = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.secTypeNode sec_type_nodes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sec_type_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 object_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.lane lanes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 link_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 joint_ids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_joint_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_joint_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.RoadSection.roadedge roadedges = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roadedges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 avp_line_ids = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_avp_line_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.FloorLevel floor_level = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadSection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.RoadSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // float length = 3;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_length(), target);
  }

  // int32 node_A = 4;
  if (this->node_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_node_a(), target);
  }

  // int32 node_B = 5;
  if (this->node_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_node_b(), target);
  }

  // repeated .SRprotobuf.Point3f way_nodes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_way_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_way_nodes(i), target, stream);
  }

  // float confidence = 7;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_confidence(), target);
  }

  // int32 available = 8;
  if (this->available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_available(), target);
  }

  // repeated .LogicMapPb.secTypeNode sec_type_nodes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sec_type_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_sec_type_nodes(i), target, stream);
  }

  // repeated int32 object_ids = 10;
  {
    int byte_size = _object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_object_ids(), byte_size, target);
    }
  }

  // repeated .LogicMapPb.lane lanes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_lanes(i), target, stream);
  }

  // int32 link_id = 12;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_link_id(), target);
  }

  // repeated int32 joint_ids = 13;
  {
    int byte_size = _joint_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_joint_ids(), byte_size, target);
    }
  }

  // repeated .LogicMapPb.RoadSection.roadedge roadedges = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roadedges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_roadedges(i), target, stream);
  }

  // repeated int32 avp_line_ids = 15;
  {
    int byte_size = _avp_line_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_avp_line_ids(), byte_size, target);
    }
  }

  // .SRprotobuf.FloorLevel floor_level = 16;
  if (this->has_floor_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::floor_level(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.RoadSection)
  return target;
}

size_t RoadSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.RoadSection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.Point3f way_nodes = 6;
  total_size += 1UL * this->_internal_way_nodes_size();
  for (const auto& msg : this->way_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.secTypeNode sec_type_nodes = 9;
  total_size += 1UL * this->_internal_sec_type_nodes_size();
  for (const auto& msg : this->sec_type_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 object_ids = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .LogicMapPb.lane lanes = 11;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 joint_ids = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->joint_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _joint_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .LogicMapPb.RoadSection.roadedge roadedges = 14;
  total_size += 1UL * this->_internal_roadedges_size();
  for (const auto& msg : this->roadedges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 avp_line_ids = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->avp_line_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _avp_line_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SRprotobuf.FloorLevel floor_level = 16;
  if (this->has_floor_level()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *floor_level_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float length = 3;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 node_A = 4;
  if (this->node_a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_a());
  }

  // int32 node_B = 5;
  if (this->node_b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_node_b());
  }

  // float confidence = 7;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 available = 8;
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available());
  }

  // int32 link_id = 12;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadSection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.RoadSection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.RoadSection)
    MergeFrom(*source);
  }
}

void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  way_nodes_.MergeFrom(from.way_nodes_);
  sec_type_nodes_.MergeFrom(from.sec_type_nodes_);
  object_ids_.MergeFrom(from.object_ids_);
  lanes_.MergeFrom(from.lanes_);
  joint_ids_.MergeFrom(from.joint_ids_);
  roadedges_.MergeFrom(from.roadedges_);
  avp_line_ids_.MergeFrom(from.avp_line_ids_);
  if (from.has_floor_level()) {
    _internal_mutable_floor_level()->::SRprotobuf::FloorLevel::MergeFrom(from._internal_floor_level());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (from.node_a() != 0) {
    _internal_set_node_a(from._internal_node_a());
  }
  if (from.node_b() != 0) {
    _internal_set_node_b(from._internal_node_b());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.available() != 0) {
    _internal_set_available(from._internal_available());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
}

void RoadSection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {
  return true;
}

void RoadSection::InternalSwap(RoadSection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  way_nodes_.InternalSwap(&other->way_nodes_);
  sec_type_nodes_.InternalSwap(&other->sec_type_nodes_);
  object_ids_.InternalSwap(&other->object_ids_);
  lanes_.InternalSwap(&other->lanes_);
  joint_ids_.InternalSwap(&other->joint_ids_);
  roadedges_.InternalSwap(&other->roadedges_);
  avp_line_ids_.InternalSwap(&other->avp_line_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSection, link_id_)
      + sizeof(RoadSection::link_id_)
      - PROTOBUF_FIELD_OFFSET(RoadSection, floor_level_)>(
          reinterpret_cast<char*>(&floor_level_),
          reinterpret_cast<char*>(&other->floor_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Line_equation::InitAsDefaultInstance() {
}
class Line_equation::_Internal {
 public:
};

Line_equation::Line_equation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Line.equation)
}
Line_equation::Line_equation(const Line_equation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Line.equation)
}

void Line_equation::SharedCtor() {
}

Line_equation::~Line_equation() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Line.equation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Line_equation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Line_equation::ArenaDtor(void* object) {
  Line_equation* _this = reinterpret_cast< Line_equation* >(object);
  (void)_this;
}
void Line_equation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Line_equation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Line_equation& Line_equation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Line_equation_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Line_equation::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Line.equation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line_equation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Line_equation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Line.equation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Line.equation)
  return target;
}

size_t Line_equation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Line.equation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line_equation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Line.equation)
  GOOGLE_DCHECK_NE(&from, this);
  const Line_equation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Line_equation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Line.equation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Line.equation)
    MergeFrom(*source);
  }
}

void Line_equation::MergeFrom(const Line_equation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Line.equation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Line_equation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Line.equation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line_equation::CopyFrom(const Line_equation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Line.equation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line_equation::IsInitialized() const {
  return true;
}

void Line_equation::InternalSwap(Line_equation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Line_equation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Line_curve::InitAsDefaultInstance() {
  ::LogicMapPb::_Line_curve_default_instance_._instance.get_mutable()->equa_ = const_cast< ::LogicMapPb::Line_equation*>(
      ::LogicMapPb::Line_equation::internal_default_instance());
}
class Line_curve::_Internal {
 public:
  static const ::LogicMapPb::Line_equation& equa(const Line_curve* msg);
};

const ::LogicMapPb::Line_equation&
Line_curve::_Internal::equa(const Line_curve* msg) {
  return *msg->equa_;
}
void Line_curve::clear_curve_pts() {
  curve_pts_.Clear();
}
Line_curve::Line_curve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  curve_pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Line.curve)
}
Line_curve::Line_curve(const Line_curve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      curve_pts_(from.curve_pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_equa()) {
    equa_ = new ::LogicMapPb::Line_equation(*from.equa_);
  } else {
    equa_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&index_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Line.curve)
}

void Line_curve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&equa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&equa_)) + sizeof(confidence_));
}

Line_curve::~Line_curve() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Line.curve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Line_curve::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete equa_;
}

void Line_curve::ArenaDtor(void* object) {
  Line_curve* _this = reinterpret_cast< Line_curve* >(object);
  (void)_this;
}
void Line_curve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Line_curve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Line_curve& Line_curve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Line_curve_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Line_curve::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Line.curve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_pts_.Clear();
  if (GetArena() == nullptr && equa_ != nullptr) {
    delete equa_;
  }
  equa_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&index_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line_curve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Point3f curve_pts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .LogicMapPb.Line.equation equa = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_equa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Line_curve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Line.curve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // float length = 3;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_length(), target);
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  // repeated .SRprotobuf.Point3f curve_pts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_curve_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_curve_pts(i), target, stream);
  }

  // .LogicMapPb.Line.equation equa = 6;
  if (this->has_equa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::equa(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Line.curve)
  return target;
}

size_t Line_curve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Line.curve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.Point3f curve_pts = 5;
  total_size += 1UL * this->_internal_curve_pts_size();
  for (const auto& msg : this->curve_pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LogicMapPb.Line.equation equa = 6;
  if (this->has_equa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *equa_);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // float length = 3;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line_curve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Line.curve)
  GOOGLE_DCHECK_NE(&from, this);
  const Line_curve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Line_curve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Line.curve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Line.curve)
    MergeFrom(*source);
  }
}

void Line_curve::MergeFrom(const Line_curve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Line.curve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_pts_.MergeFrom(from.curve_pts_);
  if (from.has_equa()) {
    _internal_mutable_equa()->::LogicMapPb::Line_equation::MergeFrom(from._internal_equa());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void Line_curve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Line.curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line_curve::CopyFrom(const Line_curve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Line.curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line_curve::IsInitialized() const {
  return true;
}

void Line_curve::InternalSwap(Line_curve* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  curve_pts_.InternalSwap(&other->curve_pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line_curve, confidence_)
      + sizeof(Line_curve::confidence_)
      - PROTOBUF_FIELD_OFFSET(Line_curve, equa_)>(
          reinterpret_cast<char*>(&equa_),
          reinterpret_cast<char*>(&other->equa_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line_curve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Line::InitAsDefaultInstance() {
  ::LogicMapPb::_Line_default_instance_._instance.get_mutable()->sec_id_type_ = const_cast< ::LogicMapPb::secIDtype*>(
      ::LogicMapPb::secIDtype::internal_default_instance());
}
class Line::_Internal {
 public:
  static const ::LogicMapPb::secIDtype& sec_id_type(const Line* msg);
};

const ::LogicMapPb::secIDtype&
Line::_Internal::sec_id_type(const Line* msg) {
  return *msg->sec_id_type_;
}
Line::Line(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  curves_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Line)
}
Line::Line(const Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      curves_(from.curves_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sec_id_type()) {
    sec_id_type_ = new ::LogicMapPb::secIDtype(*from.sec_id_type_);
  } else {
    sec_id_type_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&id_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Line)
}

void Line::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Line_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&sec_id_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&sec_id_type_)) + sizeof(length_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Line)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Line::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sec_id_type_;
}

void Line::ArenaDtor(void* object) {
  Line* _this = reinterpret_cast< Line* >(object);
  (void)_this;
}
void Line::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Line& Line::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Line_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curves_.Clear();
  if (GetArena() == nullptr && sec_id_type_ != nullptr) {
    delete sec_id_type_;
  }
  sec_id_type_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&id_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Line::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 from_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          from_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 to_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          to_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.Line.curve curves = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .LogicMapPb.secIDtype sec_id_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sec_id_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Line::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 from_node_id = 2;
  if (this->from_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_from_node_id(), target);
  }

  // int32 to_node_id = 3;
  if (this->to_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_node_id(), target);
  }

  // float length = 4;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_length(), target);
  }

  // repeated .LogicMapPb.Line.curve curves = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_curves_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_curves(i), target, stream);
  }

  // .LogicMapPb.secIDtype sec_id_type = 6;
  if (this->has_sec_id_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sec_id_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Line)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogicMapPb.Line.curve curves = 5;
  total_size += 1UL * this->_internal_curves_size();
  for (const auto& msg : this->curves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LogicMapPb.secIDtype sec_id_type = 6;
  if (this->has_sec_id_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sec_id_type_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 from_node_id = 2;
  if (this->from_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_from_node_id());
  }

  // int32 to_node_id = 3;
  if (this->to_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_to_node_id());
  }

  // float length = 4;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Line>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Line)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curves_.MergeFrom(from.curves_);
  if (from.has_sec_id_type()) {
    _internal_mutable_sec_id_type()->::LogicMapPb::secIDtype::MergeFrom(from._internal_sec_id_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.from_node_id() != 0) {
    _internal_set_from_node_id(from._internal_from_node_id());
  }
  if (from.to_node_id() != 0) {
    _internal_set_to_node_id(from._internal_to_node_id());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
}

void Line::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::InternalSwap(Line* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  curves_.InternalSwap(&other->curves_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, length_)
      + sizeof(Line::length_)
      - PROTOBUF_FIELD_OFFSET(Line, sec_id_type_)>(
          reinterpret_cast<char*>(&sec_id_type_),
          reinterpret_cast<char*>(&other->sec_id_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Line::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Intersection_edge::InitAsDefaultInstance() {
}
class Intersection_edge::_Internal {
 public:
};

Intersection_edge::Intersection_edge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Intersection.edge)
}
Intersection_edge::Intersection_edge(const Intersection_edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Intersection.edge)
}

void Intersection_edge::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
}

Intersection_edge::~Intersection_edge() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Intersection.edge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Intersection_edge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Intersection_edge::ArenaDtor(void* object) {
  Intersection_edge* _this = reinterpret_cast< Intersection_edge* >(object);
  (void)_this;
}
void Intersection_edge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Intersection_edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intersection_edge& Intersection_edge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Intersection_edge_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Intersection_edge::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Intersection.edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intersection_edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_pts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 link_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          link_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Intersection_edge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Intersection.edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_subtype(), target);
  }

  // int32 dir = 4;
  if (this->dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dir(), target);
  }

  // repeated int32 pts = 5;
  {
    int byte_size = _pts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_pts(), byte_size, target);
    }
  }

  // int32 link_id = 6;
  if (this->link_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_link_id(), target);
  }

  // float direction = 7;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Intersection.edge)
  return target;
}

size_t Intersection_edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Intersection.edge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pts = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 subtype = 3;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subtype());
  }

  // int32 dir = 4;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dir());
  }

  // int32 link_id = 6;
  if (this->link_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_link_id());
  }

  // float direction = 7;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intersection_edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Intersection.edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Intersection_edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Intersection_edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Intersection.edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Intersection.edge)
    MergeFrom(*source);
  }
}

void Intersection_edge::MergeFrom(const Intersection_edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Intersection.edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (from.link_id() != 0) {
    _internal_set_link_id(from._internal_link_id());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
}

void Intersection_edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Intersection.edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intersection_edge::CopyFrom(const Intersection_edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Intersection.edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersection_edge::IsInitialized() const {
  return true;
}

void Intersection_edge::InternalSwap(Intersection_edge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Intersection_edge, direction_)
      + sizeof(Intersection_edge::direction_)
      - PROTOBUF_FIELD_OFFSET(Intersection_edge, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Intersection_edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Intersection::InitAsDefaultInstance() {
  ::LogicMapPb::_Intersection_default_instance_._instance.get_mutable()->floor_level_ = const_cast< ::SRprotobuf::FloorLevel*>(
      ::SRprotobuf::FloorLevel::internal_default_instance());
}
class Intersection::_Internal {
 public:
  static const ::SRprotobuf::FloorLevel& floor_level(const Intersection* msg);
};

const ::SRprotobuf::FloorLevel&
Intersection::_Internal::floor_level(const Intersection* msg) {
  return *msg->floor_level_;
}
void Intersection::clear_vertexes() {
  vertexes_.Clear();
}
void Intersection::clear_floor_level() {
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
}
Intersection::Intersection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joint_ids_(arena),
  sec_type_nodes_(arena),
  object_ids_(arena),
  vertexes_(arena),
  edges_(arena),
  lanes_(arena),
  avp_line_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Intersection)
}
Intersection::Intersection(const Intersection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_ids_(from.joint_ids_),
      sec_type_nodes_(from.sec_type_nodes_),
      object_ids_(from.object_ids_),
      vertexes_(from.vertexes_),
      edges_(from.edges_),
      lanes_(from.lanes_),
      avp_line_ids_(from.avp_line_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_floor_level()) {
    floor_level_ = new ::SRprotobuf::FloorLevel(*from.floor_level_);
  } else {
    floor_level_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&id_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Intersection)
}

void Intersection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&floor_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&floor_level_)) + sizeof(available_));
}

Intersection::~Intersection() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Intersection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Intersection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete floor_level_;
}

void Intersection::ArenaDtor(void* object) {
  Intersection* _this = reinterpret_cast< Intersection* >(object);
  (void)_this;
}
void Intersection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Intersection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Intersection& Intersection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Intersection_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Intersection::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_ids_.Clear();
  sec_type_nodes_.Clear();
  object_ids_.Clear();
  vertexes_.Clear();
  edges_.Clear();
  lanes_.Clear();
  avp_line_ids_.Clear();
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&id_)) + sizeof(available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intersection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 joint_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_joint_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_joint_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 loc_insec_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          loc_insec_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 available = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.secTypeNode sec_type_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sec_type_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 object_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Point3f vertexes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.Intersection.edge edges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.lane lanes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 avp_line_ids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_avp_line_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_avp_line_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.FloorLevel floor_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Intersection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Intersection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated int32 joint_ids = 3;
  {
    int byte_size = _joint_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_joint_ids(), byte_size, target);
    }
  }

  // int32 loc_insec_id = 4;
  if (this->loc_insec_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_loc_insec_id(), target);
  }

  // int32 available = 5;
  if (this->available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_available(), target);
  }

  // repeated .LogicMapPb.secTypeNode sec_type_nodes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sec_type_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_sec_type_nodes(i), target, stream);
  }

  // repeated int32 object_ids = 7;
  {
    int byte_size = _object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_object_ids(), byte_size, target);
    }
  }

  // repeated .SRprotobuf.Point3f vertexes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_vertexes(i), target, stream);
  }

  // repeated .LogicMapPb.Intersection.edge edges = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_edges(i), target, stream);
  }

  // repeated .LogicMapPb.lane lanes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lanes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_lanes(i), target, stream);
  }

  // repeated int32 avp_line_ids = 11;
  {
    int byte_size = _avp_line_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_avp_line_ids(), byte_size, target);
    }
  }

  // .SRprotobuf.FloorLevel floor_level = 12;
  if (this->has_floor_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::floor_level(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Intersection)
  return target;
}

size_t Intersection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Intersection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 joint_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->joint_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _joint_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .LogicMapPb.secTypeNode sec_type_nodes = 6;
  total_size += 1UL * this->_internal_sec_type_nodes_size();
  for (const auto& msg : this->sec_type_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 object_ids = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SRprotobuf.Point3f vertexes = 8;
  total_size += 1UL * this->_internal_vertexes_size();
  for (const auto& msg : this->vertexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.Intersection.edge edges = 9;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.lane lanes = 10;
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 avp_line_ids = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->avp_line_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _avp_line_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .SRprotobuf.FloorLevel floor_level = 12;
  if (this->has_floor_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *floor_level_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 loc_insec_id = 4;
  if (this->loc_insec_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_loc_insec_id());
  }

  // int32 available = 5;
  if (this->available() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_available());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Intersection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  const Intersection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Intersection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Intersection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Intersection)
    MergeFrom(*source);
  }
}

void Intersection::MergeFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Intersection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_ids_.MergeFrom(from.joint_ids_);
  sec_type_nodes_.MergeFrom(from.sec_type_nodes_);
  object_ids_.MergeFrom(from.object_ids_);
  vertexes_.MergeFrom(from.vertexes_);
  edges_.MergeFrom(from.edges_);
  lanes_.MergeFrom(from.lanes_);
  avp_line_ids_.MergeFrom(from.avp_line_ids_);
  if (from.has_floor_level()) {
    _internal_mutable_floor_level()->::SRprotobuf::FloorLevel::MergeFrom(from._internal_floor_level());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.loc_insec_id() != 0) {
    _internal_set_loc_insec_id(from._internal_loc_insec_id());
  }
  if (from.available() != 0) {
    _internal_set_available(from._internal_available());
  }
}

void Intersection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intersection::CopyFrom(const Intersection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Intersection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intersection::IsInitialized() const {
  return true;
}

void Intersection::InternalSwap(Intersection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joint_ids_.InternalSwap(&other->joint_ids_);
  sec_type_nodes_.InternalSwap(&other->sec_type_nodes_);
  object_ids_.InternalSwap(&other->object_ids_);
  vertexes_.InternalSwap(&other->vertexes_);
  edges_.InternalSwap(&other->edges_);
  lanes_.InternalSwap(&other->lanes_);
  avp_line_ids_.InternalSwap(&other->avp_line_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Intersection, available_)
      + sizeof(Intersection::available_)
      - PROTOBUF_FIELD_OFFSET(Intersection, floor_level_)>(
          reinterpret_cast<char*>(&floor_level_),
          reinterpret_cast<char*>(&other->floor_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Intersection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object_logicpt::InitAsDefaultInstance() {
}
class Object_logicpt::_Internal {
 public:
};

Object_logicpt::Object_logicpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Object.logicpt)
}
Object_logicpt::Object_logicpt(const Object_logicpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Object.logicpt)
}

void Object_logicpt::SharedCtor() {
}

Object_logicpt::~Object_logicpt() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Object.logicpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object_logicpt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Object_logicpt::ArenaDtor(void* object) {
  Object_logicpt* _this = reinterpret_cast< Object_logicpt* >(object);
  (void)_this;
}
void Object_logicpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object_logicpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object_logicpt& Object_logicpt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_logicpt_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Object_logicpt::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Object.logicpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object_logicpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object_logicpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Object.logicpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Object.logicpt)
  return target;
}

size_t Object_logicpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Object.logicpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object_logicpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Object.logicpt)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_logicpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object_logicpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Object.logicpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Object.logicpt)
    MergeFrom(*source);
  }
}

void Object_logicpt::MergeFrom(const Object_logicpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Object.logicpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Object_logicpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Object.logicpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_logicpt::CopyFrom(const Object_logicpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Object.logicpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_logicpt::IsInitialized() const {
  return true;
}

void Object_logicpt::InternalSwap(Object_logicpt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object_logicpt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::LogicMapPb::_Object_default_instance_._instance.get_mutable()->sec_id_type_ = const_cast< ::LogicMapPb::secIDtype*>(
      ::LogicMapPb::secIDtype::internal_default_instance());
}
class Object::_Internal {
 public:
  static const ::LogicMapPb::secIDtype& sec_id_type(const Object* msg);
};

const ::LogicMapPb::secIDtype&
Object::_Internal::sec_id_type(const Object* msg) {
  return *msg->sec_id_type_;
}
void Object::clear_pts() {
  pts_.Clear();
}
Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pts_(arena),
  logicpts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pts_(from.pts_),
      logicpts_(from.logicpts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sec_id_type()) {
    sec_id_type_ = new ::LogicMapPb::secIDtype(*from.sec_id_type_);
  } else {
    sec_id_type_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_proto_5fap_2flogic_5fmap_2eproto.base);
  ::memset(&sec_id_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sec_id_type_)) + sizeof(type_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:LogicMapPb.Object)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Object::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sec_id_type_;
}

void Object::ArenaDtor(void* object) {
  Object* _this = reinterpret_cast< Object* >(object);
  (void)_this;
}
void Object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pts_.Clear();
  logicpts_.Clear();
  if (GetArena() == nullptr && sec_id_type_ != nullptr) {
    delete sec_id_type_;
  }
  sec_id_type_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LogicMapPb.secIDtype sec_id_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sec_id_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Point3f pts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.Object.logicpt logicpts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logicpts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // .LogicMapPb.secIDtype sec_id_type = 4;
  if (this->has_sec_id_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sec_id_type(this), target, stream);
  }

  // repeated .SRprotobuf.Point3f pts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pts(i), target, stream);
  }

  // repeated .LogicMapPb.Object.logicpt logicpts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logicpts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_logicpts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.Point3f pts = 5;
  total_size += 1UL * this->_internal_pts_size();
  for (const auto& msg : this->pts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.Object.logicpt logicpts = 6;
  total_size += 1UL * this->_internal_logicpts_size();
  for (const auto& msg : this->logicpts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .LogicMapPb.secIDtype sec_id_type = 4;
  if (this->has_sec_id_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sec_id_type_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
  logicpts_.MergeFrom(from.logicpts_);
  if (from.has_sec_id_type()) {
    _internal_mutable_sec_id_type()->::LogicMapPb::secIDtype::MergeFrom(from._internal_sec_id_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pts_.InternalSwap(&other->pts_);
  logicpts_.InternalSwap(&other->logicpts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Object, type_)
      + sizeof(Object::type_)
      - PROTOBUF_FIELD_OFFSET(Object, sec_id_type_)>(
          reinterpret_cast<char*>(&sec_id_type_),
          reinterpret_cast<char*>(&other->sec_id_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicMap::InitAsDefaultInstance() {
}
class LogicMap::_Internal {
 public:
};

LogicMap::LogicMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena),
  roadsections_(arena),
  lines_(arena),
  intersections_(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LogicMapPb.LogicMap)
}
LogicMap::LogicMap(const LogicMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      roadsections_(from.roadsections_),
      lines_(from.lines_),
      intersections_(from.intersections_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LogicMapPb.LogicMap)
}

void LogicMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto.base);
}

LogicMap::~LogicMap() {
  // @@protoc_insertion_point(destructor:LogicMapPb.LogicMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogicMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogicMap::ArenaDtor(void* object) {
  LogicMap* _this = reinterpret_cast< LogicMap* >(object);
  (void)_this;
}
void LogicMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogicMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicMap& LogicMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicMap_proto_5fap_2flogic_5fmap_2eproto.base);
  return *internal_default_instance();
}


void LogicMap::Clear() {
// @@protoc_insertion_point(message_clear_start:LogicMapPb.LogicMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  roadsections_.Clear();
  lines_.Clear();
  intersections_.Clear();
  objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LogicMapPb.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.RoadSection roadSections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roadsections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.Line lines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.Intersection intersections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intersections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .LogicMapPb.Object objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogicMapPb.LogicMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LogicMapPb.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // repeated .LogicMapPb.RoadSection roadSections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roadsections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roadsections(i), target, stream);
  }

  // repeated .LogicMapPb.Line lines = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lines(i), target, stream);
  }

  // repeated .LogicMapPb.Intersection intersections = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intersections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_intersections(i), target, stream);
  }

  // repeated .LogicMapPb.Object objects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogicMapPb.LogicMap)
  return target;
}

size_t LogicMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogicMapPb.LogicMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogicMapPb.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.RoadSection roadSections = 2;
  total_size += 1UL * this->_internal_roadsections_size();
  for (const auto& msg : this->roadsections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.Line lines = 3;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.Intersection intersections = 4;
  total_size += 1UL * this->_internal_intersections_size();
  for (const auto& msg : this->intersections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .LogicMapPb.Object objects = 5;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogicMapPb.LogicMap)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogicMapPb.LogicMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogicMapPb.LogicMap)
    MergeFrom(*source);
  }
}

void LogicMap::MergeFrom(const LogicMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogicMapPb.LogicMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  roadsections_.MergeFrom(from.roadsections_);
  lines_.MergeFrom(from.lines_);
  intersections_.MergeFrom(from.intersections_);
  objects_.MergeFrom(from.objects_);
}

void LogicMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogicMapPb.LogicMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicMap::CopyFrom(const LogicMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogicMapPb.LogicMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicMap::IsInitialized() const {
  return true;
}

void LogicMap::InternalSwap(LogicMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  roadsections_.InternalSwap(&other->roadsections_);
  lines_.InternalSwap(&other->lines_);
  intersections_.InternalSwap(&other->intersections_);
  objects_.InternalSwap(&other->objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicMap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LogicMapPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LogicMapPb::secIDtype* Arena::CreateMaybeMessage< ::LogicMapPb::secIDtype >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::secIDtype >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Node* Arena::CreateMaybeMessage< ::LogicMapPb::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::secTypeNode* Arena::CreateMaybeMessage< ::LogicMapPb::secTypeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::secTypeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::connectedLane* Arena::CreateMaybeMessage< ::LogicMapPb::connectedLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::connectedLane >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::lane* Arena::CreateMaybeMessage< ::LogicMapPb::lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::lane >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::RoadSection_roadedge* Arena::CreateMaybeMessage< ::LogicMapPb::RoadSection_roadedge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::RoadSection_roadedge >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::RoadSection* Arena::CreateMaybeMessage< ::LogicMapPb::RoadSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::RoadSection >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Line_equation* Arena::CreateMaybeMessage< ::LogicMapPb::Line_equation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Line_equation >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Line_curve* Arena::CreateMaybeMessage< ::LogicMapPb::Line_curve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Line_curve >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Line* Arena::CreateMaybeMessage< ::LogicMapPb::Line >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Line >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Intersection_edge* Arena::CreateMaybeMessage< ::LogicMapPb::Intersection_edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Intersection_edge >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Intersection* Arena::CreateMaybeMessage< ::LogicMapPb::Intersection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Intersection >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Object_logicpt* Arena::CreateMaybeMessage< ::LogicMapPb::Object_logicpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Object_logicpt >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::Object* Arena::CreateMaybeMessage< ::LogicMapPb::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::LogicMapPb::LogicMap* Arena::CreateMaybeMessage< ::LogicMapPb::LogicMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LogicMapPb::LogicMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
