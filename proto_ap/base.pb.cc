// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_ap/base.proto

#include "proto_ap/base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloorLevel_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose3f_proto_5fap_2fbase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_5fap_2fbase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SlotObstacle_proto_5fap_2fbase_2eproto;
namespace SRprotobuf {
class Point3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3f> _instance;
} _Point3f_default_instance_;
class Point2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2f> _instance;
} _Point2f_default_instance_;
class Pose3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose3f> _instance;
} _Pose3f_default_instance_;
class Size3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Size3f> _instance;
} _Size3f_default_instance_;
class Color3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color3> _instance;
} _Color3_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class SlotObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlotObstacle> _instance;
} _SlotObstacle_default_instance_;
class SlotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Slot> _instance;
} _Slot_default_instance_;
class FloorLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloorLevel> _instance;
} _FloorLevel_default_instance_;
}  // namespace SRprotobuf
static void InitDefaultsscc_info_Color3_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Color3_default_instance_;
    new (ptr) ::SRprotobuf::Color3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Color3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color3_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color3_proto_5fap_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_FloorLevel_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_FloorLevel_default_instance_;
    new (ptr) ::SRprotobuf::FloorLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::FloorLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloorLevel_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloorLevel_proto_5fap_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Location_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Location_default_instance_;
    new (ptr) ::SRprotobuf::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Location_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Location_proto_5fap_2fbase_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_Pose3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_Point2f_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Point2f_default_instance_;
    new (ptr) ::SRprotobuf::Point2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Point2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2f_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2f_proto_5fap_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Point3f_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Point3f_default_instance_;
    new (ptr) ::SRprotobuf::Point3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Point3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3f_proto_5fap_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Pose3f_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Pose3f_default_instance_;
    new (ptr) ::SRprotobuf::Pose3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Pose3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose3f_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pose3f_proto_5fap_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Size3f_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Size3f_default_instance_;
    new (ptr) ::SRprotobuf::Size3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Size3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size3f_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Size3f_proto_5fap_2fbase_2eproto}, {}};

static void InitDefaultsscc_info_Slot_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_Slot_default_instance_;
    new (ptr) ::SRprotobuf::Slot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::Slot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Slot_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Slot_proto_5fap_2fbase_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
      &scc_info_SlotObstacle_proto_5fap_2fbase_2eproto.base,}};

static void InitDefaultsscc_info_SlotObstacle_proto_5fap_2fbase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SRprotobuf::_SlotObstacle_default_instance_;
    new (ptr) ::SRprotobuf::SlotObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SRprotobuf::SlotObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SlotObstacle_proto_5fap_2fbase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SlotObstacle_proto_5fap_2fbase_2eproto}, {
      &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_5fap_2fbase_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_5fap_2fbase_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_5fap_2fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_5fap_2fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point3f, x_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point3f, y_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point3f, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point2f, x_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Point2f, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Pose3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Pose3f, theta_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Pose3f, pitch_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Pose3f, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Size3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Size3f, length_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Size3f, width_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Size3f, heigh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Color3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Color3, r_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Color3, g_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Color3, b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, pt_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, pose_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, velocity_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, epsangle_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, odometer_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, index_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, ismappos_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Location, floor_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::SlotObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::SlotObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::SlotObstacle, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, b_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, c_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, d_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, e_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, attribute_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, location_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, slot_shape_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, charger_type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, slot_type_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, theta_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, width_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, height_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, map_slot_id_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, isfavor_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, unparkable_types_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, easy_get_off_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, is_narrow_slot_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, get_off_park_in_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, obstacles_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, is_selected_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::Slot, is_open_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FloorLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FloorLevel, startlevel_),
  PROTOBUF_FIELD_OFFSET(::SRprotobuf::FloorLevel, endlevel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SRprotobuf::Point3f)},
  { 8, -1, sizeof(::SRprotobuf::Point2f)},
  { 15, -1, sizeof(::SRprotobuf::Pose3f)},
  { 23, -1, sizeof(::SRprotobuf::Size3f)},
  { 31, -1, sizeof(::SRprotobuf::Color3)},
  { 39, -1, sizeof(::SRprotobuf::Location)},
  { 52, -1, sizeof(::SRprotobuf::SlotObstacle)},
  { 59, -1, sizeof(::SRprotobuf::Slot)},
  { 86, -1, sizeof(::SRprotobuf::FloorLevel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Point3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Pose3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Size3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Color3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_SlotObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_Slot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SRprotobuf::_FloorLevel_default_instance_),
};

const char descriptor_table_protodef_proto_5fap_2fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto_ap/base.proto\022\nSRprotobuf\"*\n\007Poi"
  "nt3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\037\n"
  "\007Point2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"4\n\006Pose3f"
  "\022\r\n\005theta\030\001 \001(\002\022\r\n\005pitch\030\002 \001(\002\022\014\n\004roll\030\003"
  " \001(\002\"6\n\006Size3f\022\016\n\006length\030\001 \001(\002\022\r\n\005width\030"
  "\002 \001(\002\022\r\n\005heigh\030\003 \001(\002\")\n\006Color3\022\t\n\001r\030\001 \001("
  "\002\022\t\n\001g\030\003 \001(\002\022\t\n\001b\030\002 \001(\002\"\321\001\n\010Location\022\037\n\002"
  "pt\030\001 \001(\0132\023.SRprotobuf.Point3f\022 \n\004pose\030\002 "
  "\001(\0132\022.SRprotobuf.Pose3f\022\020\n\010velocity\030\003 \001("
  "\002\022\020\n\010epsangle\030\004 \001(\002\022\020\n\010odometer\030\005 \001(\002\022\r\n"
  "\005index\030\006 \001(\005\022\020\n\010isMapPos\030\007 \001(\005\022+\n\013floor_"
  "level\030\010 \001(\0132\026.SRprotobuf.FloorLevel\"A\n\014S"
  "lotObstacle\022\014\n\004type\030\001 \001(\005\022#\n\006points\030\002 \003("
  "\0132\023.SRprotobuf.Point3f\"\226\004\n\004Slot\022\036\n\001b\030\001 \001"
  "(\0132\023.SRprotobuf.Point3f\022\036\n\001c\030\002 \001(\0132\023.SRp"
  "rotobuf.Point3f\022\036\n\001d\030\003 \001(\0132\023.SRprotobuf."
  "Point3f\022\036\n\001e\030\004 \001(\0132\023.SRprotobuf.Point3f\022"
  "\021\n\tattribute\030\005 \001(\005\022\n\n\002id\030\006 \001(\005\022%\n\010locati"
  "on\030\007 \001(\0132\023.SRprotobuf.Point3f\022\022\n\nslot_sh"
  "ape\030\010 \001(\005\022\024\n\014charger_type\030\t \001(\005\022\021\n\tslot_"
  "type\030\n \001(\005\022\r\n\005theta\030\013 \001(\002\022\r\n\005width\030\014 \001(\002"
  "\022\016\n\006height\030\r \001(\002\022\023\n\013map_slot_id\030\016 \001(\005\022\017\n"
  "\007isFavor\030\017 \001(\005\022\030\n\020unparkable_types\030\020 \003(\005"
  "\022\024\n\014easy_get_off\030\021 \001(\005\022\026\n\016is_narrow_slot"
  "\030\022 \001(\010\022\027\n\017get_off_park_in\030\023 \001(\005\022+\n\tobsta"
  "cles\030\024 \003(\0132\030.SRprotobuf.SlotObstacle\022\023\n\013"
  "is_selected\030\025 \001(\005\022\024\n\014is_open_edge\030\026 \001(\005\""
  "2\n\nFloorLevel\022\022\n\nstartLevel\030\001 \001(\002\022\020\n\010end"
  "Level\030\002 \001(\002*\205\001\n\022SlotUnParkableType\022\032\n\026kS"
  "lotUnParkableUnknown\020\000\022\027\n\023kStandingLockI"
  "nside\020\001\022\016\n\nkForbidden\020\002\022\022\n\016kVehicleInsid"
  "e\020\003\022\026\n\022kTrafficConeInside\020\004*\317\001\n\020SlotObst"
  "acleType\022\026\n\022SlotObstacle_Empty\020\000\022\032\n\026Slot"
  "Obstacle_LockLying\020\001\022\035\n\031SlotObstacle_Loc"
  "kStanding\020\002\022\026\n\022SlotObstacle_Lever\020\003\022\025\n\021S"
  "lotObstacle_Curb\020\004\022 \n\034SlotObstacle_Unkno"
  "wnObstacle\020\005\022\027\n\023SlotObstacle_MaxNum\020\006b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_5fap_2fbase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_5fap_2fbase_2eproto_sccs[9] = {
  &scc_info_Color3_proto_5fap_2fbase_2eproto.base,
  &scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base,
  &scc_info_Location_proto_5fap_2fbase_2eproto.base,
  &scc_info_Point2f_proto_5fap_2fbase_2eproto.base,
  &scc_info_Point3f_proto_5fap_2fbase_2eproto.base,
  &scc_info_Pose3f_proto_5fap_2fbase_2eproto.base,
  &scc_info_Size3f_proto_5fap_2fbase_2eproto.base,
  &scc_info_Slot_proto_5fap_2fbase_2eproto.base,
  &scc_info_SlotObstacle_proto_5fap_2fbase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_5fap_2fbase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fap_2fbase_2eproto = {
  false, false, descriptor_table_protodef_proto_5fap_2fbase_2eproto, "proto_ap/base.proto", 1485,
  &descriptor_table_proto_5fap_2fbase_2eproto_once, descriptor_table_proto_5fap_2fbase_2eproto_sccs, descriptor_table_proto_5fap_2fbase_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_proto_5fap_2fbase_2eproto::offsets,
  file_level_metadata_proto_5fap_2fbase_2eproto, 9, file_level_enum_descriptors_proto_5fap_2fbase_2eproto, file_level_service_descriptors_proto_5fap_2fbase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_5fap_2fbase_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_5fap_2fbase_2eproto)), true);
namespace SRprotobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlotUnParkableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fbase_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fbase_2eproto[0];
}
bool SlotUnParkableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SlotObstacleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_5fap_2fbase_2eproto);
  return file_level_enum_descriptors_proto_5fap_2fbase_2eproto[1];
}
bool SlotObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point3f::InitAsDefaultInstance() {
}
class Point3f::_Internal {
 public:
};

Point3f::Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Point3f)
}
Point3f::Point3f(const Point3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Point3f)
}

void Point3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Point3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point3f::ArenaDtor(void* object) {
  Point3f* _this = reinterpret_cast< Point3f* >(object);
  (void)_this;
}
void Point3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3f& Point3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3f_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Point3f)
  return target;
}

size_t Point3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Point3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Point3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {
  return true;
}

void Point3f::InternalSwap(Point3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3f, z_)
      + sizeof(Point3f::z_)
      - PROTOBUF_FIELD_OFFSET(Point3f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2f::InitAsDefaultInstance() {
}
class Point2f::_Internal {
 public:
};

Point2f::Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Point2f)
}

void Point2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Point2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2f::ArenaDtor(void* object) {
  Point2f* _this = reinterpret_cast< Point2f* >(object);
  (void)_this;
}
void Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2f& Point2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2f_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Point2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Point2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2f, y_)
      + sizeof(Point2f::y_)
      - PROTOBUF_FIELD_OFFSET(Point2f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pose3f::InitAsDefaultInstance() {
}
class Pose3f::_Internal {
 public:
};

Pose3f::Pose3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Pose3f)
}
Pose3f::Pose3f(const Pose3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Pose3f)
}

void Pose3f::SharedCtor() {
  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(roll_));
}

Pose3f::~Pose3f() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Pose3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pose3f::ArenaDtor(void* object) {
  Pose3f* _this = reinterpret_cast< Pose3f* >(object);
  (void)_this;
}
void Pose3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose3f& Pose3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose3f_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Pose3f::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Pose3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float theta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Pose3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float theta = 1;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_theta(), target);
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Pose3f)
  return target;
}

size_t Pose3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Pose3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float theta = 1;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Pose3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Pose3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Pose3f)
    MergeFrom(*source);
  }
}

void Pose3f::MergeFrom(const Pose3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Pose3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void Pose3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Pose3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose3f::CopyFrom(const Pose3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Pose3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose3f::IsInitialized() const {
  return true;
}

void Pose3f::InternalSwap(Pose3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose3f, roll_)
      + sizeof(Pose3f::roll_)
      - PROTOBUF_FIELD_OFFSET(Pose3f, theta_)>(
          reinterpret_cast<char*>(&theta_),
          reinterpret_cast<char*>(&other->theta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Size3f::InitAsDefaultInstance() {
}
class Size3f::_Internal {
 public:
};

Size3f::Size3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Size3f)
}
Size3f::Size3f(const Size3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&heigh_) -
    reinterpret_cast<char*>(&length_)) + sizeof(heigh_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Size3f)
}

void Size3f::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heigh_) -
      reinterpret_cast<char*>(&length_)) + sizeof(heigh_));
}

Size3f::~Size3f() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Size3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Size3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Size3f::ArenaDtor(void* object) {
  Size3f* _this = reinterpret_cast< Size3f* >(object);
  (void)_this;
}
void Size3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Size3f& Size3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Size3f_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Size3f::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Size3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heigh_) -
      reinterpret_cast<char*>(&length_)) + sizeof(heigh_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heigh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          heigh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Size3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Size3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_length(), target);
  }

  // float width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  // float heigh = 3;
  if (!(this->heigh() <= 0 && this->heigh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_heigh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Size3f)
  return target;
}

size_t Size3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Size3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float heigh = 3;
  if (!(this->heigh() <= 0 && this->heigh() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Size3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Size3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Size3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Size3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Size3f)
    MergeFrom(*source);
  }
}

void Size3f::MergeFrom(const Size3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Size3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.heigh() <= 0 && from.heigh() >= 0)) {
    _internal_set_heigh(from._internal_heigh());
  }
}

void Size3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Size3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size3f::CopyFrom(const Size3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Size3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size3f::IsInitialized() const {
  return true;
}

void Size3f::InternalSwap(Size3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size3f, heigh_)
      + sizeof(Size3f::heigh_)
      - PROTOBUF_FIELD_OFFSET(Size3f, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Color3::InitAsDefaultInstance() {
}
class Color3::_Internal {
 public:
};

Color3::Color3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Color3)
}
Color3::Color3(const Color3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&g_) -
    reinterpret_cast<char*>(&r_)) + sizeof(g_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Color3)
}

void Color3::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&g_) -
      reinterpret_cast<char*>(&r_)) + sizeof(g_));
}

Color3::~Color3() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Color3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Color3::ArenaDtor(void* object) {
  Color3* _this = reinterpret_cast< Color3* >(object);
  (void)_this;
}
void Color3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color3& Color3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color3_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Color3::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Color3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&g_) -
      reinterpret_cast<char*>(&r_)) + sizeof(g_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float g = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Color3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_b(), target);
  }

  // float g = 3;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Color3)
  return target;
}

size_t Color3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Color3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float g = 3;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Color3)
  GOOGLE_DCHECK_NE(&from, this);
  const Color3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Color3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Color3)
    MergeFrom(*source);
  }
}

void Color3::MergeFrom(const Color3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Color3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
}

void Color3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Color3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color3::CopyFrom(const Color3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Color3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color3::IsInitialized() const {
  return true;
}

void Color3::InternalSwap(Color3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color3, g_)
      + sizeof(Color3::g_)
      - PROTOBUF_FIELD_OFFSET(Color3, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::SRprotobuf::_Location_default_instance_._instance.get_mutable()->pt_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
  ::SRprotobuf::_Location_default_instance_._instance.get_mutable()->pose_ = const_cast< ::SRprotobuf::Pose3f*>(
      ::SRprotobuf::Pose3f::internal_default_instance());
  ::SRprotobuf::_Location_default_instance_._instance.get_mutable()->floor_level_ = const_cast< ::SRprotobuf::FloorLevel*>(
      ::SRprotobuf::FloorLevel::internal_default_instance());
}
class Location::_Internal {
 public:
  static const ::SRprotobuf::Point3f& pt(const Location* msg);
  static const ::SRprotobuf::Pose3f& pose(const Location* msg);
  static const ::SRprotobuf::FloorLevel& floor_level(const Location* msg);
};

const ::SRprotobuf::Point3f&
Location::_Internal::pt(const Location* msg) {
  return *msg->pt_;
}
const ::SRprotobuf::Pose3f&
Location::_Internal::pose(const Location* msg) {
  return *msg->pose_;
}
const ::SRprotobuf::FloorLevel&
Location::_Internal::floor_level(const Location* msg) {
  return *msg->floor_level_;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pt()) {
    pt_ = new ::SRprotobuf::Point3f(*from.pt_);
  } else {
    pt_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::SRprotobuf::Pose3f(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_floor_level()) {
    floor_level_ = new ::SRprotobuf::FloorLevel(*from.floor_level_);
  } else {
    floor_level_ = nullptr;
  }
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&ismappos_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(ismappos_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_proto_5fap_2fbase_2eproto.base);
  ::memset(&pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismappos_) -
      reinterpret_cast<char*>(&pt_)) + sizeof(ismappos_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pt_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete floor_level_;
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pt_ != nullptr) {
    delete pt_;
  }
  pt_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && floor_level_ != nullptr) {
    delete floor_level_;
  }
  floor_level_ = nullptr;
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismappos_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(ismappos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Point3f pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Pose3f pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float epsangle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          epsangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float odometer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          odometer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isMapPos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ismappos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.FloorLevel floor_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_floor_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Point3f pt = 1;
  if (this->has_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pt(this), target, stream);
  }

  // .SRprotobuf.Pose3f pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // float velocity = 3;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity(), target);
  }

  // float epsangle = 4;
  if (!(this->epsangle() <= 0 && this->epsangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_epsangle(), target);
  }

  // float odometer = 5;
  if (!(this->odometer() <= 0 && this->odometer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_odometer(), target);
  }

  // int32 index = 6;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_index(), target);
  }

  // int32 isMapPos = 7;
  if (this->ismappos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ismappos(), target);
  }

  // .SRprotobuf.FloorLevel floor_level = 8;
  if (this->has_floor_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::floor_level(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SRprotobuf.Point3f pt = 1;
  if (this->has_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pt_);
  }

  // .SRprotobuf.Pose3f pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .SRprotobuf.FloorLevel floor_level = 8;
  if (this->has_floor_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *floor_level_);
  }

  // float velocity = 3;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 4;
  }

  // float epsangle = 4;
  if (!(this->epsangle() <= 0 && this->epsangle() >= 0)) {
    total_size += 1 + 4;
  }

  // float odometer = 5;
  if (!(this->odometer() <= 0 && this->odometer() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 index = 6;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 isMapPos = 7;
  if (this->ismappos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ismappos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pt()) {
    _internal_mutable_pt()->::SRprotobuf::Point3f::MergeFrom(from._internal_pt());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::SRprotobuf::Pose3f::MergeFrom(from._internal_pose());
  }
  if (from.has_floor_level()) {
    _internal_mutable_floor_level()->::SRprotobuf::FloorLevel::MergeFrom(from._internal_floor_level());
  }
  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from.epsangle() <= 0 && from.epsangle() >= 0)) {
    _internal_set_epsangle(from._internal_epsangle());
  }
  if (!(from.odometer() <= 0 && from.odometer() >= 0)) {
    _internal_set_odometer(from._internal_odometer());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.ismappos() != 0) {
    _internal_set_ismappos(from._internal_ismappos());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, ismappos_)
      + sizeof(Location::ismappos_)
      - PROTOBUF_FIELD_OFFSET(Location, pt_)>(
          reinterpret_cast<char*>(&pt_),
          reinterpret_cast<char*>(&other->pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlotObstacle::InitAsDefaultInstance() {
}
class SlotObstacle::_Internal {
 public:
};

SlotObstacle::SlotObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.SlotObstacle)
}
SlotObstacle::SlotObstacle(const SlotObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.SlotObstacle)
}

void SlotObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SlotObstacle_proto_5fap_2fbase_2eproto.base);
  type_ = 0;
}

SlotObstacle::~SlotObstacle() {
  // @@protoc_insertion_point(destructor:SRprotobuf.SlotObstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlotObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SlotObstacle::ArenaDtor(void* object) {
  SlotObstacle* _this = reinterpret_cast< SlotObstacle* >(object);
  (void)_this;
}
void SlotObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlotObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlotObstacle& SlotObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlotObstacle_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void SlotObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.SlotObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlotObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.Point3f points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlotObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.SlotObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .SRprotobuf.Point3f points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.SlotObstacle)
  return target;
}

size_t SlotObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.SlotObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SRprotobuf.Point3f points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlotObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.SlotObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const SlotObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlotObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.SlotObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.SlotObstacle)
    MergeFrom(*source);
  }
}

void SlotObstacle::MergeFrom(const SlotObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.SlotObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SlotObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.SlotObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotObstacle::CopyFrom(const SlotObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.SlotObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotObstacle::IsInitialized() const {
  return true;
}

void SlotObstacle::InternalSwap(SlotObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlotObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Slot::InitAsDefaultInstance() {
  ::SRprotobuf::_Slot_default_instance_._instance.get_mutable()->b_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
  ::SRprotobuf::_Slot_default_instance_._instance.get_mutable()->c_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
  ::SRprotobuf::_Slot_default_instance_._instance.get_mutable()->d_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
  ::SRprotobuf::_Slot_default_instance_._instance.get_mutable()->e_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
  ::SRprotobuf::_Slot_default_instance_._instance.get_mutable()->location_ = const_cast< ::SRprotobuf::Point3f*>(
      ::SRprotobuf::Point3f::internal_default_instance());
}
class Slot::_Internal {
 public:
  static const ::SRprotobuf::Point3f& b(const Slot* msg);
  static const ::SRprotobuf::Point3f& c(const Slot* msg);
  static const ::SRprotobuf::Point3f& d(const Slot* msg);
  static const ::SRprotobuf::Point3f& e(const Slot* msg);
  static const ::SRprotobuf::Point3f& location(const Slot* msg);
};

const ::SRprotobuf::Point3f&
Slot::_Internal::b(const Slot* msg) {
  return *msg->b_;
}
const ::SRprotobuf::Point3f&
Slot::_Internal::c(const Slot* msg) {
  return *msg->c_;
}
const ::SRprotobuf::Point3f&
Slot::_Internal::d(const Slot* msg) {
  return *msg->d_;
}
const ::SRprotobuf::Point3f&
Slot::_Internal::e(const Slot* msg) {
  return *msg->e_;
}
const ::SRprotobuf::Point3f&
Slot::_Internal::location(const Slot* msg) {
  return *msg->location_;
}
Slot::Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unparkable_types_(arena),
  obstacles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.Slot)
}
Slot::Slot(const Slot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unparkable_types_(from.unparkable_types_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_b()) {
    b_ = new ::SRprotobuf::Point3f(*from.b_);
  } else {
    b_ = nullptr;
  }
  if (from._internal_has_c()) {
    c_ = new ::SRprotobuf::Point3f(*from.c_);
  } else {
    c_ = nullptr;
  }
  if (from._internal_has_d()) {
    d_ = new ::SRprotobuf::Point3f(*from.d_);
  } else {
    d_ = nullptr;
  }
  if (from._internal_has_e()) {
    e_ = new ::SRprotobuf::Point3f(*from.e_);
  } else {
    e_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::SRprotobuf::Point3f(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&attribute_, &from.attribute_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_open_edge_) -
    reinterpret_cast<char*>(&attribute_)) + sizeof(is_open_edge_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.Slot)
}

void Slot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Slot_proto_5fap_2fbase_2eproto.base);
  ::memset(&b_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_edge_) -
      reinterpret_cast<char*>(&b_)) + sizeof(is_open_edge_));
}

Slot::~Slot() {
  // @@protoc_insertion_point(destructor:SRprotobuf.Slot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Slot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete b_;
  if (this != internal_default_instance()) delete c_;
  if (this != internal_default_instance()) delete d_;
  if (this != internal_default_instance()) delete e_;
  if (this != internal_default_instance()) delete location_;
}

void Slot::ArenaDtor(void* object) {
  Slot* _this = reinterpret_cast< Slot* >(object);
  (void)_this;
}
void Slot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Slot& Slot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Slot_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unparkable_types_.Clear();
  obstacles_.Clear();
  if (GetArena() == nullptr && b_ != nullptr) {
    delete b_;
  }
  b_ = nullptr;
  if (GetArena() == nullptr && c_ != nullptr) {
    delete c_;
  }
  c_ = nullptr;
  if (GetArena() == nullptr && d_ != nullptr) {
    delete d_;
  }
  d_ = nullptr;
  if (GetArena() == nullptr && e_ != nullptr) {
    delete e_;
  }
  e_ = nullptr;
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  ::memset(&attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_open_edge_) -
      reinterpret_cast<char*>(&attribute_)) + sizeof(is_open_edge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Slot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SRprotobuf.Point3f b = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f e = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SRprotobuf.Point3f location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot_shape = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          slot_shape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 charger_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          charger_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 slot_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          slot_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float theta = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 map_slot_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          map_slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 isFavor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          isfavor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 unparkable_types = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unparkable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_unparkable_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 easy_get_off = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          easy_get_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_narrow_slot = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          is_narrow_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 get_off_park_in = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          get_off_park_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SRprotobuf.SlotObstacle obstacles = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 is_selected = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          is_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_open_edge = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          is_open_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Slot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SRprotobuf.Point3f b = 1;
  if (this->has_b()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::b(this), target, stream);
  }

  // .SRprotobuf.Point3f c = 2;
  if (this->has_c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::c(this), target, stream);
  }

  // .SRprotobuf.Point3f d = 3;
  if (this->has_d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::d(this), target, stream);
  }

  // .SRprotobuf.Point3f e = 4;
  if (this->has_e()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::e(this), target, stream);
  }

  // int32 attribute = 5;
  if (this->attribute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attribute(), target);
  }

  // int32 id = 6;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_id(), target);
  }

  // .SRprotobuf.Point3f location = 7;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::location(this), target, stream);
  }

  // int32 slot_shape = 8;
  if (this->slot_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_slot_shape(), target);
  }

  // int32 charger_type = 9;
  if (this->charger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_charger_type(), target);
  }

  // int32 slot_type = 10;
  if (this->slot_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_slot_type(), target);
  }

  // float theta = 11;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_theta(), target);
  }

  // float width = 12;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_width(), target);
  }

  // float height = 13;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_height(), target);
  }

  // int32 map_slot_id = 14;
  if (this->map_slot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_map_slot_id(), target);
  }

  // int32 isFavor = 15;
  if (this->isfavor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_isfavor(), target);
  }

  // repeated int32 unparkable_types = 16;
  {
    int byte_size = _unparkable_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_unparkable_types(), byte_size, target);
    }
  }

  // int32 easy_get_off = 17;
  if (this->easy_get_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_easy_get_off(), target);
  }

  // bool is_narrow_slot = 18;
  if (this->is_narrow_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_narrow_slot(), target);
  }

  // int32 get_off_park_in = 19;
  if (this->get_off_park_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_get_off_park_in(), target);
  }

  // repeated .SRprotobuf.SlotObstacle obstacles = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_obstacles(i), target, stream);
  }

  // int32 is_selected = 21;
  if (this->is_selected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_is_selected(), target);
  }

  // int32 is_open_edge = 22;
  if (this->is_open_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_is_open_edge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.Slot)
  return target;
}

size_t Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.Slot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 unparkable_types = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->unparkable_types_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unparkable_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .SRprotobuf.SlotObstacle obstacles = 20;
  total_size += 2UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SRprotobuf.Point3f b = 1;
  if (this->has_b()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b_);
  }

  // .SRprotobuf.Point3f c = 2;
  if (this->has_c()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c_);
  }

  // .SRprotobuf.Point3f d = 3;
  if (this->has_d()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *d_);
  }

  // .SRprotobuf.Point3f e = 4;
  if (this->has_e()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *e_);
  }

  // .SRprotobuf.Point3f location = 7;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // int32 attribute = 5;
  if (this->attribute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attribute());
  }

  // int32 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 slot_shape = 8;
  if (this->slot_shape() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_shape());
  }

  // int32 charger_type = 9;
  if (this->charger_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_charger_type());
  }

  // int32 slot_type = 10;
  if (this->slot_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_type());
  }

  // float theta = 11;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 12;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 13;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 map_slot_id = 14;
  if (this->map_slot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_slot_id());
  }

  // int32 isFavor = 15;
  if (this->isfavor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_isfavor());
  }

  // int32 easy_get_off = 17;
  if (this->easy_get_off() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_easy_get_off());
  }

  // bool is_narrow_slot = 18;
  if (this->is_narrow_slot() != 0) {
    total_size += 2 + 1;
  }

  // int32 get_off_park_in = 19;
  if (this->get_off_park_in() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_get_off_park_in());
  }

  // int32 is_selected = 21;
  if (this->is_selected() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_selected());
  }

  // int32 is_open_edge = 22;
  if (this->is_open_edge() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_open_edge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Slot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const Slot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Slot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.Slot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.Slot)
    MergeFrom(*source);
  }
}

void Slot::MergeFrom(const Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unparkable_types_.MergeFrom(from.unparkable_types_);
  obstacles_.MergeFrom(from.obstacles_);
  if (from.has_b()) {
    _internal_mutable_b()->::SRprotobuf::Point3f::MergeFrom(from._internal_b());
  }
  if (from.has_c()) {
    _internal_mutable_c()->::SRprotobuf::Point3f::MergeFrom(from._internal_c());
  }
  if (from.has_d()) {
    _internal_mutable_d()->::SRprotobuf::Point3f::MergeFrom(from._internal_d());
  }
  if (from.has_e()) {
    _internal_mutable_e()->::SRprotobuf::Point3f::MergeFrom(from._internal_e());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::SRprotobuf::Point3f::MergeFrom(from._internal_location());
  }
  if (from.attribute() != 0) {
    _internal_set_attribute(from._internal_attribute());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.slot_shape() != 0) {
    _internal_set_slot_shape(from._internal_slot_shape());
  }
  if (from.charger_type() != 0) {
    _internal_set_charger_type(from._internal_charger_type());
  }
  if (from.slot_type() != 0) {
    _internal_set_slot_type(from._internal_slot_type());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.map_slot_id() != 0) {
    _internal_set_map_slot_id(from._internal_map_slot_id());
  }
  if (from.isfavor() != 0) {
    _internal_set_isfavor(from._internal_isfavor());
  }
  if (from.easy_get_off() != 0) {
    _internal_set_easy_get_off(from._internal_easy_get_off());
  }
  if (from.is_narrow_slot() != 0) {
    _internal_set_is_narrow_slot(from._internal_is_narrow_slot());
  }
  if (from.get_off_park_in() != 0) {
    _internal_set_get_off_park_in(from._internal_get_off_park_in());
  }
  if (from.is_selected() != 0) {
    _internal_set_is_selected(from._internal_is_selected());
  }
  if (from.is_open_edge() != 0) {
    _internal_set_is_open_edge(from._internal_is_open_edge());
  }
}

void Slot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot::CopyFrom(const Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot::IsInitialized() const {
  return true;
}

void Slot::InternalSwap(Slot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unparkable_types_.InternalSwap(&other->unparkable_types_);
  obstacles_.InternalSwap(&other->obstacles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Slot, is_open_edge_)
      + sizeof(Slot::is_open_edge_)
      - PROTOBUF_FIELD_OFFSET(Slot, b_)>(
          reinterpret_cast<char*>(&b_),
          reinterpret_cast<char*>(&other->b_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Slot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloorLevel::InitAsDefaultInstance() {
}
class FloorLevel::_Internal {
 public:
};

FloorLevel::FloorLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SRprotobuf.FloorLevel)
}
FloorLevel::FloorLevel(const FloorLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&startlevel_, &from.startlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&endlevel_) -
    reinterpret_cast<char*>(&startlevel_)) + sizeof(endlevel_));
  // @@protoc_insertion_point(copy_constructor:SRprotobuf.FloorLevel)
}

void FloorLevel::SharedCtor() {
  ::memset(&startlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endlevel_) -
      reinterpret_cast<char*>(&startlevel_)) + sizeof(endlevel_));
}

FloorLevel::~FloorLevel() {
  // @@protoc_insertion_point(destructor:SRprotobuf.FloorLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FloorLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloorLevel::ArenaDtor(void* object) {
  FloorLevel* _this = reinterpret_cast< FloorLevel* >(object);
  (void)_this;
}
void FloorLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloorLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloorLevel& FloorLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloorLevel_proto_5fap_2fbase_2eproto.base);
  return *internal_default_instance();
}


void FloorLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:SRprotobuf.FloorLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&startlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endlevel_) -
      reinterpret_cast<char*>(&startlevel_)) + sizeof(endlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloorLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float startLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          startlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          endlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloorLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SRprotobuf.FloorLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float startLevel = 1;
  if (!(this->startlevel() <= 0 && this->startlevel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_startlevel(), target);
  }

  // float endLevel = 2;
  if (!(this->endlevel() <= 0 && this->endlevel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_endlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SRprotobuf.FloorLevel)
  return target;
}

size_t FloorLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SRprotobuf.FloorLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float startLevel = 1;
  if (!(this->startlevel() <= 0 && this->startlevel() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLevel = 2;
  if (!(this->endlevel() <= 0 && this->endlevel() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloorLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SRprotobuf.FloorLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const FloorLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloorLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SRprotobuf.FloorLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SRprotobuf.FloorLevel)
    MergeFrom(*source);
  }
}

void FloorLevel::MergeFrom(const FloorLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SRprotobuf.FloorLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.startlevel() <= 0 && from.startlevel() >= 0)) {
    _internal_set_startlevel(from._internal_startlevel());
  }
  if (!(from.endlevel() <= 0 && from.endlevel() >= 0)) {
    _internal_set_endlevel(from._internal_endlevel());
  }
}

void FloorLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SRprotobuf.FloorLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloorLevel::CopyFrom(const FloorLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SRprotobuf.FloorLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloorLevel::IsInitialized() const {
  return true;
}

void FloorLevel::InternalSwap(FloorLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloorLevel, endlevel_)
      + sizeof(FloorLevel::endlevel_)
      - PROTOBUF_FIELD_OFFSET(FloorLevel, startlevel_)>(
          reinterpret_cast<char*>(&startlevel_),
          reinterpret_cast<char*>(&other->startlevel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FloorLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SRprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SRprotobuf::Point3f* Arena::CreateMaybeMessage< ::SRprotobuf::Point3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Point3f >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Point2f* Arena::CreateMaybeMessage< ::SRprotobuf::Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Pose3f* Arena::CreateMaybeMessage< ::SRprotobuf::Pose3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Pose3f >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Size3f* Arena::CreateMaybeMessage< ::SRprotobuf::Size3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Size3f >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Color3* Arena::CreateMaybeMessage< ::SRprotobuf::Color3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Color3 >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Location* Arena::CreateMaybeMessage< ::SRprotobuf::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::SlotObstacle* Arena::CreateMaybeMessage< ::SRprotobuf::SlotObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::SlotObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::Slot* Arena::CreateMaybeMessage< ::SRprotobuf::Slot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::Slot >(arena);
}
template<> PROTOBUF_NOINLINE ::SRprotobuf::FloorLevel* Arena::CreateMaybeMessage< ::SRprotobuf::FloorLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SRprotobuf::FloorLevel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
