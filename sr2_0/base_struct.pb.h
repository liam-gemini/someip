// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_5fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_5fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fstruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fstruct_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class BoundaryObject;
class BoundaryObjectDefaultTypeInternal;
extern BoundaryObjectDefaultTypeInternal _BoundaryObject_default_instance_;
class FeaturePointSequence;
class FeaturePointSequenceDefaultTypeInternal;
extern FeaturePointSequenceDefaultTypeInternal _FeaturePointSequence_default_instance_;
class LocalPoseInfo;
class LocalPoseInfoDefaultTypeInternal;
extern LocalPoseInfoDefaultTypeInternal _LocalPoseInfo_default_instance_;
class Pose6DOF;
class Pose6DOFDefaultTypeInternal;
extern Pose6DOFDefaultTypeInternal _Pose6DOF_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class TrajectoryPointMsg;
class TrajectoryPointMsgDefaultTypeInternal;
extern TrajectoryPointMsgDefaultTypeInternal _TrajectoryPointMsg_default_instance_;
class Vector2f;
class Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
class Vector3d;
class Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
class Vector6d;
class Vector6dDefaultTypeInternal;
extern Vector6dDefaultTypeInternal _Vector6d_default_instance_;
class Wgs;
class WgsDefaultTypeInternal;
extern WgsDefaultTypeInternal _Wgs_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::BoundaryObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::BoundaryObject>(Arena*);
template<> ::xpilot::sr2_0::proto::FeaturePointSequence* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::FeaturePointSequence>(Arena*);
template<> ::xpilot::sr2_0::proto::LocalPoseInfo* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseInfo>(Arena*);
template<> ::xpilot::sr2_0::proto::Pose6DOF* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Pose6DOF>(Arena*);
template<> ::xpilot::sr2_0::proto::Quaternion* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Quaternion>(Arena*);
template<> ::xpilot::sr2_0::proto::Time* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Time>(Arena*);
template<> ::xpilot::sr2_0::proto::TrajectoryPointMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::TrajectoryPointMsg>(Arena*);
template<> ::xpilot::sr2_0::proto::Vector2f* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Vector2f>(Arena*);
template<> ::xpilot::sr2_0::proto::Vector3d* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Vector3d>(Arena*);
template<> ::xpilot::sr2_0::proto::Vector6d* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Vector6d>(Arena*);
template<> ::xpilot::sr2_0::proto::Wgs* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Wgs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class Pose6DOF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Pose6DOF) */ {
 public:
  inline Pose6DOF() : Pose6DOF(nullptr) {};
  virtual ~Pose6DOF();

  Pose6DOF(const Pose6DOF& from);
  Pose6DOF(Pose6DOF&& from) noexcept
    : Pose6DOF() {
    *this = ::std::move(from);
  }

  inline Pose6DOF& operator=(const Pose6DOF& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose6DOF& operator=(Pose6DOF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose6DOF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose6DOF* internal_default_instance() {
    return reinterpret_cast<const Pose6DOF*>(
               &_Pose6DOF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose6DOF& a, Pose6DOF& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose6DOF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose6DOF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose6DOF* New() const final {
    return CreateMaybeMessage<Pose6DOF>(nullptr);
  }

  Pose6DOF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose6DOF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose6DOF& from);
  void MergeFrom(const Pose6DOF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose6DOF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Pose6DOF";
  }
  protected:
  explicit Pose6DOF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .xpilot.sr2_0.proto.Vector3d p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::xpilot::sr2_0::proto::Vector3d& p() const;
  ::xpilot::sr2_0::proto::Vector3d* release_p();
  ::xpilot::sr2_0::proto::Vector3d* mutable_p();
  void set_allocated_p(::xpilot::sr2_0::proto::Vector3d* p);
  private:
  const ::xpilot::sr2_0::proto::Vector3d& _internal_p() const;
  ::xpilot::sr2_0::proto::Vector3d* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::xpilot::sr2_0::proto::Vector3d* p);
  ::xpilot::sr2_0::proto::Vector3d* unsafe_arena_release_p();

  // .xpilot.sr2_0.proto.Quaternion q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::xpilot::sr2_0::proto::Quaternion& q() const;
  ::xpilot::sr2_0::proto::Quaternion* release_q();
  ::xpilot::sr2_0::proto::Quaternion* mutable_q();
  void set_allocated_q(::xpilot::sr2_0::proto::Quaternion* q);
  private:
  const ::xpilot::sr2_0::proto::Quaternion& _internal_q() const;
  ::xpilot::sr2_0::proto::Quaternion* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::xpilot::sr2_0::proto::Quaternion* q);
  ::xpilot::sr2_0::proto::Quaternion* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Pose6DOF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Vector3d* p_;
  ::xpilot::sr2_0::proto::Quaternion* q_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class Vector2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {};
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2f* New() const final {
    return CreateMaybeMessage<Vector2f>(nullptr);
  }

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Vector2f";
  }
  protected:
  explicit Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Vector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class Vector3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {};
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const final {
    return CreateMaybeMessage<Vector3d>(nullptr);
  }

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Vector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {};
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class Wgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Wgs) */ {
 public:
  inline Wgs() : Wgs(nullptr) {};
  virtual ~Wgs();

  Wgs(const Wgs& from);
  Wgs(Wgs&& from) noexcept
    : Wgs() {
    *this = ::std::move(from);
  }

  inline Wgs& operator=(const Wgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wgs& operator=(Wgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wgs* internal_default_instance() {
    return reinterpret_cast<const Wgs*>(
               &_Wgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Wgs& a, Wgs& b) {
    a.Swap(&b);
  }
  inline void Swap(Wgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wgs* New() const final {
    return CreateMaybeMessage<Wgs>(nullptr);
  }

  Wgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wgs& from);
  void MergeFrom(const Wgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Wgs";
  }
  protected:
  explicit Wgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
    kElevFieldNumber = 3,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // double elev = 3;
  void clear_elev();
  double elev() const;
  void set_elev(double value);
  private:
  double _internal_elev() const;
  void _internal_set_elev(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Wgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  double elev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class Vector6d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Vector6d) */ {
 public:
  inline Vector6d() : Vector6d(nullptr) {};
  virtual ~Vector6d();

  Vector6d(const Vector6d& from);
  Vector6d(Vector6d&& from) noexcept
    : Vector6d() {
    *this = ::std::move(from);
  }

  inline Vector6d& operator=(const Vector6d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector6d& operator=(Vector6d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector6d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector6d* internal_default_instance() {
    return reinterpret_cast<const Vector6d*>(
               &_Vector6d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vector6d& a, Vector6d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector6d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector6d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector6d* New() const final {
    return CreateMaybeMessage<Vector6d>(nullptr);
  }

  Vector6d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector6d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector6d& from);
  void MergeFrom(const Vector6d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector6d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Vector6d";
  }
  protected:
  explicit Vector6d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXxFieldNumber = 1,
    kYyFieldNumber = 2,
    kZzFieldNumber = 3,
    kXyFieldNumber = 4,
    kYzFieldNumber = 5,
    kZxFieldNumber = 6,
  };
  // double xx = 1;
  void clear_xx();
  double xx() const;
  void set_xx(double value);
  private:
  double _internal_xx() const;
  void _internal_set_xx(double value);
  public:

  // double yy = 2;
  void clear_yy();
  double yy() const;
  void set_yy(double value);
  private:
  double _internal_yy() const;
  void _internal_set_yy(double value);
  public:

  // double zz = 3;
  void clear_zz();
  double zz() const;
  void set_zz(double value);
  private:
  double _internal_zz() const;
  void _internal_set_zz(double value);
  public:

  // double xy = 4;
  void clear_xy();
  double xy() const;
  void set_xy(double value);
  private:
  double _internal_xy() const;
  void _internal_set_xy(double value);
  public:

  // double yz = 5;
  void clear_yz();
  double yz() const;
  void set_yz(double value);
  private:
  double _internal_yz() const;
  void _internal_set_yz(double value);
  public:

  // double zx = 6;
  void clear_zx();
  double zx() const;
  void set_zx(double value);
  private:
  double _internal_zx() const;
  void _internal_set_zx(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Vector6d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double xx_;
  double yy_;
  double zz_;
  double xy_;
  double yz_;
  double zx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class Time PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Time) */ {
 public:
  inline Time() : Time(nullptr) {};
  virtual ~Time();

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(nullptr);
  }

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNsecFieldNumber = 1,
  };
  // uint64 nsec = 1;
  void clear_nsec();
  ::PROTOBUF_NAMESPACE_ID::uint64 nsec() const;
  void set_nsec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nsec() const;
  void _internal_set_nsec(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class LocalPoseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.LocalPoseInfo) */ {
 public:
  inline LocalPoseInfo() : LocalPoseInfo(nullptr) {};
  virtual ~LocalPoseInfo();

  LocalPoseInfo(const LocalPoseInfo& from);
  LocalPoseInfo(LocalPoseInfo&& from) noexcept
    : LocalPoseInfo() {
    *this = ::std::move(from);
  }

  inline LocalPoseInfo& operator=(const LocalPoseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPoseInfo& operator=(LocalPoseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPoseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPoseInfo* internal_default_instance() {
    return reinterpret_cast<const LocalPoseInfo*>(
               &_LocalPoseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LocalPoseInfo& a, LocalPoseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPoseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPoseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPoseInfo* New() const final {
    return CreateMaybeMessage<LocalPoseInfo>(nullptr);
  }

  LocalPoseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPoseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPoseInfo& from);
  void MergeFrom(const LocalPoseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPoseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.LocalPoseInfo";
  }
  protected:
  explicit LocalPoseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // .xpilot.sr2_0.proto.Pose6DOF pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::xpilot::sr2_0::proto::Pose6DOF& pose() const;
  ::xpilot::sr2_0::proto::Pose6DOF* release_pose();
  ::xpilot::sr2_0::proto::Pose6DOF* mutable_pose();
  void set_allocated_pose(::xpilot::sr2_0::proto::Pose6DOF* pose);
  private:
  const ::xpilot::sr2_0::proto::Pose6DOF& _internal_pose() const;
  ::xpilot::sr2_0::proto::Pose6DOF* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::xpilot::sr2_0::proto::Pose6DOF* pose);
  ::xpilot::sr2_0::proto::Pose6DOF* unsafe_arena_release_pose();

  // float speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.LocalPoseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Pose6DOF* pose_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class FeaturePointSequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.FeaturePointSequence) */ {
 public:
  inline FeaturePointSequence() : FeaturePointSequence(nullptr) {};
  virtual ~FeaturePointSequence();

  FeaturePointSequence(const FeaturePointSequence& from);
  FeaturePointSequence(FeaturePointSequence&& from) noexcept
    : FeaturePointSequence() {
    *this = ::std::move(from);
  }

  inline FeaturePointSequence& operator=(const FeaturePointSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeaturePointSequence& operator=(FeaturePointSequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeaturePointSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeaturePointSequence* internal_default_instance() {
    return reinterpret_cast<const FeaturePointSequence*>(
               &_FeaturePointSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FeaturePointSequence& a, FeaturePointSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(FeaturePointSequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeaturePointSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeaturePointSequence* New() const final {
    return CreateMaybeMessage<FeaturePointSequence>(nullptr);
  }

  FeaturePointSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeaturePointSequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeaturePointSequence& from);
  void MergeFrom(const FeaturePointSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeaturePointSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.FeaturePointSequence";
  }
  protected:
  explicit FeaturePointSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.FeaturePointSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class BoundaryObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.BoundaryObject) */ {
 public:
  inline BoundaryObject() : BoundaryObject(nullptr) {};
  virtual ~BoundaryObject();

  BoundaryObject(const BoundaryObject& from);
  BoundaryObject(BoundaryObject&& from) noexcept
    : BoundaryObject() {
    *this = ::std::move(from);
  }

  inline BoundaryObject& operator=(const BoundaryObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundaryObject& operator=(BoundaryObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundaryObject& default_instance();

  enum PreviousIdsCase {
    kPreviousId = 7,
    PREVIOUS_IDS_NOT_SET = 0,
  };

  enum NextIdsCase {
    kNextId = 8,
    NEXT_IDS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundaryObject* internal_default_instance() {
    return reinterpret_cast<const BoundaryObject*>(
               &_BoundaryObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BoundaryObject& a, BoundaryObject& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundaryObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundaryObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundaryObject* New() const final {
    return CreateMaybeMessage<BoundaryObject>(nullptr);
  }

  BoundaryObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundaryObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundaryObject& from);
  void MergeFrom(const BoundaryObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundaryObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.BoundaryObject";
  }
  protected:
  explicit BoundaryObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturePointsFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kColorFieldNumber = 3,
    kLeftSideDrivingDirectionFieldNumber = 5,
    kRightSideDrivingDirectionFieldNumber = 6,
    kPreviousIdFieldNumber = 7,
    kNextIdFieldNumber = 8,
  };
  // repeated .xpilot.sr2_0.proto.FeaturePointSequence feature_points = 4;
  int feature_points_size() const;
  private:
  int _internal_feature_points_size() const;
  public:
  void clear_feature_points();
  ::xpilot::sr2_0::proto::FeaturePointSequence* mutable_feature_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::FeaturePointSequence >*
      mutable_feature_points();
  private:
  const ::xpilot::sr2_0::proto::FeaturePointSequence& _internal_feature_points(int index) const;
  ::xpilot::sr2_0::proto::FeaturePointSequence* _internal_add_feature_points();
  public:
  const ::xpilot::sr2_0::proto::FeaturePointSequence& feature_points(int index) const;
  ::xpilot::sr2_0::proto::FeaturePointSequence* add_feature_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::FeaturePointSequence >&
      feature_points() const;

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 left_side_driving_direction = 5;
  void clear_left_side_driving_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 left_side_driving_direction() const;
  void set_left_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_left_side_driving_direction() const;
  void _internal_set_left_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 right_side_driving_direction = 6;
  void clear_right_side_driving_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 right_side_driving_direction() const;
  void set_right_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_right_side_driving_direction() const;
  void _internal_set_right_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 previous_id = 7;
  private:
  bool _internal_has_previous_id() const;
  public:
  void clear_previous_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_id() const;
  void set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_id() const;
  void _internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 next_id = 8;
  private:
  bool _internal_has_next_id() const;
  public:
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  void clear_previous_ids();
  PreviousIdsCase previous_ids_case() const;
  void clear_next_ids();
  NextIdsCase next_ids_case() const;
  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.BoundaryObject)
 private:
  class _Internal;
  void set_has_previous_id();
  void set_has_next_id();

  inline bool has_previous_ids() const;
  inline void clear_has_previous_ids();

  inline bool has_next_ids() const;
  inline void clear_has_next_ids();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::FeaturePointSequence > feature_points_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 left_side_driving_direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 right_side_driving_direction_;
  union PreviousIdsUnion {
    PreviousIdsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 previous_id_;
  } previous_ids_;
  union NextIdsUnion {
    NextIdsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  } next_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPointMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.TrajectoryPointMsg) */ {
 public:
  inline TrajectoryPointMsg() : TrajectoryPointMsg(nullptr) {};
  virtual ~TrajectoryPointMsg();

  TrajectoryPointMsg(const TrajectoryPointMsg& from);
  TrajectoryPointMsg(TrajectoryPointMsg&& from) noexcept
    : TrajectoryPointMsg() {
    *this = ::std::move(from);
  }

  inline TrajectoryPointMsg& operator=(const TrajectoryPointMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPointMsg& operator=(TrajectoryPointMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPointMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPointMsg* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPointMsg*>(
               &_TrajectoryPointMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrajectoryPointMsg& a, TrajectoryPointMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPointMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryPointMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPointMsg* New() const final {
    return CreateMaybeMessage<TrajectoryPointMsg>(nullptr);
  }

  TrajectoryPointMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPointMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPointMsg& from);
  void MergeFrom(const TrajectoryPointMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPointMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.TrajectoryPointMsg";
  }
  protected:
  explicit TrajectoryPointMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fstruct_2eproto);
    return ::descriptor_table_base_5fstruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kThetaFieldNumber = 4,
    kKappaFieldNumber = 5,
    kDkappaFieldNumber = 6,
    kSFieldNumber = 7,
    kVFieldNumber = 8,
    kTFieldNumber = 10,
    kAFieldNumber = 9,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float theta = 4;
  void clear_theta();
  float theta() const;
  void set_theta(float value);
  private:
  float _internal_theta() const;
  void _internal_set_theta(float value);
  public:

  // float kappa = 5;
  void clear_kappa();
  float kappa() const;
  void set_kappa(float value);
  private:
  float _internal_kappa() const;
  void _internal_set_kappa(float value);
  public:

  // float dkappa = 6;
  void clear_dkappa();
  float dkappa() const;
  void set_dkappa(float value);
  private:
  float _internal_dkappa() const;
  void _internal_set_dkappa(float value);
  public:

  // float s = 7;
  void clear_s();
  float s() const;
  void set_s(float value);
  private:
  float _internal_s() const;
  void _internal_set_s(float value);
  public:

  // float v = 8;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // double t = 10;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // float a = 9;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.TrajectoryPointMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float theta_;
  float kappa_;
  float dkappa_;
  float s_;
  float v_;
  double t_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose6DOF

// .xpilot.sr2_0.proto.Vector3d p = 1;
inline bool Pose6DOF::_internal_has_p() const {
  return this != internal_default_instance() && p_ != nullptr;
}
inline bool Pose6DOF::has_p() const {
  return _internal_has_p();
}
inline void Pose6DOF::clear_p() {
  if (GetArena() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Vector3d& Pose6DOF::_internal_p() const {
  const ::xpilot::sr2_0::proto::Vector3d* p = p_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Vector3d*>(
      &::xpilot::sr2_0::proto::_Vector3d_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Vector3d& Pose6DOF::p() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Pose6DOF.p)
  return _internal_p();
}
inline void Pose6DOF::unsafe_arena_set_allocated_p(
    ::xpilot::sr2_0::proto::Vector3d* p) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_);
  }
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.Pose6DOF.p)
}
inline ::xpilot::sr2_0::proto::Vector3d* Pose6DOF::release_p() {
  auto temp = unsafe_arena_release_p();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector3d* Pose6DOF::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.Pose6DOF.p)
  
  ::xpilot::sr2_0::proto::Vector3d* temp = p_;
  p_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector3d* Pose6DOF::_internal_mutable_p() {
  
  if (p_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Vector3d>(GetArena());
    p_ = p;
  }
  return p_;
}
inline ::xpilot::sr2_0::proto::Vector3d* Pose6DOF::mutable_p() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.Pose6DOF.p)
  return _internal_mutable_p();
}
inline void Pose6DOF::set_allocated_p(::xpilot::sr2_0::proto::Vector3d* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.Pose6DOF.p)
}

// .xpilot.sr2_0.proto.Quaternion q = 2;
inline bool Pose6DOF::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool Pose6DOF::has_q() const {
  return _internal_has_q();
}
inline void Pose6DOF::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Quaternion& Pose6DOF::_internal_q() const {
  const ::xpilot::sr2_0::proto::Quaternion* p = q_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Quaternion*>(
      &::xpilot::sr2_0::proto::_Quaternion_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Quaternion& Pose6DOF::q() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Pose6DOF.q)
  return _internal_q();
}
inline void Pose6DOF::unsafe_arena_set_allocated_q(
    ::xpilot::sr2_0::proto::Quaternion* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.Pose6DOF.q)
}
inline ::xpilot::sr2_0::proto::Quaternion* Pose6DOF::release_q() {
  auto temp = unsafe_arena_release_q();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Quaternion* Pose6DOF::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.Pose6DOF.q)
  
  ::xpilot::sr2_0::proto::Quaternion* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Quaternion* Pose6DOF::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Quaternion>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::xpilot::sr2_0::proto::Quaternion* Pose6DOF::mutable_q() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.Pose6DOF.q)
  return _internal_mutable_q();
}
inline void Pose6DOF::set_allocated_q(::xpilot::sr2_0::proto::Quaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.Pose6DOF.q)
}

// -------------------------------------------------------------------

// Vector2f

// float x = 1;
inline void Vector2f::clear_x() {
  x_ = 0;
}
inline float Vector2f::_internal_x() const {
  return x_;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector2f.x)
  return _internal_x();
}
inline void Vector2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector2f.x)
}

// float y = 2;
inline void Vector2f::clear_y() {
  y_ = 0;
}
inline float Vector2f::_internal_y() const {
  return y_;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector2f.y)
  return _internal_y();
}
inline void Vector2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector2f.y)
}

// -------------------------------------------------------------------

// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::_internal_x() const {
  return x_;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector3d.x)
  return _internal_x();
}
inline void Vector3d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::_internal_y() const {
  return y_;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector3d.y)
  return _internal_y();
}
inline void Vector3d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::_internal_z() const {
  return z_;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector3d.z)
  return _internal_z();
}
inline void Vector3d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector3d.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Quaternion.w)
}

// -------------------------------------------------------------------

// Wgs

// double lat = 1;
inline void Wgs::clear_lat() {
  lat_ = 0;
}
inline double Wgs::_internal_lat() const {
  return lat_;
}
inline double Wgs::lat() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Wgs.lat)
  return _internal_lat();
}
inline void Wgs::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Wgs::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Wgs.lat)
}

// double lng = 2;
inline void Wgs::clear_lng() {
  lng_ = 0;
}
inline double Wgs::_internal_lng() const {
  return lng_;
}
inline double Wgs::lng() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Wgs.lng)
  return _internal_lng();
}
inline void Wgs::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Wgs::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Wgs.lng)
}

// double elev = 3;
inline void Wgs::clear_elev() {
  elev_ = 0;
}
inline double Wgs::_internal_elev() const {
  return elev_;
}
inline double Wgs::elev() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Wgs.elev)
  return _internal_elev();
}
inline void Wgs::_internal_set_elev(double value) {
  
  elev_ = value;
}
inline void Wgs::set_elev(double value) {
  _internal_set_elev(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Wgs.elev)
}

// -------------------------------------------------------------------

// Vector6d

// double xx = 1;
inline void Vector6d::clear_xx() {
  xx_ = 0;
}
inline double Vector6d::_internal_xx() const {
  return xx_;
}
inline double Vector6d::xx() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector6d.xx)
  return _internal_xx();
}
inline void Vector6d::_internal_set_xx(double value) {
  
  xx_ = value;
}
inline void Vector6d::set_xx(double value) {
  _internal_set_xx(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector6d.xx)
}

// double yy = 2;
inline void Vector6d::clear_yy() {
  yy_ = 0;
}
inline double Vector6d::_internal_yy() const {
  return yy_;
}
inline double Vector6d::yy() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector6d.yy)
  return _internal_yy();
}
inline void Vector6d::_internal_set_yy(double value) {
  
  yy_ = value;
}
inline void Vector6d::set_yy(double value) {
  _internal_set_yy(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector6d.yy)
}

// double zz = 3;
inline void Vector6d::clear_zz() {
  zz_ = 0;
}
inline double Vector6d::_internal_zz() const {
  return zz_;
}
inline double Vector6d::zz() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector6d.zz)
  return _internal_zz();
}
inline void Vector6d::_internal_set_zz(double value) {
  
  zz_ = value;
}
inline void Vector6d::set_zz(double value) {
  _internal_set_zz(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector6d.zz)
}

// double xy = 4;
inline void Vector6d::clear_xy() {
  xy_ = 0;
}
inline double Vector6d::_internal_xy() const {
  return xy_;
}
inline double Vector6d::xy() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector6d.xy)
  return _internal_xy();
}
inline void Vector6d::_internal_set_xy(double value) {
  
  xy_ = value;
}
inline void Vector6d::set_xy(double value) {
  _internal_set_xy(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector6d.xy)
}

// double yz = 5;
inline void Vector6d::clear_yz() {
  yz_ = 0;
}
inline double Vector6d::_internal_yz() const {
  return yz_;
}
inline double Vector6d::yz() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector6d.yz)
  return _internal_yz();
}
inline void Vector6d::_internal_set_yz(double value) {
  
  yz_ = value;
}
inline void Vector6d::set_yz(double value) {
  _internal_set_yz(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector6d.yz)
}

// double zx = 6;
inline void Vector6d::clear_zx() {
  zx_ = 0;
}
inline double Vector6d::_internal_zx() const {
  return zx_;
}
inline double Vector6d::zx() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Vector6d.zx)
  return _internal_zx();
}
inline void Vector6d::_internal_set_zx(double value) {
  
  zx_ = value;
}
inline void Vector6d::set_zx(double value) {
  _internal_set_zx(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Vector6d.zx)
}

// -------------------------------------------------------------------

// Time

// uint64 nsec = 1;
inline void Time::clear_nsec() {
  nsec_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Time::_internal_nsec() const {
  return nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Time::nsec() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Time.nsec)
  return _internal_nsec();
}
inline void Time::_internal_set_nsec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nsec_ = value;
}
inline void Time::set_nsec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Time.nsec)
}

// -------------------------------------------------------------------

// LocalPoseInfo

// .xpilot.sr2_0.proto.Pose6DOF pose = 1;
inline bool LocalPoseInfo::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool LocalPoseInfo::has_pose() const {
  return _internal_has_pose();
}
inline void LocalPoseInfo::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Pose6DOF& LocalPoseInfo::_internal_pose() const {
  const ::xpilot::sr2_0::proto::Pose6DOF* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Pose6DOF*>(
      &::xpilot::sr2_0::proto::_Pose6DOF_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Pose6DOF& LocalPoseInfo::pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LocalPoseInfo.pose)
  return _internal_pose();
}
inline void LocalPoseInfo::unsafe_arena_set_allocated_pose(
    ::xpilot::sr2_0::proto::Pose6DOF* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LocalPoseInfo.pose)
}
inline ::xpilot::sr2_0::proto::Pose6DOF* LocalPoseInfo::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Pose6DOF* LocalPoseInfo::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LocalPoseInfo.pose)
  
  ::xpilot::sr2_0::proto::Pose6DOF* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Pose6DOF* LocalPoseInfo::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Pose6DOF>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::xpilot::sr2_0::proto::Pose6DOF* LocalPoseInfo::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LocalPoseInfo.pose)
  return _internal_mutable_pose();
}
inline void LocalPoseInfo::set_allocated_pose(::xpilot::sr2_0::proto::Pose6DOF* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LocalPoseInfo.pose)
}

// float speed = 2;
inline void LocalPoseInfo::clear_speed() {
  speed_ = 0;
}
inline float LocalPoseInfo::_internal_speed() const {
  return speed_;
}
inline float LocalPoseInfo::speed() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LocalPoseInfo.speed)
  return _internal_speed();
}
inline void LocalPoseInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void LocalPoseInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LocalPoseInfo.speed)
}

// -------------------------------------------------------------------

// FeaturePointSequence

// float x = 1;
inline void FeaturePointSequence::clear_x() {
  x_ = 0;
}
inline float FeaturePointSequence::_internal_x() const {
  return x_;
}
inline float FeaturePointSequence::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.FeaturePointSequence.x)
  return _internal_x();
}
inline void FeaturePointSequence::_internal_set_x(float value) {
  
  x_ = value;
}
inline void FeaturePointSequence::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.FeaturePointSequence.x)
}

// float y = 2;
inline void FeaturePointSequence::clear_y() {
  y_ = 0;
}
inline float FeaturePointSequence::_internal_y() const {
  return y_;
}
inline float FeaturePointSequence::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.FeaturePointSequence.y)
  return _internal_y();
}
inline void FeaturePointSequence::_internal_set_y(float value) {
  
  y_ = value;
}
inline void FeaturePointSequence::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.FeaturePointSequence.y)
}

// float z = 3;
inline void FeaturePointSequence::clear_z() {
  z_ = 0;
}
inline float FeaturePointSequence::_internal_z() const {
  return z_;
}
inline float FeaturePointSequence::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.FeaturePointSequence.z)
  return _internal_z();
}
inline void FeaturePointSequence::_internal_set_z(float value) {
  
  z_ = value;
}
inline void FeaturePointSequence::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.FeaturePointSequence.z)
}

// -------------------------------------------------------------------

// BoundaryObject

// uint64 id = 1;
inline void BoundaryObject::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.id)
  return _internal_id();
}
inline void BoundaryObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void BoundaryObject::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.id)
}

// uint32 type = 2;
inline void BoundaryObject::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.type)
  return _internal_type();
}
inline void BoundaryObject::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void BoundaryObject::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.type)
}

// uint32 color = 3;
inline void BoundaryObject::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::color() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.color)
  return _internal_color();
}
inline void BoundaryObject::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void BoundaryObject::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.color)
}

// repeated .xpilot.sr2_0.proto.FeaturePointSequence feature_points = 4;
inline int BoundaryObject::_internal_feature_points_size() const {
  return feature_points_.size();
}
inline int BoundaryObject::feature_points_size() const {
  return _internal_feature_points_size();
}
inline void BoundaryObject::clear_feature_points() {
  feature_points_.Clear();
}
inline ::xpilot::sr2_0::proto::FeaturePointSequence* BoundaryObject::mutable_feature_points(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.BoundaryObject.feature_points)
  return feature_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::FeaturePointSequence >*
BoundaryObject::mutable_feature_points() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.BoundaryObject.feature_points)
  return &feature_points_;
}
inline const ::xpilot::sr2_0::proto::FeaturePointSequence& BoundaryObject::_internal_feature_points(int index) const {
  return feature_points_.Get(index);
}
inline const ::xpilot::sr2_0::proto::FeaturePointSequence& BoundaryObject::feature_points(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.feature_points)
  return _internal_feature_points(index);
}
inline ::xpilot::sr2_0::proto::FeaturePointSequence* BoundaryObject::_internal_add_feature_points() {
  return feature_points_.Add();
}
inline ::xpilot::sr2_0::proto::FeaturePointSequence* BoundaryObject::add_feature_points() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.BoundaryObject.feature_points)
  return _internal_add_feature_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::FeaturePointSequence >&
BoundaryObject::feature_points() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.BoundaryObject.feature_points)
  return feature_points_;
}

// uint32 left_side_driving_direction = 5;
inline void BoundaryObject::clear_left_side_driving_direction() {
  left_side_driving_direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::_internal_left_side_driving_direction() const {
  return left_side_driving_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::left_side_driving_direction() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.left_side_driving_direction)
  return _internal_left_side_driving_direction();
}
inline void BoundaryObject::_internal_set_left_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  left_side_driving_direction_ = value;
}
inline void BoundaryObject::set_left_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_left_side_driving_direction(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.left_side_driving_direction)
}

// uint32 right_side_driving_direction = 6;
inline void BoundaryObject::clear_right_side_driving_direction() {
  right_side_driving_direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::_internal_right_side_driving_direction() const {
  return right_side_driving_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BoundaryObject::right_side_driving_direction() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.right_side_driving_direction)
  return _internal_right_side_driving_direction();
}
inline void BoundaryObject::_internal_set_right_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  right_side_driving_direction_ = value;
}
inline void BoundaryObject::set_right_side_driving_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_right_side_driving_direction(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.right_side_driving_direction)
}

// uint64 previous_id = 7;
inline bool BoundaryObject::_internal_has_previous_id() const {
  return previous_ids_case() == kPreviousId;
}
inline void BoundaryObject::set_has_previous_id() {
  _oneof_case_[0] = kPreviousId;
}
inline void BoundaryObject::clear_previous_id() {
  if (_internal_has_previous_id()) {
    previous_ids_.previous_id_ = PROTOBUF_ULONGLONG(0);
    clear_has_previous_ids();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::_internal_previous_id() const {
  if (_internal_has_previous_id()) {
    return previous_ids_.previous_id_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BoundaryObject::_internal_set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_previous_id()) {
    clear_previous_ids();
    set_has_previous_id();
  }
  previous_ids_.previous_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::previous_id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.previous_id)
  return _internal_previous_id();
}
inline void BoundaryObject::set_previous_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.previous_id)
}

// uint64 next_id = 8;
inline bool BoundaryObject::_internal_has_next_id() const {
  return next_ids_case() == kNextId;
}
inline void BoundaryObject::set_has_next_id() {
  _oneof_case_[1] = kNextId;
}
inline void BoundaryObject::clear_next_id() {
  if (_internal_has_next_id()) {
    next_ids_.next_id_ = PROTOBUF_ULONGLONG(0);
    clear_has_next_ids();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::_internal_next_id() const {
  if (_internal_has_next_id()) {
    return next_ids_.next_id_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BoundaryObject::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_next_id()) {
    clear_next_ids();
    set_has_next_id();
  }
  next_ids_.next_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BoundaryObject::next_id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BoundaryObject.next_id)
  return _internal_next_id();
}
inline void BoundaryObject::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BoundaryObject.next_id)
}

inline bool BoundaryObject::has_previous_ids() const {
  return previous_ids_case() != PREVIOUS_IDS_NOT_SET;
}
inline void BoundaryObject::clear_has_previous_ids() {
  _oneof_case_[0] = PREVIOUS_IDS_NOT_SET;
}
inline bool BoundaryObject::has_next_ids() const {
  return next_ids_case() != NEXT_IDS_NOT_SET;
}
inline void BoundaryObject::clear_has_next_ids() {
  _oneof_case_[1] = NEXT_IDS_NOT_SET;
}
inline BoundaryObject::PreviousIdsCase BoundaryObject::previous_ids_case() const {
  return BoundaryObject::PreviousIdsCase(_oneof_case_[0]);
}
inline BoundaryObject::NextIdsCase BoundaryObject::next_ids_case() const {
  return BoundaryObject::NextIdsCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TrajectoryPointMsg

// float x = 1;
inline void TrajectoryPointMsg::clear_x() {
  x_ = 0;
}
inline float TrajectoryPointMsg::_internal_x() const {
  return x_;
}
inline float TrajectoryPointMsg::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.x)
  return _internal_x();
}
inline void TrajectoryPointMsg::_internal_set_x(float value) {
  
  x_ = value;
}
inline void TrajectoryPointMsg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.x)
}

// float y = 2;
inline void TrajectoryPointMsg::clear_y() {
  y_ = 0;
}
inline float TrajectoryPointMsg::_internal_y() const {
  return y_;
}
inline float TrajectoryPointMsg::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.y)
  return _internal_y();
}
inline void TrajectoryPointMsg::_internal_set_y(float value) {
  
  y_ = value;
}
inline void TrajectoryPointMsg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.y)
}

// float z = 3;
inline void TrajectoryPointMsg::clear_z() {
  z_ = 0;
}
inline float TrajectoryPointMsg::_internal_z() const {
  return z_;
}
inline float TrajectoryPointMsg::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.z)
  return _internal_z();
}
inline void TrajectoryPointMsg::_internal_set_z(float value) {
  
  z_ = value;
}
inline void TrajectoryPointMsg::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.z)
}

// float theta = 4;
inline void TrajectoryPointMsg::clear_theta() {
  theta_ = 0;
}
inline float TrajectoryPointMsg::_internal_theta() const {
  return theta_;
}
inline float TrajectoryPointMsg::theta() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.theta)
  return _internal_theta();
}
inline void TrajectoryPointMsg::_internal_set_theta(float value) {
  
  theta_ = value;
}
inline void TrajectoryPointMsg::set_theta(float value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.theta)
}

// float kappa = 5;
inline void TrajectoryPointMsg::clear_kappa() {
  kappa_ = 0;
}
inline float TrajectoryPointMsg::_internal_kappa() const {
  return kappa_;
}
inline float TrajectoryPointMsg::kappa() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.kappa)
  return _internal_kappa();
}
inline void TrajectoryPointMsg::_internal_set_kappa(float value) {
  
  kappa_ = value;
}
inline void TrajectoryPointMsg::set_kappa(float value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.kappa)
}

// float dkappa = 6;
inline void TrajectoryPointMsg::clear_dkappa() {
  dkappa_ = 0;
}
inline float TrajectoryPointMsg::_internal_dkappa() const {
  return dkappa_;
}
inline float TrajectoryPointMsg::dkappa() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.dkappa)
  return _internal_dkappa();
}
inline void TrajectoryPointMsg::_internal_set_dkappa(float value) {
  
  dkappa_ = value;
}
inline void TrajectoryPointMsg::set_dkappa(float value) {
  _internal_set_dkappa(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.dkappa)
}

// float s = 7;
inline void TrajectoryPointMsg::clear_s() {
  s_ = 0;
}
inline float TrajectoryPointMsg::_internal_s() const {
  return s_;
}
inline float TrajectoryPointMsg::s() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.s)
  return _internal_s();
}
inline void TrajectoryPointMsg::_internal_set_s(float value) {
  
  s_ = value;
}
inline void TrajectoryPointMsg::set_s(float value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.s)
}

// float v = 8;
inline void TrajectoryPointMsg::clear_v() {
  v_ = 0;
}
inline float TrajectoryPointMsg::_internal_v() const {
  return v_;
}
inline float TrajectoryPointMsg::v() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.v)
  return _internal_v();
}
inline void TrajectoryPointMsg::_internal_set_v(float value) {
  
  v_ = value;
}
inline void TrajectoryPointMsg::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.v)
}

// float a = 9;
inline void TrajectoryPointMsg::clear_a() {
  a_ = 0;
}
inline float TrajectoryPointMsg::_internal_a() const {
  return a_;
}
inline float TrajectoryPointMsg::a() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.a)
  return _internal_a();
}
inline void TrajectoryPointMsg::_internal_set_a(float value) {
  
  a_ = value;
}
inline void TrajectoryPointMsg::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.a)
}

// double t = 10;
inline void TrajectoryPointMsg::clear_t() {
  t_ = 0;
}
inline double TrajectoryPointMsg::_internal_t() const {
  return t_;
}
inline double TrajectoryPointMsg::t() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrajectoryPointMsg.t)
  return _internal_t();
}
inline void TrajectoryPointMsg::_internal_set_t(double value) {
  
  t_ = value;
}
inline void TrajectoryPointMsg::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrajectoryPointMsg.t)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_5fstruct_2eproto
