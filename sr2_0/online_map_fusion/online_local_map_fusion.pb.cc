// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: online_map_fusion/online_local_map_fusion.proto

#include "online_map_fusion/online_local_map_fusion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryObject_base_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2f_base_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_base_5fstruct_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class RoadMarkingObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadMarkingObject> _instance;
} _RoadMarkingObject_default_instance_;
class RoadMarkingPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadMarkingPoint> _instance;
} _RoadMarkingPoint_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class Point3fWithConfidenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3fWithConfidence> _instance;
} _Point3fWithConfidence_default_instance_;
class TrafficSignObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignObject> _instance;
} _TrafficSignObject_default_instance_;
class CarPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarPort> _instance;
} _CarPort_default_instance_;
class ChangeLanelineIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeLanelineId> _instance;
} _ChangeLanelineId_default_instance_;
class IsCrossLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCrossLine> _instance;
} _IsCrossLine_default_instance_;
class OCRObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OCRObject> _instance;
} _OCRObject_default_instance_;
class TSRUObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TSRUObject> _instance;
} _TSRUObject_default_instance_;
class BevPillarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BevPillar> _instance;
} _BevPillar_default_instance_;
class OCCBevPillarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OCCBevPillar> _instance;
} _OCCBevPillar_default_instance_;
class OnlineLocalMapMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnlineLocalMapMsg> _instance;
} _OnlineLocalMapMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
static void InitDefaultsscc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_BevPillar_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::BevPillar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::BevPillar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_Vector2f_base_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_CarPort_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::CarPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::CarPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_ChangeLanelineId_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::ChangeLanelineId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::ChangeLanelineId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_IsCrossLine_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::IsCrossLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::IsCrossLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_OCCBevPillar_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::OCCBevPillar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::OCCBevPillar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_Vector2f_base_5fstruct_2eproto.base,
      &scc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_OCRObject_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::OCRObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::OCRObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::OnlineLocalMapMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_BoundaryObject_base_5fstruct_2eproto.base,
      &scc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_Point3fWithConfidence_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::Point3fWithConfidence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::Point3fWithConfidence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_Polygon_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_RoadMarkingObject_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::RoadMarkingObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::RoadMarkingObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_RoadMarkingPoint_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::RoadMarkingPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::RoadMarkingPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_TSRUObject_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::TSRUObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::TSRUObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_Vector3d_base_5fstruct_2eproto.base,
      &scc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_TrafficLight_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_TrafficSignObject_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::TrafficSignObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::TrafficSignObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto}, {
      &scc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingObject, id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingObject, rsm_type_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingObject, points_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingObject, stop_line_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingPoint, x_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingPoint, y_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingPoint, z_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::RoadMarkingPoint, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, direction_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, color_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, row_bulb_count_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, column_bulb_count_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, outline_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, timer_digit_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficLight, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Polygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3fWithConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3fWithConfidence, x_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3fWithConfidence, y_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3fWithConfidence, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficSignObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficSignObject, id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficSignObject, type_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficSignObject, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficSignObject, center_point_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TrafficSignObject, outline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::CarPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::CarPort, x_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::CarPort, y_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::CarPort, z_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::CarPort, color_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::CarPort, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ChangeLanelineId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ChangeLanelineId, le1_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ChangeLanelineId, le2_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ChangeLanelineId, ri1_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ChangeLanelineId, ri2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::IsCrossLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::IsCrossLine, is_cross_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OCRObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OCRObject, text_direction_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OCRObject, text_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, tsru_id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, tsru_type_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, vertices_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, yaw_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, ocr_objects_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::TSRUObject, pass_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::BevPillar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::BevPillar, pos_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::BevPillar, min_z_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::BevPillar, max_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OCCBevPillar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OCCBevPillar, pillar_2d_size_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OCCBevPillar, bev_pillar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, boudary_object_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, road_mark_object_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, traffic_lights_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, car_port_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, change_lane_id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, drivable_space_map_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, is_cross_line_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, tsru_objects_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, occ_bev_pillar_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::OnlineLocalMapMsg, traffic_sign_objects_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::RoadMarkingObject)},
  { 9, -1, sizeof(::xpilot::sr2_0::proto::RoadMarkingPoint)},
  { 18, -1, sizeof(::xpilot::sr2_0::proto::TrafficLight)},
  { 31, -1, sizeof(::xpilot::sr2_0::proto::Polygon)},
  { 37, -1, sizeof(::xpilot::sr2_0::proto::Point3fWithConfidence)},
  { 45, -1, sizeof(::xpilot::sr2_0::proto::TrafficSignObject)},
  { 55, -1, sizeof(::xpilot::sr2_0::proto::CarPort)},
  { 65, -1, sizeof(::xpilot::sr2_0::proto::ChangeLanelineId)},
  { 74, -1, sizeof(::xpilot::sr2_0::proto::IsCrossLine)},
  { 80, -1, sizeof(::xpilot::sr2_0::proto::OCRObject)},
  { 87, -1, sizeof(::xpilot::sr2_0::proto::TSRUObject)},
  { 98, -1, sizeof(::xpilot::sr2_0::proto::BevPillar)},
  { 106, -1, sizeof(::xpilot::sr2_0::proto::OCCBevPillar)},
  { 113, -1, sizeof(::xpilot::sr2_0::proto::OnlineLocalMapMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_RoadMarkingObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_RoadMarkingPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_Point3fWithConfidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_TrafficSignObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_CarPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_ChangeLanelineId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_IsCrossLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_OCRObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_TSRUObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_BevPillar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_OCCBevPillar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_),
};

const char descriptor_table_protodef_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/online_map_fusion/online_local_map_fus"
  "ion.proto\022\022xpilot.sr2_0.proto\032\021base_stru"
  "ct.proto\"\200\001\n\021RoadMarkingObject\022\n\n\002id\030\001 \001"
  "(\002\022\020\n\010rsm_type\030\002 \001(\r\0224\n\006points\030\003 \003(\0132$.x"
  "pilot.sr2_0.proto.RoadMarkingPoint\022\027\n\017st"
  "op_line_color\030\004 \001(\r\"A\n\020RoadMarkingPoint\022"
  "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004type"
  "\030\004 \001(\r\"\277\001\n\014TrafficLight\022\n\n\002id\030\001 \001(\002\022\021\n\td"
  "irection\030\002 \001(\r\022\r\n\005color\030\003 \001(\r\022\026\n\016row_bul"
  "b_count\030\004 \001(\002\022\031\n\021column_bulb_count\030\005 \001(\002"
  "\022,\n\007outline\030\006 \001(\0132\033.xpilot.sr2_0.proto.P"
  "olygon\022\023\n\013timer_digit\030\007 \001(\002\022\013\n\003yaw\030\010 \001(\001"
  "\"D\n\007Polygon\0229\n\006points\030\001 \003(\0132).xpilot.sr2"
  "_0.proto.Point3fWithConfidence\"8\n\025Point3"
  "fWithConfidence\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n"
  "\001z\030\003 \001(\002\"\261\001\n\021TrafficSignObject\022\n\n\002id\030\001 \001"
  "(\004\022\014\n\004type\030\002 \001(\r\022\023\n\013speed_limit\030\003 \001(\r\022\?\n"
  "\014center_point\030\004 \001(\0132).xpilot.sr2_0.proto"
  ".Point3fWithConfidence\022,\n\007outline\030\005 \001(\0132"
  "\033.xpilot.sr2_0.proto.Polygon\"F\n\007CarPort\022"
  "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\r\n\005colo"
  "r\030\004 \001(\005\022\013\n\003yaw\030\005 \001(\002\"F\n\020ChangeLanelineId"
  "\022\013\n\003le1\030\001 \001(\004\022\013\n\003le2\030\002 \001(\004\022\013\n\003ri1\030\003 \001(\004\022"
  "\013\n\003ri2\030\004 \001(\004\"$\n\013IsCrossLine\022\025\n\ris_cross_"
  "line\030\001 \001(\010\"8\n\tOCRObject\022\026\n\016text_directio"
  "n\030\001 \001(\005\022\023\n\013text_string\030\002 \001(\t\"\266\001\n\nTSRUObj"
  "ect\022\017\n\007tsru_id\030\001 \001(\r\022\021\n\ttsru_type\030\002 \001(\005\022"
  ".\n\010vertices\030\003 \001(\0132\034.xpilot.sr2_0.proto.V"
  "ector3d\022\013\n\003yaw\030\004 \001(\002\0222\n\013ocr_objects\030\005 \003("
  "\0132\035.xpilot.sr2_0.proto.OCRObject\022\023\n\013pass"
  "_status\030\006 \001(\005\"T\n\tBevPillar\022)\n\003pos\030\001 \001(\0132"
  "\034.xpilot.sr2_0.proto.Vector2f\022\r\n\005min_z\030\002"
  " \001(\002\022\r\n\005max_z\030\003 \001(\002\"w\n\014OCCBevPillar\0224\n\016p"
  "illar_2d_size\030\001 \001(\0132\034.xpilot.sr2_0.proto"
  ".Vector2f\0221\n\nbev_pillar\030\002 \003(\0132\035.xpilot.s"
  "r2_0.proto.BevPillar\"\323\004\n\021OnlineLocalMapM"
  "sg\022\021\n\ttimestamp\030\001 \001(\004\022:\n\016boudary_object\030"
  "\002 \003(\0132\".xpilot.sr2_0.proto.BoundaryObjec"
  "t\022\?\n\020road_mark_object\030\003 \003(\0132%.xpilot.sr2"
  "_0.proto.RoadMarkingObject\0228\n\016traffic_li"
  "ghts\030\004 \003(\0132 .xpilot.sr2_0.proto.TrafficL"
  "ight\022-\n\010car_port\030\005 \001(\0132\033.xpilot.sr2_0.pr"
  "oto.CarPort\022<\n\016change_lane_id\030\006 \001(\0132$.xp"
  "ilot.sr2_0.proto.ChangeLanelineId\022\032\n\022dri"
  "vable_space_map\030\007 \003(\005\0226\n\ris_cross_line\030\010"
  " \001(\0132\037.xpilot.sr2_0.proto.IsCrossLine\0224\n"
  "\014tsru_objects\030\t \003(\0132\036.xpilot.sr2_0.proto"
  ".TSRUObject\0228\n\016occ_bev_pillar\030\n \001(\0132 .xp"
  "ilot.sr2_0.proto.OCCBevPillar\022C\n\024traffic"
  "_sign_objects\030\013 \003(\0132%.xpilot.sr2_0.proto"
  ".TrafficSignObjectb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto_deps[1] = {
  &::descriptor_table_base_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto_sccs[14] = {
  &scc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
  &scc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto = {
  false, false, descriptor_table_protodef_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto, "online_map_fusion/online_local_map_fusion.proto", 2026,
  &descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto_once, descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto_sccs, descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto::offsets,
  file_level_metadata_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto, 14, file_level_enum_descriptors_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto, file_level_service_descriptors_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto)), true);
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

void RoadMarkingObject::InitAsDefaultInstance() {
}
class RoadMarkingObject::_Internal {
 public:
};

RoadMarkingObject::RoadMarkingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.RoadMarkingObject)
}
RoadMarkingObject::RoadMarkingObject(const RoadMarkingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_line_color_) -
    reinterpret_cast<char*>(&id_)) + sizeof(stop_line_color_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.RoadMarkingObject)
}

void RoadMarkingObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_line_color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stop_line_color_));
}

RoadMarkingObject::~RoadMarkingObject() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.RoadMarkingObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadMarkingObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadMarkingObject::ArenaDtor(void* object) {
  RoadMarkingObject* _this = reinterpret_cast< RoadMarkingObject* >(object);
  (void)_this;
}
void RoadMarkingObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadMarkingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadMarkingObject& RoadMarkingObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadMarkingObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void RoadMarkingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.RoadMarkingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_line_color_) -
      reinterpret_cast<char*>(&id_)) + sizeof(stop_line_color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadMarkingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 rsm_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rsm_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.RoadMarkingPoint points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 stop_line_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stop_line_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadMarkingObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.RoadMarkingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_id(), target);
  }

  // uint32 rsm_type = 2;
  if (this->rsm_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rsm_type(), target);
  }

  // repeated .xpilot.sr2_0.proto.RoadMarkingPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  // uint32 stop_line_color = 4;
  if (this->stop_line_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stop_line_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.RoadMarkingObject)
  return target;
}

size_t RoadMarkingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.RoadMarkingObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.RoadMarkingPoint points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 rsm_type = 2;
  if (this->rsm_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rsm_type());
  }

  // uint32 stop_line_color = 4;
  if (this->stop_line_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stop_line_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMarkingObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.RoadMarkingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarkingObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadMarkingObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.RoadMarkingObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.RoadMarkingObject)
    MergeFrom(*source);
  }
}

void RoadMarkingObject::MergeFrom(const RoadMarkingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.RoadMarkingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!(from.id() <= 0 && from.id() >= 0)) {
    _internal_set_id(from._internal_id());
  }
  if (from.rsm_type() != 0) {
    _internal_set_rsm_type(from._internal_rsm_type());
  }
  if (from.stop_line_color() != 0) {
    _internal_set_stop_line_color(from._internal_stop_line_color());
  }
}

void RoadMarkingObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.RoadMarkingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarkingObject::CopyFrom(const RoadMarkingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.RoadMarkingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarkingObject::IsInitialized() const {
  return true;
}

void RoadMarkingObject::InternalSwap(RoadMarkingObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadMarkingObject, stop_line_color_)
      + sizeof(RoadMarkingObject::stop_line_color_)
      - PROTOBUF_FIELD_OFFSET(RoadMarkingObject, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarkingObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadMarkingPoint::InitAsDefaultInstance() {
}
class RoadMarkingPoint::_Internal {
 public:
};

RoadMarkingPoint::RoadMarkingPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.RoadMarkingPoint)
}
RoadMarkingPoint::RoadMarkingPoint(const RoadMarkingPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.RoadMarkingPoint)
}

void RoadMarkingPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(type_));
}

RoadMarkingPoint::~RoadMarkingPoint() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.RoadMarkingPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoadMarkingPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoadMarkingPoint::ArenaDtor(void* object) {
  RoadMarkingPoint* _this = reinterpret_cast< RoadMarkingPoint* >(object);
  (void)_this;
}
void RoadMarkingPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadMarkingPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadMarkingPoint& RoadMarkingPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadMarkingPoint_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void RoadMarkingPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadMarkingPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadMarkingPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.RoadMarkingPoint)
  return target;
}

size_t RoadMarkingPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMarkingPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarkingPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadMarkingPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.RoadMarkingPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.RoadMarkingPoint)
    MergeFrom(*source);
  }
}

void RoadMarkingPoint::MergeFrom(const RoadMarkingPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RoadMarkingPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarkingPoint::CopyFrom(const RoadMarkingPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.RoadMarkingPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarkingPoint::IsInitialized() const {
  return true;
}

void RoadMarkingPoint::InternalSwap(RoadMarkingPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadMarkingPoint, type_)
      + sizeof(RoadMarkingPoint::type_)
      - PROTOBUF_FIELD_OFFSET(RoadMarkingPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarkingPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_TrafficLight_default_instance_._instance.get_mutable()->outline_ = const_cast< ::xpilot::sr2_0::proto::Polygon*>(
      ::xpilot::sr2_0::proto::Polygon::internal_default_instance());
}
class TrafficLight::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Polygon& outline(const TrafficLight* msg);
};

const ::xpilot::sr2_0::proto::Polygon&
TrafficLight::_Internal::outline(const TrafficLight* msg) {
  return *msg->outline_;
}
TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outline()) {
    outline_ = new ::xpilot::sr2_0::proto::Polygon(*from.outline_);
  } else {
    outline_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&id_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&outline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&outline_)) + sizeof(yaw_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.TrafficLight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete outline_;
}

void TrafficLight::ArenaDtor(void* object) {
  TrafficLight* _this = reinterpret_cast< TrafficLight* >(object);
  (void)_this;
}
void TrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&id_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float row_bulb_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          row_bulb_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float column_bulb_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          column_bulb_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Polygon outline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float timer_digit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          timer_digit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double yaw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_id(), target);
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_direction(), target);
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color(), target);
  }

  // float row_bulb_count = 4;
  if (!(this->row_bulb_count() <= 0 && this->row_bulb_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_row_bulb_count(), target);
  }

  // float column_bulb_count = 5;
  if (!(this->column_bulb_count() <= 0 && this->column_bulb_count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_column_bulb_count(), target);
  }

  // .xpilot.sr2_0.proto.Polygon outline = 6;
  if (this->has_outline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::outline(this), target, stream);
  }

  // float timer_digit = 7;
  if (!(this->timer_digit() <= 0 && this->timer_digit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_timer_digit(), target);
  }

  // double yaw = 8;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Polygon outline = 6;
  if (this->has_outline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_);
  }

  // float id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_direction());
  }

  // uint32 color = 3;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  // float row_bulb_count = 4;
  if (!(this->row_bulb_count() <= 0 && this->row_bulb_count() >= 0)) {
    total_size += 1 + 4;
  }

  // float column_bulb_count = 5;
  if (!(this->column_bulb_count() <= 0 && this->column_bulb_count() >= 0)) {
    total_size += 1 + 4;
  }

  // float timer_digit = 7;
  if (!(this->timer_digit() <= 0 && this->timer_digit() >= 0)) {
    total_size += 1 + 4;
  }

  // double yaw = 8;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_outline()) {
    _internal_mutable_outline()->::xpilot::sr2_0::proto::Polygon::MergeFrom(from._internal_outline());
  }
  if (!(from.id() <= 0 && from.id() >= 0)) {
    _internal_set_id(from._internal_id());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (!(from.row_bulb_count() <= 0 && from.row_bulb_count() >= 0)) {
    _internal_set_row_bulb_count(from._internal_row_bulb_count());
  }
  if (!(from.column_bulb_count() <= 0 && from.column_bulb_count() >= 0)) {
    _internal_set_column_bulb_count(from._internal_column_bulb_count());
  }
  if (!(from.timer_digit() <= 0 && from.timer_digit() >= 0)) {
    _internal_set_timer_digit(from._internal_timer_digit());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, yaw_)
      + sizeof(TrafficLight::yaw_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, outline_)>(
          reinterpret_cast<char*>(&outline_),
          reinterpret_cast<char*>(&other->outline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xpilot.sr2_0.proto.Point3fWithConfidence points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.Point3fWithConfidence points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.Point3fWithConfidence points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3fWithConfidence::InitAsDefaultInstance() {
}
class Point3fWithConfidence::_Internal {
 public:
};

Point3fWithConfidence::Point3fWithConfidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.Point3fWithConfidence)
}
Point3fWithConfidence::Point3fWithConfidence(const Point3fWithConfidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.Point3fWithConfidence)
}

void Point3fWithConfidence::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3fWithConfidence::~Point3fWithConfidence() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.Point3fWithConfidence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3fWithConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point3fWithConfidence::ArenaDtor(void* object) {
  Point3fWithConfidence* _this = reinterpret_cast< Point3fWithConfidence* >(object);
  (void)_this;
}
void Point3fWithConfidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3fWithConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3fWithConfidence& Point3fWithConfidence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3fWithConfidence_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void Point3fWithConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3fWithConfidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3fWithConfidence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.Point3fWithConfidence)
  return target;
}

size_t Point3fWithConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3fWithConfidence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3fWithConfidence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3fWithConfidence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.Point3fWithConfidence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.Point3fWithConfidence)
    MergeFrom(*source);
  }
}

void Point3fWithConfidence::MergeFrom(const Point3fWithConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3fWithConfidence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3fWithConfidence::CopyFrom(const Point3fWithConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.Point3fWithConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3fWithConfidence::IsInitialized() const {
  return true;
}

void Point3fWithConfidence::InternalSwap(Point3fWithConfidence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3fWithConfidence, z_)
      + sizeof(Point3fWithConfidence::z_)
      - PROTOBUF_FIELD_OFFSET(Point3fWithConfidence, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3fWithConfidence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignObject::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_TrafficSignObject_default_instance_._instance.get_mutable()->center_point_ = const_cast< ::xpilot::sr2_0::proto::Point3fWithConfidence*>(
      ::xpilot::sr2_0::proto::Point3fWithConfidence::internal_default_instance());
  ::xpilot::sr2_0::proto::_TrafficSignObject_default_instance_._instance.get_mutable()->outline_ = const_cast< ::xpilot::sr2_0::proto::Polygon*>(
      ::xpilot::sr2_0::proto::Polygon::internal_default_instance());
}
class TrafficSignObject::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Point3fWithConfidence& center_point(const TrafficSignObject* msg);
  static const ::xpilot::sr2_0::proto::Polygon& outline(const TrafficSignObject* msg);
};

const ::xpilot::sr2_0::proto::Point3fWithConfidence&
TrafficSignObject::_Internal::center_point(const TrafficSignObject* msg) {
  return *msg->center_point_;
}
const ::xpilot::sr2_0::proto::Polygon&
TrafficSignObject::_Internal::outline(const TrafficSignObject* msg) {
  return *msg->outline_;
}
TrafficSignObject::TrafficSignObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.TrafficSignObject)
}
TrafficSignObject::TrafficSignObject(const TrafficSignObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_point()) {
    center_point_ = new ::xpilot::sr2_0::proto::Point3fWithConfidence(*from.center_point_);
  } else {
    center_point_ = nullptr;
  }
  if (from._internal_has_outline()) {
    outline_ = new ::xpilot::sr2_0::proto::Polygon(*from.outline_);
  } else {
    outline_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&id_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.TrafficSignObject)
}

void TrafficSignObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&center_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&center_point_)) + sizeof(speed_limit_));
}

TrafficSignObject::~TrafficSignObject() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.TrafficSignObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrafficSignObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_point_;
  if (this != internal_default_instance()) delete outline_;
}

void TrafficSignObject::ArenaDtor(void* object) {
  TrafficSignObject* _this = reinterpret_cast< TrafficSignObject* >(object);
  (void)_this;
}
void TrafficSignObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficSignObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignObject& TrafficSignObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignObject::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.TrafficSignObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_point_ != nullptr) {
    delete center_point_;
  }
  center_point_ = nullptr;
  if (GetArena() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSignObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point3fWithConfidence center_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Polygon outline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.TrafficSignObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 speed_limit = 3;
  if (this->speed_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_speed_limit(), target);
  }

  // .xpilot.sr2_0.proto.Point3fWithConfidence center_point = 4;
  if (this->has_center_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::center_point(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Polygon outline = 5;
  if (this->has_outline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::outline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.TrafficSignObject)
  return target;
}

size_t TrafficSignObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.TrafficSignObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Point3fWithConfidence center_point = 4;
  if (this->has_center_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_point_);
  }

  // .xpilot.sr2_0.proto.Polygon outline = 5;
  if (this->has_outline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 speed_limit = 3;
  if (this->speed_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_speed_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.TrafficSignObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.TrafficSignObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.TrafficSignObject)
    MergeFrom(*source);
  }
}

void TrafficSignObject::MergeFrom(const TrafficSignObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.TrafficSignObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_point()) {
    _internal_mutable_center_point()->::xpilot::sr2_0::proto::Point3fWithConfidence::MergeFrom(from._internal_center_point());
  }
  if (from.has_outline()) {
    _internal_mutable_outline()->::xpilot::sr2_0::proto::Polygon::MergeFrom(from._internal_outline());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.speed_limit() != 0) {
    _internal_set_speed_limit(from._internal_speed_limit());
  }
}

void TrafficSignObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.TrafficSignObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignObject::CopyFrom(const TrafficSignObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.TrafficSignObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignObject::IsInitialized() const {
  return true;
}

void TrafficSignObject::InternalSwap(TrafficSignObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignObject, speed_limit_)
      + sizeof(TrafficSignObject::speed_limit_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignObject, center_point_)>(
          reinterpret_cast<char*>(&center_point_),
          reinterpret_cast<char*>(&other->center_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarPort::InitAsDefaultInstance() {
}
class CarPort::_Internal {
 public:
};

CarPort::CarPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.CarPort)
}
CarPort::CarPort(const CarPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.CarPort)
}

void CarPort::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

CarPort::~CarPort() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.CarPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CarPort::ArenaDtor(void* object) {
  CarPort* _this = reinterpret_cast< CarPort* >(object);
  (void)_this;
}
void CarPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarPort& CarPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarPort_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void CarPort::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.CarPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.CarPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // int32 color = 4;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_color(), target);
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.CarPort)
  return target;
}

size_t CarPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.CarPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // float yaw = 5;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.CarPort)
  GOOGLE_DCHECK_NE(&from, this);
  const CarPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.CarPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.CarPort)
    MergeFrom(*source);
  }
}

void CarPort::MergeFrom(const CarPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.CarPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
}

void CarPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.CarPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarPort::CopyFrom(const CarPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.CarPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarPort::IsInitialized() const {
  return true;
}

void CarPort::InternalSwap(CarPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarPort, yaw_)
      + sizeof(CarPort::yaw_)
      - PROTOBUF_FIELD_OFFSET(CarPort, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeLanelineId::InitAsDefaultInstance() {
}
class ChangeLanelineId::_Internal {
 public:
};

ChangeLanelineId::ChangeLanelineId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.ChangeLanelineId)
}
ChangeLanelineId::ChangeLanelineId(const ChangeLanelineId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&le1_, &from.le1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ri2_) -
    reinterpret_cast<char*>(&le1_)) + sizeof(ri2_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.ChangeLanelineId)
}

void ChangeLanelineId::SharedCtor() {
  ::memset(&le1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ri2_) -
      reinterpret_cast<char*>(&le1_)) + sizeof(ri2_));
}

ChangeLanelineId::~ChangeLanelineId() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.ChangeLanelineId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeLanelineId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChangeLanelineId::ArenaDtor(void* object) {
  ChangeLanelineId* _this = reinterpret_cast< ChangeLanelineId* >(object);
  (void)_this;
}
void ChangeLanelineId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeLanelineId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeLanelineId& ChangeLanelineId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeLanelineId_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void ChangeLanelineId::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.ChangeLanelineId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&le1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ri2_) -
      reinterpret_cast<char*>(&le1_)) + sizeof(ri2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeLanelineId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 le1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          le1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 le2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          le2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ri1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ri1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ri2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ri2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeLanelineId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.ChangeLanelineId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 le1 = 1;
  if (this->le1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_le1(), target);
  }

  // uint64 le2 = 2;
  if (this->le2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_le2(), target);
  }

  // uint64 ri1 = 3;
  if (this->ri1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ri1(), target);
  }

  // uint64 ri2 = 4;
  if (this->ri2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ri2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.ChangeLanelineId)
  return target;
}

size_t ChangeLanelineId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.ChangeLanelineId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 le1 = 1;
  if (this->le1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_le1());
  }

  // uint64 le2 = 2;
  if (this->le2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_le2());
  }

  // uint64 ri1 = 3;
  if (this->ri1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ri1());
  }

  // uint64 ri2 = 4;
  if (this->ri2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ri2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeLanelineId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.ChangeLanelineId)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLanelineId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeLanelineId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.ChangeLanelineId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.ChangeLanelineId)
    MergeFrom(*source);
  }
}

void ChangeLanelineId::MergeFrom(const ChangeLanelineId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.ChangeLanelineId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.le1() != 0) {
    _internal_set_le1(from._internal_le1());
  }
  if (from.le2() != 0) {
    _internal_set_le2(from._internal_le2());
  }
  if (from.ri1() != 0) {
    _internal_set_ri1(from._internal_ri1());
  }
  if (from.ri2() != 0) {
    _internal_set_ri2(from._internal_ri2());
  }
}

void ChangeLanelineId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.ChangeLanelineId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLanelineId::CopyFrom(const ChangeLanelineId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.ChangeLanelineId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLanelineId::IsInitialized() const {
  return true;
}

void ChangeLanelineId::InternalSwap(ChangeLanelineId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeLanelineId, ri2_)
      + sizeof(ChangeLanelineId::ri2_)
      - PROTOBUF_FIELD_OFFSET(ChangeLanelineId, le1_)>(
          reinterpret_cast<char*>(&le1_),
          reinterpret_cast<char*>(&other->le1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLanelineId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCrossLine::InitAsDefaultInstance() {
}
class IsCrossLine::_Internal {
 public:
};

IsCrossLine::IsCrossLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.IsCrossLine)
}
IsCrossLine::IsCrossLine(const IsCrossLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_cross_line_ = from.is_cross_line_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.IsCrossLine)
}

void IsCrossLine::SharedCtor() {
  is_cross_line_ = false;
}

IsCrossLine::~IsCrossLine() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.IsCrossLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCrossLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCrossLine::ArenaDtor(void* object) {
  IsCrossLine* _this = reinterpret_cast< IsCrossLine* >(object);
  (void)_this;
}
void IsCrossLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCrossLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCrossLine& IsCrossLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCrossLine_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void IsCrossLine::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.IsCrossLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_cross_line_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCrossLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_cross_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_cross_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCrossLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.IsCrossLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_cross_line = 1;
  if (this->is_cross_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_cross_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.IsCrossLine)
  return target;
}

size_t IsCrossLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.IsCrossLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_cross_line = 1;
  if (this->is_cross_line() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCrossLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.IsCrossLine)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCrossLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCrossLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.IsCrossLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.IsCrossLine)
    MergeFrom(*source);
  }
}

void IsCrossLine::MergeFrom(const IsCrossLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.IsCrossLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_cross_line() != 0) {
    _internal_set_is_cross_line(from._internal_is_cross_line());
  }
}

void IsCrossLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.IsCrossLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCrossLine::CopyFrom(const IsCrossLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.IsCrossLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCrossLine::IsInitialized() const {
  return true;
}

void IsCrossLine::InternalSwap(IsCrossLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_cross_line_, other->is_cross_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCrossLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OCRObject::InitAsDefaultInstance() {
}
class OCRObject::_Internal {
 public:
};

OCRObject::OCRObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.OCRObject)
}
OCRObject::OCRObject(const OCRObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text_string().empty()) {
    text_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text_string(),
      GetArena());
  }
  text_direction_ = from.text_direction_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.OCRObject)
}

void OCRObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  text_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_direction_ = 0;
}

OCRObject::~OCRObject() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.OCRObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OCRObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OCRObject::ArenaDtor(void* object) {
  OCRObject* _this = reinterpret_cast< OCRObject* >(object);
  (void)_this;
}
void OCRObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OCRObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OCRObject& OCRObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OCRObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void OCRObject::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.OCRObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OCRObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 text_direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          text_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.sr2_0.proto.OCRObject.text_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OCRObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.OCRObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 text_direction = 1;
  if (this->text_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_text_direction(), target);
  }

  // string text_string = 2;
  if (this->text_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_string().data(), static_cast<int>(this->_internal_text_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.sr2_0.proto.OCRObject.text_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.OCRObject)
  return target;
}

size_t OCRObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.OCRObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text_string = 2;
  if (this->text_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_string());
  }

  // int32 text_direction = 1;
  if (this->text_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_text_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCRObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.OCRObject)
  GOOGLE_DCHECK_NE(&from, this);
  const OCRObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OCRObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.OCRObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.OCRObject)
    MergeFrom(*source);
  }
}

void OCRObject::MergeFrom(const OCRObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.OCRObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text_string().size() > 0) {
    _internal_set_text_string(from._internal_text_string());
  }
  if (from.text_direction() != 0) {
    _internal_set_text_direction(from._internal_text_direction());
  }
}

void OCRObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.OCRObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCRObject::CopyFrom(const OCRObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.OCRObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCRObject::IsInitialized() const {
  return true;
}

void OCRObject::InternalSwap(OCRObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_string_.Swap(&other->text_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(text_direction_, other->text_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OCRObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TSRUObject::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_TSRUObject_default_instance_._instance.get_mutable()->vertices_ = const_cast< ::xpilot::sr2_0::proto::Vector3d*>(
      ::xpilot::sr2_0::proto::Vector3d::internal_default_instance());
}
class TSRUObject::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Vector3d& vertices(const TSRUObject* msg);
};

const ::xpilot::sr2_0::proto::Vector3d&
TSRUObject::_Internal::vertices(const TSRUObject* msg) {
  return *msg->vertices_;
}
void TSRUObject::clear_vertices() {
  if (GetArena() == nullptr && vertices_ != nullptr) {
    delete vertices_;
  }
  vertices_ = nullptr;
}
TSRUObject::TSRUObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ocr_objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.TSRUObject)
}
TSRUObject::TSRUObject(const TSRUObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ocr_objects_(from.ocr_objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vertices()) {
    vertices_ = new ::xpilot::sr2_0::proto::Vector3d(*from.vertices_);
  } else {
    vertices_ = nullptr;
  }
  ::memcpy(&tsru_id_, &from.tsru_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pass_status_) -
    reinterpret_cast<char*>(&tsru_id_)) + sizeof(pass_status_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.TSRUObject)
}

void TSRUObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&vertices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pass_status_) -
      reinterpret_cast<char*>(&vertices_)) + sizeof(pass_status_));
}

TSRUObject::~TSRUObject() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.TSRUObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TSRUObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vertices_;
}

void TSRUObject::ArenaDtor(void* object) {
  TSRUObject* _this = reinterpret_cast< TSRUObject* >(object);
  (void)_this;
}
void TSRUObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TSRUObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TSRUObject& TSRUObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TSRUObject_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void TSRUObject::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.TSRUObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ocr_objects_.Clear();
  if (GetArena() == nullptr && vertices_ != nullptr) {
    delete vertices_;
  }
  vertices_ = nullptr;
  ::memset(&tsru_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pass_status_) -
      reinterpret_cast<char*>(&tsru_id_)) + sizeof(pass_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSRUObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tsru_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tsru_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tsru_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tsru_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Vector3d vertices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.OCRObject ocr_objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ocr_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 pass_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pass_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TSRUObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.TSRUObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tsru_id = 1;
  if (this->tsru_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tsru_id(), target);
  }

  // int32 tsru_type = 2;
  if (this->tsru_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tsru_type(), target);
  }

  // .xpilot.sr2_0.proto.Vector3d vertices = 3;
  if (this->has_vertices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vertices(this), target, stream);
  }

  // float yaw = 4;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  // repeated .xpilot.sr2_0.proto.OCRObject ocr_objects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ocr_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ocr_objects(i), target, stream);
  }

  // int32 pass_status = 6;
  if (this->pass_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pass_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.TSRUObject)
  return target;
}

size_t TSRUObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.TSRUObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.OCRObject ocr_objects = 5;
  total_size += 1UL * this->_internal_ocr_objects_size();
  for (const auto& msg : this->ocr_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xpilot.sr2_0.proto.Vector3d vertices = 3;
  if (this->has_vertices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vertices_);
  }

  // uint32 tsru_id = 1;
  if (this->tsru_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tsru_id());
  }

  // int32 tsru_type = 2;
  if (this->tsru_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tsru_type());
  }

  // float yaw = 4;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 pass_status = 6;
  if (this->pass_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pass_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TSRUObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.TSRUObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TSRUObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TSRUObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.TSRUObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.TSRUObject)
    MergeFrom(*source);
  }
}

void TSRUObject::MergeFrom(const TSRUObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.TSRUObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ocr_objects_.MergeFrom(from.ocr_objects_);
  if (from.has_vertices()) {
    _internal_mutable_vertices()->::xpilot::sr2_0::proto::Vector3d::MergeFrom(from._internal_vertices());
  }
  if (from.tsru_id() != 0) {
    _internal_set_tsru_id(from._internal_tsru_id());
  }
  if (from.tsru_type() != 0) {
    _internal_set_tsru_type(from._internal_tsru_type());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (from.pass_status() != 0) {
    _internal_set_pass_status(from._internal_pass_status());
  }
}

void TSRUObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.TSRUObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSRUObject::CopyFrom(const TSRUObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.TSRUObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSRUObject::IsInitialized() const {
  return true;
}

void TSRUObject::InternalSwap(TSRUObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ocr_objects_.InternalSwap(&other->ocr_objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSRUObject, pass_status_)
      + sizeof(TSRUObject::pass_status_)
      - PROTOBUF_FIELD_OFFSET(TSRUObject, vertices_)>(
          reinterpret_cast<char*>(&vertices_),
          reinterpret_cast<char*>(&other->vertices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSRUObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BevPillar::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_BevPillar_default_instance_._instance.get_mutable()->pos_ = const_cast< ::xpilot::sr2_0::proto::Vector2f*>(
      ::xpilot::sr2_0::proto::Vector2f::internal_default_instance());
}
class BevPillar::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Vector2f& pos(const BevPillar* msg);
};

const ::xpilot::sr2_0::proto::Vector2f&
BevPillar::_Internal::pos(const BevPillar* msg) {
  return *msg->pos_;
}
void BevPillar::clear_pos() {
  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
BevPillar::BevPillar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.BevPillar)
}
BevPillar::BevPillar(const BevPillar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::xpilot::sr2_0::proto::Vector2f(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&min_z_, &from.min_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_z_) -
    reinterpret_cast<char*>(&min_z_)) + sizeof(max_z_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.BevPillar)
}

void BevPillar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_z_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(max_z_));
}

BevPillar::~BevPillar() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.BevPillar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BevPillar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void BevPillar::ArenaDtor(void* object) {
  BevPillar* _this = reinterpret_cast< BevPillar* >(object);
  (void)_this;
}
void BevPillar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BevPillar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BevPillar& BevPillar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void BevPillar::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.BevPillar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&min_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_z_) -
      reinterpret_cast<char*>(&min_z_)) + sizeof(max_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BevPillar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.sr2_0.proto.Vector2f pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_z = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          min_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BevPillar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.BevPillar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Vector2f pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // float min_z = 2;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min_z(), target);
  }

  // float max_z = 3;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.BevPillar)
  return target;
}

size_t BevPillar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.BevPillar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Vector2f pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // float min_z = 2;
  if (!(this->min_z() <= 0 && this->min_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_z = 3;
  if (!(this->max_z() <= 0 && this->max_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BevPillar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.BevPillar)
  GOOGLE_DCHECK_NE(&from, this);
  const BevPillar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BevPillar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.BevPillar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.BevPillar)
    MergeFrom(*source);
  }
}

void BevPillar::MergeFrom(const BevPillar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.BevPillar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::xpilot::sr2_0::proto::Vector2f::MergeFrom(from._internal_pos());
  }
  if (!(from.min_z() <= 0 && from.min_z() >= 0)) {
    _internal_set_min_z(from._internal_min_z());
  }
  if (!(from.max_z() <= 0 && from.max_z() >= 0)) {
    _internal_set_max_z(from._internal_max_z());
  }
}

void BevPillar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.BevPillar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BevPillar::CopyFrom(const BevPillar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.BevPillar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BevPillar::IsInitialized() const {
  return true;
}

void BevPillar::InternalSwap(BevPillar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BevPillar, max_z_)
      + sizeof(BevPillar::max_z_)
      - PROTOBUF_FIELD_OFFSET(BevPillar, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BevPillar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OCCBevPillar::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_OCCBevPillar_default_instance_._instance.get_mutable()->pillar_2d_size_ = const_cast< ::xpilot::sr2_0::proto::Vector2f*>(
      ::xpilot::sr2_0::proto::Vector2f::internal_default_instance());
}
class OCCBevPillar::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Vector2f& pillar_2d_size(const OCCBevPillar* msg);
};

const ::xpilot::sr2_0::proto::Vector2f&
OCCBevPillar::_Internal::pillar_2d_size(const OCCBevPillar* msg) {
  return *msg->pillar_2d_size_;
}
void OCCBevPillar::clear_pillar_2d_size() {
  if (GetArena() == nullptr && pillar_2d_size_ != nullptr) {
    delete pillar_2d_size_;
  }
  pillar_2d_size_ = nullptr;
}
OCCBevPillar::OCCBevPillar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bev_pillar_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.OCCBevPillar)
}
OCCBevPillar::OCCBevPillar(const OCCBevPillar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bev_pillar_(from.bev_pillar_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pillar_2d_size()) {
    pillar_2d_size_ = new ::xpilot::sr2_0::proto::Vector2f(*from.pillar_2d_size_);
  } else {
    pillar_2d_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.OCCBevPillar)
}

void OCCBevPillar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  pillar_2d_size_ = nullptr;
}

OCCBevPillar::~OCCBevPillar() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.OCCBevPillar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OCCBevPillar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pillar_2d_size_;
}

void OCCBevPillar::ArenaDtor(void* object) {
  OCCBevPillar* _this = reinterpret_cast< OCCBevPillar* >(object);
  (void)_this;
}
void OCCBevPillar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OCCBevPillar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OCCBevPillar& OCCBevPillar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OCCBevPillar_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void OCCBevPillar::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.OCCBevPillar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bev_pillar_.Clear();
  if (GetArena() == nullptr && pillar_2d_size_ != nullptr) {
    delete pillar_2d_size_;
  }
  pillar_2d_size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OCCBevPillar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.sr2_0.proto.Vector2f pillar_2d_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pillar_2d_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.BevPillar bev_pillar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bev_pillar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OCCBevPillar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.OCCBevPillar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Vector2f pillar_2d_size = 1;
  if (this->has_pillar_2d_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pillar_2d_size(this), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.BevPillar bev_pillar = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bev_pillar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bev_pillar(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.OCCBevPillar)
  return target;
}

size_t OCCBevPillar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.OCCBevPillar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.BevPillar bev_pillar = 2;
  total_size += 1UL * this->_internal_bev_pillar_size();
  for (const auto& msg : this->bev_pillar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xpilot.sr2_0.proto.Vector2f pillar_2d_size = 1;
  if (this->has_pillar_2d_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pillar_2d_size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OCCBevPillar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.OCCBevPillar)
  GOOGLE_DCHECK_NE(&from, this);
  const OCCBevPillar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OCCBevPillar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.OCCBevPillar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.OCCBevPillar)
    MergeFrom(*source);
  }
}

void OCCBevPillar::MergeFrom(const OCCBevPillar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.OCCBevPillar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bev_pillar_.MergeFrom(from.bev_pillar_);
  if (from.has_pillar_2d_size()) {
    _internal_mutable_pillar_2d_size()->::xpilot::sr2_0::proto::Vector2f::MergeFrom(from._internal_pillar_2d_size());
  }
}

void OCCBevPillar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.OCCBevPillar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OCCBevPillar::CopyFrom(const OCCBevPillar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.OCCBevPillar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OCCBevPillar::IsInitialized() const {
  return true;
}

void OCCBevPillar::InternalSwap(OCCBevPillar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bev_pillar_.InternalSwap(&other->bev_pillar_);
  swap(pillar_2d_size_, other->pillar_2d_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OCCBevPillar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnlineLocalMapMsg::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_._instance.get_mutable()->car_port_ = const_cast< ::xpilot::sr2_0::proto::CarPort*>(
      ::xpilot::sr2_0::proto::CarPort::internal_default_instance());
  ::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_._instance.get_mutable()->change_lane_id_ = const_cast< ::xpilot::sr2_0::proto::ChangeLanelineId*>(
      ::xpilot::sr2_0::proto::ChangeLanelineId::internal_default_instance());
  ::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_._instance.get_mutable()->is_cross_line_ = const_cast< ::xpilot::sr2_0::proto::IsCrossLine*>(
      ::xpilot::sr2_0::proto::IsCrossLine::internal_default_instance());
  ::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_._instance.get_mutable()->occ_bev_pillar_ = const_cast< ::xpilot::sr2_0::proto::OCCBevPillar*>(
      ::xpilot::sr2_0::proto::OCCBevPillar::internal_default_instance());
}
class OnlineLocalMapMsg::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::CarPort& car_port(const OnlineLocalMapMsg* msg);
  static const ::xpilot::sr2_0::proto::ChangeLanelineId& change_lane_id(const OnlineLocalMapMsg* msg);
  static const ::xpilot::sr2_0::proto::IsCrossLine& is_cross_line(const OnlineLocalMapMsg* msg);
  static const ::xpilot::sr2_0::proto::OCCBevPillar& occ_bev_pillar(const OnlineLocalMapMsg* msg);
};

const ::xpilot::sr2_0::proto::CarPort&
OnlineLocalMapMsg::_Internal::car_port(const OnlineLocalMapMsg* msg) {
  return *msg->car_port_;
}
const ::xpilot::sr2_0::proto::ChangeLanelineId&
OnlineLocalMapMsg::_Internal::change_lane_id(const OnlineLocalMapMsg* msg) {
  return *msg->change_lane_id_;
}
const ::xpilot::sr2_0::proto::IsCrossLine&
OnlineLocalMapMsg::_Internal::is_cross_line(const OnlineLocalMapMsg* msg) {
  return *msg->is_cross_line_;
}
const ::xpilot::sr2_0::proto::OCCBevPillar&
OnlineLocalMapMsg::_Internal::occ_bev_pillar(const OnlineLocalMapMsg* msg) {
  return *msg->occ_bev_pillar_;
}
void OnlineLocalMapMsg::clear_boudary_object() {
  boudary_object_.Clear();
}
OnlineLocalMapMsg::OnlineLocalMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boudary_object_(arena),
  road_mark_object_(arena),
  traffic_lights_(arena),
  drivable_space_map_(arena),
  tsru_objects_(arena),
  traffic_sign_objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.OnlineLocalMapMsg)
}
OnlineLocalMapMsg::OnlineLocalMapMsg(const OnlineLocalMapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boudary_object_(from.boudary_object_),
      road_mark_object_(from.road_mark_object_),
      traffic_lights_(from.traffic_lights_),
      drivable_space_map_(from.drivable_space_map_),
      tsru_objects_(from.tsru_objects_),
      traffic_sign_objects_(from.traffic_sign_objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_car_port()) {
    car_port_ = new ::xpilot::sr2_0::proto::CarPort(*from.car_port_);
  } else {
    car_port_ = nullptr;
  }
  if (from._internal_has_change_lane_id()) {
    change_lane_id_ = new ::xpilot::sr2_0::proto::ChangeLanelineId(*from.change_lane_id_);
  } else {
    change_lane_id_ = nullptr;
  }
  if (from._internal_has_is_cross_line()) {
    is_cross_line_ = new ::xpilot::sr2_0::proto::IsCrossLine(*from.is_cross_line_);
  } else {
    is_cross_line_ = nullptr;
  }
  if (from._internal_has_occ_bev_pillar()) {
    occ_bev_pillar_ = new ::xpilot::sr2_0::proto::OCCBevPillar(*from.occ_bev_pillar_);
  } else {
    occ_bev_pillar_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.OnlineLocalMapMsg)
}

void OnlineLocalMapMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  ::memset(&car_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&car_port_)) + sizeof(timestamp_));
}

OnlineLocalMapMsg::~OnlineLocalMapMsg() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnlineLocalMapMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete car_port_;
  if (this != internal_default_instance()) delete change_lane_id_;
  if (this != internal_default_instance()) delete is_cross_line_;
  if (this != internal_default_instance()) delete occ_bev_pillar_;
}

void OnlineLocalMapMsg::ArenaDtor(void* object) {
  OnlineLocalMapMsg* _this = reinterpret_cast< OnlineLocalMapMsg* >(object);
  (void)_this;
}
void OnlineLocalMapMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnlineLocalMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnlineLocalMapMsg& OnlineLocalMapMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void OnlineLocalMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boudary_object_.Clear();
  road_mark_object_.Clear();
  traffic_lights_.Clear();
  drivable_space_map_.Clear();
  tsru_objects_.Clear();
  traffic_sign_objects_.Clear();
  if (GetArena() == nullptr && car_port_ != nullptr) {
    delete car_port_;
  }
  car_port_ = nullptr;
  if (GetArena() == nullptr && change_lane_id_ != nullptr) {
    delete change_lane_id_;
  }
  change_lane_id_ = nullptr;
  if (GetArena() == nullptr && is_cross_line_ != nullptr) {
    delete is_cross_line_;
  }
  is_cross_line_ = nullptr;
  if (GetArena() == nullptr && occ_bev_pillar_ != nullptr) {
    delete occ_bev_pillar_;
  }
  occ_bev_pillar_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnlineLocalMapMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.BoundaryObject boudary_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boudary_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.RoadMarkingObject road_mark_object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_mark_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.TrafficLight traffic_lights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.CarPort car_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_car_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.ChangeLanelineId change_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 drivable_space_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_drivable_space_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.IsCrossLine is_cross_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_cross_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.TSRUObject tsru_objects = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tsru_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.OCCBevPillar occ_bev_pillar = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_occ_bev_pillar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.TrafficSignObject traffic_sign_objects = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_sign_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnlineLocalMapMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated .xpilot.sr2_0.proto.BoundaryObject boudary_object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boudary_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boudary_object(i), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.RoadMarkingObject road_mark_object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_road_mark_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_road_mark_object(i), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.TrafficLight traffic_lights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_lights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_traffic_lights(i), target, stream);
  }

  // .xpilot.sr2_0.proto.CarPort car_port = 5;
  if (this->has_car_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::car_port(this), target, stream);
  }

  // .xpilot.sr2_0.proto.ChangeLanelineId change_lane_id = 6;
  if (this->has_change_lane_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::change_lane_id(this), target, stream);
  }

  // repeated int32 drivable_space_map = 7;
  {
    int byte_size = _drivable_space_map_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_drivable_space_map(), byte_size, target);
    }
  }

  // .xpilot.sr2_0.proto.IsCrossLine is_cross_line = 8;
  if (this->has_is_cross_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::is_cross_line(this), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.TSRUObject tsru_objects = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tsru_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_tsru_objects(i), target, stream);
  }

  // .xpilot.sr2_0.proto.OCCBevPillar occ_bev_pillar = 10;
  if (this->has_occ_bev_pillar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::occ_bev_pillar(this), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.TrafficSignObject traffic_sign_objects = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traffic_sign_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_traffic_sign_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  return target;
}

size_t OnlineLocalMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.BoundaryObject boudary_object = 2;
  total_size += 1UL * this->_internal_boudary_object_size();
  for (const auto& msg : this->boudary_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xpilot.sr2_0.proto.RoadMarkingObject road_mark_object = 3;
  total_size += 1UL * this->_internal_road_mark_object_size();
  for (const auto& msg : this->road_mark_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xpilot.sr2_0.proto.TrafficLight traffic_lights = 4;
  total_size += 1UL * this->_internal_traffic_lights_size();
  for (const auto& msg : this->traffic_lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 drivable_space_map = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->drivable_space_map_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _drivable_space_map_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .xpilot.sr2_0.proto.TSRUObject tsru_objects = 9;
  total_size += 1UL * this->_internal_tsru_objects_size();
  for (const auto& msg : this->tsru_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xpilot.sr2_0.proto.TrafficSignObject traffic_sign_objects = 11;
  total_size += 1UL * this->_internal_traffic_sign_objects_size();
  for (const auto& msg : this->traffic_sign_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xpilot.sr2_0.proto.CarPort car_port = 5;
  if (this->has_car_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *car_port_);
  }

  // .xpilot.sr2_0.proto.ChangeLanelineId change_lane_id = 6;
  if (this->has_change_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *change_lane_id_);
  }

  // .xpilot.sr2_0.proto.IsCrossLine is_cross_line = 8;
  if (this->has_is_cross_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_cross_line_);
  }

  // .xpilot.sr2_0.proto.OCCBevPillar occ_bev_pillar = 10;
  if (this->has_occ_bev_pillar()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *occ_bev_pillar_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnlineLocalMapMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlineLocalMapMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnlineLocalMapMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.OnlineLocalMapMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.OnlineLocalMapMsg)
    MergeFrom(*source);
  }
}

void OnlineLocalMapMsg::MergeFrom(const OnlineLocalMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boudary_object_.MergeFrom(from.boudary_object_);
  road_mark_object_.MergeFrom(from.road_mark_object_);
  traffic_lights_.MergeFrom(from.traffic_lights_);
  drivable_space_map_.MergeFrom(from.drivable_space_map_);
  tsru_objects_.MergeFrom(from.tsru_objects_);
  traffic_sign_objects_.MergeFrom(from.traffic_sign_objects_);
  if (from.has_car_port()) {
    _internal_mutable_car_port()->::xpilot::sr2_0::proto::CarPort::MergeFrom(from._internal_car_port());
  }
  if (from.has_change_lane_id()) {
    _internal_mutable_change_lane_id()->::xpilot::sr2_0::proto::ChangeLanelineId::MergeFrom(from._internal_change_lane_id());
  }
  if (from.has_is_cross_line()) {
    _internal_mutable_is_cross_line()->::xpilot::sr2_0::proto::IsCrossLine::MergeFrom(from._internal_is_cross_line());
  }
  if (from.has_occ_bev_pillar()) {
    _internal_mutable_occ_bev_pillar()->::xpilot::sr2_0::proto::OCCBevPillar::MergeFrom(from._internal_occ_bev_pillar());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void OnlineLocalMapMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineLocalMapMsg::CopyFrom(const OnlineLocalMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.OnlineLocalMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineLocalMapMsg::IsInitialized() const {
  return true;
}

void OnlineLocalMapMsg::InternalSwap(OnlineLocalMapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  boudary_object_.InternalSwap(&other->boudary_object_);
  road_mark_object_.InternalSwap(&other->road_mark_object_);
  traffic_lights_.InternalSwap(&other->traffic_lights_);
  drivable_space_map_.InternalSwap(&other->drivable_space_map_);
  tsru_objects_.InternalSwap(&other->tsru_objects_);
  traffic_sign_objects_.InternalSwap(&other->traffic_sign_objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnlineLocalMapMsg, timestamp_)
      + sizeof(OnlineLocalMapMsg::timestamp_)
      - PROTOBUF_FIELD_OFFSET(OnlineLocalMapMsg, car_port_)>(
          reinterpret_cast<char*>(&car_port_),
          reinterpret_cast<char*>(&other->car_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnlineLocalMapMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::RoadMarkingObject* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::RoadMarkingObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::RoadMarkingObject >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::RoadMarkingPoint* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::RoadMarkingPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::RoadMarkingPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::TrafficLight* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::Polygon* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::Point3fWithConfidence* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::Point3fWithConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::Point3fWithConfidence >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::TrafficSignObject* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::TrafficSignObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::TrafficSignObject >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::CarPort* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::CarPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::CarPort >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::ChangeLanelineId* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::ChangeLanelineId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::ChangeLanelineId >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::IsCrossLine* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::IsCrossLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::IsCrossLine >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::OCRObject* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::OCRObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::OCRObject >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::TSRUObject* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::TSRUObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::TSRUObject >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::BevPillar* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::BevPillar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::BevPillar >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::OCCBevPillar* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::OCCBevPillar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::OCCBevPillar >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::OnlineLocalMapMsg* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::OnlineLocalMapMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::OnlineLocalMapMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
