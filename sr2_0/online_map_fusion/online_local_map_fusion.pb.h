// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: online_map_fusion/online_local_map_fusion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class BevPillar;
class BevPillarDefaultTypeInternal;
extern BevPillarDefaultTypeInternal _BevPillar_default_instance_;
class CarPort;
class CarPortDefaultTypeInternal;
extern CarPortDefaultTypeInternal _CarPort_default_instance_;
class ChangeLanelineId;
class ChangeLanelineIdDefaultTypeInternal;
extern ChangeLanelineIdDefaultTypeInternal _ChangeLanelineId_default_instance_;
class IsCrossLine;
class IsCrossLineDefaultTypeInternal;
extern IsCrossLineDefaultTypeInternal _IsCrossLine_default_instance_;
class OCCBevPillar;
class OCCBevPillarDefaultTypeInternal;
extern OCCBevPillarDefaultTypeInternal _OCCBevPillar_default_instance_;
class OCRObject;
class OCRObjectDefaultTypeInternal;
extern OCRObjectDefaultTypeInternal _OCRObject_default_instance_;
class OnlineLocalMapMsg;
class OnlineLocalMapMsgDefaultTypeInternal;
extern OnlineLocalMapMsgDefaultTypeInternal _OnlineLocalMapMsg_default_instance_;
class Point3fWithConfidence;
class Point3fWithConfidenceDefaultTypeInternal;
extern Point3fWithConfidenceDefaultTypeInternal _Point3fWithConfidence_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class RoadMarkingObject;
class RoadMarkingObjectDefaultTypeInternal;
extern RoadMarkingObjectDefaultTypeInternal _RoadMarkingObject_default_instance_;
class RoadMarkingPoint;
class RoadMarkingPointDefaultTypeInternal;
extern RoadMarkingPointDefaultTypeInternal _RoadMarkingPoint_default_instance_;
class TSRUObject;
class TSRUObjectDefaultTypeInternal;
extern TSRUObjectDefaultTypeInternal _TSRUObject_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficSignObject;
class TrafficSignObjectDefaultTypeInternal;
extern TrafficSignObjectDefaultTypeInternal _TrafficSignObject_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::BevPillar* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::BevPillar>(Arena*);
template<> ::xpilot::sr2_0::proto::CarPort* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::CarPort>(Arena*);
template<> ::xpilot::sr2_0::proto::ChangeLanelineId* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::ChangeLanelineId>(Arena*);
template<> ::xpilot::sr2_0::proto::IsCrossLine* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::IsCrossLine>(Arena*);
template<> ::xpilot::sr2_0::proto::OCCBevPillar* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::OCCBevPillar>(Arena*);
template<> ::xpilot::sr2_0::proto::OCRObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::OCRObject>(Arena*);
template<> ::xpilot::sr2_0::proto::OnlineLocalMapMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::OnlineLocalMapMsg>(Arena*);
template<> ::xpilot::sr2_0::proto::Point3fWithConfidence* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Point3fWithConfidence>(Arena*);
template<> ::xpilot::sr2_0::proto::Polygon* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Polygon>(Arena*);
template<> ::xpilot::sr2_0::proto::RoadMarkingObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::RoadMarkingObject>(Arena*);
template<> ::xpilot::sr2_0::proto::RoadMarkingPoint* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::RoadMarkingPoint>(Arena*);
template<> ::xpilot::sr2_0::proto::TSRUObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::TSRUObject>(Arena*);
template<> ::xpilot::sr2_0::proto::TrafficLight* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::TrafficLight>(Arena*);
template<> ::xpilot::sr2_0::proto::TrafficSignObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::TrafficSignObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class RoadMarkingObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.RoadMarkingObject) */ {
 public:
  inline RoadMarkingObject() : RoadMarkingObject(nullptr) {};
  virtual ~RoadMarkingObject();

  RoadMarkingObject(const RoadMarkingObject& from);
  RoadMarkingObject(RoadMarkingObject&& from) noexcept
    : RoadMarkingObject() {
    *this = ::std::move(from);
  }

  inline RoadMarkingObject& operator=(const RoadMarkingObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadMarkingObject& operator=(RoadMarkingObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadMarkingObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadMarkingObject* internal_default_instance() {
    return reinterpret_cast<const RoadMarkingObject*>(
               &_RoadMarkingObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoadMarkingObject& a, RoadMarkingObject& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadMarkingObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadMarkingObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadMarkingObject* New() const final {
    return CreateMaybeMessage<RoadMarkingObject>(nullptr);
  }

  RoadMarkingObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadMarkingObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadMarkingObject& from);
  void MergeFrom(const RoadMarkingObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadMarkingObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.RoadMarkingObject";
  }
  protected:
  explicit RoadMarkingObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kIdFieldNumber = 1,
    kRsmTypeFieldNumber = 2,
    kStopLineColorFieldNumber = 4,
  };
  // repeated .xpilot.sr2_0.proto.RoadMarkingPoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xpilot::sr2_0::proto::RoadMarkingPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingPoint >*
      mutable_points();
  private:
  const ::xpilot::sr2_0::proto::RoadMarkingPoint& _internal_points(int index) const;
  ::xpilot::sr2_0::proto::RoadMarkingPoint* _internal_add_points();
  public:
  const ::xpilot::sr2_0::proto::RoadMarkingPoint& points(int index) const;
  ::xpilot::sr2_0::proto::RoadMarkingPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingPoint >&
      points() const;

  // float id = 1;
  void clear_id();
  float id() const;
  void set_id(float value);
  private:
  float _internal_id() const;
  void _internal_set_id(float value);
  public:

  // uint32 rsm_type = 2;
  void clear_rsm_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 rsm_type() const;
  void set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rsm_type() const;
  void _internal_set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stop_line_color = 4;
  void clear_stop_line_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_line_color() const;
  void set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_line_color() const;
  void _internal_set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.RoadMarkingObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingPoint > points_;
  float id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rsm_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_line_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class RoadMarkingPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.RoadMarkingPoint) */ {
 public:
  inline RoadMarkingPoint() : RoadMarkingPoint(nullptr) {};
  virtual ~RoadMarkingPoint();

  RoadMarkingPoint(const RoadMarkingPoint& from);
  RoadMarkingPoint(RoadMarkingPoint&& from) noexcept
    : RoadMarkingPoint() {
    *this = ::std::move(from);
  }

  inline RoadMarkingPoint& operator=(const RoadMarkingPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadMarkingPoint& operator=(RoadMarkingPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadMarkingPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadMarkingPoint* internal_default_instance() {
    return reinterpret_cast<const RoadMarkingPoint*>(
               &_RoadMarkingPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoadMarkingPoint& a, RoadMarkingPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadMarkingPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadMarkingPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadMarkingPoint* New() const final {
    return CreateMaybeMessage<RoadMarkingPoint>(nullptr);
  }

  RoadMarkingPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadMarkingPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadMarkingPoint& from);
  void MergeFrom(const RoadMarkingPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadMarkingPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.RoadMarkingPoint";
  }
  protected:
  explicit RoadMarkingPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.RoadMarkingPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.TrafficLight) */ {
 public:
  inline TrafficLight() : TrafficLight(nullptr) {};
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.TrafficLight";
  }
  protected:
  explicit TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutlineFieldNumber = 6,
    kIdFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kColorFieldNumber = 3,
    kRowBulbCountFieldNumber = 4,
    kColumnBulbCountFieldNumber = 5,
    kTimerDigitFieldNumber = 7,
    kYawFieldNumber = 8,
  };
  // .xpilot.sr2_0.proto.Polygon outline = 6;
  bool has_outline() const;
  private:
  bool _internal_has_outline() const;
  public:
  void clear_outline();
  const ::xpilot::sr2_0::proto::Polygon& outline() const;
  ::xpilot::sr2_0::proto::Polygon* release_outline();
  ::xpilot::sr2_0::proto::Polygon* mutable_outline();
  void set_allocated_outline(::xpilot::sr2_0::proto::Polygon* outline);
  private:
  const ::xpilot::sr2_0::proto::Polygon& _internal_outline() const;
  ::xpilot::sr2_0::proto::Polygon* _internal_mutable_outline();
  public:
  void unsafe_arena_set_allocated_outline(
      ::xpilot::sr2_0::proto::Polygon* outline);
  ::xpilot::sr2_0::proto::Polygon* unsafe_arena_release_outline();

  // float id = 1;
  void clear_id();
  float id() const;
  void set_id(float value);
  private:
  float _internal_id() const;
  void _internal_set_id(float value);
  public:

  // uint32 direction = 2;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color = 3;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float row_bulb_count = 4;
  void clear_row_bulb_count();
  float row_bulb_count() const;
  void set_row_bulb_count(float value);
  private:
  float _internal_row_bulb_count() const;
  void _internal_set_row_bulb_count(float value);
  public:

  // float column_bulb_count = 5;
  void clear_column_bulb_count();
  float column_bulb_count() const;
  void set_column_bulb_count(float value);
  private:
  float _internal_column_bulb_count() const;
  void _internal_set_column_bulb_count(float value);
  public:

  // float timer_digit = 7;
  void clear_timer_digit();
  float timer_digit() const;
  void set_timer_digit(float value);
  private:
  float _internal_timer_digit() const;
  void _internal_set_timer_digit(float value);
  public:

  // double yaw = 8;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.TrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Polygon* outline_;
  float id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  float row_bulb_count_;
  float column_bulb_count_;
  float timer_digit_;
  double yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {};
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .xpilot.sr2_0.proto.Point3fWithConfidence points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xpilot::sr2_0::proto::Point3fWithConfidence* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Point3fWithConfidence >*
      mutable_points();
  private:
  const ::xpilot::sr2_0::proto::Point3fWithConfidence& _internal_points(int index) const;
  ::xpilot::sr2_0::proto::Point3fWithConfidence* _internal_add_points();
  public:
  const ::xpilot::sr2_0::proto::Point3fWithConfidence& points(int index) const;
  ::xpilot::sr2_0::proto::Point3fWithConfidence* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Point3fWithConfidence >&
      points() const;

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Point3fWithConfidence > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class Point3fWithConfidence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Point3fWithConfidence) */ {
 public:
  inline Point3fWithConfidence() : Point3fWithConfidence(nullptr) {};
  virtual ~Point3fWithConfidence();

  Point3fWithConfidence(const Point3fWithConfidence& from);
  Point3fWithConfidence(Point3fWithConfidence&& from) noexcept
    : Point3fWithConfidence() {
    *this = ::std::move(from);
  }

  inline Point3fWithConfidence& operator=(const Point3fWithConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3fWithConfidence& operator=(Point3fWithConfidence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3fWithConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3fWithConfidence* internal_default_instance() {
    return reinterpret_cast<const Point3fWithConfidence*>(
               &_Point3fWithConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point3fWithConfidence& a, Point3fWithConfidence& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3fWithConfidence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3fWithConfidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3fWithConfidence* New() const final {
    return CreateMaybeMessage<Point3fWithConfidence>(nullptr);
  }

  Point3fWithConfidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3fWithConfidence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3fWithConfidence& from);
  void MergeFrom(const Point3fWithConfidence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3fWithConfidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Point3fWithConfidence";
  }
  protected:
  explicit Point3fWithConfidence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Point3fWithConfidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class TrafficSignObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.TrafficSignObject) */ {
 public:
  inline TrafficSignObject() : TrafficSignObject(nullptr) {};
  virtual ~TrafficSignObject();

  TrafficSignObject(const TrafficSignObject& from);
  TrafficSignObject(TrafficSignObject&& from) noexcept
    : TrafficSignObject() {
    *this = ::std::move(from);
  }

  inline TrafficSignObject& operator=(const TrafficSignObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSignObject& operator=(TrafficSignObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficSignObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignObject* internal_default_instance() {
    return reinterpret_cast<const TrafficSignObject*>(
               &_TrafficSignObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrafficSignObject& a, TrafficSignObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSignObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSignObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignObject* New() const final {
    return CreateMaybeMessage<TrafficSignObject>(nullptr);
  }

  TrafficSignObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficSignObject& from);
  void MergeFrom(const TrafficSignObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.TrafficSignObject";
  }
  protected:
  explicit TrafficSignObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterPointFieldNumber = 4,
    kOutlineFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSpeedLimitFieldNumber = 3,
  };
  // .xpilot.sr2_0.proto.Point3fWithConfidence center_point = 4;
  bool has_center_point() const;
  private:
  bool _internal_has_center_point() const;
  public:
  void clear_center_point();
  const ::xpilot::sr2_0::proto::Point3fWithConfidence& center_point() const;
  ::xpilot::sr2_0::proto::Point3fWithConfidence* release_center_point();
  ::xpilot::sr2_0::proto::Point3fWithConfidence* mutable_center_point();
  void set_allocated_center_point(::xpilot::sr2_0::proto::Point3fWithConfidence* center_point);
  private:
  const ::xpilot::sr2_0::proto::Point3fWithConfidence& _internal_center_point() const;
  ::xpilot::sr2_0::proto::Point3fWithConfidence* _internal_mutable_center_point();
  public:
  void unsafe_arena_set_allocated_center_point(
      ::xpilot::sr2_0::proto::Point3fWithConfidence* center_point);
  ::xpilot::sr2_0::proto::Point3fWithConfidence* unsafe_arena_release_center_point();

  // .xpilot.sr2_0.proto.Polygon outline = 5;
  bool has_outline() const;
  private:
  bool _internal_has_outline() const;
  public:
  void clear_outline();
  const ::xpilot::sr2_0::proto::Polygon& outline() const;
  ::xpilot::sr2_0::proto::Polygon* release_outline();
  ::xpilot::sr2_0::proto::Polygon* mutable_outline();
  void set_allocated_outline(::xpilot::sr2_0::proto::Polygon* outline);
  private:
  const ::xpilot::sr2_0::proto::Polygon& _internal_outline() const;
  ::xpilot::sr2_0::proto::Polygon* _internal_mutable_outline();
  public:
  void unsafe_arena_set_allocated_outline(
      ::xpilot::sr2_0::proto::Polygon* outline);
  ::xpilot::sr2_0::proto::Polygon* unsafe_arena_release_outline();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 speed_limit = 3;
  void clear_speed_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_limit() const;
  void set_speed_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_speed_limit() const;
  void _internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.TrafficSignObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Point3fWithConfidence* center_point_;
  ::xpilot::sr2_0::proto::Polygon* outline_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class CarPort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.CarPort) */ {
 public:
  inline CarPort() : CarPort(nullptr) {};
  virtual ~CarPort();

  CarPort(const CarPort& from);
  CarPort(CarPort&& from) noexcept
    : CarPort() {
    *this = ::std::move(from);
  }

  inline CarPort& operator=(const CarPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarPort& operator=(CarPort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarPort* internal_default_instance() {
    return reinterpret_cast<const CarPort*>(
               &_CarPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CarPort& a, CarPort& b) {
    a.Swap(&b);
  }
  inline void Swap(CarPort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarPort* New() const final {
    return CreateMaybeMessage<CarPort>(nullptr);
  }

  CarPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarPort& from);
  void MergeFrom(const CarPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.CarPort";
  }
  protected:
  explicit CarPort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kColorFieldNumber = 4,
    kYawFieldNumber = 5,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 color = 4;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.CarPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class ChangeLanelineId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.ChangeLanelineId) */ {
 public:
  inline ChangeLanelineId() : ChangeLanelineId(nullptr) {};
  virtual ~ChangeLanelineId();

  ChangeLanelineId(const ChangeLanelineId& from);
  ChangeLanelineId(ChangeLanelineId&& from) noexcept
    : ChangeLanelineId() {
    *this = ::std::move(from);
  }

  inline ChangeLanelineId& operator=(const ChangeLanelineId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeLanelineId& operator=(ChangeLanelineId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeLanelineId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLanelineId* internal_default_instance() {
    return reinterpret_cast<const ChangeLanelineId*>(
               &_ChangeLanelineId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChangeLanelineId& a, ChangeLanelineId& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeLanelineId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeLanelineId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeLanelineId* New() const final {
    return CreateMaybeMessage<ChangeLanelineId>(nullptr);
  }

  ChangeLanelineId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeLanelineId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeLanelineId& from);
  void MergeFrom(const ChangeLanelineId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLanelineId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.ChangeLanelineId";
  }
  protected:
  explicit ChangeLanelineId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLe1FieldNumber = 1,
    kLe2FieldNumber = 2,
    kRi1FieldNumber = 3,
    kRi2FieldNumber = 4,
  };
  // uint64 le1 = 1;
  void clear_le1();
  ::PROTOBUF_NAMESPACE_ID::uint64 le1() const;
  void set_le1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_le1() const;
  void _internal_set_le1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 le2 = 2;
  void clear_le2();
  ::PROTOBUF_NAMESPACE_ID::uint64 le2() const;
  void set_le2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_le2() const;
  void _internal_set_le2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ri1 = 3;
  void clear_ri1();
  ::PROTOBUF_NAMESPACE_ID::uint64 ri1() const;
  void set_ri1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ri1() const;
  void _internal_set_ri1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ri2 = 4;
  void clear_ri2();
  ::PROTOBUF_NAMESPACE_ID::uint64 ri2() const;
  void set_ri2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ri2() const;
  void _internal_set_ri2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.ChangeLanelineId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 le1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 le2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ri1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ri2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class IsCrossLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.IsCrossLine) */ {
 public:
  inline IsCrossLine() : IsCrossLine(nullptr) {};
  virtual ~IsCrossLine();

  IsCrossLine(const IsCrossLine& from);
  IsCrossLine(IsCrossLine&& from) noexcept
    : IsCrossLine() {
    *this = ::std::move(from);
  }

  inline IsCrossLine& operator=(const IsCrossLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsCrossLine& operator=(IsCrossLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsCrossLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsCrossLine* internal_default_instance() {
    return reinterpret_cast<const IsCrossLine*>(
               &_IsCrossLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IsCrossLine& a, IsCrossLine& b) {
    a.Swap(&b);
  }
  inline void Swap(IsCrossLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsCrossLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsCrossLine* New() const final {
    return CreateMaybeMessage<IsCrossLine>(nullptr);
  }

  IsCrossLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsCrossLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsCrossLine& from);
  void MergeFrom(const IsCrossLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsCrossLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.IsCrossLine";
  }
  protected:
  explicit IsCrossLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsCrossLineFieldNumber = 1,
  };
  // bool is_cross_line = 1;
  void clear_is_cross_line();
  bool is_cross_line() const;
  void set_is_cross_line(bool value);
  private:
  bool _internal_is_cross_line() const;
  void _internal_set_is_cross_line(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.IsCrossLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_cross_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class OCRObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.OCRObject) */ {
 public:
  inline OCRObject() : OCRObject(nullptr) {};
  virtual ~OCRObject();

  OCRObject(const OCRObject& from);
  OCRObject(OCRObject&& from) noexcept
    : OCRObject() {
    *this = ::std::move(from);
  }

  inline OCRObject& operator=(const OCRObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRObject& operator=(OCRObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OCRObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OCRObject* internal_default_instance() {
    return reinterpret_cast<const OCRObject*>(
               &_OCRObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OCRObject& a, OCRObject& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OCRObject* New() const final {
    return CreateMaybeMessage<OCRObject>(nullptr);
  }

  OCRObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OCRObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OCRObject& from);
  void MergeFrom(const OCRObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OCRObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.OCRObject";
  }
  protected:
  explicit OCRObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextStringFieldNumber = 2,
    kTextDirectionFieldNumber = 1,
  };
  // string text_string = 2;
  void clear_text_string();
  const std::string& text_string() const;
  void set_text_string(const std::string& value);
  void set_text_string(std::string&& value);
  void set_text_string(const char* value);
  void set_text_string(const char* value, size_t size);
  std::string* mutable_text_string();
  std::string* release_text_string();
  void set_allocated_text_string(std::string* text_string);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text_string();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text_string(
      std::string* text_string);
  private:
  const std::string& _internal_text_string() const;
  void _internal_set_text_string(const std::string& value);
  std::string* _internal_mutable_text_string();
  public:

  // int32 text_direction = 1;
  void clear_text_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 text_direction() const;
  void set_text_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_text_direction() const;
  void _internal_set_text_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.OCRObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 text_direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class TSRUObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.TSRUObject) */ {
 public:
  inline TSRUObject() : TSRUObject(nullptr) {};
  virtual ~TSRUObject();

  TSRUObject(const TSRUObject& from);
  TSRUObject(TSRUObject&& from) noexcept
    : TSRUObject() {
    *this = ::std::move(from);
  }

  inline TSRUObject& operator=(const TSRUObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSRUObject& operator=(TSRUObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSRUObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TSRUObject* internal_default_instance() {
    return reinterpret_cast<const TSRUObject*>(
               &_TSRUObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TSRUObject& a, TSRUObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TSRUObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSRUObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSRUObject* New() const final {
    return CreateMaybeMessage<TSRUObject>(nullptr);
  }

  TSRUObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSRUObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSRUObject& from);
  void MergeFrom(const TSRUObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSRUObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.TSRUObject";
  }
  protected:
  explicit TSRUObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOcrObjectsFieldNumber = 5,
    kVerticesFieldNumber = 3,
    kTsruIdFieldNumber = 1,
    kTsruTypeFieldNumber = 2,
    kYawFieldNumber = 4,
    kPassStatusFieldNumber = 6,
  };
  // repeated .xpilot.sr2_0.proto.OCRObject ocr_objects = 5;
  int ocr_objects_size() const;
  private:
  int _internal_ocr_objects_size() const;
  public:
  void clear_ocr_objects();
  ::xpilot::sr2_0::proto::OCRObject* mutable_ocr_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::OCRObject >*
      mutable_ocr_objects();
  private:
  const ::xpilot::sr2_0::proto::OCRObject& _internal_ocr_objects(int index) const;
  ::xpilot::sr2_0::proto::OCRObject* _internal_add_ocr_objects();
  public:
  const ::xpilot::sr2_0::proto::OCRObject& ocr_objects(int index) const;
  ::xpilot::sr2_0::proto::OCRObject* add_ocr_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::OCRObject >&
      ocr_objects() const;

  // .xpilot.sr2_0.proto.Vector3d vertices = 3;
  bool has_vertices() const;
  private:
  bool _internal_has_vertices() const;
  public:
  void clear_vertices();
  const ::xpilot::sr2_0::proto::Vector3d& vertices() const;
  ::xpilot::sr2_0::proto::Vector3d* release_vertices();
  ::xpilot::sr2_0::proto::Vector3d* mutable_vertices();
  void set_allocated_vertices(::xpilot::sr2_0::proto::Vector3d* vertices);
  private:
  const ::xpilot::sr2_0::proto::Vector3d& _internal_vertices() const;
  ::xpilot::sr2_0::proto::Vector3d* _internal_mutable_vertices();
  public:
  void unsafe_arena_set_allocated_vertices(
      ::xpilot::sr2_0::proto::Vector3d* vertices);
  ::xpilot::sr2_0::proto::Vector3d* unsafe_arena_release_vertices();

  // uint32 tsru_id = 1;
  void clear_tsru_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tsru_id() const;
  void set_tsru_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tsru_id() const;
  void _internal_set_tsru_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 tsru_type = 2;
  void clear_tsru_type();
  ::PROTOBUF_NAMESPACE_ID::int32 tsru_type() const;
  void set_tsru_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tsru_type() const;
  void _internal_set_tsru_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // int32 pass_status = 6;
  void clear_pass_status();
  ::PROTOBUF_NAMESPACE_ID::int32 pass_status() const;
  void set_pass_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pass_status() const;
  void _internal_set_pass_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.TSRUObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::OCRObject > ocr_objects_;
  ::xpilot::sr2_0::proto::Vector3d* vertices_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tsru_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsru_type_;
  float yaw_;
  ::PROTOBUF_NAMESPACE_ID::int32 pass_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class BevPillar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.BevPillar) */ {
 public:
  inline BevPillar() : BevPillar(nullptr) {};
  virtual ~BevPillar();

  BevPillar(const BevPillar& from);
  BevPillar(BevPillar&& from) noexcept
    : BevPillar() {
    *this = ::std::move(from);
  }

  inline BevPillar& operator=(const BevPillar& from) {
    CopyFrom(from);
    return *this;
  }
  inline BevPillar& operator=(BevPillar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BevPillar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevPillar* internal_default_instance() {
    return reinterpret_cast<const BevPillar*>(
               &_BevPillar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BevPillar& a, BevPillar& b) {
    a.Swap(&b);
  }
  inline void Swap(BevPillar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BevPillar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BevPillar* New() const final {
    return CreateMaybeMessage<BevPillar>(nullptr);
  }

  BevPillar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BevPillar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BevPillar& from);
  void MergeFrom(const BevPillar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevPillar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.BevPillar";
  }
  protected:
  explicit BevPillar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kMinZFieldNumber = 2,
    kMaxZFieldNumber = 3,
  };
  // .xpilot.sr2_0.proto.Vector2f pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::xpilot::sr2_0::proto::Vector2f& pos() const;
  ::xpilot::sr2_0::proto::Vector2f* release_pos();
  ::xpilot::sr2_0::proto::Vector2f* mutable_pos();
  void set_allocated_pos(::xpilot::sr2_0::proto::Vector2f* pos);
  private:
  const ::xpilot::sr2_0::proto::Vector2f& _internal_pos() const;
  ::xpilot::sr2_0::proto::Vector2f* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::xpilot::sr2_0::proto::Vector2f* pos);
  ::xpilot::sr2_0::proto::Vector2f* unsafe_arena_release_pos();

  // float min_z = 2;
  void clear_min_z();
  float min_z() const;
  void set_min_z(float value);
  private:
  float _internal_min_z() const;
  void _internal_set_min_z(float value);
  public:

  // float max_z = 3;
  void clear_max_z();
  float max_z() const;
  void set_max_z(float value);
  private:
  float _internal_max_z() const;
  void _internal_set_max_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.BevPillar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Vector2f* pos_;
  float min_z_;
  float max_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class OCCBevPillar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.OCCBevPillar) */ {
 public:
  inline OCCBevPillar() : OCCBevPillar(nullptr) {};
  virtual ~OCCBevPillar();

  OCCBevPillar(const OCCBevPillar& from);
  OCCBevPillar(OCCBevPillar&& from) noexcept
    : OCCBevPillar() {
    *this = ::std::move(from);
  }

  inline OCCBevPillar& operator=(const OCCBevPillar& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCCBevPillar& operator=(OCCBevPillar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OCCBevPillar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OCCBevPillar* internal_default_instance() {
    return reinterpret_cast<const OCCBevPillar*>(
               &_OCCBevPillar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OCCBevPillar& a, OCCBevPillar& b) {
    a.Swap(&b);
  }
  inline void Swap(OCCBevPillar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCCBevPillar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OCCBevPillar* New() const final {
    return CreateMaybeMessage<OCCBevPillar>(nullptr);
  }

  OCCBevPillar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OCCBevPillar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OCCBevPillar& from);
  void MergeFrom(const OCCBevPillar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OCCBevPillar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.OCCBevPillar";
  }
  protected:
  explicit OCCBevPillar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBevPillarFieldNumber = 2,
    kPillar2DSizeFieldNumber = 1,
  };
  // repeated .xpilot.sr2_0.proto.BevPillar bev_pillar = 2;
  int bev_pillar_size() const;
  private:
  int _internal_bev_pillar_size() const;
  public:
  void clear_bev_pillar();
  ::xpilot::sr2_0::proto::BevPillar* mutable_bev_pillar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BevPillar >*
      mutable_bev_pillar();
  private:
  const ::xpilot::sr2_0::proto::BevPillar& _internal_bev_pillar(int index) const;
  ::xpilot::sr2_0::proto::BevPillar* _internal_add_bev_pillar();
  public:
  const ::xpilot::sr2_0::proto::BevPillar& bev_pillar(int index) const;
  ::xpilot::sr2_0::proto::BevPillar* add_bev_pillar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BevPillar >&
      bev_pillar() const;

  // .xpilot.sr2_0.proto.Vector2f pillar_2d_size = 1;
  bool has_pillar_2d_size() const;
  private:
  bool _internal_has_pillar_2d_size() const;
  public:
  void clear_pillar_2d_size();
  const ::xpilot::sr2_0::proto::Vector2f& pillar_2d_size() const;
  ::xpilot::sr2_0::proto::Vector2f* release_pillar_2d_size();
  ::xpilot::sr2_0::proto::Vector2f* mutable_pillar_2d_size();
  void set_allocated_pillar_2d_size(::xpilot::sr2_0::proto::Vector2f* pillar_2d_size);
  private:
  const ::xpilot::sr2_0::proto::Vector2f& _internal_pillar_2d_size() const;
  ::xpilot::sr2_0::proto::Vector2f* _internal_mutable_pillar_2d_size();
  public:
  void unsafe_arena_set_allocated_pillar_2d_size(
      ::xpilot::sr2_0::proto::Vector2f* pillar_2d_size);
  ::xpilot::sr2_0::proto::Vector2f* unsafe_arena_release_pillar_2d_size();

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.OCCBevPillar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BevPillar > bev_pillar_;
  ::xpilot::sr2_0::proto::Vector2f* pillar_2d_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class OnlineLocalMapMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.OnlineLocalMapMsg) */ {
 public:
  inline OnlineLocalMapMsg() : OnlineLocalMapMsg(nullptr) {};
  virtual ~OnlineLocalMapMsg();

  OnlineLocalMapMsg(const OnlineLocalMapMsg& from);
  OnlineLocalMapMsg(OnlineLocalMapMsg&& from) noexcept
    : OnlineLocalMapMsg() {
    *this = ::std::move(from);
  }

  inline OnlineLocalMapMsg& operator=(const OnlineLocalMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineLocalMapMsg& operator=(OnlineLocalMapMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineLocalMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineLocalMapMsg* internal_default_instance() {
    return reinterpret_cast<const OnlineLocalMapMsg*>(
               &_OnlineLocalMapMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OnlineLocalMapMsg& a, OnlineLocalMapMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineLocalMapMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineLocalMapMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineLocalMapMsg* New() const final {
    return CreateMaybeMessage<OnlineLocalMapMsg>(nullptr);
  }

  OnlineLocalMapMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineLocalMapMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineLocalMapMsg& from);
  void MergeFrom(const OnlineLocalMapMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineLocalMapMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.OnlineLocalMapMsg";
  }
  protected:
  explicit OnlineLocalMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto);
    return ::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoudaryObjectFieldNumber = 2,
    kRoadMarkObjectFieldNumber = 3,
    kTrafficLightsFieldNumber = 4,
    kDrivableSpaceMapFieldNumber = 7,
    kTsruObjectsFieldNumber = 9,
    kTrafficSignObjectsFieldNumber = 11,
    kCarPortFieldNumber = 5,
    kChangeLaneIdFieldNumber = 6,
    kIsCrossLineFieldNumber = 8,
    kOccBevPillarFieldNumber = 10,
    kTimestampFieldNumber = 1,
  };
  // repeated .xpilot.sr2_0.proto.BoundaryObject boudary_object = 2;
  int boudary_object_size() const;
  private:
  int _internal_boudary_object_size() const;
  public:
  void clear_boudary_object();
  ::xpilot::sr2_0::proto::BoundaryObject* mutable_boudary_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >*
      mutable_boudary_object();
  private:
  const ::xpilot::sr2_0::proto::BoundaryObject& _internal_boudary_object(int index) const;
  ::xpilot::sr2_0::proto::BoundaryObject* _internal_add_boudary_object();
  public:
  const ::xpilot::sr2_0::proto::BoundaryObject& boudary_object(int index) const;
  ::xpilot::sr2_0::proto::BoundaryObject* add_boudary_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >&
      boudary_object() const;

  // repeated .xpilot.sr2_0.proto.RoadMarkingObject road_mark_object = 3;
  int road_mark_object_size() const;
  private:
  int _internal_road_mark_object_size() const;
  public:
  void clear_road_mark_object();
  ::xpilot::sr2_0::proto::RoadMarkingObject* mutable_road_mark_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingObject >*
      mutable_road_mark_object();
  private:
  const ::xpilot::sr2_0::proto::RoadMarkingObject& _internal_road_mark_object(int index) const;
  ::xpilot::sr2_0::proto::RoadMarkingObject* _internal_add_road_mark_object();
  public:
  const ::xpilot::sr2_0::proto::RoadMarkingObject& road_mark_object(int index) const;
  ::xpilot::sr2_0::proto::RoadMarkingObject* add_road_mark_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingObject >&
      road_mark_object() const;

  // repeated .xpilot.sr2_0.proto.TrafficLight traffic_lights = 4;
  int traffic_lights_size() const;
  private:
  int _internal_traffic_lights_size() const;
  public:
  void clear_traffic_lights();
  ::xpilot::sr2_0::proto::TrafficLight* mutable_traffic_lights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficLight >*
      mutable_traffic_lights();
  private:
  const ::xpilot::sr2_0::proto::TrafficLight& _internal_traffic_lights(int index) const;
  ::xpilot::sr2_0::proto::TrafficLight* _internal_add_traffic_lights();
  public:
  const ::xpilot::sr2_0::proto::TrafficLight& traffic_lights(int index) const;
  ::xpilot::sr2_0::proto::TrafficLight* add_traffic_lights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficLight >&
      traffic_lights() const;

  // repeated int32 drivable_space_map = 7;
  int drivable_space_map_size() const;
  private:
  int _internal_drivable_space_map_size() const;
  public:
  void clear_drivable_space_map();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drivable_space_map(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_drivable_space_map() const;
  void _internal_add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_drivable_space_map();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 drivable_space_map(int index) const;
  void set_drivable_space_map(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      drivable_space_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_drivable_space_map();

  // repeated .xpilot.sr2_0.proto.TSRUObject tsru_objects = 9;
  int tsru_objects_size() const;
  private:
  int _internal_tsru_objects_size() const;
  public:
  void clear_tsru_objects();
  ::xpilot::sr2_0::proto::TSRUObject* mutable_tsru_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TSRUObject >*
      mutable_tsru_objects();
  private:
  const ::xpilot::sr2_0::proto::TSRUObject& _internal_tsru_objects(int index) const;
  ::xpilot::sr2_0::proto::TSRUObject* _internal_add_tsru_objects();
  public:
  const ::xpilot::sr2_0::proto::TSRUObject& tsru_objects(int index) const;
  ::xpilot::sr2_0::proto::TSRUObject* add_tsru_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TSRUObject >&
      tsru_objects() const;

  // repeated .xpilot.sr2_0.proto.TrafficSignObject traffic_sign_objects = 11;
  int traffic_sign_objects_size() const;
  private:
  int _internal_traffic_sign_objects_size() const;
  public:
  void clear_traffic_sign_objects();
  ::xpilot::sr2_0::proto::TrafficSignObject* mutable_traffic_sign_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficSignObject >*
      mutable_traffic_sign_objects();
  private:
  const ::xpilot::sr2_0::proto::TrafficSignObject& _internal_traffic_sign_objects(int index) const;
  ::xpilot::sr2_0::proto::TrafficSignObject* _internal_add_traffic_sign_objects();
  public:
  const ::xpilot::sr2_0::proto::TrafficSignObject& traffic_sign_objects(int index) const;
  ::xpilot::sr2_0::proto::TrafficSignObject* add_traffic_sign_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficSignObject >&
      traffic_sign_objects() const;

  // .xpilot.sr2_0.proto.CarPort car_port = 5;
  bool has_car_port() const;
  private:
  bool _internal_has_car_port() const;
  public:
  void clear_car_port();
  const ::xpilot::sr2_0::proto::CarPort& car_port() const;
  ::xpilot::sr2_0::proto::CarPort* release_car_port();
  ::xpilot::sr2_0::proto::CarPort* mutable_car_port();
  void set_allocated_car_port(::xpilot::sr2_0::proto::CarPort* car_port);
  private:
  const ::xpilot::sr2_0::proto::CarPort& _internal_car_port() const;
  ::xpilot::sr2_0::proto::CarPort* _internal_mutable_car_port();
  public:
  void unsafe_arena_set_allocated_car_port(
      ::xpilot::sr2_0::proto::CarPort* car_port);
  ::xpilot::sr2_0::proto::CarPort* unsafe_arena_release_car_port();

  // .xpilot.sr2_0.proto.ChangeLanelineId change_lane_id = 6;
  bool has_change_lane_id() const;
  private:
  bool _internal_has_change_lane_id() const;
  public:
  void clear_change_lane_id();
  const ::xpilot::sr2_0::proto::ChangeLanelineId& change_lane_id() const;
  ::xpilot::sr2_0::proto::ChangeLanelineId* release_change_lane_id();
  ::xpilot::sr2_0::proto::ChangeLanelineId* mutable_change_lane_id();
  void set_allocated_change_lane_id(::xpilot::sr2_0::proto::ChangeLanelineId* change_lane_id);
  private:
  const ::xpilot::sr2_0::proto::ChangeLanelineId& _internal_change_lane_id() const;
  ::xpilot::sr2_0::proto::ChangeLanelineId* _internal_mutable_change_lane_id();
  public:
  void unsafe_arena_set_allocated_change_lane_id(
      ::xpilot::sr2_0::proto::ChangeLanelineId* change_lane_id);
  ::xpilot::sr2_0::proto::ChangeLanelineId* unsafe_arena_release_change_lane_id();

  // .xpilot.sr2_0.proto.IsCrossLine is_cross_line = 8;
  bool has_is_cross_line() const;
  private:
  bool _internal_has_is_cross_line() const;
  public:
  void clear_is_cross_line();
  const ::xpilot::sr2_0::proto::IsCrossLine& is_cross_line() const;
  ::xpilot::sr2_0::proto::IsCrossLine* release_is_cross_line();
  ::xpilot::sr2_0::proto::IsCrossLine* mutable_is_cross_line();
  void set_allocated_is_cross_line(::xpilot::sr2_0::proto::IsCrossLine* is_cross_line);
  private:
  const ::xpilot::sr2_0::proto::IsCrossLine& _internal_is_cross_line() const;
  ::xpilot::sr2_0::proto::IsCrossLine* _internal_mutable_is_cross_line();
  public:
  void unsafe_arena_set_allocated_is_cross_line(
      ::xpilot::sr2_0::proto::IsCrossLine* is_cross_line);
  ::xpilot::sr2_0::proto::IsCrossLine* unsafe_arena_release_is_cross_line();

  // .xpilot.sr2_0.proto.OCCBevPillar occ_bev_pillar = 10;
  bool has_occ_bev_pillar() const;
  private:
  bool _internal_has_occ_bev_pillar() const;
  public:
  void clear_occ_bev_pillar();
  const ::xpilot::sr2_0::proto::OCCBevPillar& occ_bev_pillar() const;
  ::xpilot::sr2_0::proto::OCCBevPillar* release_occ_bev_pillar();
  ::xpilot::sr2_0::proto::OCCBevPillar* mutable_occ_bev_pillar();
  void set_allocated_occ_bev_pillar(::xpilot::sr2_0::proto::OCCBevPillar* occ_bev_pillar);
  private:
  const ::xpilot::sr2_0::proto::OCCBevPillar& _internal_occ_bev_pillar() const;
  ::xpilot::sr2_0::proto::OCCBevPillar* _internal_mutable_occ_bev_pillar();
  public:
  void unsafe_arena_set_allocated_occ_bev_pillar(
      ::xpilot::sr2_0::proto::OCCBevPillar* occ_bev_pillar);
  ::xpilot::sr2_0::proto::OCCBevPillar* unsafe_arena_release_occ_bev_pillar();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.OnlineLocalMapMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject > boudary_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingObject > road_mark_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficLight > traffic_lights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > drivable_space_map_;
  mutable std::atomic<int> _drivable_space_map_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TSRUObject > tsru_objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficSignObject > traffic_sign_objects_;
  ::xpilot::sr2_0::proto::CarPort* car_port_;
  ::xpilot::sr2_0::proto::ChangeLanelineId* change_lane_id_;
  ::xpilot::sr2_0::proto::IsCrossLine* is_cross_line_;
  ::xpilot::sr2_0::proto::OCCBevPillar* occ_bev_pillar_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoadMarkingObject

// float id = 1;
inline void RoadMarkingObject::clear_id() {
  id_ = 0;
}
inline float RoadMarkingObject::_internal_id() const {
  return id_;
}
inline float RoadMarkingObject::id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingObject.id)
  return _internal_id();
}
inline void RoadMarkingObject::_internal_set_id(float value) {
  
  id_ = value;
}
inline void RoadMarkingObject::set_id(float value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingObject.id)
}

// uint32 rsm_type = 2;
inline void RoadMarkingObject::clear_rsm_type() {
  rsm_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::_internal_rsm_type() const {
  return rsm_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::rsm_type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingObject.rsm_type)
  return _internal_rsm_type();
}
inline void RoadMarkingObject::_internal_set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rsm_type_ = value;
}
inline void RoadMarkingObject::set_rsm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rsm_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingObject.rsm_type)
}

// repeated .xpilot.sr2_0.proto.RoadMarkingPoint points = 3;
inline int RoadMarkingObject::_internal_points_size() const {
  return points_.size();
}
inline int RoadMarkingObject::points_size() const {
  return _internal_points_size();
}
inline void RoadMarkingObject::clear_points() {
  points_.Clear();
}
inline ::xpilot::sr2_0::proto::RoadMarkingPoint* RoadMarkingObject::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.RoadMarkingObject.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingPoint >*
RoadMarkingObject::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.RoadMarkingObject.points)
  return &points_;
}
inline const ::xpilot::sr2_0::proto::RoadMarkingPoint& RoadMarkingObject::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xpilot::sr2_0::proto::RoadMarkingPoint& RoadMarkingObject::points(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingObject.points)
  return _internal_points(index);
}
inline ::xpilot::sr2_0::proto::RoadMarkingPoint* RoadMarkingObject::_internal_add_points() {
  return points_.Add();
}
inline ::xpilot::sr2_0::proto::RoadMarkingPoint* RoadMarkingObject::add_points() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.RoadMarkingObject.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingPoint >&
RoadMarkingObject::points() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.RoadMarkingObject.points)
  return points_;
}

// uint32 stop_line_color = 4;
inline void RoadMarkingObject::clear_stop_line_color() {
  stop_line_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::_internal_stop_line_color() const {
  return stop_line_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingObject::stop_line_color() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingObject.stop_line_color)
  return _internal_stop_line_color();
}
inline void RoadMarkingObject::_internal_set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_line_color_ = value;
}
inline void RoadMarkingObject::set_stop_line_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_line_color(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingObject.stop_line_color)
}

// -------------------------------------------------------------------

// RoadMarkingPoint

// float x = 1;
inline void RoadMarkingPoint::clear_x() {
  x_ = 0;
}
inline float RoadMarkingPoint::_internal_x() const {
  return x_;
}
inline float RoadMarkingPoint::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingPoint.x)
  return _internal_x();
}
inline void RoadMarkingPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void RoadMarkingPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingPoint.x)
}

// float y = 2;
inline void RoadMarkingPoint::clear_y() {
  y_ = 0;
}
inline float RoadMarkingPoint::_internal_y() const {
  return y_;
}
inline float RoadMarkingPoint::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingPoint.y)
  return _internal_y();
}
inline void RoadMarkingPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void RoadMarkingPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingPoint.y)
}

// float z = 3;
inline void RoadMarkingPoint::clear_z() {
  z_ = 0;
}
inline float RoadMarkingPoint::_internal_z() const {
  return z_;
}
inline float RoadMarkingPoint::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingPoint.z)
  return _internal_z();
}
inline void RoadMarkingPoint::_internal_set_z(float value) {
  
  z_ = value;
}
inline void RoadMarkingPoint::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingPoint.z)
}

// uint32 type = 4;
inline void RoadMarkingPoint::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingPoint::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoadMarkingPoint::type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.RoadMarkingPoint.type)
  return _internal_type();
}
inline void RoadMarkingPoint::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void RoadMarkingPoint::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.RoadMarkingPoint.type)
}

// -------------------------------------------------------------------

// TrafficLight

// float id = 1;
inline void TrafficLight::clear_id() {
  id_ = 0;
}
inline float TrafficLight::_internal_id() const {
  return id_;
}
inline float TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.id)
  return _internal_id();
}
inline void TrafficLight::_internal_set_id(float value) {
  
  id_ = value;
}
inline void TrafficLight::set_id(float value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.id)
}

// uint32 direction = 2;
inline void TrafficLight::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficLight::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficLight::direction() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.direction)
  return _internal_direction();
}
inline void TrafficLight::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void TrafficLight::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.direction)
}

// uint32 color = 3;
inline void TrafficLight::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficLight::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.color)
  return _internal_color();
}
inline void TrafficLight::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void TrafficLight::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.color)
}

// float row_bulb_count = 4;
inline void TrafficLight::clear_row_bulb_count() {
  row_bulb_count_ = 0;
}
inline float TrafficLight::_internal_row_bulb_count() const {
  return row_bulb_count_;
}
inline float TrafficLight::row_bulb_count() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.row_bulb_count)
  return _internal_row_bulb_count();
}
inline void TrafficLight::_internal_set_row_bulb_count(float value) {
  
  row_bulb_count_ = value;
}
inline void TrafficLight::set_row_bulb_count(float value) {
  _internal_set_row_bulb_count(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.row_bulb_count)
}

// float column_bulb_count = 5;
inline void TrafficLight::clear_column_bulb_count() {
  column_bulb_count_ = 0;
}
inline float TrafficLight::_internal_column_bulb_count() const {
  return column_bulb_count_;
}
inline float TrafficLight::column_bulb_count() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.column_bulb_count)
  return _internal_column_bulb_count();
}
inline void TrafficLight::_internal_set_column_bulb_count(float value) {
  
  column_bulb_count_ = value;
}
inline void TrafficLight::set_column_bulb_count(float value) {
  _internal_set_column_bulb_count(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.column_bulb_count)
}

// .xpilot.sr2_0.proto.Polygon outline = 6;
inline bool TrafficLight::_internal_has_outline() const {
  return this != internal_default_instance() && outline_ != nullptr;
}
inline bool TrafficLight::has_outline() const {
  return _internal_has_outline();
}
inline void TrafficLight::clear_outline() {
  if (GetArena() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Polygon& TrafficLight::_internal_outline() const {
  const ::xpilot::sr2_0::proto::Polygon* p = outline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Polygon*>(
      &::xpilot::sr2_0::proto::_Polygon_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Polygon& TrafficLight::outline() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.outline)
  return _internal_outline();
}
inline void TrafficLight::unsafe_arena_set_allocated_outline(
    ::xpilot::sr2_0::proto::Polygon* outline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_);
  }
  outline_ = outline;
  if (outline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.TrafficLight.outline)
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficLight::release_outline() {
  auto temp = unsafe_arena_release_outline();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficLight::unsafe_arena_release_outline() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.TrafficLight.outline)
  
  ::xpilot::sr2_0::proto::Polygon* temp = outline_;
  outline_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficLight::_internal_mutable_outline() {
  
  if (outline_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Polygon>(GetArena());
    outline_ = p;
  }
  return outline_;
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficLight::mutable_outline() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.TrafficLight.outline)
  return _internal_mutable_outline();
}
inline void TrafficLight::set_allocated_outline(::xpilot::sr2_0::proto::Polygon* outline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outline_;
  }
  if (outline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outline);
    if (message_arena != submessage_arena) {
      outline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline, submessage_arena);
    }
    
  } else {
    
  }
  outline_ = outline;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.TrafficLight.outline)
}

// float timer_digit = 7;
inline void TrafficLight::clear_timer_digit() {
  timer_digit_ = 0;
}
inline float TrafficLight::_internal_timer_digit() const {
  return timer_digit_;
}
inline float TrafficLight::timer_digit() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.timer_digit)
  return _internal_timer_digit();
}
inline void TrafficLight::_internal_set_timer_digit(float value) {
  
  timer_digit_ = value;
}
inline void TrafficLight::set_timer_digit(float value) {
  _internal_set_timer_digit(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.timer_digit)
}

// double yaw = 8;
inline void TrafficLight::clear_yaw() {
  yaw_ = 0;
}
inline double TrafficLight::_internal_yaw() const {
  return yaw_;
}
inline double TrafficLight::yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficLight.yaw)
  return _internal_yaw();
}
inline void TrafficLight::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void TrafficLight::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficLight.yaw)
}

// -------------------------------------------------------------------

// Polygon

// repeated .xpilot.sr2_0.proto.Point3fWithConfidence points = 1;
inline int Polygon::_internal_points_size() const {
  return points_.size();
}
inline int Polygon::points_size() const {
  return _internal_points_size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.Polygon.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Point3fWithConfidence >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.Polygon.points)
  return &points_;
}
inline const ::xpilot::sr2_0::proto::Point3fWithConfidence& Polygon::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xpilot::sr2_0::proto::Point3fWithConfidence& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Polygon.points)
  return _internal_points(index);
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* Polygon::_internal_add_points() {
  return points_.Add();
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* Polygon::add_points() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.Polygon.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Point3fWithConfidence >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.Polygon.points)
  return points_;
}

// -------------------------------------------------------------------

// Point3fWithConfidence

// float x = 1;
inline void Point3fWithConfidence::clear_x() {
  x_ = 0;
}
inline float Point3fWithConfidence::_internal_x() const {
  return x_;
}
inline float Point3fWithConfidence::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point3fWithConfidence.x)
  return _internal_x();
}
inline void Point3fWithConfidence::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3fWithConfidence::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point3fWithConfidence.x)
}

// float y = 2;
inline void Point3fWithConfidence::clear_y() {
  y_ = 0;
}
inline float Point3fWithConfidence::_internal_y() const {
  return y_;
}
inline float Point3fWithConfidence::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point3fWithConfidence.y)
  return _internal_y();
}
inline void Point3fWithConfidence::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3fWithConfidence::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point3fWithConfidence.y)
}

// float z = 3;
inline void Point3fWithConfidence::clear_z() {
  z_ = 0;
}
inline float Point3fWithConfidence::_internal_z() const {
  return z_;
}
inline float Point3fWithConfidence::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point3fWithConfidence.z)
  return _internal_z();
}
inline void Point3fWithConfidence::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3fWithConfidence::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point3fWithConfidence.z)
}

// -------------------------------------------------------------------

// TrafficSignObject

// uint64 id = 1;
inline void TrafficSignObject::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficSignObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficSignObject::id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficSignObject.id)
  return _internal_id();
}
inline void TrafficSignObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void TrafficSignObject::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficSignObject.id)
}

// uint32 type = 2;
inline void TrafficSignObject::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficSignObject::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficSignObject::type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficSignObject.type)
  return _internal_type();
}
inline void TrafficSignObject::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TrafficSignObject::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficSignObject.type)
}

// uint32 speed_limit = 3;
inline void TrafficSignObject::clear_speed_limit() {
  speed_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficSignObject::_internal_speed_limit() const {
  return speed_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficSignObject::speed_limit() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficSignObject.speed_limit)
  return _internal_speed_limit();
}
inline void TrafficSignObject::_internal_set_speed_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speed_limit_ = value;
}
inline void TrafficSignObject::set_speed_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TrafficSignObject.speed_limit)
}

// .xpilot.sr2_0.proto.Point3fWithConfidence center_point = 4;
inline bool TrafficSignObject::_internal_has_center_point() const {
  return this != internal_default_instance() && center_point_ != nullptr;
}
inline bool TrafficSignObject::has_center_point() const {
  return _internal_has_center_point();
}
inline void TrafficSignObject::clear_center_point() {
  if (GetArena() == nullptr && center_point_ != nullptr) {
    delete center_point_;
  }
  center_point_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point3fWithConfidence& TrafficSignObject::_internal_center_point() const {
  const ::xpilot::sr2_0::proto::Point3fWithConfidence* p = center_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point3fWithConfidence*>(
      &::xpilot::sr2_0::proto::_Point3fWithConfidence_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point3fWithConfidence& TrafficSignObject::center_point() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficSignObject.center_point)
  return _internal_center_point();
}
inline void TrafficSignObject::unsafe_arena_set_allocated_center_point(
    ::xpilot::sr2_0::proto::Point3fWithConfidence* center_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_point_);
  }
  center_point_ = center_point;
  if (center_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.TrafficSignObject.center_point)
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* TrafficSignObject::release_center_point() {
  auto temp = unsafe_arena_release_center_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* TrafficSignObject::unsafe_arena_release_center_point() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.TrafficSignObject.center_point)
  
  ::xpilot::sr2_0::proto::Point3fWithConfidence* temp = center_point_;
  center_point_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* TrafficSignObject::_internal_mutable_center_point() {
  
  if (center_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point3fWithConfidence>(GetArena());
    center_point_ = p;
  }
  return center_point_;
}
inline ::xpilot::sr2_0::proto::Point3fWithConfidence* TrafficSignObject::mutable_center_point() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.TrafficSignObject.center_point)
  return _internal_mutable_center_point();
}
inline void TrafficSignObject::set_allocated_center_point(::xpilot::sr2_0::proto::Point3fWithConfidence* center_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_point_;
  }
  if (center_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center_point);
    if (message_arena != submessage_arena) {
      center_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center_point, submessage_arena);
    }
    
  } else {
    
  }
  center_point_ = center_point;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.TrafficSignObject.center_point)
}

// .xpilot.sr2_0.proto.Polygon outline = 5;
inline bool TrafficSignObject::_internal_has_outline() const {
  return this != internal_default_instance() && outline_ != nullptr;
}
inline bool TrafficSignObject::has_outline() const {
  return _internal_has_outline();
}
inline void TrafficSignObject::clear_outline() {
  if (GetArena() == nullptr && outline_ != nullptr) {
    delete outline_;
  }
  outline_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Polygon& TrafficSignObject::_internal_outline() const {
  const ::xpilot::sr2_0::proto::Polygon* p = outline_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Polygon*>(
      &::xpilot::sr2_0::proto::_Polygon_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Polygon& TrafficSignObject::outline() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TrafficSignObject.outline)
  return _internal_outline();
}
inline void TrafficSignObject::unsafe_arena_set_allocated_outline(
    ::xpilot::sr2_0::proto::Polygon* outline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_);
  }
  outline_ = outline;
  if (outline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.TrafficSignObject.outline)
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficSignObject::release_outline() {
  auto temp = unsafe_arena_release_outline();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficSignObject::unsafe_arena_release_outline() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.TrafficSignObject.outline)
  
  ::xpilot::sr2_0::proto::Polygon* temp = outline_;
  outline_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficSignObject::_internal_mutable_outline() {
  
  if (outline_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Polygon>(GetArena());
    outline_ = p;
  }
  return outline_;
}
inline ::xpilot::sr2_0::proto::Polygon* TrafficSignObject::mutable_outline() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.TrafficSignObject.outline)
  return _internal_mutable_outline();
}
inline void TrafficSignObject::set_allocated_outline(::xpilot::sr2_0::proto::Polygon* outline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outline_;
  }
  if (outline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outline);
    if (message_arena != submessage_arena) {
      outline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline, submessage_arena);
    }
    
  } else {
    
  }
  outline_ = outline;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.TrafficSignObject.outline)
}

// -------------------------------------------------------------------

// CarPort

// float x = 1;
inline void CarPort::clear_x() {
  x_ = 0;
}
inline float CarPort::_internal_x() const {
  return x_;
}
inline float CarPort::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.CarPort.x)
  return _internal_x();
}
inline void CarPort::_internal_set_x(float value) {
  
  x_ = value;
}
inline void CarPort::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.CarPort.x)
}

// float y = 2;
inline void CarPort::clear_y() {
  y_ = 0;
}
inline float CarPort::_internal_y() const {
  return y_;
}
inline float CarPort::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.CarPort.y)
  return _internal_y();
}
inline void CarPort::_internal_set_y(float value) {
  
  y_ = value;
}
inline void CarPort::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.CarPort.y)
}

// float z = 3;
inline void CarPort::clear_z() {
  z_ = 0;
}
inline float CarPort::_internal_z() const {
  return z_;
}
inline float CarPort::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.CarPort.z)
  return _internal_z();
}
inline void CarPort::_internal_set_z(float value) {
  
  z_ = value;
}
inline void CarPort::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.CarPort.z)
}

// int32 color = 4;
inline void CarPort::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarPort::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarPort::color() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.CarPort.color)
  return _internal_color();
}
inline void CarPort::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void CarPort::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.CarPort.color)
}

// float yaw = 5;
inline void CarPort::clear_yaw() {
  yaw_ = 0;
}
inline float CarPort::_internal_yaw() const {
  return yaw_;
}
inline float CarPort::yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.CarPort.yaw)
  return _internal_yaw();
}
inline void CarPort::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void CarPort::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.CarPort.yaw)
}

// -------------------------------------------------------------------

// ChangeLanelineId

// uint64 le1 = 1;
inline void ChangeLanelineId::clear_le1() {
  le1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::_internal_le1() const {
  return le1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::le1() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ChangeLanelineId.le1)
  return _internal_le1();
}
inline void ChangeLanelineId::_internal_set_le1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  le1_ = value;
}
inline void ChangeLanelineId::set_le1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_le1(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ChangeLanelineId.le1)
}

// uint64 le2 = 2;
inline void ChangeLanelineId::clear_le2() {
  le2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::_internal_le2() const {
  return le2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::le2() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ChangeLanelineId.le2)
  return _internal_le2();
}
inline void ChangeLanelineId::_internal_set_le2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  le2_ = value;
}
inline void ChangeLanelineId::set_le2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_le2(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ChangeLanelineId.le2)
}

// uint64 ri1 = 3;
inline void ChangeLanelineId::clear_ri1() {
  ri1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::_internal_ri1() const {
  return ri1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::ri1() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ChangeLanelineId.ri1)
  return _internal_ri1();
}
inline void ChangeLanelineId::_internal_set_ri1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ri1_ = value;
}
inline void ChangeLanelineId::set_ri1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ri1(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ChangeLanelineId.ri1)
}

// uint64 ri2 = 4;
inline void ChangeLanelineId::clear_ri2() {
  ri2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::_internal_ri2() const {
  return ri2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChangeLanelineId::ri2() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ChangeLanelineId.ri2)
  return _internal_ri2();
}
inline void ChangeLanelineId::_internal_set_ri2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ri2_ = value;
}
inline void ChangeLanelineId::set_ri2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ri2(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ChangeLanelineId.ri2)
}

// -------------------------------------------------------------------

// IsCrossLine

// bool is_cross_line = 1;
inline void IsCrossLine::clear_is_cross_line() {
  is_cross_line_ = false;
}
inline bool IsCrossLine::_internal_is_cross_line() const {
  return is_cross_line_;
}
inline bool IsCrossLine::is_cross_line() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.IsCrossLine.is_cross_line)
  return _internal_is_cross_line();
}
inline void IsCrossLine::_internal_set_is_cross_line(bool value) {
  
  is_cross_line_ = value;
}
inline void IsCrossLine::set_is_cross_line(bool value) {
  _internal_set_is_cross_line(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.IsCrossLine.is_cross_line)
}

// -------------------------------------------------------------------

// OCRObject

// int32 text_direction = 1;
inline void OCRObject::clear_text_direction() {
  text_direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OCRObject::_internal_text_direction() const {
  return text_direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OCRObject::text_direction() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OCRObject.text_direction)
  return _internal_text_direction();
}
inline void OCRObject::_internal_set_text_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  text_direction_ = value;
}
inline void OCRObject::set_text_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_text_direction(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.OCRObject.text_direction)
}

// string text_string = 2;
inline void OCRObject::clear_text_string() {
  text_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OCRObject::text_string() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OCRObject.text_string)
  return _internal_text_string();
}
inline void OCRObject::set_text_string(const std::string& value) {
  _internal_set_text_string(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.OCRObject.text_string)
}
inline std::string* OCRObject::mutable_text_string() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OCRObject.text_string)
  return _internal_mutable_text_string();
}
inline const std::string& OCRObject::_internal_text_string() const {
  return text_string_.Get();
}
inline void OCRObject::_internal_set_text_string(const std::string& value) {
  
  text_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OCRObject::set_text_string(std::string&& value) {
  
  text_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xpilot.sr2_0.proto.OCRObject.text_string)
}
inline void OCRObject::set_text_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:xpilot.sr2_0.proto.OCRObject.text_string)
}
inline void OCRObject::set_text_string(const char* value,
    size_t size) {
  
  text_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xpilot.sr2_0.proto.OCRObject.text_string)
}
inline std::string* OCRObject::_internal_mutable_text_string() {
  
  return text_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OCRObject::release_text_string() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.OCRObject.text_string)
  return text_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OCRObject::set_allocated_text_string(std::string* text_string) {
  if (text_string != nullptr) {
    
  } else {
    
  }
  text_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.OCRObject.text_string)
}
inline std::string* OCRObject::unsafe_arena_release_text_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.sr2_0.proto.OCRObject.text_string)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return text_string_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OCRObject::unsafe_arena_set_allocated_text_string(
    std::string* text_string) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text_string != nullptr) {
    
  } else {
    
  }
  text_string_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text_string, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.OCRObject.text_string)
}

// -------------------------------------------------------------------

// TSRUObject

// uint32 tsru_id = 1;
inline void TSRUObject::clear_tsru_id() {
  tsru_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TSRUObject::_internal_tsru_id() const {
  return tsru_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TSRUObject::tsru_id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TSRUObject.tsru_id)
  return _internal_tsru_id();
}
inline void TSRUObject::_internal_set_tsru_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tsru_id_ = value;
}
inline void TSRUObject::set_tsru_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tsru_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TSRUObject.tsru_id)
}

// int32 tsru_type = 2;
inline void TSRUObject::clear_tsru_type() {
  tsru_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSRUObject::_internal_tsru_type() const {
  return tsru_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSRUObject::tsru_type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TSRUObject.tsru_type)
  return _internal_tsru_type();
}
inline void TSRUObject::_internal_set_tsru_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tsru_type_ = value;
}
inline void TSRUObject::set_tsru_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tsru_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TSRUObject.tsru_type)
}

// .xpilot.sr2_0.proto.Vector3d vertices = 3;
inline bool TSRUObject::_internal_has_vertices() const {
  return this != internal_default_instance() && vertices_ != nullptr;
}
inline bool TSRUObject::has_vertices() const {
  return _internal_has_vertices();
}
inline const ::xpilot::sr2_0::proto::Vector3d& TSRUObject::_internal_vertices() const {
  const ::xpilot::sr2_0::proto::Vector3d* p = vertices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Vector3d*>(
      &::xpilot::sr2_0::proto::_Vector3d_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Vector3d& TSRUObject::vertices() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TSRUObject.vertices)
  return _internal_vertices();
}
inline void TSRUObject::unsafe_arena_set_allocated_vertices(
    ::xpilot::sr2_0::proto::Vector3d* vertices) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertices_);
  }
  vertices_ = vertices;
  if (vertices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.TSRUObject.vertices)
}
inline ::xpilot::sr2_0::proto::Vector3d* TSRUObject::release_vertices() {
  auto temp = unsafe_arena_release_vertices();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector3d* TSRUObject::unsafe_arena_release_vertices() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.TSRUObject.vertices)
  
  ::xpilot::sr2_0::proto::Vector3d* temp = vertices_;
  vertices_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector3d* TSRUObject::_internal_mutable_vertices() {
  
  if (vertices_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Vector3d>(GetArena());
    vertices_ = p;
  }
  return vertices_;
}
inline ::xpilot::sr2_0::proto::Vector3d* TSRUObject::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.TSRUObject.vertices)
  return _internal_mutable_vertices();
}
inline void TSRUObject::set_allocated_vertices(::xpilot::sr2_0::proto::Vector3d* vertices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertices_);
  }
  if (vertices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vertices)->GetArena();
    if (message_arena != submessage_arena) {
      vertices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertices, submessage_arena);
    }
    
  } else {
    
  }
  vertices_ = vertices;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.TSRUObject.vertices)
}

// float yaw = 4;
inline void TSRUObject::clear_yaw() {
  yaw_ = 0;
}
inline float TSRUObject::_internal_yaw() const {
  return yaw_;
}
inline float TSRUObject::yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TSRUObject.yaw)
  return _internal_yaw();
}
inline void TSRUObject::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void TSRUObject::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TSRUObject.yaw)
}

// repeated .xpilot.sr2_0.proto.OCRObject ocr_objects = 5;
inline int TSRUObject::_internal_ocr_objects_size() const {
  return ocr_objects_.size();
}
inline int TSRUObject::ocr_objects_size() const {
  return _internal_ocr_objects_size();
}
inline void TSRUObject::clear_ocr_objects() {
  ocr_objects_.Clear();
}
inline ::xpilot::sr2_0::proto::OCRObject* TSRUObject::mutable_ocr_objects(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.TSRUObject.ocr_objects)
  return ocr_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::OCRObject >*
TSRUObject::mutable_ocr_objects() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.TSRUObject.ocr_objects)
  return &ocr_objects_;
}
inline const ::xpilot::sr2_0::proto::OCRObject& TSRUObject::_internal_ocr_objects(int index) const {
  return ocr_objects_.Get(index);
}
inline const ::xpilot::sr2_0::proto::OCRObject& TSRUObject::ocr_objects(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TSRUObject.ocr_objects)
  return _internal_ocr_objects(index);
}
inline ::xpilot::sr2_0::proto::OCRObject* TSRUObject::_internal_add_ocr_objects() {
  return ocr_objects_.Add();
}
inline ::xpilot::sr2_0::proto::OCRObject* TSRUObject::add_ocr_objects() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.TSRUObject.ocr_objects)
  return _internal_add_ocr_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::OCRObject >&
TSRUObject::ocr_objects() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.TSRUObject.ocr_objects)
  return ocr_objects_;
}

// int32 pass_status = 6;
inline void TSRUObject::clear_pass_status() {
  pass_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSRUObject::_internal_pass_status() const {
  return pass_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSRUObject::pass_status() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.TSRUObject.pass_status)
  return _internal_pass_status();
}
inline void TSRUObject::_internal_set_pass_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pass_status_ = value;
}
inline void TSRUObject::set_pass_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pass_status(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.TSRUObject.pass_status)
}

// -------------------------------------------------------------------

// BevPillar

// .xpilot.sr2_0.proto.Vector2f pos = 1;
inline bool BevPillar::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool BevPillar::has_pos() const {
  return _internal_has_pos();
}
inline const ::xpilot::sr2_0::proto::Vector2f& BevPillar::_internal_pos() const {
  const ::xpilot::sr2_0::proto::Vector2f* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Vector2f*>(
      &::xpilot::sr2_0::proto::_Vector2f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Vector2f& BevPillar::pos() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BevPillar.pos)
  return _internal_pos();
}
inline void BevPillar::unsafe_arena_set_allocated_pos(
    ::xpilot::sr2_0::proto::Vector2f* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.BevPillar.pos)
}
inline ::xpilot::sr2_0::proto::Vector2f* BevPillar::release_pos() {
  auto temp = unsafe_arena_release_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector2f* BevPillar::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.BevPillar.pos)
  
  ::xpilot::sr2_0::proto::Vector2f* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector2f* BevPillar::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Vector2f>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::xpilot::sr2_0::proto::Vector2f* BevPillar::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.BevPillar.pos)
  return _internal_mutable_pos();
}
inline void BevPillar::set_allocated_pos(::xpilot::sr2_0::proto::Vector2f* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.BevPillar.pos)
}

// float min_z = 2;
inline void BevPillar::clear_min_z() {
  min_z_ = 0;
}
inline float BevPillar::_internal_min_z() const {
  return min_z_;
}
inline float BevPillar::min_z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BevPillar.min_z)
  return _internal_min_z();
}
inline void BevPillar::_internal_set_min_z(float value) {
  
  min_z_ = value;
}
inline void BevPillar::set_min_z(float value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BevPillar.min_z)
}

// float max_z = 3;
inline void BevPillar::clear_max_z() {
  max_z_ = 0;
}
inline float BevPillar::_internal_max_z() const {
  return max_z_;
}
inline float BevPillar::max_z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.BevPillar.max_z)
  return _internal_max_z();
}
inline void BevPillar::_internal_set_max_z(float value) {
  
  max_z_ = value;
}
inline void BevPillar::set_max_z(float value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.BevPillar.max_z)
}

// -------------------------------------------------------------------

// OCCBevPillar

// .xpilot.sr2_0.proto.Vector2f pillar_2d_size = 1;
inline bool OCCBevPillar::_internal_has_pillar_2d_size() const {
  return this != internal_default_instance() && pillar_2d_size_ != nullptr;
}
inline bool OCCBevPillar::has_pillar_2d_size() const {
  return _internal_has_pillar_2d_size();
}
inline const ::xpilot::sr2_0::proto::Vector2f& OCCBevPillar::_internal_pillar_2d_size() const {
  const ::xpilot::sr2_0::proto::Vector2f* p = pillar_2d_size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Vector2f*>(
      &::xpilot::sr2_0::proto::_Vector2f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Vector2f& OCCBevPillar::pillar_2d_size() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OCCBevPillar.pillar_2d_size)
  return _internal_pillar_2d_size();
}
inline void OCCBevPillar::unsafe_arena_set_allocated_pillar_2d_size(
    ::xpilot::sr2_0::proto::Vector2f* pillar_2d_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pillar_2d_size_);
  }
  pillar_2d_size_ = pillar_2d_size;
  if (pillar_2d_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.OCCBevPillar.pillar_2d_size)
}
inline ::xpilot::sr2_0::proto::Vector2f* OCCBevPillar::release_pillar_2d_size() {
  auto temp = unsafe_arena_release_pillar_2d_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector2f* OCCBevPillar::unsafe_arena_release_pillar_2d_size() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.OCCBevPillar.pillar_2d_size)
  
  ::xpilot::sr2_0::proto::Vector2f* temp = pillar_2d_size_;
  pillar_2d_size_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector2f* OCCBevPillar::_internal_mutable_pillar_2d_size() {
  
  if (pillar_2d_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Vector2f>(GetArena());
    pillar_2d_size_ = p;
  }
  return pillar_2d_size_;
}
inline ::xpilot::sr2_0::proto::Vector2f* OCCBevPillar::mutable_pillar_2d_size() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OCCBevPillar.pillar_2d_size)
  return _internal_mutable_pillar_2d_size();
}
inline void OCCBevPillar::set_allocated_pillar_2d_size(::xpilot::sr2_0::proto::Vector2f* pillar_2d_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pillar_2d_size_);
  }
  if (pillar_2d_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pillar_2d_size)->GetArena();
    if (message_arena != submessage_arena) {
      pillar_2d_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pillar_2d_size, submessage_arena);
    }
    
  } else {
    
  }
  pillar_2d_size_ = pillar_2d_size;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.OCCBevPillar.pillar_2d_size)
}

// repeated .xpilot.sr2_0.proto.BevPillar bev_pillar = 2;
inline int OCCBevPillar::_internal_bev_pillar_size() const {
  return bev_pillar_.size();
}
inline int OCCBevPillar::bev_pillar_size() const {
  return _internal_bev_pillar_size();
}
inline void OCCBevPillar::clear_bev_pillar() {
  bev_pillar_.Clear();
}
inline ::xpilot::sr2_0::proto::BevPillar* OCCBevPillar::mutable_bev_pillar(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OCCBevPillar.bev_pillar)
  return bev_pillar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BevPillar >*
OCCBevPillar::mutable_bev_pillar() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OCCBevPillar.bev_pillar)
  return &bev_pillar_;
}
inline const ::xpilot::sr2_0::proto::BevPillar& OCCBevPillar::_internal_bev_pillar(int index) const {
  return bev_pillar_.Get(index);
}
inline const ::xpilot::sr2_0::proto::BevPillar& OCCBevPillar::bev_pillar(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OCCBevPillar.bev_pillar)
  return _internal_bev_pillar(index);
}
inline ::xpilot::sr2_0::proto::BevPillar* OCCBevPillar::_internal_add_bev_pillar() {
  return bev_pillar_.Add();
}
inline ::xpilot::sr2_0::proto::BevPillar* OCCBevPillar::add_bev_pillar() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OCCBevPillar.bev_pillar)
  return _internal_add_bev_pillar();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BevPillar >&
OCCBevPillar::bev_pillar() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OCCBevPillar.bev_pillar)
  return bev_pillar_;
}

// -------------------------------------------------------------------

// OnlineLocalMapMsg

// uint64 timestamp = 1;
inline void OnlineLocalMapMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OnlineLocalMapMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OnlineLocalMapMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.timestamp)
  return _internal_timestamp();
}
inline void OnlineLocalMapMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void OnlineLocalMapMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.OnlineLocalMapMsg.timestamp)
}

// repeated .xpilot.sr2_0.proto.BoundaryObject boudary_object = 2;
inline int OnlineLocalMapMsg::_internal_boudary_object_size() const {
  return boudary_object_.size();
}
inline int OnlineLocalMapMsg::boudary_object_size() const {
  return _internal_boudary_object_size();
}
inline ::xpilot::sr2_0::proto::BoundaryObject* OnlineLocalMapMsg::mutable_boudary_object(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.boudary_object)
  return boudary_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >*
OnlineLocalMapMsg::mutable_boudary_object() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.boudary_object)
  return &boudary_object_;
}
inline const ::xpilot::sr2_0::proto::BoundaryObject& OnlineLocalMapMsg::_internal_boudary_object(int index) const {
  return boudary_object_.Get(index);
}
inline const ::xpilot::sr2_0::proto::BoundaryObject& OnlineLocalMapMsg::boudary_object(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.boudary_object)
  return _internal_boudary_object(index);
}
inline ::xpilot::sr2_0::proto::BoundaryObject* OnlineLocalMapMsg::_internal_add_boudary_object() {
  return boudary_object_.Add();
}
inline ::xpilot::sr2_0::proto::BoundaryObject* OnlineLocalMapMsg::add_boudary_object() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OnlineLocalMapMsg.boudary_object)
  return _internal_add_boudary_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >&
OnlineLocalMapMsg::boudary_object() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.boudary_object)
  return boudary_object_;
}

// repeated .xpilot.sr2_0.proto.RoadMarkingObject road_mark_object = 3;
inline int OnlineLocalMapMsg::_internal_road_mark_object_size() const {
  return road_mark_object_.size();
}
inline int OnlineLocalMapMsg::road_mark_object_size() const {
  return _internal_road_mark_object_size();
}
inline void OnlineLocalMapMsg::clear_road_mark_object() {
  road_mark_object_.Clear();
}
inline ::xpilot::sr2_0::proto::RoadMarkingObject* OnlineLocalMapMsg::mutable_road_mark_object(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.road_mark_object)
  return road_mark_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingObject >*
OnlineLocalMapMsg::mutable_road_mark_object() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.road_mark_object)
  return &road_mark_object_;
}
inline const ::xpilot::sr2_0::proto::RoadMarkingObject& OnlineLocalMapMsg::_internal_road_mark_object(int index) const {
  return road_mark_object_.Get(index);
}
inline const ::xpilot::sr2_0::proto::RoadMarkingObject& OnlineLocalMapMsg::road_mark_object(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.road_mark_object)
  return _internal_road_mark_object(index);
}
inline ::xpilot::sr2_0::proto::RoadMarkingObject* OnlineLocalMapMsg::_internal_add_road_mark_object() {
  return road_mark_object_.Add();
}
inline ::xpilot::sr2_0::proto::RoadMarkingObject* OnlineLocalMapMsg::add_road_mark_object() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OnlineLocalMapMsg.road_mark_object)
  return _internal_add_road_mark_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::RoadMarkingObject >&
OnlineLocalMapMsg::road_mark_object() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.road_mark_object)
  return road_mark_object_;
}

// repeated .xpilot.sr2_0.proto.TrafficLight traffic_lights = 4;
inline int OnlineLocalMapMsg::_internal_traffic_lights_size() const {
  return traffic_lights_.size();
}
inline int OnlineLocalMapMsg::traffic_lights_size() const {
  return _internal_traffic_lights_size();
}
inline void OnlineLocalMapMsg::clear_traffic_lights() {
  traffic_lights_.Clear();
}
inline ::xpilot::sr2_0::proto::TrafficLight* OnlineLocalMapMsg::mutable_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_lights)
  return traffic_lights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficLight >*
OnlineLocalMapMsg::mutable_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_lights)
  return &traffic_lights_;
}
inline const ::xpilot::sr2_0::proto::TrafficLight& OnlineLocalMapMsg::_internal_traffic_lights(int index) const {
  return traffic_lights_.Get(index);
}
inline const ::xpilot::sr2_0::proto::TrafficLight& OnlineLocalMapMsg::traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_lights)
  return _internal_traffic_lights(index);
}
inline ::xpilot::sr2_0::proto::TrafficLight* OnlineLocalMapMsg::_internal_add_traffic_lights() {
  return traffic_lights_.Add();
}
inline ::xpilot::sr2_0::proto::TrafficLight* OnlineLocalMapMsg::add_traffic_lights() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_lights)
  return _internal_add_traffic_lights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficLight >&
OnlineLocalMapMsg::traffic_lights() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_lights)
  return traffic_lights_;
}

// .xpilot.sr2_0.proto.CarPort car_port = 5;
inline bool OnlineLocalMapMsg::_internal_has_car_port() const {
  return this != internal_default_instance() && car_port_ != nullptr;
}
inline bool OnlineLocalMapMsg::has_car_port() const {
  return _internal_has_car_port();
}
inline void OnlineLocalMapMsg::clear_car_port() {
  if (GetArena() == nullptr && car_port_ != nullptr) {
    delete car_port_;
  }
  car_port_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::CarPort& OnlineLocalMapMsg::_internal_car_port() const {
  const ::xpilot::sr2_0::proto::CarPort* p = car_port_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::CarPort*>(
      &::xpilot::sr2_0::proto::_CarPort_default_instance_);
}
inline const ::xpilot::sr2_0::proto::CarPort& OnlineLocalMapMsg::car_port() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.car_port)
  return _internal_car_port();
}
inline void OnlineLocalMapMsg::unsafe_arena_set_allocated_car_port(
    ::xpilot::sr2_0::proto::CarPort* car_port) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(car_port_);
  }
  car_port_ = car_port;
  if (car_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.car_port)
}
inline ::xpilot::sr2_0::proto::CarPort* OnlineLocalMapMsg::release_car_port() {
  auto temp = unsafe_arena_release_car_port();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::CarPort* OnlineLocalMapMsg::unsafe_arena_release_car_port() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.OnlineLocalMapMsg.car_port)
  
  ::xpilot::sr2_0::proto::CarPort* temp = car_port_;
  car_port_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::CarPort* OnlineLocalMapMsg::_internal_mutable_car_port() {
  
  if (car_port_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::CarPort>(GetArena());
    car_port_ = p;
  }
  return car_port_;
}
inline ::xpilot::sr2_0::proto::CarPort* OnlineLocalMapMsg::mutable_car_port() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.car_port)
  return _internal_mutable_car_port();
}
inline void OnlineLocalMapMsg::set_allocated_car_port(::xpilot::sr2_0::proto::CarPort* car_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete car_port_;
  }
  if (car_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(car_port);
    if (message_arena != submessage_arena) {
      car_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_port, submessage_arena);
    }
    
  } else {
    
  }
  car_port_ = car_port;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.car_port)
}

// .xpilot.sr2_0.proto.ChangeLanelineId change_lane_id = 6;
inline bool OnlineLocalMapMsg::_internal_has_change_lane_id() const {
  return this != internal_default_instance() && change_lane_id_ != nullptr;
}
inline bool OnlineLocalMapMsg::has_change_lane_id() const {
  return _internal_has_change_lane_id();
}
inline void OnlineLocalMapMsg::clear_change_lane_id() {
  if (GetArena() == nullptr && change_lane_id_ != nullptr) {
    delete change_lane_id_;
  }
  change_lane_id_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::ChangeLanelineId& OnlineLocalMapMsg::_internal_change_lane_id() const {
  const ::xpilot::sr2_0::proto::ChangeLanelineId* p = change_lane_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::ChangeLanelineId*>(
      &::xpilot::sr2_0::proto::_ChangeLanelineId_default_instance_);
}
inline const ::xpilot::sr2_0::proto::ChangeLanelineId& OnlineLocalMapMsg::change_lane_id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.change_lane_id)
  return _internal_change_lane_id();
}
inline void OnlineLocalMapMsg::unsafe_arena_set_allocated_change_lane_id(
    ::xpilot::sr2_0::proto::ChangeLanelineId* change_lane_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_lane_id_);
  }
  change_lane_id_ = change_lane_id;
  if (change_lane_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.change_lane_id)
}
inline ::xpilot::sr2_0::proto::ChangeLanelineId* OnlineLocalMapMsg::release_change_lane_id() {
  auto temp = unsafe_arena_release_change_lane_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::ChangeLanelineId* OnlineLocalMapMsg::unsafe_arena_release_change_lane_id() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.OnlineLocalMapMsg.change_lane_id)
  
  ::xpilot::sr2_0::proto::ChangeLanelineId* temp = change_lane_id_;
  change_lane_id_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::ChangeLanelineId* OnlineLocalMapMsg::_internal_mutable_change_lane_id() {
  
  if (change_lane_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::ChangeLanelineId>(GetArena());
    change_lane_id_ = p;
  }
  return change_lane_id_;
}
inline ::xpilot::sr2_0::proto::ChangeLanelineId* OnlineLocalMapMsg::mutable_change_lane_id() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.change_lane_id)
  return _internal_mutable_change_lane_id();
}
inline void OnlineLocalMapMsg::set_allocated_change_lane_id(::xpilot::sr2_0::proto::ChangeLanelineId* change_lane_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete change_lane_id_;
  }
  if (change_lane_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(change_lane_id);
    if (message_arena != submessage_arena) {
      change_lane_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lane_id, submessage_arena);
    }
    
  } else {
    
  }
  change_lane_id_ = change_lane_id;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.change_lane_id)
}

// repeated int32 drivable_space_map = 7;
inline int OnlineLocalMapMsg::_internal_drivable_space_map_size() const {
  return drivable_space_map_.size();
}
inline int OnlineLocalMapMsg::drivable_space_map_size() const {
  return _internal_drivable_space_map_size();
}
inline void OnlineLocalMapMsg::clear_drivable_space_map() {
  drivable_space_map_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnlineLocalMapMsg::_internal_drivable_space_map(int index) const {
  return drivable_space_map_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnlineLocalMapMsg::drivable_space_map(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.drivable_space_map)
  return _internal_drivable_space_map(index);
}
inline void OnlineLocalMapMsg::set_drivable_space_map(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  drivable_space_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.OnlineLocalMapMsg.drivable_space_map)
}
inline void OnlineLocalMapMsg::_internal_add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  drivable_space_map_.Add(value);
}
inline void OnlineLocalMapMsg::add_drivable_space_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_drivable_space_map(value);
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OnlineLocalMapMsg.drivable_space_map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OnlineLocalMapMsg::_internal_drivable_space_map() const {
  return drivable_space_map_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OnlineLocalMapMsg::drivable_space_map() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.drivable_space_map)
  return _internal_drivable_space_map();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OnlineLocalMapMsg::_internal_mutable_drivable_space_map() {
  return &drivable_space_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OnlineLocalMapMsg::mutable_drivable_space_map() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.drivable_space_map)
  return _internal_mutable_drivable_space_map();
}

// .xpilot.sr2_0.proto.IsCrossLine is_cross_line = 8;
inline bool OnlineLocalMapMsg::_internal_has_is_cross_line() const {
  return this != internal_default_instance() && is_cross_line_ != nullptr;
}
inline bool OnlineLocalMapMsg::has_is_cross_line() const {
  return _internal_has_is_cross_line();
}
inline void OnlineLocalMapMsg::clear_is_cross_line() {
  if (GetArena() == nullptr && is_cross_line_ != nullptr) {
    delete is_cross_line_;
  }
  is_cross_line_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::IsCrossLine& OnlineLocalMapMsg::_internal_is_cross_line() const {
  const ::xpilot::sr2_0::proto::IsCrossLine* p = is_cross_line_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::IsCrossLine*>(
      &::xpilot::sr2_0::proto::_IsCrossLine_default_instance_);
}
inline const ::xpilot::sr2_0::proto::IsCrossLine& OnlineLocalMapMsg::is_cross_line() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.is_cross_line)
  return _internal_is_cross_line();
}
inline void OnlineLocalMapMsg::unsafe_arena_set_allocated_is_cross_line(
    ::xpilot::sr2_0::proto::IsCrossLine* is_cross_line) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_cross_line_);
  }
  is_cross_line_ = is_cross_line;
  if (is_cross_line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.is_cross_line)
}
inline ::xpilot::sr2_0::proto::IsCrossLine* OnlineLocalMapMsg::release_is_cross_line() {
  auto temp = unsafe_arena_release_is_cross_line();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::IsCrossLine* OnlineLocalMapMsg::unsafe_arena_release_is_cross_line() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.OnlineLocalMapMsg.is_cross_line)
  
  ::xpilot::sr2_0::proto::IsCrossLine* temp = is_cross_line_;
  is_cross_line_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::IsCrossLine* OnlineLocalMapMsg::_internal_mutable_is_cross_line() {
  
  if (is_cross_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::IsCrossLine>(GetArena());
    is_cross_line_ = p;
  }
  return is_cross_line_;
}
inline ::xpilot::sr2_0::proto::IsCrossLine* OnlineLocalMapMsg::mutable_is_cross_line() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.is_cross_line)
  return _internal_mutable_is_cross_line();
}
inline void OnlineLocalMapMsg::set_allocated_is_cross_line(::xpilot::sr2_0::proto::IsCrossLine* is_cross_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_cross_line_;
  }
  if (is_cross_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_cross_line);
    if (message_arena != submessage_arena) {
      is_cross_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_cross_line, submessage_arena);
    }
    
  } else {
    
  }
  is_cross_line_ = is_cross_line;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.is_cross_line)
}

// repeated .xpilot.sr2_0.proto.TSRUObject tsru_objects = 9;
inline int OnlineLocalMapMsg::_internal_tsru_objects_size() const {
  return tsru_objects_.size();
}
inline int OnlineLocalMapMsg::tsru_objects_size() const {
  return _internal_tsru_objects_size();
}
inline void OnlineLocalMapMsg::clear_tsru_objects() {
  tsru_objects_.Clear();
}
inline ::xpilot::sr2_0::proto::TSRUObject* OnlineLocalMapMsg::mutable_tsru_objects(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.tsru_objects)
  return tsru_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TSRUObject >*
OnlineLocalMapMsg::mutable_tsru_objects() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.tsru_objects)
  return &tsru_objects_;
}
inline const ::xpilot::sr2_0::proto::TSRUObject& OnlineLocalMapMsg::_internal_tsru_objects(int index) const {
  return tsru_objects_.Get(index);
}
inline const ::xpilot::sr2_0::proto::TSRUObject& OnlineLocalMapMsg::tsru_objects(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.tsru_objects)
  return _internal_tsru_objects(index);
}
inline ::xpilot::sr2_0::proto::TSRUObject* OnlineLocalMapMsg::_internal_add_tsru_objects() {
  return tsru_objects_.Add();
}
inline ::xpilot::sr2_0::proto::TSRUObject* OnlineLocalMapMsg::add_tsru_objects() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OnlineLocalMapMsg.tsru_objects)
  return _internal_add_tsru_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TSRUObject >&
OnlineLocalMapMsg::tsru_objects() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.tsru_objects)
  return tsru_objects_;
}

// .xpilot.sr2_0.proto.OCCBevPillar occ_bev_pillar = 10;
inline bool OnlineLocalMapMsg::_internal_has_occ_bev_pillar() const {
  return this != internal_default_instance() && occ_bev_pillar_ != nullptr;
}
inline bool OnlineLocalMapMsg::has_occ_bev_pillar() const {
  return _internal_has_occ_bev_pillar();
}
inline void OnlineLocalMapMsg::clear_occ_bev_pillar() {
  if (GetArena() == nullptr && occ_bev_pillar_ != nullptr) {
    delete occ_bev_pillar_;
  }
  occ_bev_pillar_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::OCCBevPillar& OnlineLocalMapMsg::_internal_occ_bev_pillar() const {
  const ::xpilot::sr2_0::proto::OCCBevPillar* p = occ_bev_pillar_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::OCCBevPillar*>(
      &::xpilot::sr2_0::proto::_OCCBevPillar_default_instance_);
}
inline const ::xpilot::sr2_0::proto::OCCBevPillar& OnlineLocalMapMsg::occ_bev_pillar() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.occ_bev_pillar)
  return _internal_occ_bev_pillar();
}
inline void OnlineLocalMapMsg::unsafe_arena_set_allocated_occ_bev_pillar(
    ::xpilot::sr2_0::proto::OCCBevPillar* occ_bev_pillar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occ_bev_pillar_);
  }
  occ_bev_pillar_ = occ_bev_pillar;
  if (occ_bev_pillar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.occ_bev_pillar)
}
inline ::xpilot::sr2_0::proto::OCCBevPillar* OnlineLocalMapMsg::release_occ_bev_pillar() {
  auto temp = unsafe_arena_release_occ_bev_pillar();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::OCCBevPillar* OnlineLocalMapMsg::unsafe_arena_release_occ_bev_pillar() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.OnlineLocalMapMsg.occ_bev_pillar)
  
  ::xpilot::sr2_0::proto::OCCBevPillar* temp = occ_bev_pillar_;
  occ_bev_pillar_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::OCCBevPillar* OnlineLocalMapMsg::_internal_mutable_occ_bev_pillar() {
  
  if (occ_bev_pillar_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::OCCBevPillar>(GetArena());
    occ_bev_pillar_ = p;
  }
  return occ_bev_pillar_;
}
inline ::xpilot::sr2_0::proto::OCCBevPillar* OnlineLocalMapMsg::mutable_occ_bev_pillar() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.occ_bev_pillar)
  return _internal_mutable_occ_bev_pillar();
}
inline void OnlineLocalMapMsg::set_allocated_occ_bev_pillar(::xpilot::sr2_0::proto::OCCBevPillar* occ_bev_pillar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete occ_bev_pillar_;
  }
  if (occ_bev_pillar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(occ_bev_pillar);
    if (message_arena != submessage_arena) {
      occ_bev_pillar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occ_bev_pillar, submessage_arena);
    }
    
  } else {
    
  }
  occ_bev_pillar_ = occ_bev_pillar;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.OnlineLocalMapMsg.occ_bev_pillar)
}

// repeated .xpilot.sr2_0.proto.TrafficSignObject traffic_sign_objects = 11;
inline int OnlineLocalMapMsg::_internal_traffic_sign_objects_size() const {
  return traffic_sign_objects_.size();
}
inline int OnlineLocalMapMsg::traffic_sign_objects_size() const {
  return _internal_traffic_sign_objects_size();
}
inline void OnlineLocalMapMsg::clear_traffic_sign_objects() {
  traffic_sign_objects_.Clear();
}
inline ::xpilot::sr2_0::proto::TrafficSignObject* OnlineLocalMapMsg::mutable_traffic_sign_objects(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_sign_objects)
  return traffic_sign_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficSignObject >*
OnlineLocalMapMsg::mutable_traffic_sign_objects() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_sign_objects)
  return &traffic_sign_objects_;
}
inline const ::xpilot::sr2_0::proto::TrafficSignObject& OnlineLocalMapMsg::_internal_traffic_sign_objects(int index) const {
  return traffic_sign_objects_.Get(index);
}
inline const ::xpilot::sr2_0::proto::TrafficSignObject& OnlineLocalMapMsg::traffic_sign_objects(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_sign_objects)
  return _internal_traffic_sign_objects(index);
}
inline ::xpilot::sr2_0::proto::TrafficSignObject* OnlineLocalMapMsg::_internal_add_traffic_sign_objects() {
  return traffic_sign_objects_.Add();
}
inline ::xpilot::sr2_0::proto::TrafficSignObject* OnlineLocalMapMsg::add_traffic_sign_objects() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_sign_objects)
  return _internal_add_traffic_sign_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrafficSignObject >&
OnlineLocalMapMsg::traffic_sign_objects() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.OnlineLocalMapMsg.traffic_sign_objects)
  return traffic_sign_objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto
