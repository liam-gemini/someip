// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sd_overall.proto

#include "sd_overall.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_aeb_5fdebug_2faeb_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveSafetyDebugMsg_aeb_5fdebug_2faeb_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bp_5fhmi_5foutput_2fbp_5fhmi_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BPHMIOutputMsg_bp_5fhmi_5foutput_2fbp_5fhmi_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localpose_2fLocalPose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mf_5flocalpose_2fMfLocalPose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MfLocalPoseMsg_mf_5flocalpose_2fMfLocalPose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mp_5foutput_2fmp_5foutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_state_5fmanage_2fstate_5fmanage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateManagementMsg_state_5fmanage_2fstate_5fmanage_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class SDOverallMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SDOverallMsg> _instance;
} _SDOverallMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
static void InitDefaultsscc_info_SDOverallMsg_sd_5foverall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::SDOverallMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::SDOverallMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_SDOverallMsg_sd_5foverall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_SDOverallMsg_sd_5foverall_2eproto}, {
      &scc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_OnlineLocalMapMsg_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto.base,
      &scc_info_MfLocalPoseMsg_mf_5flocalpose_2fMfLocalPose_2eproto.base,
      &scc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto.base,
      &scc_info_BPHMIOutputMsg_bp_5fhmi_5foutput_2fbp_5fhmi_5foutput_2eproto.base,
      &scc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto.base,
      &scc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base,
      &scc_info_StateManagementMsg_state_5fmanage_2fstate_5fmanage_2eproto.base,
      &scc_info_ActiveSafetyDebugMsg_aeb_5fdebug_2faeb_5fdebug_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sd_5foverall_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sd_5foverall_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sd_5foverall_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sd_5foverall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, sfbp_rwm_dds_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, online_local_map_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, mf_localpose_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, localpose_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, bp_hmi_output_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, mp_output_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, mf_lanes_for_scu_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, sm_msg_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SDOverallMsg, aeb_msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::SDOverallMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_),
};

const char descriptor_table_protodef_sd_5foverall_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020sd_overall.proto\022\022xpilot.sr2_0.proto\032!"
  "sensor_fusion/sensor_fusion.proto\032/onlin"
  "e_map_fusion/online_local_map_fusion.pro"
  "to\032\031localpose/LocalPose.proto\032\036mf_localp"
  "ose/MfLocalPose.proto\032!bp_hmi_output/bp_"
  "hmi_output.proto\032\031mp_output/mp_output.pr"
  "oto\032!map_fusion/mf_lanes_for_scu.proto\032\037"
  "state_manage/state_manage.proto\032\031aeb_deb"
  "ug/aeb_debug.proto\"\300\004\n\014SDOverallMsg\022;\n\020s"
  "fbp_rwm_dds_msg\030\001 \001(\0132!.xpilot.sr2_0.pro"
  "to.SfbpRwmDdsMsg\022C\n\024online_local_map_msg"
  "\030\002 \001(\0132%.xpilot.sr2_0.proto.OnlineLocalM"
  "apMsg\022<\n\020mf_localpose_msg\030\003 \001(\0132\".xpilot"
  ".sr2_0.proto.MfLocalPoseMsg\022;\n\rlocalpose"
  "_msg\030\004 \001(\0132$.xpilot.sr2_0.proto.LocalPos"
  "eInfoMsg\022=\n\021bp_hmi_output_msg\030\005 \001(\0132\".xp"
  "ilot.sr2_0.proto.BPHMIOutputMsg\0226\n\rmp_ou"
  "tput_msg\030\006 \001(\0132\037.xpilot.sr2_0.proto.MpOu"
  "tputMsg\022I\n\024mf_lanes_for_scu_msg\030\007 \001(\0132+."
  "xpilot.sr2_0.proto.MapFusionLanesForScuM"
  "sg\0226\n\006sm_msg\030\010 \001(\0132&.xpilot.sr2_0.proto."
  "StateManagementMsg\0229\n\007aeb_msg\030\t \001(\0132(.xp"
  "ilot.sr2_0.proto.ActiveSafetyDebugMsgb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sd_5foverall_2eproto_deps[9] = {
  &::descriptor_table_aeb_5fdebug_2faeb_5fdebug_2eproto,
  &::descriptor_table_bp_5fhmi_5foutput_2fbp_5fhmi_5foutput_2eproto,
  &::descriptor_table_localpose_2fLocalPose_2eproto,
  &::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto,
  &::descriptor_table_mf_5flocalpose_2fMfLocalPose_2eproto,
  &::descriptor_table_mp_5foutput_2fmp_5foutput_2eproto,
  &::descriptor_table_online_5fmap_5ffusion_2fonline_5flocal_5fmap_5ffusion_2eproto,
  &::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto,
  &::descriptor_table_state_5fmanage_2fstate_5fmanage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sd_5foverall_2eproto_sccs[1] = {
  &scc_info_SDOverallMsg_sd_5foverall_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sd_5foverall_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sd_5foverall_2eproto = {
  false, false, descriptor_table_protodef_sd_5foverall_2eproto, "sd_overall.proto", 925,
  &descriptor_table_sd_5foverall_2eproto_once, descriptor_table_sd_5foverall_2eproto_sccs, descriptor_table_sd_5foverall_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_sd_5foverall_2eproto::offsets,
  file_level_metadata_sd_5foverall_2eproto, 1, file_level_enum_descriptors_sd_5foverall_2eproto, file_level_service_descriptors_sd_5foverall_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sd_5foverall_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sd_5foverall_2eproto)), true);
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

void SDOverallMsg::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->sfbp_rwm_dds_msg_ = const_cast< ::xpilot::sr2_0::proto::SfbpRwmDdsMsg*>(
      ::xpilot::sr2_0::proto::SfbpRwmDdsMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->online_local_map_msg_ = const_cast< ::xpilot::sr2_0::proto::OnlineLocalMapMsg*>(
      ::xpilot::sr2_0::proto::OnlineLocalMapMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->mf_localpose_msg_ = const_cast< ::xpilot::sr2_0::proto::MfLocalPoseMsg*>(
      ::xpilot::sr2_0::proto::MfLocalPoseMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->localpose_msg_ = const_cast< ::xpilot::sr2_0::proto::LocalPoseInfoMsg*>(
      ::xpilot::sr2_0::proto::LocalPoseInfoMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->bp_hmi_output_msg_ = const_cast< ::xpilot::sr2_0::proto::BPHMIOutputMsg*>(
      ::xpilot::sr2_0::proto::BPHMIOutputMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->mp_output_msg_ = const_cast< ::xpilot::sr2_0::proto::MpOutputMsg*>(
      ::xpilot::sr2_0::proto::MpOutputMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->mf_lanes_for_scu_msg_ = const_cast< ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg*>(
      ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->sm_msg_ = const_cast< ::xpilot::sr2_0::proto::StateManagementMsg*>(
      ::xpilot::sr2_0::proto::StateManagementMsg::internal_default_instance());
  ::xpilot::sr2_0::proto::_SDOverallMsg_default_instance_._instance.get_mutable()->aeb_msg_ = const_cast< ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg*>(
      ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg::internal_default_instance());
}
class SDOverallMsg::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg& sfbp_rwm_dds_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::OnlineLocalMapMsg& online_local_map_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::MfLocalPoseMsg& mf_localpose_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::LocalPoseInfoMsg& localpose_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::BPHMIOutputMsg& bp_hmi_output_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::MpOutputMsg& mp_output_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg& mf_lanes_for_scu_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::StateManagementMsg& sm_msg(const SDOverallMsg* msg);
  static const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg& aeb_msg(const SDOverallMsg* msg);
};

const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg&
SDOverallMsg::_Internal::sfbp_rwm_dds_msg(const SDOverallMsg* msg) {
  return *msg->sfbp_rwm_dds_msg_;
}
const ::xpilot::sr2_0::proto::OnlineLocalMapMsg&
SDOverallMsg::_Internal::online_local_map_msg(const SDOverallMsg* msg) {
  return *msg->online_local_map_msg_;
}
const ::xpilot::sr2_0::proto::MfLocalPoseMsg&
SDOverallMsg::_Internal::mf_localpose_msg(const SDOverallMsg* msg) {
  return *msg->mf_localpose_msg_;
}
const ::xpilot::sr2_0::proto::LocalPoseInfoMsg&
SDOverallMsg::_Internal::localpose_msg(const SDOverallMsg* msg) {
  return *msg->localpose_msg_;
}
const ::xpilot::sr2_0::proto::BPHMIOutputMsg&
SDOverallMsg::_Internal::bp_hmi_output_msg(const SDOverallMsg* msg) {
  return *msg->bp_hmi_output_msg_;
}
const ::xpilot::sr2_0::proto::MpOutputMsg&
SDOverallMsg::_Internal::mp_output_msg(const SDOverallMsg* msg) {
  return *msg->mp_output_msg_;
}
const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg&
SDOverallMsg::_Internal::mf_lanes_for_scu_msg(const SDOverallMsg* msg) {
  return *msg->mf_lanes_for_scu_msg_;
}
const ::xpilot::sr2_0::proto::StateManagementMsg&
SDOverallMsg::_Internal::sm_msg(const SDOverallMsg* msg) {
  return *msg->sm_msg_;
}
const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg&
SDOverallMsg::_Internal::aeb_msg(const SDOverallMsg* msg) {
  return *msg->aeb_msg_;
}
void SDOverallMsg::clear_sfbp_rwm_dds_msg() {
  if (GetArena() == nullptr && sfbp_rwm_dds_msg_ != nullptr) {
    delete sfbp_rwm_dds_msg_;
  }
  sfbp_rwm_dds_msg_ = nullptr;
}
void SDOverallMsg::clear_online_local_map_msg() {
  if (GetArena() == nullptr && online_local_map_msg_ != nullptr) {
    delete online_local_map_msg_;
  }
  online_local_map_msg_ = nullptr;
}
void SDOverallMsg::clear_mf_localpose_msg() {
  if (GetArena() == nullptr && mf_localpose_msg_ != nullptr) {
    delete mf_localpose_msg_;
  }
  mf_localpose_msg_ = nullptr;
}
void SDOverallMsg::clear_localpose_msg() {
  if (GetArena() == nullptr && localpose_msg_ != nullptr) {
    delete localpose_msg_;
  }
  localpose_msg_ = nullptr;
}
void SDOverallMsg::clear_bp_hmi_output_msg() {
  if (GetArena() == nullptr && bp_hmi_output_msg_ != nullptr) {
    delete bp_hmi_output_msg_;
  }
  bp_hmi_output_msg_ = nullptr;
}
void SDOverallMsg::clear_mp_output_msg() {
  if (GetArena() == nullptr && mp_output_msg_ != nullptr) {
    delete mp_output_msg_;
  }
  mp_output_msg_ = nullptr;
}
void SDOverallMsg::clear_mf_lanes_for_scu_msg() {
  if (GetArena() == nullptr && mf_lanes_for_scu_msg_ != nullptr) {
    delete mf_lanes_for_scu_msg_;
  }
  mf_lanes_for_scu_msg_ = nullptr;
}
void SDOverallMsg::clear_sm_msg() {
  if (GetArena() == nullptr && sm_msg_ != nullptr) {
    delete sm_msg_;
  }
  sm_msg_ = nullptr;
}
void SDOverallMsg::clear_aeb_msg() {
  if (GetArena() == nullptr && aeb_msg_ != nullptr) {
    delete aeb_msg_;
  }
  aeb_msg_ = nullptr;
}
SDOverallMsg::SDOverallMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.SDOverallMsg)
}
SDOverallMsg::SDOverallMsg(const SDOverallMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sfbp_rwm_dds_msg()) {
    sfbp_rwm_dds_msg_ = new ::xpilot::sr2_0::proto::SfbpRwmDdsMsg(*from.sfbp_rwm_dds_msg_);
  } else {
    sfbp_rwm_dds_msg_ = nullptr;
  }
  if (from._internal_has_online_local_map_msg()) {
    online_local_map_msg_ = new ::xpilot::sr2_0::proto::OnlineLocalMapMsg(*from.online_local_map_msg_);
  } else {
    online_local_map_msg_ = nullptr;
  }
  if (from._internal_has_mf_localpose_msg()) {
    mf_localpose_msg_ = new ::xpilot::sr2_0::proto::MfLocalPoseMsg(*from.mf_localpose_msg_);
  } else {
    mf_localpose_msg_ = nullptr;
  }
  if (from._internal_has_localpose_msg()) {
    localpose_msg_ = new ::xpilot::sr2_0::proto::LocalPoseInfoMsg(*from.localpose_msg_);
  } else {
    localpose_msg_ = nullptr;
  }
  if (from._internal_has_bp_hmi_output_msg()) {
    bp_hmi_output_msg_ = new ::xpilot::sr2_0::proto::BPHMIOutputMsg(*from.bp_hmi_output_msg_);
  } else {
    bp_hmi_output_msg_ = nullptr;
  }
  if (from._internal_has_mp_output_msg()) {
    mp_output_msg_ = new ::xpilot::sr2_0::proto::MpOutputMsg(*from.mp_output_msg_);
  } else {
    mp_output_msg_ = nullptr;
  }
  if (from._internal_has_mf_lanes_for_scu_msg()) {
    mf_lanes_for_scu_msg_ = new ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg(*from.mf_lanes_for_scu_msg_);
  } else {
    mf_lanes_for_scu_msg_ = nullptr;
  }
  if (from._internal_has_sm_msg()) {
    sm_msg_ = new ::xpilot::sr2_0::proto::StateManagementMsg(*from.sm_msg_);
  } else {
    sm_msg_ = nullptr;
  }
  if (from._internal_has_aeb_msg()) {
    aeb_msg_ = new ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg(*from.aeb_msg_);
  } else {
    aeb_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.SDOverallMsg)
}

void SDOverallMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SDOverallMsg_sd_5foverall_2eproto.base);
  ::memset(&sfbp_rwm_dds_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aeb_msg_) -
      reinterpret_cast<char*>(&sfbp_rwm_dds_msg_)) + sizeof(aeb_msg_));
}

SDOverallMsg::~SDOverallMsg() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.SDOverallMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SDOverallMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sfbp_rwm_dds_msg_;
  if (this != internal_default_instance()) delete online_local_map_msg_;
  if (this != internal_default_instance()) delete mf_localpose_msg_;
  if (this != internal_default_instance()) delete localpose_msg_;
  if (this != internal_default_instance()) delete bp_hmi_output_msg_;
  if (this != internal_default_instance()) delete mp_output_msg_;
  if (this != internal_default_instance()) delete mf_lanes_for_scu_msg_;
  if (this != internal_default_instance()) delete sm_msg_;
  if (this != internal_default_instance()) delete aeb_msg_;
}

void SDOverallMsg::ArenaDtor(void* object) {
  SDOverallMsg* _this = reinterpret_cast< SDOverallMsg* >(object);
  (void)_this;
}
void SDOverallMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SDOverallMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SDOverallMsg& SDOverallMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SDOverallMsg_sd_5foverall_2eproto.base);
  return *internal_default_instance();
}


void SDOverallMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.SDOverallMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sfbp_rwm_dds_msg_ != nullptr) {
    delete sfbp_rwm_dds_msg_;
  }
  sfbp_rwm_dds_msg_ = nullptr;
  if (GetArena() == nullptr && online_local_map_msg_ != nullptr) {
    delete online_local_map_msg_;
  }
  online_local_map_msg_ = nullptr;
  if (GetArena() == nullptr && mf_localpose_msg_ != nullptr) {
    delete mf_localpose_msg_;
  }
  mf_localpose_msg_ = nullptr;
  if (GetArena() == nullptr && localpose_msg_ != nullptr) {
    delete localpose_msg_;
  }
  localpose_msg_ = nullptr;
  if (GetArena() == nullptr && bp_hmi_output_msg_ != nullptr) {
    delete bp_hmi_output_msg_;
  }
  bp_hmi_output_msg_ = nullptr;
  if (GetArena() == nullptr && mp_output_msg_ != nullptr) {
    delete mp_output_msg_;
  }
  mp_output_msg_ = nullptr;
  if (GetArena() == nullptr && mf_lanes_for_scu_msg_ != nullptr) {
    delete mf_lanes_for_scu_msg_;
  }
  mf_lanes_for_scu_msg_ = nullptr;
  if (GetArena() == nullptr && sm_msg_ != nullptr) {
    delete sm_msg_;
  }
  sm_msg_ = nullptr;
  if (GetArena() == nullptr && aeb_msg_ != nullptr) {
    delete aeb_msg_;
  }
  aeb_msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SDOverallMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.sr2_0.proto.SfbpRwmDdsMsg sfbp_rwm_dds_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sfbp_rwm_dds_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.OnlineLocalMapMsg online_local_map_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_online_local_map_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.MfLocalPoseMsg mf_localpose_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mf_localpose_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LocalPoseInfoMsg localpose_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_localpose_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.BPHMIOutputMsg bp_hmi_output_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bp_hmi_output_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.MpOutputMsg mp_output_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mp_output_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.MapFusionLanesForScuMsg mf_lanes_for_scu_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mf_lanes_for_scu_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.StateManagementMsg sm_msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sm_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.ActiveSafetyDebugMsg aeb_msg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_aeb_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SDOverallMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.SDOverallMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.SfbpRwmDdsMsg sfbp_rwm_dds_msg = 1;
  if (this->has_sfbp_rwm_dds_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sfbp_rwm_dds_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.OnlineLocalMapMsg online_local_map_msg = 2;
  if (this->has_online_local_map_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::online_local_map_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.MfLocalPoseMsg mf_localpose_msg = 3;
  if (this->has_mf_localpose_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mf_localpose_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LocalPoseInfoMsg localpose_msg = 4;
  if (this->has_localpose_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::localpose_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.BPHMIOutputMsg bp_hmi_output_msg = 5;
  if (this->has_bp_hmi_output_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bp_hmi_output_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.MpOutputMsg mp_output_msg = 6;
  if (this->has_mp_output_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mp_output_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.MapFusionLanesForScuMsg mf_lanes_for_scu_msg = 7;
  if (this->has_mf_lanes_for_scu_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mf_lanes_for_scu_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.StateManagementMsg sm_msg = 8;
  if (this->has_sm_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sm_msg(this), target, stream);
  }

  // .xpilot.sr2_0.proto.ActiveSafetyDebugMsg aeb_msg = 9;
  if (this->has_aeb_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::aeb_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.SDOverallMsg)
  return target;
}

size_t SDOverallMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.SDOverallMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.SfbpRwmDdsMsg sfbp_rwm_dds_msg = 1;
  if (this->has_sfbp_rwm_dds_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sfbp_rwm_dds_msg_);
  }

  // .xpilot.sr2_0.proto.OnlineLocalMapMsg online_local_map_msg = 2;
  if (this->has_online_local_map_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *online_local_map_msg_);
  }

  // .xpilot.sr2_0.proto.MfLocalPoseMsg mf_localpose_msg = 3;
  if (this->has_mf_localpose_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mf_localpose_msg_);
  }

  // .xpilot.sr2_0.proto.LocalPoseInfoMsg localpose_msg = 4;
  if (this->has_localpose_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localpose_msg_);
  }

  // .xpilot.sr2_0.proto.BPHMIOutputMsg bp_hmi_output_msg = 5;
  if (this->has_bp_hmi_output_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bp_hmi_output_msg_);
  }

  // .xpilot.sr2_0.proto.MpOutputMsg mp_output_msg = 6;
  if (this->has_mp_output_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mp_output_msg_);
  }

  // .xpilot.sr2_0.proto.MapFusionLanesForScuMsg mf_lanes_for_scu_msg = 7;
  if (this->has_mf_lanes_for_scu_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mf_lanes_for_scu_msg_);
  }

  // .xpilot.sr2_0.proto.StateManagementMsg sm_msg = 8;
  if (this->has_sm_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sm_msg_);
  }

  // .xpilot.sr2_0.proto.ActiveSafetyDebugMsg aeb_msg = 9;
  if (this->has_aeb_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aeb_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDOverallMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.SDOverallMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SDOverallMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SDOverallMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.SDOverallMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.SDOverallMsg)
    MergeFrom(*source);
  }
}

void SDOverallMsg::MergeFrom(const SDOverallMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.SDOverallMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sfbp_rwm_dds_msg()) {
    _internal_mutable_sfbp_rwm_dds_msg()->::xpilot::sr2_0::proto::SfbpRwmDdsMsg::MergeFrom(from._internal_sfbp_rwm_dds_msg());
  }
  if (from.has_online_local_map_msg()) {
    _internal_mutable_online_local_map_msg()->::xpilot::sr2_0::proto::OnlineLocalMapMsg::MergeFrom(from._internal_online_local_map_msg());
  }
  if (from.has_mf_localpose_msg()) {
    _internal_mutable_mf_localpose_msg()->::xpilot::sr2_0::proto::MfLocalPoseMsg::MergeFrom(from._internal_mf_localpose_msg());
  }
  if (from.has_localpose_msg()) {
    _internal_mutable_localpose_msg()->::xpilot::sr2_0::proto::LocalPoseInfoMsg::MergeFrom(from._internal_localpose_msg());
  }
  if (from.has_bp_hmi_output_msg()) {
    _internal_mutable_bp_hmi_output_msg()->::xpilot::sr2_0::proto::BPHMIOutputMsg::MergeFrom(from._internal_bp_hmi_output_msg());
  }
  if (from.has_mp_output_msg()) {
    _internal_mutable_mp_output_msg()->::xpilot::sr2_0::proto::MpOutputMsg::MergeFrom(from._internal_mp_output_msg());
  }
  if (from.has_mf_lanes_for_scu_msg()) {
    _internal_mutable_mf_lanes_for_scu_msg()->::xpilot::sr2_0::proto::MapFusionLanesForScuMsg::MergeFrom(from._internal_mf_lanes_for_scu_msg());
  }
  if (from.has_sm_msg()) {
    _internal_mutable_sm_msg()->::xpilot::sr2_0::proto::StateManagementMsg::MergeFrom(from._internal_sm_msg());
  }
  if (from.has_aeb_msg()) {
    _internal_mutable_aeb_msg()->::xpilot::sr2_0::proto::ActiveSafetyDebugMsg::MergeFrom(from._internal_aeb_msg());
  }
}

void SDOverallMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.SDOverallMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDOverallMsg::CopyFrom(const SDOverallMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.SDOverallMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDOverallMsg::IsInitialized() const {
  return true;
}

void SDOverallMsg::InternalSwap(SDOverallMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDOverallMsg, aeb_msg_)
      + sizeof(SDOverallMsg::aeb_msg_)
      - PROTOBUF_FIELD_OFFSET(SDOverallMsg, sfbp_rwm_dds_msg_)>(
          reinterpret_cast<char*>(&sfbp_rwm_dds_msg_),
          reinterpret_cast<char*>(&other->sfbp_rwm_dds_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SDOverallMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::SDOverallMsg* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::SDOverallMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::SDOverallMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
