// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mp_output/mp_output.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mp_5foutput_2fmp_5foutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mp_5foutput_2fmp_5foutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mp_5foutput_2fmp_5foutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mp_5foutput_2fmp_5foutput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mp_5foutput_2fmp_5foutput_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class MpOutputMsg;
class MpOutputMsgDefaultTypeInternal;
extern MpOutputMsgDefaultTypeInternal _MpOutputMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::MpOutputMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::MpOutputMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class MpOutputMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.MpOutputMsg) */ {
 public:
  inline MpOutputMsg() : MpOutputMsg(nullptr) {};
  virtual ~MpOutputMsg();

  MpOutputMsg(const MpOutputMsg& from);
  MpOutputMsg(MpOutputMsg&& from) noexcept
    : MpOutputMsg() {
    *this = ::std::move(from);
  }

  inline MpOutputMsg& operator=(const MpOutputMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpOutputMsg& operator=(MpOutputMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpOutputMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpOutputMsg* internal_default_instance() {
    return reinterpret_cast<const MpOutputMsg*>(
               &_MpOutputMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MpOutputMsg& a, MpOutputMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MpOutputMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MpOutputMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpOutputMsg* New() const final {
    return CreateMaybeMessage<MpOutputMsg>(nullptr);
  }

  MpOutputMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpOutputMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpOutputMsg& from);
  void MergeFrom(const MpOutputMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpOutputMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.MpOutputMsg";
  }
  protected:
  explicit MpOutputMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mp_5foutput_2fmp_5foutput_2eproto);
    return ::descriptor_table_mp_5foutput_2fmp_5foutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kBoudarysFieldNumber = 2,
    kVehicleStopPointFieldNumber = 4,
    kTrajectoryColorFieldNumber = 3,
  };
  // repeated .xpilot.sr2_0.proto.TrajectoryPointMsg points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrajectoryPointMsg >*
      mutable_points();
  private:
  const ::xpilot::sr2_0::proto::TrajectoryPointMsg& _internal_points(int index) const;
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* _internal_add_points();
  public:
  const ::xpilot::sr2_0::proto::TrajectoryPointMsg& points(int index) const;
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrajectoryPointMsg >&
      points() const;

  // repeated .xpilot.sr2_0.proto.BoundaryObject boudarys = 2;
  int boudarys_size() const;
  private:
  int _internal_boudarys_size() const;
  public:
  void clear_boudarys();
  ::xpilot::sr2_0::proto::BoundaryObject* mutable_boudarys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >*
      mutable_boudarys();
  private:
  const ::xpilot::sr2_0::proto::BoundaryObject& _internal_boudarys(int index) const;
  ::xpilot::sr2_0::proto::BoundaryObject* _internal_add_boudarys();
  public:
  const ::xpilot::sr2_0::proto::BoundaryObject& boudarys(int index) const;
  ::xpilot::sr2_0::proto::BoundaryObject* add_boudarys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >&
      boudarys() const;

  // .xpilot.sr2_0.proto.TrajectoryPointMsg vehicle_stop_point = 4;
  bool has_vehicle_stop_point() const;
  private:
  bool _internal_has_vehicle_stop_point() const;
  public:
  void clear_vehicle_stop_point();
  const ::xpilot::sr2_0::proto::TrajectoryPointMsg& vehicle_stop_point() const;
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* release_vehicle_stop_point();
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* mutable_vehicle_stop_point();
  void set_allocated_vehicle_stop_point(::xpilot::sr2_0::proto::TrajectoryPointMsg* vehicle_stop_point);
  private:
  const ::xpilot::sr2_0::proto::TrajectoryPointMsg& _internal_vehicle_stop_point() const;
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* _internal_mutable_vehicle_stop_point();
  public:
  void unsafe_arena_set_allocated_vehicle_stop_point(
      ::xpilot::sr2_0::proto::TrajectoryPointMsg* vehicle_stop_point);
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* unsafe_arena_release_vehicle_stop_point();

  // uint32 trajectory_color = 3;
  void clear_trajectory_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 trajectory_color() const;
  void set_trajectory_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trajectory_color() const;
  void _internal_set_trajectory_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.MpOutputMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrajectoryPointMsg > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject > boudarys_;
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* vehicle_stop_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trajectory_color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mp_5foutput_2fmp_5foutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MpOutputMsg

// repeated .xpilot.sr2_0.proto.TrajectoryPointMsg points = 1;
inline int MpOutputMsg::_internal_points_size() const {
  return points_.size();
}
inline int MpOutputMsg::points_size() const {
  return _internal_points_size();
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MpOutputMsg.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrajectoryPointMsg >*
MpOutputMsg::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.MpOutputMsg.points)
  return &points_;
}
inline const ::xpilot::sr2_0::proto::TrajectoryPointMsg& MpOutputMsg::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::xpilot::sr2_0::proto::TrajectoryPointMsg& MpOutputMsg::points(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MpOutputMsg.points)
  return _internal_points(index);
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::_internal_add_points() {
  return points_.Add();
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::add_points() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.MpOutputMsg.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::TrajectoryPointMsg >&
MpOutputMsg::points() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.MpOutputMsg.points)
  return points_;
}

// repeated .xpilot.sr2_0.proto.BoundaryObject boudarys = 2;
inline int MpOutputMsg::_internal_boudarys_size() const {
  return boudarys_.size();
}
inline int MpOutputMsg::boudarys_size() const {
  return _internal_boudarys_size();
}
inline ::xpilot::sr2_0::proto::BoundaryObject* MpOutputMsg::mutable_boudarys(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MpOutputMsg.boudarys)
  return boudarys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >*
MpOutputMsg::mutable_boudarys() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.MpOutputMsg.boudarys)
  return &boudarys_;
}
inline const ::xpilot::sr2_0::proto::BoundaryObject& MpOutputMsg::_internal_boudarys(int index) const {
  return boudarys_.Get(index);
}
inline const ::xpilot::sr2_0::proto::BoundaryObject& MpOutputMsg::boudarys(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MpOutputMsg.boudarys)
  return _internal_boudarys(index);
}
inline ::xpilot::sr2_0::proto::BoundaryObject* MpOutputMsg::_internal_add_boudarys() {
  return boudarys_.Add();
}
inline ::xpilot::sr2_0::proto::BoundaryObject* MpOutputMsg::add_boudarys() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.MpOutputMsg.boudarys)
  return _internal_add_boudarys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::BoundaryObject >&
MpOutputMsg::boudarys() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.MpOutputMsg.boudarys)
  return boudarys_;
}

// uint32 trajectory_color = 3;
inline void MpOutputMsg::clear_trajectory_color() {
  trajectory_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MpOutputMsg::_internal_trajectory_color() const {
  return trajectory_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MpOutputMsg::trajectory_color() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MpOutputMsg.trajectory_color)
  return _internal_trajectory_color();
}
inline void MpOutputMsg::_internal_set_trajectory_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trajectory_color_ = value;
}
inline void MpOutputMsg::set_trajectory_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trajectory_color(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.MpOutputMsg.trajectory_color)
}

// .xpilot.sr2_0.proto.TrajectoryPointMsg vehicle_stop_point = 4;
inline bool MpOutputMsg::_internal_has_vehicle_stop_point() const {
  return this != internal_default_instance() && vehicle_stop_point_ != nullptr;
}
inline bool MpOutputMsg::has_vehicle_stop_point() const {
  return _internal_has_vehicle_stop_point();
}
inline const ::xpilot::sr2_0::proto::TrajectoryPointMsg& MpOutputMsg::_internal_vehicle_stop_point() const {
  const ::xpilot::sr2_0::proto::TrajectoryPointMsg* p = vehicle_stop_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::TrajectoryPointMsg*>(
      &::xpilot::sr2_0::proto::_TrajectoryPointMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::TrajectoryPointMsg& MpOutputMsg::vehicle_stop_point() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MpOutputMsg.vehicle_stop_point)
  return _internal_vehicle_stop_point();
}
inline void MpOutputMsg::unsafe_arena_set_allocated_vehicle_stop_point(
    ::xpilot::sr2_0::proto::TrajectoryPointMsg* vehicle_stop_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_stop_point_);
  }
  vehicle_stop_point_ = vehicle_stop_point;
  if (vehicle_stop_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.MpOutputMsg.vehicle_stop_point)
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::release_vehicle_stop_point() {
  auto temp = unsafe_arena_release_vehicle_stop_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::unsafe_arena_release_vehicle_stop_point() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.MpOutputMsg.vehicle_stop_point)
  
  ::xpilot::sr2_0::proto::TrajectoryPointMsg* temp = vehicle_stop_point_;
  vehicle_stop_point_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::_internal_mutable_vehicle_stop_point() {
  
  if (vehicle_stop_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::TrajectoryPointMsg>(GetArena());
    vehicle_stop_point_ = p;
  }
  return vehicle_stop_point_;
}
inline ::xpilot::sr2_0::proto::TrajectoryPointMsg* MpOutputMsg::mutable_vehicle_stop_point() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MpOutputMsg.vehicle_stop_point)
  return _internal_mutable_vehicle_stop_point();
}
inline void MpOutputMsg::set_allocated_vehicle_stop_point(::xpilot::sr2_0::proto::TrajectoryPointMsg* vehicle_stop_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_stop_point_);
  }
  if (vehicle_stop_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_stop_point)->GetArena();
    if (message_arena != submessage_arena) {
      vehicle_stop_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_stop_point, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_stop_point_ = vehicle_stop_point;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.MpOutputMsg.vehicle_stop_point)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mp_5foutput_2fmp_5foutput_2eproto
