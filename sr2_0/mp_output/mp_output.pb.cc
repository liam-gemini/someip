// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mp_output/mp_output.proto

#include "mp_output/mp_output.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryObject_base_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryPointMsg_base_5fstruct_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class MpOutputMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpOutputMsg> _instance;
} _MpOutputMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
static void InitDefaultsscc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_MpOutputMsg_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::MpOutputMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::MpOutputMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto}, {
      &scc_info_TrajectoryPointMsg_base_5fstruct_2eproto.base,
      &scc_info_BoundaryObject_base_5fstruct_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mp_5foutput_2fmp_5foutput_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mp_5foutput_2fmp_5foutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mp_5foutput_2fmp_5foutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mp_5foutput_2fmp_5foutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MpOutputMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MpOutputMsg, points_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MpOutputMsg, boudarys_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MpOutputMsg, trajectory_color_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MpOutputMsg, vehicle_stop_point_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::MpOutputMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_MpOutputMsg_default_instance_),
};

const char descriptor_table_protodef_mp_5foutput_2fmp_5foutput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mp_output/mp_output.proto\022\022xpilot.sr2_"
  "0.proto\032\021base_struct.proto\"\331\001\n\013MpOutputM"
  "sg\0226\n\006points\030\001 \003(\0132&.xpilot.sr2_0.proto."
  "TrajectoryPointMsg\0224\n\010boudarys\030\002 \003(\0132\".x"
  "pilot.sr2_0.proto.BoundaryObject\022\030\n\020traj"
  "ectory_color\030\003 \001(\r\022B\n\022vehicle_stop_point"
  "\030\004 \001(\0132&.xpilot.sr2_0.proto.TrajectoryPo"
  "intMsgb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mp_5foutput_2fmp_5foutput_2eproto_deps[1] = {
  &::descriptor_table_base_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mp_5foutput_2fmp_5foutput_2eproto_sccs[1] = {
  &scc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mp_5foutput_2fmp_5foutput_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mp_5foutput_2fmp_5foutput_2eproto = {
  false, false, descriptor_table_protodef_mp_5foutput_2fmp_5foutput_2eproto, "mp_output/mp_output.proto", 294,
  &descriptor_table_mp_5foutput_2fmp_5foutput_2eproto_once, descriptor_table_mp_5foutput_2fmp_5foutput_2eproto_sccs, descriptor_table_mp_5foutput_2fmp_5foutput_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mp_5foutput_2fmp_5foutput_2eproto::offsets,
  file_level_metadata_mp_5foutput_2fmp_5foutput_2eproto, 1, file_level_enum_descriptors_mp_5foutput_2fmp_5foutput_2eproto, file_level_service_descriptors_mp_5foutput_2fmp_5foutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mp_5foutput_2fmp_5foutput_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mp_5foutput_2fmp_5foutput_2eproto)), true);
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

void MpOutputMsg::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_MpOutputMsg_default_instance_._instance.get_mutable()->vehicle_stop_point_ = const_cast< ::xpilot::sr2_0::proto::TrajectoryPointMsg*>(
      ::xpilot::sr2_0::proto::TrajectoryPointMsg::internal_default_instance());
}
class MpOutputMsg::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::TrajectoryPointMsg& vehicle_stop_point(const MpOutputMsg* msg);
};

const ::xpilot::sr2_0::proto::TrajectoryPointMsg&
MpOutputMsg::_Internal::vehicle_stop_point(const MpOutputMsg* msg) {
  return *msg->vehicle_stop_point_;
}
void MpOutputMsg::clear_points() {
  points_.Clear();
}
void MpOutputMsg::clear_boudarys() {
  boudarys_.Clear();
}
void MpOutputMsg::clear_vehicle_stop_point() {
  if (GetArena() == nullptr && vehicle_stop_point_ != nullptr) {
    delete vehicle_stop_point_;
  }
  vehicle_stop_point_ = nullptr;
}
MpOutputMsg::MpOutputMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena),
  boudarys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.MpOutputMsg)
}
MpOutputMsg::MpOutputMsg(const MpOutputMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_),
      boudarys_(from.boudarys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_stop_point()) {
    vehicle_stop_point_ = new ::xpilot::sr2_0::proto::TrajectoryPointMsg(*from.vehicle_stop_point_);
  } else {
    vehicle_stop_point_ = nullptr;
  }
  trajectory_color_ = from.trajectory_color_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.MpOutputMsg)
}

void MpOutputMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto.base);
  ::memset(&vehicle_stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_color_) -
      reinterpret_cast<char*>(&vehicle_stop_point_)) + sizeof(trajectory_color_));
}

MpOutputMsg::~MpOutputMsg() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.MpOutputMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MpOutputMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vehicle_stop_point_;
}

void MpOutputMsg::ArenaDtor(void* object) {
  MpOutputMsg* _this = reinterpret_cast< MpOutputMsg* >(object);
  (void)_this;
}
void MpOutputMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MpOutputMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpOutputMsg& MpOutputMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpOutputMsg_mp_5foutput_2fmp_5foutput_2eproto.base);
  return *internal_default_instance();
}


void MpOutputMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.MpOutputMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  boudarys_.Clear();
  if (GetArena() == nullptr && vehicle_stop_point_ != nullptr) {
    delete vehicle_stop_point_;
  }
  vehicle_stop_point_ = nullptr;
  trajectory_color_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MpOutputMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xpilot.sr2_0.proto.TrajectoryPointMsg points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.BoundaryObject boudarys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boudarys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 trajectory_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trajectory_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.TrajectoryPointMsg vehicle_stop_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_stop_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpOutputMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.MpOutputMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.TrajectoryPointMsg points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.BoundaryObject boudarys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boudarys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_boudarys(i), target, stream);
  }

  // uint32 trajectory_color = 3;
  if (this->trajectory_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_trajectory_color(), target);
  }

  // .xpilot.sr2_0.proto.TrajectoryPointMsg vehicle_stop_point = 4;
  if (this->has_vehicle_stop_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vehicle_stop_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.MpOutputMsg)
  return target;
}

size_t MpOutputMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.MpOutputMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.TrajectoryPointMsg points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xpilot.sr2_0.proto.BoundaryObject boudarys = 2;
  total_size += 1UL * this->_internal_boudarys_size();
  for (const auto& msg : this->boudarys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xpilot.sr2_0.proto.TrajectoryPointMsg vehicle_stop_point = 4;
  if (this->has_vehicle_stop_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_stop_point_);
  }

  // uint32 trajectory_color = 3;
  if (this->trajectory_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trajectory_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpOutputMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.MpOutputMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MpOutputMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpOutputMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.MpOutputMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.MpOutputMsg)
    MergeFrom(*source);
  }
}

void MpOutputMsg::MergeFrom(const MpOutputMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.MpOutputMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  boudarys_.MergeFrom(from.boudarys_);
  if (from.has_vehicle_stop_point()) {
    _internal_mutable_vehicle_stop_point()->::xpilot::sr2_0::proto::TrajectoryPointMsg::MergeFrom(from._internal_vehicle_stop_point());
  }
  if (from.trajectory_color() != 0) {
    _internal_set_trajectory_color(from._internal_trajectory_color());
  }
}

void MpOutputMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.MpOutputMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpOutputMsg::CopyFrom(const MpOutputMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.MpOutputMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpOutputMsg::IsInitialized() const {
  return true;
}

void MpOutputMsg::InternalSwap(MpOutputMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  boudarys_.InternalSwap(&other->boudarys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MpOutputMsg, trajectory_color_)
      + sizeof(MpOutputMsg::trajectory_color_)
      - PROTOBUF_FIELD_OFFSET(MpOutputMsg, vehicle_stop_point_)>(
          reinterpret_cast<char*>(&vehicle_stop_point_),
          reinterpret_cast<char*>(&other->vehicle_stop_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MpOutputMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::MpOutputMsg* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::MpOutputMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::MpOutputMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
