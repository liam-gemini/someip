// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sd_overall.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sd_5foverall_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sd_5foverall_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sensor_fusion/sensor_fusion.pb.h"
#include "online_map_fusion/online_local_map_fusion.pb.h"
#include "localpose/LocalPose.pb.h"
#include "mf_localpose/MfLocalPose.pb.h"
#include "bp_hmi_output/bp_hmi_output.pb.h"
#include "mp_output/mp_output.pb.h"
#include "map_fusion/mf_lanes_for_scu.pb.h"
#include "state_manage/state_manage.pb.h"
#include "aeb_debug/aeb_debug.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sd_5foverall_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sd_5foverall_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sd_5foverall_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class SDOverallMsg;
class SDOverallMsgDefaultTypeInternal;
extern SDOverallMsgDefaultTypeInternal _SDOverallMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::SDOverallMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::SDOverallMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class SDOverallMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.SDOverallMsg) */ {
 public:
  inline SDOverallMsg() : SDOverallMsg(nullptr) {};
  virtual ~SDOverallMsg();

  SDOverallMsg(const SDOverallMsg& from);
  SDOverallMsg(SDOverallMsg&& from) noexcept
    : SDOverallMsg() {
    *this = ::std::move(from);
  }

  inline SDOverallMsg& operator=(const SDOverallMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDOverallMsg& operator=(SDOverallMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDOverallMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDOverallMsg* internal_default_instance() {
    return reinterpret_cast<const SDOverallMsg*>(
               &_SDOverallMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SDOverallMsg& a, SDOverallMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SDOverallMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDOverallMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDOverallMsg* New() const final {
    return CreateMaybeMessage<SDOverallMsg>(nullptr);
  }

  SDOverallMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDOverallMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDOverallMsg& from);
  void MergeFrom(const SDOverallMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDOverallMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.SDOverallMsg";
  }
  protected:
  explicit SDOverallMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sd_5foverall_2eproto);
    return ::descriptor_table_sd_5foverall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSfbpRwmDdsMsgFieldNumber = 1,
    kOnlineLocalMapMsgFieldNumber = 2,
    kMfLocalposeMsgFieldNumber = 3,
    kLocalposeMsgFieldNumber = 4,
    kBpHmiOutputMsgFieldNumber = 5,
    kMpOutputMsgFieldNumber = 6,
    kMfLanesForScuMsgFieldNumber = 7,
    kSmMsgFieldNumber = 8,
    kAebMsgFieldNumber = 9,
  };
  // .xpilot.sr2_0.proto.SfbpRwmDdsMsg sfbp_rwm_dds_msg = 1;
  bool has_sfbp_rwm_dds_msg() const;
  private:
  bool _internal_has_sfbp_rwm_dds_msg() const;
  public:
  void clear_sfbp_rwm_dds_msg();
  const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg& sfbp_rwm_dds_msg() const;
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* release_sfbp_rwm_dds_msg();
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* mutable_sfbp_rwm_dds_msg();
  void set_allocated_sfbp_rwm_dds_msg(::xpilot::sr2_0::proto::SfbpRwmDdsMsg* sfbp_rwm_dds_msg);
  private:
  const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg& _internal_sfbp_rwm_dds_msg() const;
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* _internal_mutable_sfbp_rwm_dds_msg();
  public:
  void unsafe_arena_set_allocated_sfbp_rwm_dds_msg(
      ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* sfbp_rwm_dds_msg);
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* unsafe_arena_release_sfbp_rwm_dds_msg();

  // .xpilot.sr2_0.proto.OnlineLocalMapMsg online_local_map_msg = 2;
  bool has_online_local_map_msg() const;
  private:
  bool _internal_has_online_local_map_msg() const;
  public:
  void clear_online_local_map_msg();
  const ::xpilot::sr2_0::proto::OnlineLocalMapMsg& online_local_map_msg() const;
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg* release_online_local_map_msg();
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg* mutable_online_local_map_msg();
  void set_allocated_online_local_map_msg(::xpilot::sr2_0::proto::OnlineLocalMapMsg* online_local_map_msg);
  private:
  const ::xpilot::sr2_0::proto::OnlineLocalMapMsg& _internal_online_local_map_msg() const;
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg* _internal_mutable_online_local_map_msg();
  public:
  void unsafe_arena_set_allocated_online_local_map_msg(
      ::xpilot::sr2_0::proto::OnlineLocalMapMsg* online_local_map_msg);
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg* unsafe_arena_release_online_local_map_msg();

  // .xpilot.sr2_0.proto.MfLocalPoseMsg mf_localpose_msg = 3;
  bool has_mf_localpose_msg() const;
  private:
  bool _internal_has_mf_localpose_msg() const;
  public:
  void clear_mf_localpose_msg();
  const ::xpilot::sr2_0::proto::MfLocalPoseMsg& mf_localpose_msg() const;
  ::xpilot::sr2_0::proto::MfLocalPoseMsg* release_mf_localpose_msg();
  ::xpilot::sr2_0::proto::MfLocalPoseMsg* mutable_mf_localpose_msg();
  void set_allocated_mf_localpose_msg(::xpilot::sr2_0::proto::MfLocalPoseMsg* mf_localpose_msg);
  private:
  const ::xpilot::sr2_0::proto::MfLocalPoseMsg& _internal_mf_localpose_msg() const;
  ::xpilot::sr2_0::proto::MfLocalPoseMsg* _internal_mutable_mf_localpose_msg();
  public:
  void unsafe_arena_set_allocated_mf_localpose_msg(
      ::xpilot::sr2_0::proto::MfLocalPoseMsg* mf_localpose_msg);
  ::xpilot::sr2_0::proto::MfLocalPoseMsg* unsafe_arena_release_mf_localpose_msg();

  // .xpilot.sr2_0.proto.LocalPoseInfoMsg localpose_msg = 4;
  bool has_localpose_msg() const;
  private:
  bool _internal_has_localpose_msg() const;
  public:
  void clear_localpose_msg();
  const ::xpilot::sr2_0::proto::LocalPoseInfoMsg& localpose_msg() const;
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg* release_localpose_msg();
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg* mutable_localpose_msg();
  void set_allocated_localpose_msg(::xpilot::sr2_0::proto::LocalPoseInfoMsg* localpose_msg);
  private:
  const ::xpilot::sr2_0::proto::LocalPoseInfoMsg& _internal_localpose_msg() const;
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg* _internal_mutable_localpose_msg();
  public:
  void unsafe_arena_set_allocated_localpose_msg(
      ::xpilot::sr2_0::proto::LocalPoseInfoMsg* localpose_msg);
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg* unsafe_arena_release_localpose_msg();

  // .xpilot.sr2_0.proto.BPHMIOutputMsg bp_hmi_output_msg = 5;
  bool has_bp_hmi_output_msg() const;
  private:
  bool _internal_has_bp_hmi_output_msg() const;
  public:
  void clear_bp_hmi_output_msg();
  const ::xpilot::sr2_0::proto::BPHMIOutputMsg& bp_hmi_output_msg() const;
  ::xpilot::sr2_0::proto::BPHMIOutputMsg* release_bp_hmi_output_msg();
  ::xpilot::sr2_0::proto::BPHMIOutputMsg* mutable_bp_hmi_output_msg();
  void set_allocated_bp_hmi_output_msg(::xpilot::sr2_0::proto::BPHMIOutputMsg* bp_hmi_output_msg);
  private:
  const ::xpilot::sr2_0::proto::BPHMIOutputMsg& _internal_bp_hmi_output_msg() const;
  ::xpilot::sr2_0::proto::BPHMIOutputMsg* _internal_mutable_bp_hmi_output_msg();
  public:
  void unsafe_arena_set_allocated_bp_hmi_output_msg(
      ::xpilot::sr2_0::proto::BPHMIOutputMsg* bp_hmi_output_msg);
  ::xpilot::sr2_0::proto::BPHMIOutputMsg* unsafe_arena_release_bp_hmi_output_msg();

  // .xpilot.sr2_0.proto.MpOutputMsg mp_output_msg = 6;
  bool has_mp_output_msg() const;
  private:
  bool _internal_has_mp_output_msg() const;
  public:
  void clear_mp_output_msg();
  const ::xpilot::sr2_0::proto::MpOutputMsg& mp_output_msg() const;
  ::xpilot::sr2_0::proto::MpOutputMsg* release_mp_output_msg();
  ::xpilot::sr2_0::proto::MpOutputMsg* mutable_mp_output_msg();
  void set_allocated_mp_output_msg(::xpilot::sr2_0::proto::MpOutputMsg* mp_output_msg);
  private:
  const ::xpilot::sr2_0::proto::MpOutputMsg& _internal_mp_output_msg() const;
  ::xpilot::sr2_0::proto::MpOutputMsg* _internal_mutable_mp_output_msg();
  public:
  void unsafe_arena_set_allocated_mp_output_msg(
      ::xpilot::sr2_0::proto::MpOutputMsg* mp_output_msg);
  ::xpilot::sr2_0::proto::MpOutputMsg* unsafe_arena_release_mp_output_msg();

  // .xpilot.sr2_0.proto.MapFusionLanesForScuMsg mf_lanes_for_scu_msg = 7;
  bool has_mf_lanes_for_scu_msg() const;
  private:
  bool _internal_has_mf_lanes_for_scu_msg() const;
  public:
  void clear_mf_lanes_for_scu_msg();
  const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg& mf_lanes_for_scu_msg() const;
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* release_mf_lanes_for_scu_msg();
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* mutable_mf_lanes_for_scu_msg();
  void set_allocated_mf_lanes_for_scu_msg(::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* mf_lanes_for_scu_msg);
  private:
  const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg& _internal_mf_lanes_for_scu_msg() const;
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* _internal_mutable_mf_lanes_for_scu_msg();
  public:
  void unsafe_arena_set_allocated_mf_lanes_for_scu_msg(
      ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* mf_lanes_for_scu_msg);
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* unsafe_arena_release_mf_lanes_for_scu_msg();

  // .xpilot.sr2_0.proto.StateManagementMsg sm_msg = 8;
  bool has_sm_msg() const;
  private:
  bool _internal_has_sm_msg() const;
  public:
  void clear_sm_msg();
  const ::xpilot::sr2_0::proto::StateManagementMsg& sm_msg() const;
  ::xpilot::sr2_0::proto::StateManagementMsg* release_sm_msg();
  ::xpilot::sr2_0::proto::StateManagementMsg* mutable_sm_msg();
  void set_allocated_sm_msg(::xpilot::sr2_0::proto::StateManagementMsg* sm_msg);
  private:
  const ::xpilot::sr2_0::proto::StateManagementMsg& _internal_sm_msg() const;
  ::xpilot::sr2_0::proto::StateManagementMsg* _internal_mutable_sm_msg();
  public:
  void unsafe_arena_set_allocated_sm_msg(
      ::xpilot::sr2_0::proto::StateManagementMsg* sm_msg);
  ::xpilot::sr2_0::proto::StateManagementMsg* unsafe_arena_release_sm_msg();

  // .xpilot.sr2_0.proto.ActiveSafetyDebugMsg aeb_msg = 9;
  bool has_aeb_msg() const;
  private:
  bool _internal_has_aeb_msg() const;
  public:
  void clear_aeb_msg();
  const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg& aeb_msg() const;
  ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* release_aeb_msg();
  ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* mutable_aeb_msg();
  void set_allocated_aeb_msg(::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* aeb_msg);
  private:
  const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg& _internal_aeb_msg() const;
  ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* _internal_mutable_aeb_msg();
  public:
  void unsafe_arena_set_allocated_aeb_msg(
      ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* aeb_msg);
  ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* unsafe_arena_release_aeb_msg();

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.SDOverallMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* sfbp_rwm_dds_msg_;
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg* online_local_map_msg_;
  ::xpilot::sr2_0::proto::MfLocalPoseMsg* mf_localpose_msg_;
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg* localpose_msg_;
  ::xpilot::sr2_0::proto::BPHMIOutputMsg* bp_hmi_output_msg_;
  ::xpilot::sr2_0::proto::MpOutputMsg* mp_output_msg_;
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* mf_lanes_for_scu_msg_;
  ::xpilot::sr2_0::proto::StateManagementMsg* sm_msg_;
  ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* aeb_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sd_5foverall_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SDOverallMsg

// .xpilot.sr2_0.proto.SfbpRwmDdsMsg sfbp_rwm_dds_msg = 1;
inline bool SDOverallMsg::_internal_has_sfbp_rwm_dds_msg() const {
  return this != internal_default_instance() && sfbp_rwm_dds_msg_ != nullptr;
}
inline bool SDOverallMsg::has_sfbp_rwm_dds_msg() const {
  return _internal_has_sfbp_rwm_dds_msg();
}
inline const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg& SDOverallMsg::_internal_sfbp_rwm_dds_msg() const {
  const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* p = sfbp_rwm_dds_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg*>(
      &::xpilot::sr2_0::proto::_SfbpRwmDdsMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::SfbpRwmDdsMsg& SDOverallMsg::sfbp_rwm_dds_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.sfbp_rwm_dds_msg)
  return _internal_sfbp_rwm_dds_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_sfbp_rwm_dds_msg(
    ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* sfbp_rwm_dds_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sfbp_rwm_dds_msg_);
  }
  sfbp_rwm_dds_msg_ = sfbp_rwm_dds_msg;
  if (sfbp_rwm_dds_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.sfbp_rwm_dds_msg)
}
inline ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* SDOverallMsg::release_sfbp_rwm_dds_msg() {
  auto temp = unsafe_arena_release_sfbp_rwm_dds_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* SDOverallMsg::unsafe_arena_release_sfbp_rwm_dds_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.sfbp_rwm_dds_msg)
  
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* temp = sfbp_rwm_dds_msg_;
  sfbp_rwm_dds_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* SDOverallMsg::_internal_mutable_sfbp_rwm_dds_msg() {
  
  if (sfbp_rwm_dds_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::SfbpRwmDdsMsg>(GetArena());
    sfbp_rwm_dds_msg_ = p;
  }
  return sfbp_rwm_dds_msg_;
}
inline ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* SDOverallMsg::mutable_sfbp_rwm_dds_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.sfbp_rwm_dds_msg)
  return _internal_mutable_sfbp_rwm_dds_msg();
}
inline void SDOverallMsg::set_allocated_sfbp_rwm_dds_msg(::xpilot::sr2_0::proto::SfbpRwmDdsMsg* sfbp_rwm_dds_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sfbp_rwm_dds_msg_);
  }
  if (sfbp_rwm_dds_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sfbp_rwm_dds_msg)->GetArena();
    if (message_arena != submessage_arena) {
      sfbp_rwm_dds_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sfbp_rwm_dds_msg, submessage_arena);
    }
    
  } else {
    
  }
  sfbp_rwm_dds_msg_ = sfbp_rwm_dds_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.sfbp_rwm_dds_msg)
}

// .xpilot.sr2_0.proto.OnlineLocalMapMsg online_local_map_msg = 2;
inline bool SDOverallMsg::_internal_has_online_local_map_msg() const {
  return this != internal_default_instance() && online_local_map_msg_ != nullptr;
}
inline bool SDOverallMsg::has_online_local_map_msg() const {
  return _internal_has_online_local_map_msg();
}
inline const ::xpilot::sr2_0::proto::OnlineLocalMapMsg& SDOverallMsg::_internal_online_local_map_msg() const {
  const ::xpilot::sr2_0::proto::OnlineLocalMapMsg* p = online_local_map_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::OnlineLocalMapMsg*>(
      &::xpilot::sr2_0::proto::_OnlineLocalMapMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::OnlineLocalMapMsg& SDOverallMsg::online_local_map_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.online_local_map_msg)
  return _internal_online_local_map_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_online_local_map_msg(
    ::xpilot::sr2_0::proto::OnlineLocalMapMsg* online_local_map_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(online_local_map_msg_);
  }
  online_local_map_msg_ = online_local_map_msg;
  if (online_local_map_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.online_local_map_msg)
}
inline ::xpilot::sr2_0::proto::OnlineLocalMapMsg* SDOverallMsg::release_online_local_map_msg() {
  auto temp = unsafe_arena_release_online_local_map_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::OnlineLocalMapMsg* SDOverallMsg::unsafe_arena_release_online_local_map_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.online_local_map_msg)
  
  ::xpilot::sr2_0::proto::OnlineLocalMapMsg* temp = online_local_map_msg_;
  online_local_map_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::OnlineLocalMapMsg* SDOverallMsg::_internal_mutable_online_local_map_msg() {
  
  if (online_local_map_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::OnlineLocalMapMsg>(GetArena());
    online_local_map_msg_ = p;
  }
  return online_local_map_msg_;
}
inline ::xpilot::sr2_0::proto::OnlineLocalMapMsg* SDOverallMsg::mutable_online_local_map_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.online_local_map_msg)
  return _internal_mutable_online_local_map_msg();
}
inline void SDOverallMsg::set_allocated_online_local_map_msg(::xpilot::sr2_0::proto::OnlineLocalMapMsg* online_local_map_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(online_local_map_msg_);
  }
  if (online_local_map_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(online_local_map_msg)->GetArena();
    if (message_arena != submessage_arena) {
      online_local_map_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, online_local_map_msg, submessage_arena);
    }
    
  } else {
    
  }
  online_local_map_msg_ = online_local_map_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.online_local_map_msg)
}

// .xpilot.sr2_0.proto.MfLocalPoseMsg mf_localpose_msg = 3;
inline bool SDOverallMsg::_internal_has_mf_localpose_msg() const {
  return this != internal_default_instance() && mf_localpose_msg_ != nullptr;
}
inline bool SDOverallMsg::has_mf_localpose_msg() const {
  return _internal_has_mf_localpose_msg();
}
inline const ::xpilot::sr2_0::proto::MfLocalPoseMsg& SDOverallMsg::_internal_mf_localpose_msg() const {
  const ::xpilot::sr2_0::proto::MfLocalPoseMsg* p = mf_localpose_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::MfLocalPoseMsg*>(
      &::xpilot::sr2_0::proto::_MfLocalPoseMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::MfLocalPoseMsg& SDOverallMsg::mf_localpose_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.mf_localpose_msg)
  return _internal_mf_localpose_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_mf_localpose_msg(
    ::xpilot::sr2_0::proto::MfLocalPoseMsg* mf_localpose_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_localpose_msg_);
  }
  mf_localpose_msg_ = mf_localpose_msg;
  if (mf_localpose_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.mf_localpose_msg)
}
inline ::xpilot::sr2_0::proto::MfLocalPoseMsg* SDOverallMsg::release_mf_localpose_msg() {
  auto temp = unsafe_arena_release_mf_localpose_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::MfLocalPoseMsg* SDOverallMsg::unsafe_arena_release_mf_localpose_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.mf_localpose_msg)
  
  ::xpilot::sr2_0::proto::MfLocalPoseMsg* temp = mf_localpose_msg_;
  mf_localpose_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::MfLocalPoseMsg* SDOverallMsg::_internal_mutable_mf_localpose_msg() {
  
  if (mf_localpose_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::MfLocalPoseMsg>(GetArena());
    mf_localpose_msg_ = p;
  }
  return mf_localpose_msg_;
}
inline ::xpilot::sr2_0::proto::MfLocalPoseMsg* SDOverallMsg::mutable_mf_localpose_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.mf_localpose_msg)
  return _internal_mutable_mf_localpose_msg();
}
inline void SDOverallMsg::set_allocated_mf_localpose_msg(::xpilot::sr2_0::proto::MfLocalPoseMsg* mf_localpose_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_localpose_msg_);
  }
  if (mf_localpose_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_localpose_msg)->GetArena();
    if (message_arena != submessage_arena) {
      mf_localpose_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mf_localpose_msg, submessage_arena);
    }
    
  } else {
    
  }
  mf_localpose_msg_ = mf_localpose_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.mf_localpose_msg)
}

// .xpilot.sr2_0.proto.LocalPoseInfoMsg localpose_msg = 4;
inline bool SDOverallMsg::_internal_has_localpose_msg() const {
  return this != internal_default_instance() && localpose_msg_ != nullptr;
}
inline bool SDOverallMsg::has_localpose_msg() const {
  return _internal_has_localpose_msg();
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfoMsg& SDOverallMsg::_internal_localpose_msg() const {
  const ::xpilot::sr2_0::proto::LocalPoseInfoMsg* p = localpose_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LocalPoseInfoMsg*>(
      &::xpilot::sr2_0::proto::_LocalPoseInfoMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfoMsg& SDOverallMsg::localpose_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.localpose_msg)
  return _internal_localpose_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_localpose_msg(
    ::xpilot::sr2_0::proto::LocalPoseInfoMsg* localpose_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localpose_msg_);
  }
  localpose_msg_ = localpose_msg;
  if (localpose_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.localpose_msg)
}
inline ::xpilot::sr2_0::proto::LocalPoseInfoMsg* SDOverallMsg::release_localpose_msg() {
  auto temp = unsafe_arena_release_localpose_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfoMsg* SDOverallMsg::unsafe_arena_release_localpose_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.localpose_msg)
  
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg* temp = localpose_msg_;
  localpose_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfoMsg* SDOverallMsg::_internal_mutable_localpose_msg() {
  
  if (localpose_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseInfoMsg>(GetArena());
    localpose_msg_ = p;
  }
  return localpose_msg_;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfoMsg* SDOverallMsg::mutable_localpose_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.localpose_msg)
  return _internal_mutable_localpose_msg();
}
inline void SDOverallMsg::set_allocated_localpose_msg(::xpilot::sr2_0::proto::LocalPoseInfoMsg* localpose_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localpose_msg_);
  }
  if (localpose_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localpose_msg)->GetArena();
    if (message_arena != submessage_arena) {
      localpose_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localpose_msg, submessage_arena);
    }
    
  } else {
    
  }
  localpose_msg_ = localpose_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.localpose_msg)
}

// .xpilot.sr2_0.proto.BPHMIOutputMsg bp_hmi_output_msg = 5;
inline bool SDOverallMsg::_internal_has_bp_hmi_output_msg() const {
  return this != internal_default_instance() && bp_hmi_output_msg_ != nullptr;
}
inline bool SDOverallMsg::has_bp_hmi_output_msg() const {
  return _internal_has_bp_hmi_output_msg();
}
inline const ::xpilot::sr2_0::proto::BPHMIOutputMsg& SDOverallMsg::_internal_bp_hmi_output_msg() const {
  const ::xpilot::sr2_0::proto::BPHMIOutputMsg* p = bp_hmi_output_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::BPHMIOutputMsg*>(
      &::xpilot::sr2_0::proto::_BPHMIOutputMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::BPHMIOutputMsg& SDOverallMsg::bp_hmi_output_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.bp_hmi_output_msg)
  return _internal_bp_hmi_output_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_bp_hmi_output_msg(
    ::xpilot::sr2_0::proto::BPHMIOutputMsg* bp_hmi_output_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bp_hmi_output_msg_);
  }
  bp_hmi_output_msg_ = bp_hmi_output_msg;
  if (bp_hmi_output_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.bp_hmi_output_msg)
}
inline ::xpilot::sr2_0::proto::BPHMIOutputMsg* SDOverallMsg::release_bp_hmi_output_msg() {
  auto temp = unsafe_arena_release_bp_hmi_output_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::BPHMIOutputMsg* SDOverallMsg::unsafe_arena_release_bp_hmi_output_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.bp_hmi_output_msg)
  
  ::xpilot::sr2_0::proto::BPHMIOutputMsg* temp = bp_hmi_output_msg_;
  bp_hmi_output_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::BPHMIOutputMsg* SDOverallMsg::_internal_mutable_bp_hmi_output_msg() {
  
  if (bp_hmi_output_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::BPHMIOutputMsg>(GetArena());
    bp_hmi_output_msg_ = p;
  }
  return bp_hmi_output_msg_;
}
inline ::xpilot::sr2_0::proto::BPHMIOutputMsg* SDOverallMsg::mutable_bp_hmi_output_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.bp_hmi_output_msg)
  return _internal_mutable_bp_hmi_output_msg();
}
inline void SDOverallMsg::set_allocated_bp_hmi_output_msg(::xpilot::sr2_0::proto::BPHMIOutputMsg* bp_hmi_output_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bp_hmi_output_msg_);
  }
  if (bp_hmi_output_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bp_hmi_output_msg)->GetArena();
    if (message_arena != submessage_arena) {
      bp_hmi_output_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bp_hmi_output_msg, submessage_arena);
    }
    
  } else {
    
  }
  bp_hmi_output_msg_ = bp_hmi_output_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.bp_hmi_output_msg)
}

// .xpilot.sr2_0.proto.MpOutputMsg mp_output_msg = 6;
inline bool SDOverallMsg::_internal_has_mp_output_msg() const {
  return this != internal_default_instance() && mp_output_msg_ != nullptr;
}
inline bool SDOverallMsg::has_mp_output_msg() const {
  return _internal_has_mp_output_msg();
}
inline const ::xpilot::sr2_0::proto::MpOutputMsg& SDOverallMsg::_internal_mp_output_msg() const {
  const ::xpilot::sr2_0::proto::MpOutputMsg* p = mp_output_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::MpOutputMsg*>(
      &::xpilot::sr2_0::proto::_MpOutputMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::MpOutputMsg& SDOverallMsg::mp_output_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.mp_output_msg)
  return _internal_mp_output_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_mp_output_msg(
    ::xpilot::sr2_0::proto::MpOutputMsg* mp_output_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mp_output_msg_);
  }
  mp_output_msg_ = mp_output_msg;
  if (mp_output_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.mp_output_msg)
}
inline ::xpilot::sr2_0::proto::MpOutputMsg* SDOverallMsg::release_mp_output_msg() {
  auto temp = unsafe_arena_release_mp_output_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::MpOutputMsg* SDOverallMsg::unsafe_arena_release_mp_output_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.mp_output_msg)
  
  ::xpilot::sr2_0::proto::MpOutputMsg* temp = mp_output_msg_;
  mp_output_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::MpOutputMsg* SDOverallMsg::_internal_mutable_mp_output_msg() {
  
  if (mp_output_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::MpOutputMsg>(GetArena());
    mp_output_msg_ = p;
  }
  return mp_output_msg_;
}
inline ::xpilot::sr2_0::proto::MpOutputMsg* SDOverallMsg::mutable_mp_output_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.mp_output_msg)
  return _internal_mutable_mp_output_msg();
}
inline void SDOverallMsg::set_allocated_mp_output_msg(::xpilot::sr2_0::proto::MpOutputMsg* mp_output_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mp_output_msg_);
  }
  if (mp_output_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mp_output_msg)->GetArena();
    if (message_arena != submessage_arena) {
      mp_output_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mp_output_msg, submessage_arena);
    }
    
  } else {
    
  }
  mp_output_msg_ = mp_output_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.mp_output_msg)
}

// .xpilot.sr2_0.proto.MapFusionLanesForScuMsg mf_lanes_for_scu_msg = 7;
inline bool SDOverallMsg::_internal_has_mf_lanes_for_scu_msg() const {
  return this != internal_default_instance() && mf_lanes_for_scu_msg_ != nullptr;
}
inline bool SDOverallMsg::has_mf_lanes_for_scu_msg() const {
  return _internal_has_mf_lanes_for_scu_msg();
}
inline const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg& SDOverallMsg::_internal_mf_lanes_for_scu_msg() const {
  const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* p = mf_lanes_for_scu_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg*>(
      &::xpilot::sr2_0::proto::_MapFusionLanesForScuMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg& SDOverallMsg::mf_lanes_for_scu_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.mf_lanes_for_scu_msg)
  return _internal_mf_lanes_for_scu_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_mf_lanes_for_scu_msg(
    ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* mf_lanes_for_scu_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_lanes_for_scu_msg_);
  }
  mf_lanes_for_scu_msg_ = mf_lanes_for_scu_msg;
  if (mf_lanes_for_scu_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.mf_lanes_for_scu_msg)
}
inline ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* SDOverallMsg::release_mf_lanes_for_scu_msg() {
  auto temp = unsafe_arena_release_mf_lanes_for_scu_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* SDOverallMsg::unsafe_arena_release_mf_lanes_for_scu_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.mf_lanes_for_scu_msg)
  
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* temp = mf_lanes_for_scu_msg_;
  mf_lanes_for_scu_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* SDOverallMsg::_internal_mutable_mf_lanes_for_scu_msg() {
  
  if (mf_lanes_for_scu_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::MapFusionLanesForScuMsg>(GetArena());
    mf_lanes_for_scu_msg_ = p;
  }
  return mf_lanes_for_scu_msg_;
}
inline ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* SDOverallMsg::mutable_mf_lanes_for_scu_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.mf_lanes_for_scu_msg)
  return _internal_mutable_mf_lanes_for_scu_msg();
}
inline void SDOverallMsg::set_allocated_mf_lanes_for_scu_msg(::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* mf_lanes_for_scu_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_lanes_for_scu_msg_);
  }
  if (mf_lanes_for_scu_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_lanes_for_scu_msg)->GetArena();
    if (message_arena != submessage_arena) {
      mf_lanes_for_scu_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mf_lanes_for_scu_msg, submessage_arena);
    }
    
  } else {
    
  }
  mf_lanes_for_scu_msg_ = mf_lanes_for_scu_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.mf_lanes_for_scu_msg)
}

// .xpilot.sr2_0.proto.StateManagementMsg sm_msg = 8;
inline bool SDOverallMsg::_internal_has_sm_msg() const {
  return this != internal_default_instance() && sm_msg_ != nullptr;
}
inline bool SDOverallMsg::has_sm_msg() const {
  return _internal_has_sm_msg();
}
inline const ::xpilot::sr2_0::proto::StateManagementMsg& SDOverallMsg::_internal_sm_msg() const {
  const ::xpilot::sr2_0::proto::StateManagementMsg* p = sm_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::StateManagementMsg*>(
      &::xpilot::sr2_0::proto::_StateManagementMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::StateManagementMsg& SDOverallMsg::sm_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.sm_msg)
  return _internal_sm_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_sm_msg(
    ::xpilot::sr2_0::proto::StateManagementMsg* sm_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sm_msg_);
  }
  sm_msg_ = sm_msg;
  if (sm_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.sm_msg)
}
inline ::xpilot::sr2_0::proto::StateManagementMsg* SDOverallMsg::release_sm_msg() {
  auto temp = unsafe_arena_release_sm_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::StateManagementMsg* SDOverallMsg::unsafe_arena_release_sm_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.sm_msg)
  
  ::xpilot::sr2_0::proto::StateManagementMsg* temp = sm_msg_;
  sm_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::StateManagementMsg* SDOverallMsg::_internal_mutable_sm_msg() {
  
  if (sm_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::StateManagementMsg>(GetArena());
    sm_msg_ = p;
  }
  return sm_msg_;
}
inline ::xpilot::sr2_0::proto::StateManagementMsg* SDOverallMsg::mutable_sm_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.sm_msg)
  return _internal_mutable_sm_msg();
}
inline void SDOverallMsg::set_allocated_sm_msg(::xpilot::sr2_0::proto::StateManagementMsg* sm_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sm_msg_);
  }
  if (sm_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sm_msg)->GetArena();
    if (message_arena != submessage_arena) {
      sm_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sm_msg, submessage_arena);
    }
    
  } else {
    
  }
  sm_msg_ = sm_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.sm_msg)
}

// .xpilot.sr2_0.proto.ActiveSafetyDebugMsg aeb_msg = 9;
inline bool SDOverallMsg::_internal_has_aeb_msg() const {
  return this != internal_default_instance() && aeb_msg_ != nullptr;
}
inline bool SDOverallMsg::has_aeb_msg() const {
  return _internal_has_aeb_msg();
}
inline const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg& SDOverallMsg::_internal_aeb_msg() const {
  const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* p = aeb_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg*>(
      &::xpilot::sr2_0::proto::_ActiveSafetyDebugMsg_default_instance_);
}
inline const ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg& SDOverallMsg::aeb_msg() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SDOverallMsg.aeb_msg)
  return _internal_aeb_msg();
}
inline void SDOverallMsg::unsafe_arena_set_allocated_aeb_msg(
    ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* aeb_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aeb_msg_);
  }
  aeb_msg_ = aeb_msg;
  if (aeb_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.aeb_msg)
}
inline ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* SDOverallMsg::release_aeb_msg() {
  auto temp = unsafe_arena_release_aeb_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* SDOverallMsg::unsafe_arena_release_aeb_msg() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SDOverallMsg.aeb_msg)
  
  ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* temp = aeb_msg_;
  aeb_msg_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* SDOverallMsg::_internal_mutable_aeb_msg() {
  
  if (aeb_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::ActiveSafetyDebugMsg>(GetArena());
    aeb_msg_ = p;
  }
  return aeb_msg_;
}
inline ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* SDOverallMsg::mutable_aeb_msg() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SDOverallMsg.aeb_msg)
  return _internal_mutable_aeb_msg();
}
inline void SDOverallMsg::set_allocated_aeb_msg(::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* aeb_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aeb_msg_);
  }
  if (aeb_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aeb_msg)->GetArena();
    if (message_arena != submessage_arena) {
      aeb_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aeb_msg, submessage_arena);
    }
    
  } else {
    
  }
  aeb_msg_ = aeb_msg;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SDOverallMsg.aeb_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sd_5foverall_2eproto
