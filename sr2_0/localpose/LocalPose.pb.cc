// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localpose/LocalPose.proto

#include "localpose/LocalPose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_localpose_2fLocalPose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localpose_2fLocalPose_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector6d_base_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wgs_base_5fstruct_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class GlobalPoseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalPoseInfo> _instance;
} _GlobalPoseInfo_default_instance_;
class LocalPoseCovInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPoseCovInfo> _instance;
} _LocalPoseCovInfo_default_instance_;
class LocalPoseInfoMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPoseInfoMsg> _instance;
} _LocalPoseInfoMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
static void InitDefaultsscc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_GlobalPoseInfo_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::GlobalPoseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::GlobalPoseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto}, {
      &scc_info_Wgs_base_5fstruct_2eproto.base,
      &scc_info_Vector6d_base_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_LocalPoseCovInfo_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::LocalPoseCovInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::LocalPoseCovInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto}, {
      &scc_info_Vector6d_base_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_LocalPoseInfoMsg_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::LocalPoseInfoMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::LocalPoseInfoMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto}, {
      &scc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto.base,
      &scc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_localpose_2fLocalPose_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_localpose_2fLocalPose_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_localpose_2fLocalPose_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_localpose_2fLocalPose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, world_pose_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, orientation_cov_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, speed_cov_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::GlobalPoseInfo, loc_acc_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LocalPoseCovInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LocalPoseCovInfo, position_cov_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LocalPoseInfoMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LocalPoseInfoMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LocalPoseInfoMsg, global_pose_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LocalPoseInfoMsg, smooth_pose_cov_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::GlobalPoseInfo)},
  { 11, -1, sizeof(::xpilot::sr2_0::proto::LocalPoseCovInfo)},
  { 17, -1, sizeof(::xpilot::sr2_0::proto::LocalPoseInfoMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_GlobalPoseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_LocalPoseCovInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_LocalPoseInfoMsg_default_instance_),
};

const char descriptor_table_protodef_localpose_2fLocalPose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031localpose/LocalPose.proto\022\022xpilot.sr2_"
  "0.proto\032\021base_struct.proto\"\302\001\n\016GlobalPos"
  "eInfo\022\022\n\ntime_stamp\030\001 \001(\004\022+\n\nworld_pose\030"
  "\002 \001(\0132\027.xpilot.sr2_0.proto.Wgs\0225\n\017orient"
  "ation_cov\030\003 \001(\0132\034.xpilot.sr2_0.proto.Vec"
  "tor6d\022\r\n\005speed\030\004 \001(\004\022\021\n\tspeed_cov\030\005 \001(\004\022"
  "\026\n\016loc_acc_status\030\006 \001(\r\"F\n\020LocalPoseCovI"
  "nfo\0222\n\014position_cov\030\001 \001(\0132\034.xpilot.sr2_0"
  ".proto.Vector6d\"\235\001\n\020LocalPoseInfoMsg\022\021\n\t"
  "timestamp\030\001 \001(\004\0227\n\013global_pose\030\002 \001(\0132\".x"
  "pilot.sr2_0.proto.GlobalPoseInfo\022=\n\017smoo"
  "th_pose_cov\030\003 \001(\0132$.xpilot.sr2_0.proto.L"
  "ocalPoseCovInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_localpose_2fLocalPose_2eproto_deps[1] = {
  &::descriptor_table_base_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_localpose_2fLocalPose_2eproto_sccs[3] = {
  &scc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto.base,
  &scc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto.base,
  &scc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_localpose_2fLocalPose_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localpose_2fLocalPose_2eproto = {
  false, false, descriptor_table_protodef_localpose_2fLocalPose_2eproto, "localpose/LocalPose.proto", 503,
  &descriptor_table_localpose_2fLocalPose_2eproto_once, descriptor_table_localpose_2fLocalPose_2eproto_sccs, descriptor_table_localpose_2fLocalPose_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_localpose_2fLocalPose_2eproto::offsets,
  file_level_metadata_localpose_2fLocalPose_2eproto, 3, file_level_enum_descriptors_localpose_2fLocalPose_2eproto, file_level_service_descriptors_localpose_2fLocalPose_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_localpose_2fLocalPose_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_localpose_2fLocalPose_2eproto)), true);
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

void GlobalPoseInfo::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_GlobalPoseInfo_default_instance_._instance.get_mutable()->world_pose_ = const_cast< ::xpilot::sr2_0::proto::Wgs*>(
      ::xpilot::sr2_0::proto::Wgs::internal_default_instance());
  ::xpilot::sr2_0::proto::_GlobalPoseInfo_default_instance_._instance.get_mutable()->orientation_cov_ = const_cast< ::xpilot::sr2_0::proto::Vector6d*>(
      ::xpilot::sr2_0::proto::Vector6d::internal_default_instance());
}
class GlobalPoseInfo::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Wgs& world_pose(const GlobalPoseInfo* msg);
  static const ::xpilot::sr2_0::proto::Vector6d& orientation_cov(const GlobalPoseInfo* msg);
};

const ::xpilot::sr2_0::proto::Wgs&
GlobalPoseInfo::_Internal::world_pose(const GlobalPoseInfo* msg) {
  return *msg->world_pose_;
}
const ::xpilot::sr2_0::proto::Vector6d&
GlobalPoseInfo::_Internal::orientation_cov(const GlobalPoseInfo* msg) {
  return *msg->orientation_cov_;
}
void GlobalPoseInfo::clear_world_pose() {
  if (GetArena() == nullptr && world_pose_ != nullptr) {
    delete world_pose_;
  }
  world_pose_ = nullptr;
}
void GlobalPoseInfo::clear_orientation_cov() {
  if (GetArena() == nullptr && orientation_cov_ != nullptr) {
    delete orientation_cov_;
  }
  orientation_cov_ = nullptr;
}
GlobalPoseInfo::GlobalPoseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.GlobalPoseInfo)
}
GlobalPoseInfo::GlobalPoseInfo(const GlobalPoseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_pose()) {
    world_pose_ = new ::xpilot::sr2_0::proto::Wgs(*from.world_pose_);
  } else {
    world_pose_ = nullptr;
  }
  if (from._internal_has_orientation_cov()) {
    orientation_cov_ = new ::xpilot::sr2_0::proto::Vector6d(*from.orientation_cov_);
  } else {
    orientation_cov_ = nullptr;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&loc_acc_status_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(loc_acc_status_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.GlobalPoseInfo)
}

void GlobalPoseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto.base);
  ::memset(&world_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loc_acc_status_) -
      reinterpret_cast<char*>(&world_pose_)) + sizeof(loc_acc_status_));
}

GlobalPoseInfo::~GlobalPoseInfo() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.GlobalPoseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalPoseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete world_pose_;
  if (this != internal_default_instance()) delete orientation_cov_;
}

void GlobalPoseInfo::ArenaDtor(void* object) {
  GlobalPoseInfo* _this = reinterpret_cast< GlobalPoseInfo* >(object);
  (void)_this;
}
void GlobalPoseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalPoseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalPoseInfo& GlobalPoseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalPoseInfo_localpose_2fLocalPose_2eproto.base);
  return *internal_default_instance();
}


void GlobalPoseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && world_pose_ != nullptr) {
    delete world_pose_;
  }
  world_pose_ = nullptr;
  if (GetArena() == nullptr && orientation_cov_ != nullptr) {
    delete orientation_cov_;
  }
  orientation_cov_ = nullptr;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loc_acc_status_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(loc_acc_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalPoseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Wgs world_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Vector6d orientation_cov = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 speed_cov = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          speed_cov_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 loc_acc_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          loc_acc_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalPoseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_stamp(), target);
  }

  // .xpilot.sr2_0.proto.Wgs world_pose = 2;
  if (this->has_world_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::world_pose(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Vector6d orientation_cov = 3;
  if (this->has_orientation_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation_cov(this), target, stream);
  }

  // uint64 speed = 4;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_speed(), target);
  }

  // uint64 speed_cov = 5;
  if (this->speed_cov() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_speed_cov(), target);
  }

  // uint32 loc_acc_status = 6;
  if (this->loc_acc_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_loc_acc_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.GlobalPoseInfo)
  return target;
}

size_t GlobalPoseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Wgs world_pose = 2;
  if (this->has_world_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_pose_);
  }

  // .xpilot.sr2_0.proto.Vector6d orientation_cov = 3;
  if (this->has_orientation_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_cov_);
  }

  // uint64 time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_stamp());
  }

  // uint64 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_speed());
  }

  // uint64 speed_cov = 5;
  if (this->speed_cov() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_speed_cov());
  }

  // uint32 loc_acc_status = 6;
  if (this->loc_acc_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loc_acc_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalPoseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalPoseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalPoseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.GlobalPoseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.GlobalPoseInfo)
    MergeFrom(*source);
  }
}

void GlobalPoseInfo::MergeFrom(const GlobalPoseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_world_pose()) {
    _internal_mutable_world_pose()->::xpilot::sr2_0::proto::Wgs::MergeFrom(from._internal_world_pose());
  }
  if (from.has_orientation_cov()) {
    _internal_mutable_orientation_cov()->::xpilot::sr2_0::proto::Vector6d::MergeFrom(from._internal_orientation_cov());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.speed_cov() != 0) {
    _internal_set_speed_cov(from._internal_speed_cov());
  }
  if (from.loc_acc_status() != 0) {
    _internal_set_loc_acc_status(from._internal_loc_acc_status());
  }
}

void GlobalPoseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalPoseInfo::CopyFrom(const GlobalPoseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.GlobalPoseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalPoseInfo::IsInitialized() const {
  return true;
}

void GlobalPoseInfo::InternalSwap(GlobalPoseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalPoseInfo, loc_acc_status_)
      + sizeof(GlobalPoseInfo::loc_acc_status_)
      - PROTOBUF_FIELD_OFFSET(GlobalPoseInfo, world_pose_)>(
          reinterpret_cast<char*>(&world_pose_),
          reinterpret_cast<char*>(&other->world_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalPoseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPoseCovInfo::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_LocalPoseCovInfo_default_instance_._instance.get_mutable()->position_cov_ = const_cast< ::xpilot::sr2_0::proto::Vector6d*>(
      ::xpilot::sr2_0::proto::Vector6d::internal_default_instance());
}
class LocalPoseCovInfo::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Vector6d& position_cov(const LocalPoseCovInfo* msg);
};

const ::xpilot::sr2_0::proto::Vector6d&
LocalPoseCovInfo::_Internal::position_cov(const LocalPoseCovInfo* msg) {
  return *msg->position_cov_;
}
void LocalPoseCovInfo::clear_position_cov() {
  if (GetArena() == nullptr && position_cov_ != nullptr) {
    delete position_cov_;
  }
  position_cov_ = nullptr;
}
LocalPoseCovInfo::LocalPoseCovInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.LocalPoseCovInfo)
}
LocalPoseCovInfo::LocalPoseCovInfo(const LocalPoseCovInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_cov()) {
    position_cov_ = new ::xpilot::sr2_0::proto::Vector6d(*from.position_cov_);
  } else {
    position_cov_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.LocalPoseCovInfo)
}

void LocalPoseCovInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto.base);
  position_cov_ = nullptr;
}

LocalPoseCovInfo::~LocalPoseCovInfo() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.LocalPoseCovInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalPoseCovInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_cov_;
}

void LocalPoseCovInfo::ArenaDtor(void* object) {
  LocalPoseCovInfo* _this = reinterpret_cast< LocalPoseCovInfo* >(object);
  (void)_this;
}
void LocalPoseCovInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalPoseCovInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPoseCovInfo& LocalPoseCovInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPoseCovInfo_localpose_2fLocalPose_2eproto.base);
  return *internal_default_instance();
}


void LocalPoseCovInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_cov_ != nullptr) {
    delete position_cov_;
  }
  position_cov_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalPoseCovInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.sr2_0.proto.Vector6d position_cov = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPoseCovInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Vector6d position_cov = 1;
  if (this->has_position_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_cov(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.LocalPoseCovInfo)
  return target;
}

size_t LocalPoseCovInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Vector6d position_cov = 1;
  if (this->has_position_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_cov_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPoseCovInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPoseCovInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPoseCovInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.LocalPoseCovInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.LocalPoseCovInfo)
    MergeFrom(*source);
  }
}

void LocalPoseCovInfo::MergeFrom(const LocalPoseCovInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_cov()) {
    _internal_mutable_position_cov()->::xpilot::sr2_0::proto::Vector6d::MergeFrom(from._internal_position_cov());
  }
}

void LocalPoseCovInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPoseCovInfo::CopyFrom(const LocalPoseCovInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.LocalPoseCovInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPoseCovInfo::IsInitialized() const {
  return true;
}

void LocalPoseCovInfo::InternalSwap(LocalPoseCovInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(position_cov_, other->position_cov_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPoseCovInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPoseInfoMsg::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_LocalPoseInfoMsg_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::xpilot::sr2_0::proto::GlobalPoseInfo*>(
      ::xpilot::sr2_0::proto::GlobalPoseInfo::internal_default_instance());
  ::xpilot::sr2_0::proto::_LocalPoseInfoMsg_default_instance_._instance.get_mutable()->smooth_pose_cov_ = const_cast< ::xpilot::sr2_0::proto::LocalPoseCovInfo*>(
      ::xpilot::sr2_0::proto::LocalPoseCovInfo::internal_default_instance());
}
class LocalPoseInfoMsg::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::GlobalPoseInfo& global_pose(const LocalPoseInfoMsg* msg);
  static const ::xpilot::sr2_0::proto::LocalPoseCovInfo& smooth_pose_cov(const LocalPoseInfoMsg* msg);
};

const ::xpilot::sr2_0::proto::GlobalPoseInfo&
LocalPoseInfoMsg::_Internal::global_pose(const LocalPoseInfoMsg* msg) {
  return *msg->global_pose_;
}
const ::xpilot::sr2_0::proto::LocalPoseCovInfo&
LocalPoseInfoMsg::_Internal::smooth_pose_cov(const LocalPoseInfoMsg* msg) {
  return *msg->smooth_pose_cov_;
}
LocalPoseInfoMsg::LocalPoseInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.LocalPoseInfoMsg)
}
LocalPoseInfoMsg::LocalPoseInfoMsg(const LocalPoseInfoMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_global_pose()) {
    global_pose_ = new ::xpilot::sr2_0::proto::GlobalPoseInfo(*from.global_pose_);
  } else {
    global_pose_ = nullptr;
  }
  if (from._internal_has_smooth_pose_cov()) {
    smooth_pose_cov_ = new ::xpilot::sr2_0::proto::LocalPoseCovInfo(*from.smooth_pose_cov_);
  } else {
    smooth_pose_cov_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.LocalPoseInfoMsg)
}

void LocalPoseInfoMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto.base);
  ::memset(&global_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&global_pose_)) + sizeof(timestamp_));
}

LocalPoseInfoMsg::~LocalPoseInfoMsg() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalPoseInfoMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete global_pose_;
  if (this != internal_default_instance()) delete smooth_pose_cov_;
}

void LocalPoseInfoMsg::ArenaDtor(void* object) {
  LocalPoseInfoMsg* _this = reinterpret_cast< LocalPoseInfoMsg* >(object);
  (void)_this;
}
void LocalPoseInfoMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalPoseInfoMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPoseInfoMsg& LocalPoseInfoMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPoseInfoMsg_localpose_2fLocalPose_2eproto.base);
  return *internal_default_instance();
}


void LocalPoseInfoMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
  if (GetArena() == nullptr && smooth_pose_cov_ != nullptr) {
    delete smooth_pose_cov_;
  }
  smooth_pose_cov_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalPoseInfoMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.GlobalPoseInfo global_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LocalPoseCovInfo smooth_pose_cov = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_smooth_pose_cov(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPoseInfoMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .xpilot.sr2_0.proto.GlobalPoseInfo global_pose = 2;
  if (this->has_global_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::global_pose(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LocalPoseCovInfo smooth_pose_cov = 3;
  if (this->has_smooth_pose_cov()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::smooth_pose_cov(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  return target;
}

size_t LocalPoseInfoMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.GlobalPoseInfo global_pose = 2;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  // .xpilot.sr2_0.proto.LocalPoseCovInfo smooth_pose_cov = 3;
  if (this->has_smooth_pose_cov()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smooth_pose_cov_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPoseInfoMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPoseInfoMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPoseInfoMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.LocalPoseInfoMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.LocalPoseInfoMsg)
    MergeFrom(*source);
  }
}

void LocalPoseInfoMsg::MergeFrom(const LocalPoseInfoMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global_pose()) {
    _internal_mutable_global_pose()->::xpilot::sr2_0::proto::GlobalPoseInfo::MergeFrom(from._internal_global_pose());
  }
  if (from.has_smooth_pose_cov()) {
    _internal_mutable_smooth_pose_cov()->::xpilot::sr2_0::proto::LocalPoseCovInfo::MergeFrom(from._internal_smooth_pose_cov());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void LocalPoseInfoMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPoseInfoMsg::CopyFrom(const LocalPoseInfoMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.LocalPoseInfoMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPoseInfoMsg::IsInitialized() const {
  return true;
}

void LocalPoseInfoMsg::InternalSwap(LocalPoseInfoMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalPoseInfoMsg, timestamp_)
      + sizeof(LocalPoseInfoMsg::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LocalPoseInfoMsg, global_pose_)>(
          reinterpret_cast<char*>(&global_pose_),
          reinterpret_cast<char*>(&other->global_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPoseInfoMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::GlobalPoseInfo* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::GlobalPoseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::GlobalPoseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::LocalPoseCovInfo* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::LocalPoseCovInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::LocalPoseCovInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::LocalPoseInfoMsg* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::LocalPoseInfoMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::LocalPoseInfoMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
