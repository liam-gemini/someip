// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localpose/LocalPose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localpose_2fLocalPose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localpose_2fLocalPose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localpose_2fLocalPose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localpose_2fLocalPose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localpose_2fLocalPose_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class GlobalPoseInfo;
class GlobalPoseInfoDefaultTypeInternal;
extern GlobalPoseInfoDefaultTypeInternal _GlobalPoseInfo_default_instance_;
class LocalPoseCovInfo;
class LocalPoseCovInfoDefaultTypeInternal;
extern LocalPoseCovInfoDefaultTypeInternal _LocalPoseCovInfo_default_instance_;
class LocalPoseInfoMsg;
class LocalPoseInfoMsgDefaultTypeInternal;
extern LocalPoseInfoMsgDefaultTypeInternal _LocalPoseInfoMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::GlobalPoseInfo* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::GlobalPoseInfo>(Arena*);
template<> ::xpilot::sr2_0::proto::LocalPoseCovInfo* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseCovInfo>(Arena*);
template<> ::xpilot::sr2_0::proto::LocalPoseInfoMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseInfoMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class GlobalPoseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.GlobalPoseInfo) */ {
 public:
  inline GlobalPoseInfo() : GlobalPoseInfo(nullptr) {};
  virtual ~GlobalPoseInfo();

  GlobalPoseInfo(const GlobalPoseInfo& from);
  GlobalPoseInfo(GlobalPoseInfo&& from) noexcept
    : GlobalPoseInfo() {
    *this = ::std::move(from);
  }

  inline GlobalPoseInfo& operator=(const GlobalPoseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalPoseInfo& operator=(GlobalPoseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalPoseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPoseInfo* internal_default_instance() {
    return reinterpret_cast<const GlobalPoseInfo*>(
               &_GlobalPoseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlobalPoseInfo& a, GlobalPoseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalPoseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalPoseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalPoseInfo* New() const final {
    return CreateMaybeMessage<GlobalPoseInfo>(nullptr);
  }

  GlobalPoseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalPoseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalPoseInfo& from);
  void MergeFrom(const GlobalPoseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalPoseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.GlobalPoseInfo";
  }
  protected:
  explicit GlobalPoseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localpose_2fLocalPose_2eproto);
    return ::descriptor_table_localpose_2fLocalPose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldPoseFieldNumber = 2,
    kOrientationCovFieldNumber = 3,
    kTimeStampFieldNumber = 1,
    kSpeedFieldNumber = 4,
    kSpeedCovFieldNumber = 5,
    kLocAccStatusFieldNumber = 6,
  };
  // .xpilot.sr2_0.proto.Wgs world_pose = 2;
  bool has_world_pose() const;
  private:
  bool _internal_has_world_pose() const;
  public:
  void clear_world_pose();
  const ::xpilot::sr2_0::proto::Wgs& world_pose() const;
  ::xpilot::sr2_0::proto::Wgs* release_world_pose();
  ::xpilot::sr2_0::proto::Wgs* mutable_world_pose();
  void set_allocated_world_pose(::xpilot::sr2_0::proto::Wgs* world_pose);
  private:
  const ::xpilot::sr2_0::proto::Wgs& _internal_world_pose() const;
  ::xpilot::sr2_0::proto::Wgs* _internal_mutable_world_pose();
  public:
  void unsafe_arena_set_allocated_world_pose(
      ::xpilot::sr2_0::proto::Wgs* world_pose);
  ::xpilot::sr2_0::proto::Wgs* unsafe_arena_release_world_pose();

  // .xpilot.sr2_0.proto.Vector6d orientation_cov = 3;
  bool has_orientation_cov() const;
  private:
  bool _internal_has_orientation_cov() const;
  public:
  void clear_orientation_cov();
  const ::xpilot::sr2_0::proto::Vector6d& orientation_cov() const;
  ::xpilot::sr2_0::proto::Vector6d* release_orientation_cov();
  ::xpilot::sr2_0::proto::Vector6d* mutable_orientation_cov();
  void set_allocated_orientation_cov(::xpilot::sr2_0::proto::Vector6d* orientation_cov);
  private:
  const ::xpilot::sr2_0::proto::Vector6d& _internal_orientation_cov() const;
  ::xpilot::sr2_0::proto::Vector6d* _internal_mutable_orientation_cov();
  public:
  void unsafe_arena_set_allocated_orientation_cov(
      ::xpilot::sr2_0::proto::Vector6d* orientation_cov);
  ::xpilot::sr2_0::proto::Vector6d* unsafe_arena_release_orientation_cov();

  // uint64 time_stamp = 1;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 speed = 4;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint64 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 speed_cov = 5;
  void clear_speed_cov();
  ::PROTOBUF_NAMESPACE_ID::uint64 speed_cov() const;
  void set_speed_cov(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_speed_cov() const;
  void _internal_set_speed_cov(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 loc_acc_status = 6;
  void clear_loc_acc_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 loc_acc_status() const;
  void set_loc_acc_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loc_acc_status() const;
  void _internal_set_loc_acc_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.GlobalPoseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Wgs* world_pose_;
  ::xpilot::sr2_0::proto::Vector6d* orientation_cov_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 speed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 speed_cov_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loc_acc_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localpose_2fLocalPose_2eproto;
};
// -------------------------------------------------------------------

class LocalPoseCovInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.LocalPoseCovInfo) */ {
 public:
  inline LocalPoseCovInfo() : LocalPoseCovInfo(nullptr) {};
  virtual ~LocalPoseCovInfo();

  LocalPoseCovInfo(const LocalPoseCovInfo& from);
  LocalPoseCovInfo(LocalPoseCovInfo&& from) noexcept
    : LocalPoseCovInfo() {
    *this = ::std::move(from);
  }

  inline LocalPoseCovInfo& operator=(const LocalPoseCovInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPoseCovInfo& operator=(LocalPoseCovInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPoseCovInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPoseCovInfo* internal_default_instance() {
    return reinterpret_cast<const LocalPoseCovInfo*>(
               &_LocalPoseCovInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalPoseCovInfo& a, LocalPoseCovInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPoseCovInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPoseCovInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPoseCovInfo* New() const final {
    return CreateMaybeMessage<LocalPoseCovInfo>(nullptr);
  }

  LocalPoseCovInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPoseCovInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPoseCovInfo& from);
  void MergeFrom(const LocalPoseCovInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPoseCovInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.LocalPoseCovInfo";
  }
  protected:
  explicit LocalPoseCovInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localpose_2fLocalPose_2eproto);
    return ::descriptor_table_localpose_2fLocalPose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionCovFieldNumber = 1,
  };
  // .xpilot.sr2_0.proto.Vector6d position_cov = 1;
  bool has_position_cov() const;
  private:
  bool _internal_has_position_cov() const;
  public:
  void clear_position_cov();
  const ::xpilot::sr2_0::proto::Vector6d& position_cov() const;
  ::xpilot::sr2_0::proto::Vector6d* release_position_cov();
  ::xpilot::sr2_0::proto::Vector6d* mutable_position_cov();
  void set_allocated_position_cov(::xpilot::sr2_0::proto::Vector6d* position_cov);
  private:
  const ::xpilot::sr2_0::proto::Vector6d& _internal_position_cov() const;
  ::xpilot::sr2_0::proto::Vector6d* _internal_mutable_position_cov();
  public:
  void unsafe_arena_set_allocated_position_cov(
      ::xpilot::sr2_0::proto::Vector6d* position_cov);
  ::xpilot::sr2_0::proto::Vector6d* unsafe_arena_release_position_cov();

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.LocalPoseCovInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Vector6d* position_cov_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localpose_2fLocalPose_2eproto;
};
// -------------------------------------------------------------------

class LocalPoseInfoMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.LocalPoseInfoMsg) */ {
 public:
  inline LocalPoseInfoMsg() : LocalPoseInfoMsg(nullptr) {};
  virtual ~LocalPoseInfoMsg();

  LocalPoseInfoMsg(const LocalPoseInfoMsg& from);
  LocalPoseInfoMsg(LocalPoseInfoMsg&& from) noexcept
    : LocalPoseInfoMsg() {
    *this = ::std::move(from);
  }

  inline LocalPoseInfoMsg& operator=(const LocalPoseInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPoseInfoMsg& operator=(LocalPoseInfoMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPoseInfoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPoseInfoMsg* internal_default_instance() {
    return reinterpret_cast<const LocalPoseInfoMsg*>(
               &_LocalPoseInfoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalPoseInfoMsg& a, LocalPoseInfoMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPoseInfoMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalPoseInfoMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPoseInfoMsg* New() const final {
    return CreateMaybeMessage<LocalPoseInfoMsg>(nullptr);
  }

  LocalPoseInfoMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPoseInfoMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPoseInfoMsg& from);
  void MergeFrom(const LocalPoseInfoMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPoseInfoMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.LocalPoseInfoMsg";
  }
  protected:
  explicit LocalPoseInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localpose_2fLocalPose_2eproto);
    return ::descriptor_table_localpose_2fLocalPose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalPoseFieldNumber = 2,
    kSmoothPoseCovFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // .xpilot.sr2_0.proto.GlobalPoseInfo global_pose = 2;
  bool has_global_pose() const;
  private:
  bool _internal_has_global_pose() const;
  public:
  void clear_global_pose();
  const ::xpilot::sr2_0::proto::GlobalPoseInfo& global_pose() const;
  ::xpilot::sr2_0::proto::GlobalPoseInfo* release_global_pose();
  ::xpilot::sr2_0::proto::GlobalPoseInfo* mutable_global_pose();
  void set_allocated_global_pose(::xpilot::sr2_0::proto::GlobalPoseInfo* global_pose);
  private:
  const ::xpilot::sr2_0::proto::GlobalPoseInfo& _internal_global_pose() const;
  ::xpilot::sr2_0::proto::GlobalPoseInfo* _internal_mutable_global_pose();
  public:
  void unsafe_arena_set_allocated_global_pose(
      ::xpilot::sr2_0::proto::GlobalPoseInfo* global_pose);
  ::xpilot::sr2_0::proto::GlobalPoseInfo* unsafe_arena_release_global_pose();

  // .xpilot.sr2_0.proto.LocalPoseCovInfo smooth_pose_cov = 3;
  bool has_smooth_pose_cov() const;
  private:
  bool _internal_has_smooth_pose_cov() const;
  public:
  void clear_smooth_pose_cov();
  const ::xpilot::sr2_0::proto::LocalPoseCovInfo& smooth_pose_cov() const;
  ::xpilot::sr2_0::proto::LocalPoseCovInfo* release_smooth_pose_cov();
  ::xpilot::sr2_0::proto::LocalPoseCovInfo* mutable_smooth_pose_cov();
  void set_allocated_smooth_pose_cov(::xpilot::sr2_0::proto::LocalPoseCovInfo* smooth_pose_cov);
  private:
  const ::xpilot::sr2_0::proto::LocalPoseCovInfo& _internal_smooth_pose_cov() const;
  ::xpilot::sr2_0::proto::LocalPoseCovInfo* _internal_mutable_smooth_pose_cov();
  public:
  void unsafe_arena_set_allocated_smooth_pose_cov(
      ::xpilot::sr2_0::proto::LocalPoseCovInfo* smooth_pose_cov);
  ::xpilot::sr2_0::proto::LocalPoseCovInfo* unsafe_arena_release_smooth_pose_cov();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.LocalPoseInfoMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::GlobalPoseInfo* global_pose_;
  ::xpilot::sr2_0::proto::LocalPoseCovInfo* smooth_pose_cov_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localpose_2fLocalPose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalPoseInfo

// uint64 time_stamp = 1;
inline void GlobalPoseInfo::clear_time_stamp() {
  time_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GlobalPoseInfo::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GlobalPoseInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.GlobalPoseInfo.time_stamp)
  return _internal_time_stamp();
}
inline void GlobalPoseInfo::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_stamp_ = value;
}
inline void GlobalPoseInfo::set_time_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.GlobalPoseInfo.time_stamp)
}

// .xpilot.sr2_0.proto.Wgs world_pose = 2;
inline bool GlobalPoseInfo::_internal_has_world_pose() const {
  return this != internal_default_instance() && world_pose_ != nullptr;
}
inline bool GlobalPoseInfo::has_world_pose() const {
  return _internal_has_world_pose();
}
inline const ::xpilot::sr2_0::proto::Wgs& GlobalPoseInfo::_internal_world_pose() const {
  const ::xpilot::sr2_0::proto::Wgs* p = world_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Wgs*>(
      &::xpilot::sr2_0::proto::_Wgs_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Wgs& GlobalPoseInfo::world_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.GlobalPoseInfo.world_pose)
  return _internal_world_pose();
}
inline void GlobalPoseInfo::unsafe_arena_set_allocated_world_pose(
    ::xpilot::sr2_0::proto::Wgs* world_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_pose_);
  }
  world_pose_ = world_pose;
  if (world_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.GlobalPoseInfo.world_pose)
}
inline ::xpilot::sr2_0::proto::Wgs* GlobalPoseInfo::release_world_pose() {
  auto temp = unsafe_arena_release_world_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Wgs* GlobalPoseInfo::unsafe_arena_release_world_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.GlobalPoseInfo.world_pose)
  
  ::xpilot::sr2_0::proto::Wgs* temp = world_pose_;
  world_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Wgs* GlobalPoseInfo::_internal_mutable_world_pose() {
  
  if (world_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Wgs>(GetArena());
    world_pose_ = p;
  }
  return world_pose_;
}
inline ::xpilot::sr2_0::proto::Wgs* GlobalPoseInfo::mutable_world_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.GlobalPoseInfo.world_pose)
  return _internal_mutable_world_pose();
}
inline void GlobalPoseInfo::set_allocated_world_pose(::xpilot::sr2_0::proto::Wgs* world_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_pose_);
  }
  if (world_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_pose)->GetArena();
    if (message_arena != submessage_arena) {
      world_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_pose, submessage_arena);
    }
    
  } else {
    
  }
  world_pose_ = world_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.GlobalPoseInfo.world_pose)
}

// .xpilot.sr2_0.proto.Vector6d orientation_cov = 3;
inline bool GlobalPoseInfo::_internal_has_orientation_cov() const {
  return this != internal_default_instance() && orientation_cov_ != nullptr;
}
inline bool GlobalPoseInfo::has_orientation_cov() const {
  return _internal_has_orientation_cov();
}
inline const ::xpilot::sr2_0::proto::Vector6d& GlobalPoseInfo::_internal_orientation_cov() const {
  const ::xpilot::sr2_0::proto::Vector6d* p = orientation_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Vector6d*>(
      &::xpilot::sr2_0::proto::_Vector6d_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Vector6d& GlobalPoseInfo::orientation_cov() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.GlobalPoseInfo.orientation_cov)
  return _internal_orientation_cov();
}
inline void GlobalPoseInfo::unsafe_arena_set_allocated_orientation_cov(
    ::xpilot::sr2_0::proto::Vector6d* orientation_cov) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_cov_);
  }
  orientation_cov_ = orientation_cov;
  if (orientation_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.GlobalPoseInfo.orientation_cov)
}
inline ::xpilot::sr2_0::proto::Vector6d* GlobalPoseInfo::release_orientation_cov() {
  auto temp = unsafe_arena_release_orientation_cov();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector6d* GlobalPoseInfo::unsafe_arena_release_orientation_cov() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.GlobalPoseInfo.orientation_cov)
  
  ::xpilot::sr2_0::proto::Vector6d* temp = orientation_cov_;
  orientation_cov_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector6d* GlobalPoseInfo::_internal_mutable_orientation_cov() {
  
  if (orientation_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Vector6d>(GetArena());
    orientation_cov_ = p;
  }
  return orientation_cov_;
}
inline ::xpilot::sr2_0::proto::Vector6d* GlobalPoseInfo::mutable_orientation_cov() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.GlobalPoseInfo.orientation_cov)
  return _internal_mutable_orientation_cov();
}
inline void GlobalPoseInfo::set_allocated_orientation_cov(::xpilot::sr2_0::proto::Vector6d* orientation_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_cov_);
  }
  if (orientation_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_cov)->GetArena();
    if (message_arena != submessage_arena) {
      orientation_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_cov, submessage_arena);
    }
    
  } else {
    
  }
  orientation_cov_ = orientation_cov;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.GlobalPoseInfo.orientation_cov)
}

// uint64 speed = 4;
inline void GlobalPoseInfo::clear_speed() {
  speed_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GlobalPoseInfo::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GlobalPoseInfo::speed() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.GlobalPoseInfo.speed)
  return _internal_speed();
}
inline void GlobalPoseInfo::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  speed_ = value;
}
inline void GlobalPoseInfo::set_speed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.GlobalPoseInfo.speed)
}

// uint64 speed_cov = 5;
inline void GlobalPoseInfo::clear_speed_cov() {
  speed_cov_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GlobalPoseInfo::_internal_speed_cov() const {
  return speed_cov_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GlobalPoseInfo::speed_cov() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.GlobalPoseInfo.speed_cov)
  return _internal_speed_cov();
}
inline void GlobalPoseInfo::_internal_set_speed_cov(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  speed_cov_ = value;
}
inline void GlobalPoseInfo::set_speed_cov(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_speed_cov(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.GlobalPoseInfo.speed_cov)
}

// uint32 loc_acc_status = 6;
inline void GlobalPoseInfo::clear_loc_acc_status() {
  loc_acc_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalPoseInfo::_internal_loc_acc_status() const {
  return loc_acc_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalPoseInfo::loc_acc_status() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.GlobalPoseInfo.loc_acc_status)
  return _internal_loc_acc_status();
}
inline void GlobalPoseInfo::_internal_set_loc_acc_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  loc_acc_status_ = value;
}
inline void GlobalPoseInfo::set_loc_acc_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loc_acc_status(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.GlobalPoseInfo.loc_acc_status)
}

// -------------------------------------------------------------------

// LocalPoseCovInfo

// .xpilot.sr2_0.proto.Vector6d position_cov = 1;
inline bool LocalPoseCovInfo::_internal_has_position_cov() const {
  return this != internal_default_instance() && position_cov_ != nullptr;
}
inline bool LocalPoseCovInfo::has_position_cov() const {
  return _internal_has_position_cov();
}
inline const ::xpilot::sr2_0::proto::Vector6d& LocalPoseCovInfo::_internal_position_cov() const {
  const ::xpilot::sr2_0::proto::Vector6d* p = position_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Vector6d*>(
      &::xpilot::sr2_0::proto::_Vector6d_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Vector6d& LocalPoseCovInfo::position_cov() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LocalPoseCovInfo.position_cov)
  return _internal_position_cov();
}
inline void LocalPoseCovInfo::unsafe_arena_set_allocated_position_cov(
    ::xpilot::sr2_0::proto::Vector6d* position_cov) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_cov_);
  }
  position_cov_ = position_cov;
  if (position_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LocalPoseCovInfo.position_cov)
}
inline ::xpilot::sr2_0::proto::Vector6d* LocalPoseCovInfo::release_position_cov() {
  auto temp = unsafe_arena_release_position_cov();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector6d* LocalPoseCovInfo::unsafe_arena_release_position_cov() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LocalPoseCovInfo.position_cov)
  
  ::xpilot::sr2_0::proto::Vector6d* temp = position_cov_;
  position_cov_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Vector6d* LocalPoseCovInfo::_internal_mutable_position_cov() {
  
  if (position_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Vector6d>(GetArena());
    position_cov_ = p;
  }
  return position_cov_;
}
inline ::xpilot::sr2_0::proto::Vector6d* LocalPoseCovInfo::mutable_position_cov() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LocalPoseCovInfo.position_cov)
  return _internal_mutable_position_cov();
}
inline void LocalPoseCovInfo::set_allocated_position_cov(::xpilot::sr2_0::proto::Vector6d* position_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_cov_);
  }
  if (position_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_cov)->GetArena();
    if (message_arena != submessage_arena) {
      position_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_cov, submessage_arena);
    }
    
  } else {
    
  }
  position_cov_ = position_cov;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LocalPoseCovInfo.position_cov)
}

// -------------------------------------------------------------------

// LocalPoseInfoMsg

// uint64 timestamp = 1;
inline void LocalPoseInfoMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalPoseInfoMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalPoseInfoMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LocalPoseInfoMsg.timestamp)
  return _internal_timestamp();
}
inline void LocalPoseInfoMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void LocalPoseInfoMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LocalPoseInfoMsg.timestamp)
}

// .xpilot.sr2_0.proto.GlobalPoseInfo global_pose = 2;
inline bool LocalPoseInfoMsg::_internal_has_global_pose() const {
  return this != internal_default_instance() && global_pose_ != nullptr;
}
inline bool LocalPoseInfoMsg::has_global_pose() const {
  return _internal_has_global_pose();
}
inline void LocalPoseInfoMsg::clear_global_pose() {
  if (GetArena() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::GlobalPoseInfo& LocalPoseInfoMsg::_internal_global_pose() const {
  const ::xpilot::sr2_0::proto::GlobalPoseInfo* p = global_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::GlobalPoseInfo*>(
      &::xpilot::sr2_0::proto::_GlobalPoseInfo_default_instance_);
}
inline const ::xpilot::sr2_0::proto::GlobalPoseInfo& LocalPoseInfoMsg::global_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LocalPoseInfoMsg.global_pose)
  return _internal_global_pose();
}
inline void LocalPoseInfoMsg::unsafe_arena_set_allocated_global_pose(
    ::xpilot::sr2_0::proto::GlobalPoseInfo* global_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_pose_);
  }
  global_pose_ = global_pose;
  if (global_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LocalPoseInfoMsg.global_pose)
}
inline ::xpilot::sr2_0::proto::GlobalPoseInfo* LocalPoseInfoMsg::release_global_pose() {
  auto temp = unsafe_arena_release_global_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::GlobalPoseInfo* LocalPoseInfoMsg::unsafe_arena_release_global_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LocalPoseInfoMsg.global_pose)
  
  ::xpilot::sr2_0::proto::GlobalPoseInfo* temp = global_pose_;
  global_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::GlobalPoseInfo* LocalPoseInfoMsg::_internal_mutable_global_pose() {
  
  if (global_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::GlobalPoseInfo>(GetArena());
    global_pose_ = p;
  }
  return global_pose_;
}
inline ::xpilot::sr2_0::proto::GlobalPoseInfo* LocalPoseInfoMsg::mutable_global_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LocalPoseInfoMsg.global_pose)
  return _internal_mutable_global_pose();
}
inline void LocalPoseInfoMsg::set_allocated_global_pose(::xpilot::sr2_0::proto::GlobalPoseInfo* global_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete global_pose_;
  }
  if (global_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(global_pose);
    if (message_arena != submessage_arena) {
      global_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_pose, submessage_arena);
    }
    
  } else {
    
  }
  global_pose_ = global_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LocalPoseInfoMsg.global_pose)
}

// .xpilot.sr2_0.proto.LocalPoseCovInfo smooth_pose_cov = 3;
inline bool LocalPoseInfoMsg::_internal_has_smooth_pose_cov() const {
  return this != internal_default_instance() && smooth_pose_cov_ != nullptr;
}
inline bool LocalPoseInfoMsg::has_smooth_pose_cov() const {
  return _internal_has_smooth_pose_cov();
}
inline void LocalPoseInfoMsg::clear_smooth_pose_cov() {
  if (GetArena() == nullptr && smooth_pose_cov_ != nullptr) {
    delete smooth_pose_cov_;
  }
  smooth_pose_cov_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LocalPoseCovInfo& LocalPoseInfoMsg::_internal_smooth_pose_cov() const {
  const ::xpilot::sr2_0::proto::LocalPoseCovInfo* p = smooth_pose_cov_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LocalPoseCovInfo*>(
      &::xpilot::sr2_0::proto::_LocalPoseCovInfo_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LocalPoseCovInfo& LocalPoseInfoMsg::smooth_pose_cov() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LocalPoseInfoMsg.smooth_pose_cov)
  return _internal_smooth_pose_cov();
}
inline void LocalPoseInfoMsg::unsafe_arena_set_allocated_smooth_pose_cov(
    ::xpilot::sr2_0::proto::LocalPoseCovInfo* smooth_pose_cov) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smooth_pose_cov_);
  }
  smooth_pose_cov_ = smooth_pose_cov;
  if (smooth_pose_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LocalPoseInfoMsg.smooth_pose_cov)
}
inline ::xpilot::sr2_0::proto::LocalPoseCovInfo* LocalPoseInfoMsg::release_smooth_pose_cov() {
  auto temp = unsafe_arena_release_smooth_pose_cov();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseCovInfo* LocalPoseInfoMsg::unsafe_arena_release_smooth_pose_cov() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LocalPoseInfoMsg.smooth_pose_cov)
  
  ::xpilot::sr2_0::proto::LocalPoseCovInfo* temp = smooth_pose_cov_;
  smooth_pose_cov_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseCovInfo* LocalPoseInfoMsg::_internal_mutable_smooth_pose_cov() {
  
  if (smooth_pose_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseCovInfo>(GetArena());
    smooth_pose_cov_ = p;
  }
  return smooth_pose_cov_;
}
inline ::xpilot::sr2_0::proto::LocalPoseCovInfo* LocalPoseInfoMsg::mutable_smooth_pose_cov() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LocalPoseInfoMsg.smooth_pose_cov)
  return _internal_mutable_smooth_pose_cov();
}
inline void LocalPoseInfoMsg::set_allocated_smooth_pose_cov(::xpilot::sr2_0::proto::LocalPoseCovInfo* smooth_pose_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete smooth_pose_cov_;
  }
  if (smooth_pose_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(smooth_pose_cov);
    if (message_arena != submessage_arena) {
      smooth_pose_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smooth_pose_cov, submessage_arena);
    }
    
  } else {
    
  }
  smooth_pose_cov_ = smooth_pose_cov;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LocalPoseInfoMsg.smooth_pose_cov)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localpose_2fLocalPose_2eproto
