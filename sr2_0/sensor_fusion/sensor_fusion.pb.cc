// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_fusion/sensor_fusion.proto

#include "sensor_fusion/sensor_fusion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_base_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class EgoMotionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoMotion> _instance;
} _EgoMotion_default_instance_;
class Point2fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2f> _instance;
} _Point2f_default_instance_;
class Point3fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3f> _instance;
} _Point3f_default_instance_;
class SfbpDynamicObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SfbpDynamicObject> _instance;
} _SfbpDynamicObject_default_instance_;
class ObjectSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectSize> _instance;
} _ObjectSize_default_instance_;
class SfbpStaticObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SfbpStaticObject> _instance;
} _SfbpStaticObject_default_instance_;
class SfbpRwmDdsMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SfbpRwmDdsMsg> _instance;
} _SfbpRwmDdsMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
static void InitDefaultsscc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_EgoMotion_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::EgoMotion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::EgoMotion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {
      &scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_Quaternion_base_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_ObjectSize_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::ObjectSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::ObjectSize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_Point2f_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::Point2f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::Point2f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_Point3f_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::Point3f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::Point3f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {}};

static void InitDefaultsscc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_SfbpDynamicObject_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::SfbpDynamicObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::SfbpDynamicObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {
      &scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_SfbpRwmDdsMsg_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::SfbpRwmDdsMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::SfbpRwmDdsMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {
      &scc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,}};

static void InitDefaultsscc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_SfbpStaticObject_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::SfbpStaticObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::SfbpStaticObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto}, {
      &scc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
      &scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensor_5ffusion_2fsensor_5ffusion_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensor_5ffusion_2fsensor_5ffusion_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensor_5ffusion_2fsensor_5ffusion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, local_pose_p_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, local_pose_q_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, local_linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, local_linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, ego_yaw_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::EgoMotion, ego_yaw_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point2f, x_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point2f, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3f, x_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3f, y_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::Point3f, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, track_id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, type_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, direction_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, signallight_status_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, brakelight_status_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, local_pose_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, local_linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, local_linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, local_yaw_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, local_yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, vru_info_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, color_status_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, size_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpDynamicObject, deformation_indicator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ObjectSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ObjectSize, length_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ObjectSize, width_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::ObjectSize, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, type_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, size_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, local_pose_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, local_yaw_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpStaticObject, is_passable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpRwmDdsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpRwmDdsMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpRwmDdsMsg, ego_motion_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpRwmDdsMsg, sfbp_dynamic_object_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::SfbpRwmDdsMsg, sfbp_static_object_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::EgoMotion)},
  { 11, -1, sizeof(::xpilot::sr2_0::proto::Point2f)},
  { 18, -1, sizeof(::xpilot::sr2_0::proto::Point3f)},
  { 26, -1, sizeof(::xpilot::sr2_0::proto::SfbpDynamicObject)},
  { 45, -1, sizeof(::xpilot::sr2_0::proto::ObjectSize)},
  { 53, -1, sizeof(::xpilot::sr2_0::proto::SfbpStaticObject)},
  { 64, -1, sizeof(::xpilot::sr2_0::proto::SfbpRwmDdsMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_EgoMotion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_Point3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_SfbpDynamicObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_ObjectSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_SfbpStaticObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_SfbpRwmDdsMsg_default_instance_),
};

const char descriptor_table_protodef_sensor_5ffusion_2fsensor_5ffusion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!sensor_fusion/sensor_fusion.proto\022\022xpi"
  "lot.sr2_0.proto\032\021base_struct.proto\"\227\002\n\tE"
  "goMotion\0221\n\014local_pose_p\030\001 \001(\0132\033.xpilot."
  "sr2_0.proto.Point3f\0224\n\014local_pose_q\030\002 \001("
  "\0132\036.xpilot.sr2_0.proto.Quaternion\022:\n\025loc"
  "al_linear_velocity\030\003 \001(\0132\033.xpilot.sr2_0."
  "proto.Point3f\022>\n\031local_linear_accelerati"
  "on\030\004 \001(\0132\033.xpilot.sr2_0.proto.Point3f\022\017\n"
  "\007ego_yaw\030\005 \001(\002\022\024\n\014ego_yaw_rate\030\006 \001(\002\"\037\n\007"
  "Point2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"*\n\007Point3f"
  "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\312\003\n\021Sf"
  "bpDynamicObject\022\020\n\010track_id\030\001 \001(\r\022\014\n\004typ"
  "e\030\002 \001(\r\022\021\n\tdirection\030\003 \001(\r\022\032\n\022signalligh"
  "t_status\030\004 \001(\r\022\031\n\021brakelight_status\030\005 \001("
  "\r\022/\n\nlocal_pose\030\006 \001(\0132\033.xpilot.sr2_0.pro"
  "to.Point3f\022:\n\025local_linear_velocity\030\007 \001("
  "\0132\033.xpilot.sr2_0.proto.Point2f\022>\n\031local_"
  "linear_acceleration\030\010 \001(\0132\033.xpilot.sr2_0"
  ".proto.Point2f\022\021\n\tlocal_yaw\030\t \001(\002\022\026\n\016loc"
  "al_yaw_rate\030\n \001(\002\022\020\n\010vru_info\030\013 \001(\r\022\024\n\014c"
  "olor_status\030\014 \001(\r\022,\n\004size\030\r \001(\0132\036.xpilot"
  ".sr2_0.proto.ObjectSize\022\035\n\025deformation_i"
  "ndicator\030\016 \003(\r\";\n\nObjectSize\022\016\n\006length\030\001"
  " \001(\002\022\r\n\005width\030\002 \001(\002\022\016\n\006height\030\003 \001(\002\"\263\001\n\020"
  "SfbpStaticObject\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001"
  "(\r\022,\n\004size\030\003 \001(\0132\036.xpilot.sr2_0.proto.Ob"
  "jectSize\022/\n\nlocal_pose\030\004 \001(\0132\033.xpilot.sr"
  "2_0.proto.Point3f\022\021\n\tlocal_yaw\030\005 \001(\002\022\023\n\013"
  "is_passable\030\006 \001(\010\"\333\001\n\rSfbpRwmDdsMsg\022\021\n\tt"
  "imestamp\030\001 \001(\004\0221\n\nego_motion\030\002 \001(\0132\035.xpi"
  "lot.sr2_0.proto.EgoMotion\022B\n\023sfbp_dynami"
  "c_object\030\003 \003(\0132%.xpilot.sr2_0.proto.Sfbp"
  "DynamicObject\022@\n\022sfbp_static_object\030\004 \003("
  "\0132$.xpilot.sr2_0.proto.SfbpStaticObjectb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto_deps[1] = {
  &::descriptor_table_base_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto_sccs[7] = {
  &scc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
  &scc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
  &scc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
  &scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
  &scc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
  &scc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
  &scc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto = {
  false, false, descriptor_table_protodef_sensor_5ffusion_2fsensor_5ffusion_2eproto, "sensor_fusion/sensor_fusion.proto", 1367,
  &descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto_once, descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto_sccs, descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto::offsets,
  file_level_metadata_sensor_5ffusion_2fsensor_5ffusion_2eproto, 7, file_level_enum_descriptors_sensor_5ffusion_2fsensor_5ffusion_2eproto, file_level_service_descriptors_sensor_5ffusion_2fsensor_5ffusion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensor_5ffusion_2fsensor_5ffusion_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto)), true);
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

void EgoMotion::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_EgoMotion_default_instance_._instance.get_mutable()->local_pose_p_ = const_cast< ::xpilot::sr2_0::proto::Point3f*>(
      ::xpilot::sr2_0::proto::Point3f::internal_default_instance());
  ::xpilot::sr2_0::proto::_EgoMotion_default_instance_._instance.get_mutable()->local_pose_q_ = const_cast< ::xpilot::sr2_0::proto::Quaternion*>(
      ::xpilot::sr2_0::proto::Quaternion::internal_default_instance());
  ::xpilot::sr2_0::proto::_EgoMotion_default_instance_._instance.get_mutable()->local_linear_velocity_ = const_cast< ::xpilot::sr2_0::proto::Point3f*>(
      ::xpilot::sr2_0::proto::Point3f::internal_default_instance());
  ::xpilot::sr2_0::proto::_EgoMotion_default_instance_._instance.get_mutable()->local_linear_acceleration_ = const_cast< ::xpilot::sr2_0::proto::Point3f*>(
      ::xpilot::sr2_0::proto::Point3f::internal_default_instance());
}
class EgoMotion::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Point3f& local_pose_p(const EgoMotion* msg);
  static const ::xpilot::sr2_0::proto::Quaternion& local_pose_q(const EgoMotion* msg);
  static const ::xpilot::sr2_0::proto::Point3f& local_linear_velocity(const EgoMotion* msg);
  static const ::xpilot::sr2_0::proto::Point3f& local_linear_acceleration(const EgoMotion* msg);
};

const ::xpilot::sr2_0::proto::Point3f&
EgoMotion::_Internal::local_pose_p(const EgoMotion* msg) {
  return *msg->local_pose_p_;
}
const ::xpilot::sr2_0::proto::Quaternion&
EgoMotion::_Internal::local_pose_q(const EgoMotion* msg) {
  return *msg->local_pose_q_;
}
const ::xpilot::sr2_0::proto::Point3f&
EgoMotion::_Internal::local_linear_velocity(const EgoMotion* msg) {
  return *msg->local_linear_velocity_;
}
const ::xpilot::sr2_0::proto::Point3f&
EgoMotion::_Internal::local_linear_acceleration(const EgoMotion* msg) {
  return *msg->local_linear_acceleration_;
}
void EgoMotion::clear_local_pose_q() {
  if (GetArena() == nullptr && local_pose_q_ != nullptr) {
    delete local_pose_q_;
  }
  local_pose_q_ = nullptr;
}
EgoMotion::EgoMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.EgoMotion)
}
EgoMotion::EgoMotion(const EgoMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_pose_p()) {
    local_pose_p_ = new ::xpilot::sr2_0::proto::Point3f(*from.local_pose_p_);
  } else {
    local_pose_p_ = nullptr;
  }
  if (from._internal_has_local_pose_q()) {
    local_pose_q_ = new ::xpilot::sr2_0::proto::Quaternion(*from.local_pose_q_);
  } else {
    local_pose_q_ = nullptr;
  }
  if (from._internal_has_local_linear_velocity()) {
    local_linear_velocity_ = new ::xpilot::sr2_0::proto::Point3f(*from.local_linear_velocity_);
  } else {
    local_linear_velocity_ = nullptr;
  }
  if (from._internal_has_local_linear_acceleration()) {
    local_linear_acceleration_ = new ::xpilot::sr2_0::proto::Point3f(*from.local_linear_acceleration_);
  } else {
    local_linear_acceleration_ = nullptr;
  }
  ::memcpy(&ego_yaw_, &from.ego_yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&ego_yaw_rate_) -
    reinterpret_cast<char*>(&ego_yaw_)) + sizeof(ego_yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.EgoMotion)
}

void EgoMotion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  ::memset(&local_pose_p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_yaw_rate_) -
      reinterpret_cast<char*>(&local_pose_p_)) + sizeof(ego_yaw_rate_));
}

EgoMotion::~EgoMotion() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.EgoMotion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EgoMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_pose_p_;
  if (this != internal_default_instance()) delete local_pose_q_;
  if (this != internal_default_instance()) delete local_linear_velocity_;
  if (this != internal_default_instance()) delete local_linear_acceleration_;
}

void EgoMotion::ArenaDtor(void* object) {
  EgoMotion* _this = reinterpret_cast< EgoMotion* >(object);
  (void)_this;
}
void EgoMotion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EgoMotion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoMotion& EgoMotion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoMotion_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void EgoMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.EgoMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_pose_p_ != nullptr) {
    delete local_pose_p_;
  }
  local_pose_p_ = nullptr;
  if (GetArena() == nullptr && local_pose_q_ != nullptr) {
    delete local_pose_q_;
  }
  local_pose_q_ = nullptr;
  if (GetArena() == nullptr && local_linear_velocity_ != nullptr) {
    delete local_linear_velocity_;
  }
  local_linear_velocity_ = nullptr;
  if (GetArena() == nullptr && local_linear_acceleration_ != nullptr) {
    delete local_linear_acceleration_;
  }
  local_linear_acceleration_ = nullptr;
  ::memset(&ego_yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_yaw_rate_) -
      reinterpret_cast<char*>(&ego_yaw_)) + sizeof(ego_yaw_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EgoMotion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.sr2_0.proto.Point3f local_pose_p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Quaternion local_pose_q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point3f local_linear_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point3f local_linear_acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ego_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ego_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ego_yaw_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ego_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoMotion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.EgoMotion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Point3f local_pose_p = 1;
  if (this->has_local_pose_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_pose_p(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Quaternion local_pose_q = 2;
  if (this->has_local_pose_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_pose_q(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Point3f local_linear_velocity = 3;
  if (this->has_local_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_linear_velocity(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Point3f local_linear_acceleration = 4;
  if (this->has_local_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::local_linear_acceleration(this), target, stream);
  }

  // float ego_yaw = 5;
  if (!(this->ego_yaw() <= 0 && this->ego_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ego_yaw(), target);
  }

  // float ego_yaw_rate = 6;
  if (!(this->ego_yaw_rate() <= 0 && this->ego_yaw_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ego_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.EgoMotion)
  return target;
}

size_t EgoMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.EgoMotion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.Point3f local_pose_p = 1;
  if (this->has_local_pose_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_p_);
  }

  // .xpilot.sr2_0.proto.Quaternion local_pose_q = 2;
  if (this->has_local_pose_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_q_);
  }

  // .xpilot.sr2_0.proto.Point3f local_linear_velocity = 3;
  if (this->has_local_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_linear_velocity_);
  }

  // .xpilot.sr2_0.proto.Point3f local_linear_acceleration = 4;
  if (this->has_local_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_linear_acceleration_);
  }

  // float ego_yaw = 5;
  if (!(this->ego_yaw() <= 0 && this->ego_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float ego_yaw_rate = 6;
  if (!(this->ego_yaw_rate() <= 0 && this->ego_yaw_rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoMotion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.EgoMotion)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoMotion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoMotion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.EgoMotion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.EgoMotion)
    MergeFrom(*source);
  }
}

void EgoMotion::MergeFrom(const EgoMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.EgoMotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose_p()) {
    _internal_mutable_local_pose_p()->::xpilot::sr2_0::proto::Point3f::MergeFrom(from._internal_local_pose_p());
  }
  if (from.has_local_pose_q()) {
    _internal_mutable_local_pose_q()->::xpilot::sr2_0::proto::Quaternion::MergeFrom(from._internal_local_pose_q());
  }
  if (from.has_local_linear_velocity()) {
    _internal_mutable_local_linear_velocity()->::xpilot::sr2_0::proto::Point3f::MergeFrom(from._internal_local_linear_velocity());
  }
  if (from.has_local_linear_acceleration()) {
    _internal_mutable_local_linear_acceleration()->::xpilot::sr2_0::proto::Point3f::MergeFrom(from._internal_local_linear_acceleration());
  }
  if (!(from.ego_yaw() <= 0 && from.ego_yaw() >= 0)) {
    _internal_set_ego_yaw(from._internal_ego_yaw());
  }
  if (!(from.ego_yaw_rate() <= 0 && from.ego_yaw_rate() >= 0)) {
    _internal_set_ego_yaw_rate(from._internal_ego_yaw_rate());
  }
}

void EgoMotion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.EgoMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoMotion::CopyFrom(const EgoMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.EgoMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoMotion::IsInitialized() const {
  return true;
}

void EgoMotion::InternalSwap(EgoMotion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgoMotion, ego_yaw_rate_)
      + sizeof(EgoMotion::ego_yaw_rate_)
      - PROTOBUF_FIELD_OFFSET(EgoMotion, local_pose_p_)>(
          reinterpret_cast<char*>(&local_pose_p_),
          reinterpret_cast<char*>(&other->local_pose_p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoMotion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2f::InitAsDefaultInstance() {
}
class Point2f::_Internal {
 public:
};

Point2f::Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.Point2f)
}

void Point2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.Point2f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2f::ArenaDtor(void* object) {
  Point2f* _this = reinterpret_cast< Point2f* >(object);
  (void)_this;
}
void Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2f& Point2f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.Point2f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.Point2f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.Point2f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2f, y_)
      + sizeof(Point2f::y_)
      - PROTOBUF_FIELD_OFFSET(Point2f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3f::InitAsDefaultInstance() {
}
class Point3f::_Internal {
 public:
};

Point3f::Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.Point3f)
}
Point3f::Point3f(const Point3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.Point3f)
}

void Point3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.Point3f)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3f::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point3f::ArenaDtor(void* object) {
  Point3f* _this = reinterpret_cast< Point3f* >(object);
  (void)_this;
}
void Point3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3f& Point3f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3f_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.Point3f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.Point3f)
  return target;
}

size_t Point3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.Point3f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.Point3f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {
  return true;
}

void Point3f::InternalSwap(Point3f* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3f, z_)
      + sizeof(Point3f::z_)
      - PROTOBUF_FIELD_OFFSET(Point3f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SfbpDynamicObject::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_SfbpDynamicObject_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::xpilot::sr2_0::proto::Point3f*>(
      ::xpilot::sr2_0::proto::Point3f::internal_default_instance());
  ::xpilot::sr2_0::proto::_SfbpDynamicObject_default_instance_._instance.get_mutable()->local_linear_velocity_ = const_cast< ::xpilot::sr2_0::proto::Point2f*>(
      ::xpilot::sr2_0::proto::Point2f::internal_default_instance());
  ::xpilot::sr2_0::proto::_SfbpDynamicObject_default_instance_._instance.get_mutable()->local_linear_acceleration_ = const_cast< ::xpilot::sr2_0::proto::Point2f*>(
      ::xpilot::sr2_0::proto::Point2f::internal_default_instance());
  ::xpilot::sr2_0::proto::_SfbpDynamicObject_default_instance_._instance.get_mutable()->size_ = const_cast< ::xpilot::sr2_0::proto::ObjectSize*>(
      ::xpilot::sr2_0::proto::ObjectSize::internal_default_instance());
}
class SfbpDynamicObject::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::Point3f& local_pose(const SfbpDynamicObject* msg);
  static const ::xpilot::sr2_0::proto::Point2f& local_linear_velocity(const SfbpDynamicObject* msg);
  static const ::xpilot::sr2_0::proto::Point2f& local_linear_acceleration(const SfbpDynamicObject* msg);
  static const ::xpilot::sr2_0::proto::ObjectSize& size(const SfbpDynamicObject* msg);
};

const ::xpilot::sr2_0::proto::Point3f&
SfbpDynamicObject::_Internal::local_pose(const SfbpDynamicObject* msg) {
  return *msg->local_pose_;
}
const ::xpilot::sr2_0::proto::Point2f&
SfbpDynamicObject::_Internal::local_linear_velocity(const SfbpDynamicObject* msg) {
  return *msg->local_linear_velocity_;
}
const ::xpilot::sr2_0::proto::Point2f&
SfbpDynamicObject::_Internal::local_linear_acceleration(const SfbpDynamicObject* msg) {
  return *msg->local_linear_acceleration_;
}
const ::xpilot::sr2_0::proto::ObjectSize&
SfbpDynamicObject::_Internal::size(const SfbpDynamicObject* msg) {
  return *msg->size_;
}
SfbpDynamicObject::SfbpDynamicObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deformation_indicator_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.SfbpDynamicObject)
}
SfbpDynamicObject::SfbpDynamicObject(const SfbpDynamicObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deformation_indicator_(from.deformation_indicator_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_pose()) {
    local_pose_ = new ::xpilot::sr2_0::proto::Point3f(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  if (from._internal_has_local_linear_velocity()) {
    local_linear_velocity_ = new ::xpilot::sr2_0::proto::Point2f(*from.local_linear_velocity_);
  } else {
    local_linear_velocity_ = nullptr;
  }
  if (from._internal_has_local_linear_acceleration()) {
    local_linear_acceleration_ = new ::xpilot::sr2_0::proto::Point2f(*from.local_linear_acceleration_);
  } else {
    local_linear_acceleration_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::xpilot::sr2_0::proto::ObjectSize(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&track_id_, &from.track_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_status_) -
    reinterpret_cast<char*>(&track_id_)) + sizeof(color_status_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.SfbpDynamicObject)
}

void SfbpDynamicObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_status_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(color_status_));
}

SfbpDynamicObject::~SfbpDynamicObject() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.SfbpDynamicObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SfbpDynamicObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete local_linear_velocity_;
  if (this != internal_default_instance()) delete local_linear_acceleration_;
  if (this != internal_default_instance()) delete size_;
}

void SfbpDynamicObject::ArenaDtor(void* object) {
  SfbpDynamicObject* _this = reinterpret_cast< SfbpDynamicObject* >(object);
  (void)_this;
}
void SfbpDynamicObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SfbpDynamicObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SfbpDynamicObject& SfbpDynamicObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SfbpDynamicObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void SfbpDynamicObject::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deformation_indicator_.Clear();
  if (GetArena() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  if (GetArena() == nullptr && local_linear_velocity_ != nullptr) {
    delete local_linear_velocity_;
  }
  local_linear_velocity_ = nullptr;
  if (GetArena() == nullptr && local_linear_acceleration_ != nullptr) {
    delete local_linear_acceleration_;
  }
  local_linear_acceleration_ = nullptr;
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  ::memset(&track_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_status_) -
      reinterpret_cast<char*>(&track_id_)) + sizeof(color_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SfbpDynamicObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 track_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 signallight_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          signallight_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 brakelight_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          brakelight_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point3f local_pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point2f local_linear_velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point2f local_linear_acceleration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float local_yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          local_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float local_yaw_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          local_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 vru_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          vru_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          color_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.ObjectSize size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 deformation_indicator = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_deformation_indicator(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_deformation_indicator(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SfbpDynamicObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 track_id = 1;
  if (this->track_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_track_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direction(), target);
  }

  // uint32 signallight_status = 4;
  if (this->signallight_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_signallight_status(), target);
  }

  // uint32 brakelight_status = 5;
  if (this->brakelight_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_brakelight_status(), target);
  }

  // .xpilot.sr2_0.proto.Point3f local_pose = 6;
  if (this->has_local_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::local_pose(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Point2f local_linear_velocity = 7;
  if (this->has_local_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_linear_velocity(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Point2f local_linear_acceleration = 8;
  if (this->has_local_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::local_linear_acceleration(this), target, stream);
  }

  // float local_yaw = 9;
  if (!(this->local_yaw() <= 0 && this->local_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_local_yaw(), target);
  }

  // float local_yaw_rate = 10;
  if (!(this->local_yaw_rate() <= 0 && this->local_yaw_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_local_yaw_rate(), target);
  }

  // uint32 vru_info = 11;
  if (this->vru_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_vru_info(), target);
  }

  // uint32 color_status = 12;
  if (this->color_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_color_status(), target);
  }

  // .xpilot.sr2_0.proto.ObjectSize size = 13;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::size(this), target, stream);
  }

  // repeated uint32 deformation_indicator = 14;
  {
    int byte_size = _deformation_indicator_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_deformation_indicator(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.SfbpDynamicObject)
  return target;
}

size_t SfbpDynamicObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 deformation_indicator = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->deformation_indicator_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _deformation_indicator_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .xpilot.sr2_0.proto.Point3f local_pose = 6;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // .xpilot.sr2_0.proto.Point2f local_linear_velocity = 7;
  if (this->has_local_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_linear_velocity_);
  }

  // .xpilot.sr2_0.proto.Point2f local_linear_acceleration = 8;
  if (this->has_local_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_linear_acceleration_);
  }

  // .xpilot.sr2_0.proto.ObjectSize size = 13;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // uint32 track_id = 1;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_track_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_direction());
  }

  // uint32 signallight_status = 4;
  if (this->signallight_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signallight_status());
  }

  // uint32 brakelight_status = 5;
  if (this->brakelight_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brakelight_status());
  }

  // float local_yaw = 9;
  if (!(this->local_yaw() <= 0 && this->local_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float local_yaw_rate = 10;
  if (!(this->local_yaw_rate() <= 0 && this->local_yaw_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 vru_info = 11;
  if (this->vru_info() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vru_info());
  }

  // uint32 color_status = 12;
  if (this->color_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SfbpDynamicObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SfbpDynamicObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SfbpDynamicObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.SfbpDynamicObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.SfbpDynamicObject)
    MergeFrom(*source);
  }
}

void SfbpDynamicObject::MergeFrom(const SfbpDynamicObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deformation_indicator_.MergeFrom(from.deformation_indicator_);
  if (from.has_local_pose()) {
    _internal_mutable_local_pose()->::xpilot::sr2_0::proto::Point3f::MergeFrom(from._internal_local_pose());
  }
  if (from.has_local_linear_velocity()) {
    _internal_mutable_local_linear_velocity()->::xpilot::sr2_0::proto::Point2f::MergeFrom(from._internal_local_linear_velocity());
  }
  if (from.has_local_linear_acceleration()) {
    _internal_mutable_local_linear_acceleration()->::xpilot::sr2_0::proto::Point2f::MergeFrom(from._internal_local_linear_acceleration());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::xpilot::sr2_0::proto::ObjectSize::MergeFrom(from._internal_size());
  }
  if (from.track_id() != 0) {
    _internal_set_track_id(from._internal_track_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.signallight_status() != 0) {
    _internal_set_signallight_status(from._internal_signallight_status());
  }
  if (from.brakelight_status() != 0) {
    _internal_set_brakelight_status(from._internal_brakelight_status());
  }
  if (!(from.local_yaw() <= 0 && from.local_yaw() >= 0)) {
    _internal_set_local_yaw(from._internal_local_yaw());
  }
  if (!(from.local_yaw_rate() <= 0 && from.local_yaw_rate() >= 0)) {
    _internal_set_local_yaw_rate(from._internal_local_yaw_rate());
  }
  if (from.vru_info() != 0) {
    _internal_set_vru_info(from._internal_vru_info());
  }
  if (from.color_status() != 0) {
    _internal_set_color_status(from._internal_color_status());
  }
}

void SfbpDynamicObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SfbpDynamicObject::CopyFrom(const SfbpDynamicObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.SfbpDynamicObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SfbpDynamicObject::IsInitialized() const {
  return true;
}

void SfbpDynamicObject::InternalSwap(SfbpDynamicObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deformation_indicator_.InternalSwap(&other->deformation_indicator_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SfbpDynamicObject, color_status_)
      + sizeof(SfbpDynamicObject::color_status_)
      - PROTOBUF_FIELD_OFFSET(SfbpDynamicObject, local_pose_)>(
          reinterpret_cast<char*>(&local_pose_),
          reinterpret_cast<char*>(&other->local_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SfbpDynamicObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectSize::InitAsDefaultInstance() {
}
class ObjectSize::_Internal {
 public:
};

ObjectSize::ObjectSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.ObjectSize)
}
ObjectSize::ObjectSize(const ObjectSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.ObjectSize)
}

void ObjectSize::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&length_)) + sizeof(height_));
}

ObjectSize::~ObjectSize() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.ObjectSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectSize::ArenaDtor(void* object) {
  ObjectSize* _this = reinterpret_cast< ObjectSize* >(object);
  (void)_this;
}
void ObjectSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectSize& ObjectSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectSize_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void ObjectSize::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.ObjectSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&length_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.ObjectSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_length(), target);
  }

  // float width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  // float height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.ObjectSize)
  return target;
}

size_t ObjectSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.ObjectSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.ObjectSize)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.ObjectSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.ObjectSize)
    MergeFrom(*source);
  }
}

void ObjectSize::MergeFrom(const ObjectSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.ObjectSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void ObjectSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.ObjectSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSize::CopyFrom(const ObjectSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.ObjectSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSize::IsInitialized() const {
  return true;
}

void ObjectSize::InternalSwap(ObjectSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectSize, height_)
      + sizeof(ObjectSize::height_)
      - PROTOBUF_FIELD_OFFSET(ObjectSize, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SfbpStaticObject::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_SfbpStaticObject_default_instance_._instance.get_mutable()->size_ = const_cast< ::xpilot::sr2_0::proto::ObjectSize*>(
      ::xpilot::sr2_0::proto::ObjectSize::internal_default_instance());
  ::xpilot::sr2_0::proto::_SfbpStaticObject_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::xpilot::sr2_0::proto::Point3f*>(
      ::xpilot::sr2_0::proto::Point3f::internal_default_instance());
}
class SfbpStaticObject::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::ObjectSize& size(const SfbpStaticObject* msg);
  static const ::xpilot::sr2_0::proto::Point3f& local_pose(const SfbpStaticObject* msg);
};

const ::xpilot::sr2_0::proto::ObjectSize&
SfbpStaticObject::_Internal::size(const SfbpStaticObject* msg) {
  return *msg->size_;
}
const ::xpilot::sr2_0::proto::Point3f&
SfbpStaticObject::_Internal::local_pose(const SfbpStaticObject* msg) {
  return *msg->local_pose_;
}
SfbpStaticObject::SfbpStaticObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.SfbpStaticObject)
}
SfbpStaticObject::SfbpStaticObject(const SfbpStaticObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::xpilot::sr2_0::proto::ObjectSize(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_local_pose()) {
    local_pose_ = new ::xpilot::sr2_0::proto::Point3f(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_passable_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_passable_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.SfbpStaticObject)
}

void SfbpStaticObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&size_)) + sizeof(is_passable_));
}

SfbpStaticObject::~SfbpStaticObject() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.SfbpStaticObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SfbpStaticObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete local_pose_;
}

void SfbpStaticObject::ArenaDtor(void* object) {
  SfbpStaticObject* _this = reinterpret_cast< SfbpStaticObject* >(object);
  (void)_this;
}
void SfbpStaticObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SfbpStaticObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SfbpStaticObject& SfbpStaticObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SfbpStaticObject_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void SfbpStaticObject::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.SfbpStaticObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArena() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_passable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SfbpStaticObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.ObjectSize size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.Point3f local_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float local_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          local_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_passable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_passable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SfbpStaticObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.SfbpStaticObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // .xpilot.sr2_0.proto.ObjectSize size = 3;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::size(this), target, stream);
  }

  // .xpilot.sr2_0.proto.Point3f local_pose = 4;
  if (this->has_local_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::local_pose(this), target, stream);
  }

  // float local_yaw = 5;
  if (!(this->local_yaw() <= 0 && this->local_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_local_yaw(), target);
  }

  // bool is_passable = 6;
  if (this->is_passable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_passable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.SfbpStaticObject)
  return target;
}

size_t SfbpStaticObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.SfbpStaticObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.ObjectSize size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .xpilot.sr2_0.proto.Point3f local_pose = 4;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // float local_yaw = 5;
  if (!(this->local_yaw() <= 0 && this->local_yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // bool is_passable = 6;
  if (this->is_passable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SfbpStaticObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.SfbpStaticObject)
  GOOGLE_DCHECK_NE(&from, this);
  const SfbpStaticObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SfbpStaticObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.SfbpStaticObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.SfbpStaticObject)
    MergeFrom(*source);
  }
}

void SfbpStaticObject::MergeFrom(const SfbpStaticObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.SfbpStaticObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    _internal_mutable_size()->::xpilot::sr2_0::proto::ObjectSize::MergeFrom(from._internal_size());
  }
  if (from.has_local_pose()) {
    _internal_mutable_local_pose()->::xpilot::sr2_0::proto::Point3f::MergeFrom(from._internal_local_pose());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.local_yaw() <= 0 && from.local_yaw() >= 0)) {
    _internal_set_local_yaw(from._internal_local_yaw());
  }
  if (from.is_passable() != 0) {
    _internal_set_is_passable(from._internal_is_passable());
  }
}

void SfbpStaticObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.SfbpStaticObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SfbpStaticObject::CopyFrom(const SfbpStaticObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.SfbpStaticObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SfbpStaticObject::IsInitialized() const {
  return true;
}

void SfbpStaticObject::InternalSwap(SfbpStaticObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SfbpStaticObject, is_passable_)
      + sizeof(SfbpStaticObject::is_passable_)
      - PROTOBUF_FIELD_OFFSET(SfbpStaticObject, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SfbpStaticObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SfbpRwmDdsMsg::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_SfbpRwmDdsMsg_default_instance_._instance.get_mutable()->ego_motion_ = const_cast< ::xpilot::sr2_0::proto::EgoMotion*>(
      ::xpilot::sr2_0::proto::EgoMotion::internal_default_instance());
}
class SfbpRwmDdsMsg::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::EgoMotion& ego_motion(const SfbpRwmDdsMsg* msg);
};

const ::xpilot::sr2_0::proto::EgoMotion&
SfbpRwmDdsMsg::_Internal::ego_motion(const SfbpRwmDdsMsg* msg) {
  return *msg->ego_motion_;
}
SfbpRwmDdsMsg::SfbpRwmDdsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sfbp_dynamic_object_(arena),
  sfbp_static_object_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
}
SfbpRwmDdsMsg::SfbpRwmDdsMsg(const SfbpRwmDdsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sfbp_dynamic_object_(from.sfbp_dynamic_object_),
      sfbp_static_object_(from.sfbp_static_object_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ego_motion()) {
    ego_motion_ = new ::xpilot::sr2_0::proto::EgoMotion(*from.ego_motion_);
  } else {
    ego_motion_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
}

void SfbpRwmDdsMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  ::memset(&ego_motion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ego_motion_)) + sizeof(timestamp_));
}

SfbpRwmDdsMsg::~SfbpRwmDdsMsg() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SfbpRwmDdsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ego_motion_;
}

void SfbpRwmDdsMsg::ArenaDtor(void* object) {
  SfbpRwmDdsMsg* _this = reinterpret_cast< SfbpRwmDdsMsg* >(object);
  (void)_this;
}
void SfbpRwmDdsMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SfbpRwmDdsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SfbpRwmDdsMsg& SfbpRwmDdsMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SfbpRwmDdsMsg_sensor_5ffusion_2fsensor_5ffusion_2eproto.base);
  return *internal_default_instance();
}


void SfbpRwmDdsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sfbp_dynamic_object_.Clear();
  sfbp_static_object_.Clear();
  if (GetArena() == nullptr && ego_motion_ != nullptr) {
    delete ego_motion_;
  }
  ego_motion_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SfbpRwmDdsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.EgoMotion ego_motion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ego_motion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.SfbpDynamicObject sfbp_dynamic_object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sfbp_dynamic_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.sr2_0.proto.SfbpStaticObject sfbp_static_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sfbp_static_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SfbpRwmDdsMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .xpilot.sr2_0.proto.EgoMotion ego_motion = 2;
  if (this->has_ego_motion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ego_motion(this), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.SfbpDynamicObject sfbp_dynamic_object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sfbp_dynamic_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sfbp_dynamic_object(i), target, stream);
  }

  // repeated .xpilot.sr2_0.proto.SfbpStaticObject sfbp_static_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sfbp_static_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sfbp_static_object(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  return target;
}

size_t SfbpRwmDdsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.sr2_0.proto.SfbpDynamicObject sfbp_dynamic_object = 3;
  total_size += 1UL * this->_internal_sfbp_dynamic_object_size();
  for (const auto& msg : this->sfbp_dynamic_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xpilot.sr2_0.proto.SfbpStaticObject sfbp_static_object = 4;
  total_size += 1UL * this->_internal_sfbp_static_object_size();
  for (const auto& msg : this->sfbp_static_object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .xpilot.sr2_0.proto.EgoMotion ego_motion = 2;
  if (this->has_ego_motion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ego_motion_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SfbpRwmDdsMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SfbpRwmDdsMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SfbpRwmDdsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
    MergeFrom(*source);
  }
}

void SfbpRwmDdsMsg::MergeFrom(const SfbpRwmDdsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sfbp_dynamic_object_.MergeFrom(from.sfbp_dynamic_object_);
  sfbp_static_object_.MergeFrom(from.sfbp_static_object_);
  if (from.has_ego_motion()) {
    _internal_mutable_ego_motion()->::xpilot::sr2_0::proto::EgoMotion::MergeFrom(from._internal_ego_motion());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void SfbpRwmDdsMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SfbpRwmDdsMsg::CopyFrom(const SfbpRwmDdsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SfbpRwmDdsMsg::IsInitialized() const {
  return true;
}

void SfbpRwmDdsMsg::InternalSwap(SfbpRwmDdsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sfbp_dynamic_object_.InternalSwap(&other->sfbp_dynamic_object_);
  sfbp_static_object_.InternalSwap(&other->sfbp_static_object_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SfbpRwmDdsMsg, timestamp_)
      + sizeof(SfbpRwmDdsMsg::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SfbpRwmDdsMsg, ego_motion_)>(
          reinterpret_cast<char*>(&ego_motion_),
          reinterpret_cast<char*>(&other->ego_motion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SfbpRwmDdsMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::EgoMotion* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::EgoMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::EgoMotion >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::Point2f* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::Point3f* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::Point3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::Point3f >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::SfbpDynamicObject* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::SfbpDynamicObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::SfbpDynamicObject >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::ObjectSize* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::ObjectSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::ObjectSize >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::SfbpStaticObject* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::SfbpStaticObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::SfbpStaticObject >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::SfbpRwmDdsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::SfbpRwmDdsMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
