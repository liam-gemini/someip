// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_fusion/sensor_fusion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_5ffusion_2fsensor_5ffusion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_5ffusion_2fsensor_5ffusion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_5ffusion_2fsensor_5ffusion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class EgoMotion;
class EgoMotionDefaultTypeInternal;
extern EgoMotionDefaultTypeInternal _EgoMotion_default_instance_;
class ObjectSize;
class ObjectSizeDefaultTypeInternal;
extern ObjectSizeDefaultTypeInternal _ObjectSize_default_instance_;
class Point2f;
class Point2fDefaultTypeInternal;
extern Point2fDefaultTypeInternal _Point2f_default_instance_;
class Point3f;
class Point3fDefaultTypeInternal;
extern Point3fDefaultTypeInternal _Point3f_default_instance_;
class SfbpDynamicObject;
class SfbpDynamicObjectDefaultTypeInternal;
extern SfbpDynamicObjectDefaultTypeInternal _SfbpDynamicObject_default_instance_;
class SfbpRwmDdsMsg;
class SfbpRwmDdsMsgDefaultTypeInternal;
extern SfbpRwmDdsMsgDefaultTypeInternal _SfbpRwmDdsMsg_default_instance_;
class SfbpStaticObject;
class SfbpStaticObjectDefaultTypeInternal;
extern SfbpStaticObjectDefaultTypeInternal _SfbpStaticObject_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::EgoMotion* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::EgoMotion>(Arena*);
template<> ::xpilot::sr2_0::proto::ObjectSize* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::ObjectSize>(Arena*);
template<> ::xpilot::sr2_0::proto::Point2f* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Point2f>(Arena*);
template<> ::xpilot::sr2_0::proto::Point3f* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Point3f>(Arena*);
template<> ::xpilot::sr2_0::proto::SfbpDynamicObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::SfbpDynamicObject>(Arena*);
template<> ::xpilot::sr2_0::proto::SfbpRwmDdsMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::SfbpRwmDdsMsg>(Arena*);
template<> ::xpilot::sr2_0::proto::SfbpStaticObject* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::SfbpStaticObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class EgoMotion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.EgoMotion) */ {
 public:
  inline EgoMotion() : EgoMotion(nullptr) {};
  virtual ~EgoMotion();

  EgoMotion(const EgoMotion& from);
  EgoMotion(EgoMotion&& from) noexcept
    : EgoMotion() {
    *this = ::std::move(from);
  }

  inline EgoMotion& operator=(const EgoMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline EgoMotion& operator=(EgoMotion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EgoMotion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoMotion* internal_default_instance() {
    return reinterpret_cast<const EgoMotion*>(
               &_EgoMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EgoMotion& a, EgoMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(EgoMotion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EgoMotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EgoMotion* New() const final {
    return CreateMaybeMessage<EgoMotion>(nullptr);
  }

  EgoMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EgoMotion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EgoMotion& from);
  void MergeFrom(const EgoMotion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EgoMotion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.EgoMotion";
  }
  protected:
  explicit EgoMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPosePFieldNumber = 1,
    kLocalPoseQFieldNumber = 2,
    kLocalLinearVelocityFieldNumber = 3,
    kLocalLinearAccelerationFieldNumber = 4,
    kEgoYawFieldNumber = 5,
    kEgoYawRateFieldNumber = 6,
  };
  // .xpilot.sr2_0.proto.Point3f local_pose_p = 1;
  bool has_local_pose_p() const;
  private:
  bool _internal_has_local_pose_p() const;
  public:
  void clear_local_pose_p();
  const ::xpilot::sr2_0::proto::Point3f& local_pose_p() const;
  ::xpilot::sr2_0::proto::Point3f* release_local_pose_p();
  ::xpilot::sr2_0::proto::Point3f* mutable_local_pose_p();
  void set_allocated_local_pose_p(::xpilot::sr2_0::proto::Point3f* local_pose_p);
  private:
  const ::xpilot::sr2_0::proto::Point3f& _internal_local_pose_p() const;
  ::xpilot::sr2_0::proto::Point3f* _internal_mutable_local_pose_p();
  public:
  void unsafe_arena_set_allocated_local_pose_p(
      ::xpilot::sr2_0::proto::Point3f* local_pose_p);
  ::xpilot::sr2_0::proto::Point3f* unsafe_arena_release_local_pose_p();

  // .xpilot.sr2_0.proto.Quaternion local_pose_q = 2;
  bool has_local_pose_q() const;
  private:
  bool _internal_has_local_pose_q() const;
  public:
  void clear_local_pose_q();
  const ::xpilot::sr2_0::proto::Quaternion& local_pose_q() const;
  ::xpilot::sr2_0::proto::Quaternion* release_local_pose_q();
  ::xpilot::sr2_0::proto::Quaternion* mutable_local_pose_q();
  void set_allocated_local_pose_q(::xpilot::sr2_0::proto::Quaternion* local_pose_q);
  private:
  const ::xpilot::sr2_0::proto::Quaternion& _internal_local_pose_q() const;
  ::xpilot::sr2_0::proto::Quaternion* _internal_mutable_local_pose_q();
  public:
  void unsafe_arena_set_allocated_local_pose_q(
      ::xpilot::sr2_0::proto::Quaternion* local_pose_q);
  ::xpilot::sr2_0::proto::Quaternion* unsafe_arena_release_local_pose_q();

  // .xpilot.sr2_0.proto.Point3f local_linear_velocity = 3;
  bool has_local_linear_velocity() const;
  private:
  bool _internal_has_local_linear_velocity() const;
  public:
  void clear_local_linear_velocity();
  const ::xpilot::sr2_0::proto::Point3f& local_linear_velocity() const;
  ::xpilot::sr2_0::proto::Point3f* release_local_linear_velocity();
  ::xpilot::sr2_0::proto::Point3f* mutable_local_linear_velocity();
  void set_allocated_local_linear_velocity(::xpilot::sr2_0::proto::Point3f* local_linear_velocity);
  private:
  const ::xpilot::sr2_0::proto::Point3f& _internal_local_linear_velocity() const;
  ::xpilot::sr2_0::proto::Point3f* _internal_mutable_local_linear_velocity();
  public:
  void unsafe_arena_set_allocated_local_linear_velocity(
      ::xpilot::sr2_0::proto::Point3f* local_linear_velocity);
  ::xpilot::sr2_0::proto::Point3f* unsafe_arena_release_local_linear_velocity();

  // .xpilot.sr2_0.proto.Point3f local_linear_acceleration = 4;
  bool has_local_linear_acceleration() const;
  private:
  bool _internal_has_local_linear_acceleration() const;
  public:
  void clear_local_linear_acceleration();
  const ::xpilot::sr2_0::proto::Point3f& local_linear_acceleration() const;
  ::xpilot::sr2_0::proto::Point3f* release_local_linear_acceleration();
  ::xpilot::sr2_0::proto::Point3f* mutable_local_linear_acceleration();
  void set_allocated_local_linear_acceleration(::xpilot::sr2_0::proto::Point3f* local_linear_acceleration);
  private:
  const ::xpilot::sr2_0::proto::Point3f& _internal_local_linear_acceleration() const;
  ::xpilot::sr2_0::proto::Point3f* _internal_mutable_local_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_local_linear_acceleration(
      ::xpilot::sr2_0::proto::Point3f* local_linear_acceleration);
  ::xpilot::sr2_0::proto::Point3f* unsafe_arena_release_local_linear_acceleration();

  // float ego_yaw = 5;
  void clear_ego_yaw();
  float ego_yaw() const;
  void set_ego_yaw(float value);
  private:
  float _internal_ego_yaw() const;
  void _internal_set_ego_yaw(float value);
  public:

  // float ego_yaw_rate = 6;
  void clear_ego_yaw_rate();
  float ego_yaw_rate() const;
  void set_ego_yaw_rate(float value);
  private:
  float _internal_ego_yaw_rate() const;
  void _internal_set_ego_yaw_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.EgoMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::Point3f* local_pose_p_;
  ::xpilot::sr2_0::proto::Quaternion* local_pose_q_;
  ::xpilot::sr2_0::proto::Point3f* local_linear_velocity_;
  ::xpilot::sr2_0::proto::Point3f* local_linear_acceleration_;
  float ego_yaw_;
  float ego_yaw_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class Point2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Point2f) */ {
 public:
  inline Point2f() : Point2f(nullptr) {};
  virtual ~Point2f();

  Point2f(const Point2f& from);
  Point2f(Point2f&& from) noexcept
    : Point2f() {
    *this = ::std::move(from);
  }

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2f& operator=(Point2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2f* internal_default_instance() {
    return reinterpret_cast<const Point2f*>(
               &_Point2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point2f& a, Point2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2f* New() const final {
    return CreateMaybeMessage<Point2f>(nullptr);
  }

  Point2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Point2f";
  }
  protected:
  explicit Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Point2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class Point3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Point3f) */ {
 public:
  inline Point3f() : Point3f(nullptr) {};
  virtual ~Point3f();

  Point3f(const Point3f& from);
  Point3f(Point3f&& from) noexcept
    : Point3f() {
    *this = ::std::move(from);
  }

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3f& operator=(Point3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3f* internal_default_instance() {
    return reinterpret_cast<const Point3f*>(
               &_Point3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point3f& a, Point3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3f* New() const final {
    return CreateMaybeMessage<Point3f>(nullptr);
  }

  Point3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Point3f";
  }
  protected:
  explicit Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Point3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class SfbpDynamicObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.SfbpDynamicObject) */ {
 public:
  inline SfbpDynamicObject() : SfbpDynamicObject(nullptr) {};
  virtual ~SfbpDynamicObject();

  SfbpDynamicObject(const SfbpDynamicObject& from);
  SfbpDynamicObject(SfbpDynamicObject&& from) noexcept
    : SfbpDynamicObject() {
    *this = ::std::move(from);
  }

  inline SfbpDynamicObject& operator=(const SfbpDynamicObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SfbpDynamicObject& operator=(SfbpDynamicObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SfbpDynamicObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SfbpDynamicObject* internal_default_instance() {
    return reinterpret_cast<const SfbpDynamicObject*>(
               &_SfbpDynamicObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SfbpDynamicObject& a, SfbpDynamicObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SfbpDynamicObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SfbpDynamicObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SfbpDynamicObject* New() const final {
    return CreateMaybeMessage<SfbpDynamicObject>(nullptr);
  }

  SfbpDynamicObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SfbpDynamicObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SfbpDynamicObject& from);
  void MergeFrom(const SfbpDynamicObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SfbpDynamicObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.SfbpDynamicObject";
  }
  protected:
  explicit SfbpDynamicObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeformationIndicatorFieldNumber = 14,
    kLocalPoseFieldNumber = 6,
    kLocalLinearVelocityFieldNumber = 7,
    kLocalLinearAccelerationFieldNumber = 8,
    kSizeFieldNumber = 13,
    kTrackIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDirectionFieldNumber = 3,
    kSignallightStatusFieldNumber = 4,
    kBrakelightStatusFieldNumber = 5,
    kLocalYawFieldNumber = 9,
    kLocalYawRateFieldNumber = 10,
    kVruInfoFieldNumber = 11,
    kColorStatusFieldNumber = 12,
  };
  // repeated uint32 deformation_indicator = 14;
  int deformation_indicator_size() const;
  private:
  int _internal_deformation_indicator_size() const;
  public:
  void clear_deformation_indicator();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deformation_indicator(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_deformation_indicator() const;
  void _internal_add_deformation_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_deformation_indicator();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 deformation_indicator(int index) const;
  void set_deformation_indicator(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_deformation_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      deformation_indicator() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_deformation_indicator();

  // .xpilot.sr2_0.proto.Point3f local_pose = 6;
  bool has_local_pose() const;
  private:
  bool _internal_has_local_pose() const;
  public:
  void clear_local_pose();
  const ::xpilot::sr2_0::proto::Point3f& local_pose() const;
  ::xpilot::sr2_0::proto::Point3f* release_local_pose();
  ::xpilot::sr2_0::proto::Point3f* mutable_local_pose();
  void set_allocated_local_pose(::xpilot::sr2_0::proto::Point3f* local_pose);
  private:
  const ::xpilot::sr2_0::proto::Point3f& _internal_local_pose() const;
  ::xpilot::sr2_0::proto::Point3f* _internal_mutable_local_pose();
  public:
  void unsafe_arena_set_allocated_local_pose(
      ::xpilot::sr2_0::proto::Point3f* local_pose);
  ::xpilot::sr2_0::proto::Point3f* unsafe_arena_release_local_pose();

  // .xpilot.sr2_0.proto.Point2f local_linear_velocity = 7;
  bool has_local_linear_velocity() const;
  private:
  bool _internal_has_local_linear_velocity() const;
  public:
  void clear_local_linear_velocity();
  const ::xpilot::sr2_0::proto::Point2f& local_linear_velocity() const;
  ::xpilot::sr2_0::proto::Point2f* release_local_linear_velocity();
  ::xpilot::sr2_0::proto::Point2f* mutable_local_linear_velocity();
  void set_allocated_local_linear_velocity(::xpilot::sr2_0::proto::Point2f* local_linear_velocity);
  private:
  const ::xpilot::sr2_0::proto::Point2f& _internal_local_linear_velocity() const;
  ::xpilot::sr2_0::proto::Point2f* _internal_mutable_local_linear_velocity();
  public:
  void unsafe_arena_set_allocated_local_linear_velocity(
      ::xpilot::sr2_0::proto::Point2f* local_linear_velocity);
  ::xpilot::sr2_0::proto::Point2f* unsafe_arena_release_local_linear_velocity();

  // .xpilot.sr2_0.proto.Point2f local_linear_acceleration = 8;
  bool has_local_linear_acceleration() const;
  private:
  bool _internal_has_local_linear_acceleration() const;
  public:
  void clear_local_linear_acceleration();
  const ::xpilot::sr2_0::proto::Point2f& local_linear_acceleration() const;
  ::xpilot::sr2_0::proto::Point2f* release_local_linear_acceleration();
  ::xpilot::sr2_0::proto::Point2f* mutable_local_linear_acceleration();
  void set_allocated_local_linear_acceleration(::xpilot::sr2_0::proto::Point2f* local_linear_acceleration);
  private:
  const ::xpilot::sr2_0::proto::Point2f& _internal_local_linear_acceleration() const;
  ::xpilot::sr2_0::proto::Point2f* _internal_mutable_local_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_local_linear_acceleration(
      ::xpilot::sr2_0::proto::Point2f* local_linear_acceleration);
  ::xpilot::sr2_0::proto::Point2f* unsafe_arena_release_local_linear_acceleration();

  // .xpilot.sr2_0.proto.ObjectSize size = 13;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::xpilot::sr2_0::proto::ObjectSize& size() const;
  ::xpilot::sr2_0::proto::ObjectSize* release_size();
  ::xpilot::sr2_0::proto::ObjectSize* mutable_size();
  void set_allocated_size(::xpilot::sr2_0::proto::ObjectSize* size);
  private:
  const ::xpilot::sr2_0::proto::ObjectSize& _internal_size() const;
  ::xpilot::sr2_0::proto::ObjectSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::xpilot::sr2_0::proto::ObjectSize* size);
  ::xpilot::sr2_0::proto::ObjectSize* unsafe_arena_release_size();

  // uint32 track_id = 1;
  void clear_track_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 track_id() const;
  void set_track_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_track_id() const;
  void _internal_set_track_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 direction = 3;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 signallight_status = 4;
  void clear_signallight_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 signallight_status() const;
  void set_signallight_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signallight_status() const;
  void _internal_set_signallight_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 brakelight_status = 5;
  void clear_brakelight_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 brakelight_status() const;
  void set_brakelight_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_brakelight_status() const;
  void _internal_set_brakelight_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float local_yaw = 9;
  void clear_local_yaw();
  float local_yaw() const;
  void set_local_yaw(float value);
  private:
  float _internal_local_yaw() const;
  void _internal_set_local_yaw(float value);
  public:

  // float local_yaw_rate = 10;
  void clear_local_yaw_rate();
  float local_yaw_rate() const;
  void set_local_yaw_rate(float value);
  private:
  float _internal_local_yaw_rate() const;
  void _internal_set_local_yaw_rate(float value);
  public:

  // uint32 vru_info = 11;
  void clear_vru_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 vru_info() const;
  void set_vru_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vru_info() const;
  void _internal_set_vru_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 color_status = 12;
  void clear_color_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_status() const;
  void set_color_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color_status() const;
  void _internal_set_color_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.SfbpDynamicObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > deformation_indicator_;
  mutable std::atomic<int> _deformation_indicator_cached_byte_size_;
  ::xpilot::sr2_0::proto::Point3f* local_pose_;
  ::xpilot::sr2_0::proto::Point2f* local_linear_velocity_;
  ::xpilot::sr2_0::proto::Point2f* local_linear_acceleration_;
  ::xpilot::sr2_0::proto::ObjectSize* size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 track_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signallight_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 brakelight_status_;
  float local_yaw_;
  float local_yaw_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vru_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class ObjectSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.ObjectSize) */ {
 public:
  inline ObjectSize() : ObjectSize(nullptr) {};
  virtual ~ObjectSize();

  ObjectSize(const ObjectSize& from);
  ObjectSize(ObjectSize&& from) noexcept
    : ObjectSize() {
    *this = ::std::move(from);
  }

  inline ObjectSize& operator=(const ObjectSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectSize& operator=(ObjectSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectSize* internal_default_instance() {
    return reinterpret_cast<const ObjectSize*>(
               &_ObjectSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObjectSize& a, ObjectSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectSize* New() const final {
    return CreateMaybeMessage<ObjectSize>(nullptr);
  }

  ObjectSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectSize& from);
  void MergeFrom(const ObjectSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.ObjectSize";
  }
  protected:
  explicit ObjectSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // float length = 1;
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.ObjectSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float length_;
  float width_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class SfbpStaticObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.SfbpStaticObject) */ {
 public:
  inline SfbpStaticObject() : SfbpStaticObject(nullptr) {};
  virtual ~SfbpStaticObject();

  SfbpStaticObject(const SfbpStaticObject& from);
  SfbpStaticObject(SfbpStaticObject&& from) noexcept
    : SfbpStaticObject() {
    *this = ::std::move(from);
  }

  inline SfbpStaticObject& operator=(const SfbpStaticObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SfbpStaticObject& operator=(SfbpStaticObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SfbpStaticObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SfbpStaticObject* internal_default_instance() {
    return reinterpret_cast<const SfbpStaticObject*>(
               &_SfbpStaticObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SfbpStaticObject& a, SfbpStaticObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SfbpStaticObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SfbpStaticObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SfbpStaticObject* New() const final {
    return CreateMaybeMessage<SfbpStaticObject>(nullptr);
  }

  SfbpStaticObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SfbpStaticObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SfbpStaticObject& from);
  void MergeFrom(const SfbpStaticObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SfbpStaticObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.SfbpStaticObject";
  }
  protected:
  explicit SfbpStaticObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 3,
    kLocalPoseFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLocalYawFieldNumber = 5,
    kIsPassableFieldNumber = 6,
  };
  // .xpilot.sr2_0.proto.ObjectSize size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::xpilot::sr2_0::proto::ObjectSize& size() const;
  ::xpilot::sr2_0::proto::ObjectSize* release_size();
  ::xpilot::sr2_0::proto::ObjectSize* mutable_size();
  void set_allocated_size(::xpilot::sr2_0::proto::ObjectSize* size);
  private:
  const ::xpilot::sr2_0::proto::ObjectSize& _internal_size() const;
  ::xpilot::sr2_0::proto::ObjectSize* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::xpilot::sr2_0::proto::ObjectSize* size);
  ::xpilot::sr2_0::proto::ObjectSize* unsafe_arena_release_size();

  // .xpilot.sr2_0.proto.Point3f local_pose = 4;
  bool has_local_pose() const;
  private:
  bool _internal_has_local_pose() const;
  public:
  void clear_local_pose();
  const ::xpilot::sr2_0::proto::Point3f& local_pose() const;
  ::xpilot::sr2_0::proto::Point3f* release_local_pose();
  ::xpilot::sr2_0::proto::Point3f* mutable_local_pose();
  void set_allocated_local_pose(::xpilot::sr2_0::proto::Point3f* local_pose);
  private:
  const ::xpilot::sr2_0::proto::Point3f& _internal_local_pose() const;
  ::xpilot::sr2_0::proto::Point3f* _internal_mutable_local_pose();
  public:
  void unsafe_arena_set_allocated_local_pose(
      ::xpilot::sr2_0::proto::Point3f* local_pose);
  ::xpilot::sr2_0::proto::Point3f* unsafe_arena_release_local_pose();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float local_yaw = 5;
  void clear_local_yaw();
  float local_yaw() const;
  void set_local_yaw(float value);
  private:
  float _internal_local_yaw() const;
  void _internal_set_local_yaw(float value);
  public:

  // bool is_passable = 6;
  void clear_is_passable();
  bool is_passable() const;
  void set_is_passable(bool value);
  private:
  bool _internal_is_passable() const;
  void _internal_set_is_passable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.SfbpStaticObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::ObjectSize* size_;
  ::xpilot::sr2_0::proto::Point3f* local_pose_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  float local_yaw_;
  bool is_passable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// -------------------------------------------------------------------

class SfbpRwmDdsMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.SfbpRwmDdsMsg) */ {
 public:
  inline SfbpRwmDdsMsg() : SfbpRwmDdsMsg(nullptr) {};
  virtual ~SfbpRwmDdsMsg();

  SfbpRwmDdsMsg(const SfbpRwmDdsMsg& from);
  SfbpRwmDdsMsg(SfbpRwmDdsMsg&& from) noexcept
    : SfbpRwmDdsMsg() {
    *this = ::std::move(from);
  }

  inline SfbpRwmDdsMsg& operator=(const SfbpRwmDdsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SfbpRwmDdsMsg& operator=(SfbpRwmDdsMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SfbpRwmDdsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SfbpRwmDdsMsg* internal_default_instance() {
    return reinterpret_cast<const SfbpRwmDdsMsg*>(
               &_SfbpRwmDdsMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SfbpRwmDdsMsg& a, SfbpRwmDdsMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SfbpRwmDdsMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SfbpRwmDdsMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SfbpRwmDdsMsg* New() const final {
    return CreateMaybeMessage<SfbpRwmDdsMsg>(nullptr);
  }

  SfbpRwmDdsMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SfbpRwmDdsMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SfbpRwmDdsMsg& from);
  void MergeFrom(const SfbpRwmDdsMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SfbpRwmDdsMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.SfbpRwmDdsMsg";
  }
  protected:
  explicit SfbpRwmDdsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto);
    return ::descriptor_table_sensor_5ffusion_2fsensor_5ffusion_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSfbpDynamicObjectFieldNumber = 3,
    kSfbpStaticObjectFieldNumber = 4,
    kEgoMotionFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .xpilot.sr2_0.proto.SfbpDynamicObject sfbp_dynamic_object = 3;
  int sfbp_dynamic_object_size() const;
  private:
  int _internal_sfbp_dynamic_object_size() const;
  public:
  void clear_sfbp_dynamic_object();
  ::xpilot::sr2_0::proto::SfbpDynamicObject* mutable_sfbp_dynamic_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpDynamicObject >*
      mutable_sfbp_dynamic_object();
  private:
  const ::xpilot::sr2_0::proto::SfbpDynamicObject& _internal_sfbp_dynamic_object(int index) const;
  ::xpilot::sr2_0::proto::SfbpDynamicObject* _internal_add_sfbp_dynamic_object();
  public:
  const ::xpilot::sr2_0::proto::SfbpDynamicObject& sfbp_dynamic_object(int index) const;
  ::xpilot::sr2_0::proto::SfbpDynamicObject* add_sfbp_dynamic_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpDynamicObject >&
      sfbp_dynamic_object() const;

  // repeated .xpilot.sr2_0.proto.SfbpStaticObject sfbp_static_object = 4;
  int sfbp_static_object_size() const;
  private:
  int _internal_sfbp_static_object_size() const;
  public:
  void clear_sfbp_static_object();
  ::xpilot::sr2_0::proto::SfbpStaticObject* mutable_sfbp_static_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpStaticObject >*
      mutable_sfbp_static_object();
  private:
  const ::xpilot::sr2_0::proto::SfbpStaticObject& _internal_sfbp_static_object(int index) const;
  ::xpilot::sr2_0::proto::SfbpStaticObject* _internal_add_sfbp_static_object();
  public:
  const ::xpilot::sr2_0::proto::SfbpStaticObject& sfbp_static_object(int index) const;
  ::xpilot::sr2_0::proto::SfbpStaticObject* add_sfbp_static_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpStaticObject >&
      sfbp_static_object() const;

  // .xpilot.sr2_0.proto.EgoMotion ego_motion = 2;
  bool has_ego_motion() const;
  private:
  bool _internal_has_ego_motion() const;
  public:
  void clear_ego_motion();
  const ::xpilot::sr2_0::proto::EgoMotion& ego_motion() const;
  ::xpilot::sr2_0::proto::EgoMotion* release_ego_motion();
  ::xpilot::sr2_0::proto::EgoMotion* mutable_ego_motion();
  void set_allocated_ego_motion(::xpilot::sr2_0::proto::EgoMotion* ego_motion);
  private:
  const ::xpilot::sr2_0::proto::EgoMotion& _internal_ego_motion() const;
  ::xpilot::sr2_0::proto::EgoMotion* _internal_mutable_ego_motion();
  public:
  void unsafe_arena_set_allocated_ego_motion(
      ::xpilot::sr2_0::proto::EgoMotion* ego_motion);
  ::xpilot::sr2_0::proto::EgoMotion* unsafe_arena_release_ego_motion();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.SfbpRwmDdsMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpDynamicObject > sfbp_dynamic_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpStaticObject > sfbp_static_object_;
  ::xpilot::sr2_0::proto::EgoMotion* ego_motion_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5ffusion_2fsensor_5ffusion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EgoMotion

// .xpilot.sr2_0.proto.Point3f local_pose_p = 1;
inline bool EgoMotion::_internal_has_local_pose_p() const {
  return this != internal_default_instance() && local_pose_p_ != nullptr;
}
inline bool EgoMotion::has_local_pose_p() const {
  return _internal_has_local_pose_p();
}
inline void EgoMotion::clear_local_pose_p() {
  if (GetArena() == nullptr && local_pose_p_ != nullptr) {
    delete local_pose_p_;
  }
  local_pose_p_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point3f& EgoMotion::_internal_local_pose_p() const {
  const ::xpilot::sr2_0::proto::Point3f* p = local_pose_p_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point3f*>(
      &::xpilot::sr2_0::proto::_Point3f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point3f& EgoMotion::local_pose_p() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.EgoMotion.local_pose_p)
  return _internal_local_pose_p();
}
inline void EgoMotion::unsafe_arena_set_allocated_local_pose_p(
    ::xpilot::sr2_0::proto::Point3f* local_pose_p) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_p_);
  }
  local_pose_p_ = local_pose_p;
  if (local_pose_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_pose_p)
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::release_local_pose_p() {
  auto temp = unsafe_arena_release_local_pose_p();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::unsafe_arena_release_local_pose_p() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.EgoMotion.local_pose_p)
  
  ::xpilot::sr2_0::proto::Point3f* temp = local_pose_p_;
  local_pose_p_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::_internal_mutable_local_pose_p() {
  
  if (local_pose_p_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point3f>(GetArena());
    local_pose_p_ = p;
  }
  return local_pose_p_;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::mutable_local_pose_p() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.EgoMotion.local_pose_p)
  return _internal_mutable_local_pose_p();
}
inline void EgoMotion::set_allocated_local_pose_p(::xpilot::sr2_0::proto::Point3f* local_pose_p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_pose_p_;
  }
  if (local_pose_p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_pose_p);
    if (message_arena != submessage_arena) {
      local_pose_p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_pose_p, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_p_ = local_pose_p;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_pose_p)
}

// .xpilot.sr2_0.proto.Quaternion local_pose_q = 2;
inline bool EgoMotion::_internal_has_local_pose_q() const {
  return this != internal_default_instance() && local_pose_q_ != nullptr;
}
inline bool EgoMotion::has_local_pose_q() const {
  return _internal_has_local_pose_q();
}
inline const ::xpilot::sr2_0::proto::Quaternion& EgoMotion::_internal_local_pose_q() const {
  const ::xpilot::sr2_0::proto::Quaternion* p = local_pose_q_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Quaternion*>(
      &::xpilot::sr2_0::proto::_Quaternion_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Quaternion& EgoMotion::local_pose_q() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.EgoMotion.local_pose_q)
  return _internal_local_pose_q();
}
inline void EgoMotion::unsafe_arena_set_allocated_local_pose_q(
    ::xpilot::sr2_0::proto::Quaternion* local_pose_q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_q_);
  }
  local_pose_q_ = local_pose_q;
  if (local_pose_q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_pose_q)
}
inline ::xpilot::sr2_0::proto::Quaternion* EgoMotion::release_local_pose_q() {
  auto temp = unsafe_arena_release_local_pose_q();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Quaternion* EgoMotion::unsafe_arena_release_local_pose_q() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.EgoMotion.local_pose_q)
  
  ::xpilot::sr2_0::proto::Quaternion* temp = local_pose_q_;
  local_pose_q_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Quaternion* EgoMotion::_internal_mutable_local_pose_q() {
  
  if (local_pose_q_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Quaternion>(GetArena());
    local_pose_q_ = p;
  }
  return local_pose_q_;
}
inline ::xpilot::sr2_0::proto::Quaternion* EgoMotion::mutable_local_pose_q() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.EgoMotion.local_pose_q)
  return _internal_mutable_local_pose_q();
}
inline void EgoMotion::set_allocated_local_pose_q(::xpilot::sr2_0::proto::Quaternion* local_pose_q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_q_);
  }
  if (local_pose_q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_q)->GetArena();
    if (message_arena != submessage_arena) {
      local_pose_q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_pose_q, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_q_ = local_pose_q;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_pose_q)
}

// .xpilot.sr2_0.proto.Point3f local_linear_velocity = 3;
inline bool EgoMotion::_internal_has_local_linear_velocity() const {
  return this != internal_default_instance() && local_linear_velocity_ != nullptr;
}
inline bool EgoMotion::has_local_linear_velocity() const {
  return _internal_has_local_linear_velocity();
}
inline void EgoMotion::clear_local_linear_velocity() {
  if (GetArena() == nullptr && local_linear_velocity_ != nullptr) {
    delete local_linear_velocity_;
  }
  local_linear_velocity_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point3f& EgoMotion::_internal_local_linear_velocity() const {
  const ::xpilot::sr2_0::proto::Point3f* p = local_linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point3f*>(
      &::xpilot::sr2_0::proto::_Point3f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point3f& EgoMotion::local_linear_velocity() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.EgoMotion.local_linear_velocity)
  return _internal_local_linear_velocity();
}
inline void EgoMotion::unsafe_arena_set_allocated_local_linear_velocity(
    ::xpilot::sr2_0::proto::Point3f* local_linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_linear_velocity_);
  }
  local_linear_velocity_ = local_linear_velocity;
  if (local_linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_linear_velocity)
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::release_local_linear_velocity() {
  auto temp = unsafe_arena_release_local_linear_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::unsafe_arena_release_local_linear_velocity() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.EgoMotion.local_linear_velocity)
  
  ::xpilot::sr2_0::proto::Point3f* temp = local_linear_velocity_;
  local_linear_velocity_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::_internal_mutable_local_linear_velocity() {
  
  if (local_linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point3f>(GetArena());
    local_linear_velocity_ = p;
  }
  return local_linear_velocity_;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::mutable_local_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.EgoMotion.local_linear_velocity)
  return _internal_mutable_local_linear_velocity();
}
inline void EgoMotion::set_allocated_local_linear_velocity(::xpilot::sr2_0::proto::Point3f* local_linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_linear_velocity_;
  }
  if (local_linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_linear_velocity);
    if (message_arena != submessage_arena) {
      local_linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  local_linear_velocity_ = local_linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_linear_velocity)
}

// .xpilot.sr2_0.proto.Point3f local_linear_acceleration = 4;
inline bool EgoMotion::_internal_has_local_linear_acceleration() const {
  return this != internal_default_instance() && local_linear_acceleration_ != nullptr;
}
inline bool EgoMotion::has_local_linear_acceleration() const {
  return _internal_has_local_linear_acceleration();
}
inline void EgoMotion::clear_local_linear_acceleration() {
  if (GetArena() == nullptr && local_linear_acceleration_ != nullptr) {
    delete local_linear_acceleration_;
  }
  local_linear_acceleration_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point3f& EgoMotion::_internal_local_linear_acceleration() const {
  const ::xpilot::sr2_0::proto::Point3f* p = local_linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point3f*>(
      &::xpilot::sr2_0::proto::_Point3f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point3f& EgoMotion::local_linear_acceleration() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.EgoMotion.local_linear_acceleration)
  return _internal_local_linear_acceleration();
}
inline void EgoMotion::unsafe_arena_set_allocated_local_linear_acceleration(
    ::xpilot::sr2_0::proto::Point3f* local_linear_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_linear_acceleration_);
  }
  local_linear_acceleration_ = local_linear_acceleration;
  if (local_linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_linear_acceleration)
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::release_local_linear_acceleration() {
  auto temp = unsafe_arena_release_local_linear_acceleration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::unsafe_arena_release_local_linear_acceleration() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.EgoMotion.local_linear_acceleration)
  
  ::xpilot::sr2_0::proto::Point3f* temp = local_linear_acceleration_;
  local_linear_acceleration_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::_internal_mutable_local_linear_acceleration() {
  
  if (local_linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point3f>(GetArena());
    local_linear_acceleration_ = p;
  }
  return local_linear_acceleration_;
}
inline ::xpilot::sr2_0::proto::Point3f* EgoMotion::mutable_local_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.EgoMotion.local_linear_acceleration)
  return _internal_mutable_local_linear_acceleration();
}
inline void EgoMotion::set_allocated_local_linear_acceleration(::xpilot::sr2_0::proto::Point3f* local_linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_linear_acceleration_;
  }
  if (local_linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_linear_acceleration);
    if (message_arena != submessage_arena) {
      local_linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  local_linear_acceleration_ = local_linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.EgoMotion.local_linear_acceleration)
}

// float ego_yaw = 5;
inline void EgoMotion::clear_ego_yaw() {
  ego_yaw_ = 0;
}
inline float EgoMotion::_internal_ego_yaw() const {
  return ego_yaw_;
}
inline float EgoMotion::ego_yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.EgoMotion.ego_yaw)
  return _internal_ego_yaw();
}
inline void EgoMotion::_internal_set_ego_yaw(float value) {
  
  ego_yaw_ = value;
}
inline void EgoMotion::set_ego_yaw(float value) {
  _internal_set_ego_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.EgoMotion.ego_yaw)
}

// float ego_yaw_rate = 6;
inline void EgoMotion::clear_ego_yaw_rate() {
  ego_yaw_rate_ = 0;
}
inline float EgoMotion::_internal_ego_yaw_rate() const {
  return ego_yaw_rate_;
}
inline float EgoMotion::ego_yaw_rate() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.EgoMotion.ego_yaw_rate)
  return _internal_ego_yaw_rate();
}
inline void EgoMotion::_internal_set_ego_yaw_rate(float value) {
  
  ego_yaw_rate_ = value;
}
inline void EgoMotion::set_ego_yaw_rate(float value) {
  _internal_set_ego_yaw_rate(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.EgoMotion.ego_yaw_rate)
}

// -------------------------------------------------------------------

// Point2f

// float x = 1;
inline void Point2f::clear_x() {
  x_ = 0;
}
inline float Point2f::_internal_x() const {
  return x_;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point2f.x)
  return _internal_x();
}
inline void Point2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point2f.x)
}

// float y = 2;
inline void Point2f::clear_y() {
  y_ = 0;
}
inline float Point2f::_internal_y() const {
  return y_;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point2f.y)
  return _internal_y();
}
inline void Point2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point2f.y)
}

// -------------------------------------------------------------------

// Point3f

// float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::_internal_x() const {
  return x_;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point3f.x)
  return _internal_x();
}
inline void Point3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point3f.x)
}

// float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::_internal_y() const {
  return y_;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point3f.y)
  return _internal_y();
}
inline void Point3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point3f.y)
}

// float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::_internal_z() const {
  return z_;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Point3f.z)
  return _internal_z();
}
inline void Point3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Point3f.z)
}

// -------------------------------------------------------------------

// SfbpDynamicObject

// uint32 track_id = 1;
inline void SfbpDynamicObject::clear_track_id() {
  track_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_track_id() const {
  return track_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::track_id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.track_id)
  return _internal_track_id();
}
inline void SfbpDynamicObject::_internal_set_track_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  track_id_ = value;
}
inline void SfbpDynamicObject::set_track_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.track_id)
}

// uint32 type = 2;
inline void SfbpDynamicObject::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.type)
  return _internal_type();
}
inline void SfbpDynamicObject::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void SfbpDynamicObject::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.type)
}

// uint32 direction = 3;
inline void SfbpDynamicObject::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::direction() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.direction)
  return _internal_direction();
}
inline void SfbpDynamicObject::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void SfbpDynamicObject::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.direction)
}

// uint32 signallight_status = 4;
inline void SfbpDynamicObject::clear_signallight_status() {
  signallight_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_signallight_status() const {
  return signallight_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::signallight_status() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.signallight_status)
  return _internal_signallight_status();
}
inline void SfbpDynamicObject::_internal_set_signallight_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  signallight_status_ = value;
}
inline void SfbpDynamicObject::set_signallight_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signallight_status(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.signallight_status)
}

// uint32 brakelight_status = 5;
inline void SfbpDynamicObject::clear_brakelight_status() {
  brakelight_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_brakelight_status() const {
  return brakelight_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::brakelight_status() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.brakelight_status)
  return _internal_brakelight_status();
}
inline void SfbpDynamicObject::_internal_set_brakelight_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  brakelight_status_ = value;
}
inline void SfbpDynamicObject::set_brakelight_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_brakelight_status(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.brakelight_status)
}

// .xpilot.sr2_0.proto.Point3f local_pose = 6;
inline bool SfbpDynamicObject::_internal_has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != nullptr;
}
inline bool SfbpDynamicObject::has_local_pose() const {
  return _internal_has_local_pose();
}
inline void SfbpDynamicObject::clear_local_pose() {
  if (GetArena() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point3f& SfbpDynamicObject::_internal_local_pose() const {
  const ::xpilot::sr2_0::proto::Point3f* p = local_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point3f*>(
      &::xpilot::sr2_0::proto::_Point3f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point3f& SfbpDynamicObject::local_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.local_pose)
  return _internal_local_pose();
}
inline void SfbpDynamicObject::unsafe_arena_set_allocated_local_pose(
    ::xpilot::sr2_0::proto::Point3f* local_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_);
  }
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.local_pose)
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpDynamicObject::release_local_pose() {
  auto temp = unsafe_arena_release_local_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpDynamicObject::unsafe_arena_release_local_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpDynamicObject.local_pose)
  
  ::xpilot::sr2_0::proto::Point3f* temp = local_pose_;
  local_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpDynamicObject::_internal_mutable_local_pose() {
  
  if (local_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point3f>(GetArena());
    local_pose_ = p;
  }
  return local_pose_;
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpDynamicObject::mutable_local_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpDynamicObject.local_pose)
  return _internal_mutable_local_pose();
}
inline void SfbpDynamicObject::set_allocated_local_pose(::xpilot::sr2_0::proto::Point3f* local_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_pose_;
  }
  if (local_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_pose);
    if (message_arena != submessage_arena) {
      local_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_pose, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_ = local_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.local_pose)
}

// .xpilot.sr2_0.proto.Point2f local_linear_velocity = 7;
inline bool SfbpDynamicObject::_internal_has_local_linear_velocity() const {
  return this != internal_default_instance() && local_linear_velocity_ != nullptr;
}
inline bool SfbpDynamicObject::has_local_linear_velocity() const {
  return _internal_has_local_linear_velocity();
}
inline void SfbpDynamicObject::clear_local_linear_velocity() {
  if (GetArena() == nullptr && local_linear_velocity_ != nullptr) {
    delete local_linear_velocity_;
  }
  local_linear_velocity_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point2f& SfbpDynamicObject::_internal_local_linear_velocity() const {
  const ::xpilot::sr2_0::proto::Point2f* p = local_linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point2f*>(
      &::xpilot::sr2_0::proto::_Point2f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point2f& SfbpDynamicObject::local_linear_velocity() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_velocity)
  return _internal_local_linear_velocity();
}
inline void SfbpDynamicObject::unsafe_arena_set_allocated_local_linear_velocity(
    ::xpilot::sr2_0::proto::Point2f* local_linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_linear_velocity_);
  }
  local_linear_velocity_ = local_linear_velocity;
  if (local_linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_velocity)
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::release_local_linear_velocity() {
  auto temp = unsafe_arena_release_local_linear_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::unsafe_arena_release_local_linear_velocity() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_velocity)
  
  ::xpilot::sr2_0::proto::Point2f* temp = local_linear_velocity_;
  local_linear_velocity_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::_internal_mutable_local_linear_velocity() {
  
  if (local_linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point2f>(GetArena());
    local_linear_velocity_ = p;
  }
  return local_linear_velocity_;
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::mutable_local_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_velocity)
  return _internal_mutable_local_linear_velocity();
}
inline void SfbpDynamicObject::set_allocated_local_linear_velocity(::xpilot::sr2_0::proto::Point2f* local_linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_linear_velocity_;
  }
  if (local_linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_linear_velocity);
    if (message_arena != submessage_arena) {
      local_linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  local_linear_velocity_ = local_linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_velocity)
}

// .xpilot.sr2_0.proto.Point2f local_linear_acceleration = 8;
inline bool SfbpDynamicObject::_internal_has_local_linear_acceleration() const {
  return this != internal_default_instance() && local_linear_acceleration_ != nullptr;
}
inline bool SfbpDynamicObject::has_local_linear_acceleration() const {
  return _internal_has_local_linear_acceleration();
}
inline void SfbpDynamicObject::clear_local_linear_acceleration() {
  if (GetArena() == nullptr && local_linear_acceleration_ != nullptr) {
    delete local_linear_acceleration_;
  }
  local_linear_acceleration_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point2f& SfbpDynamicObject::_internal_local_linear_acceleration() const {
  const ::xpilot::sr2_0::proto::Point2f* p = local_linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point2f*>(
      &::xpilot::sr2_0::proto::_Point2f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point2f& SfbpDynamicObject::local_linear_acceleration() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_acceleration)
  return _internal_local_linear_acceleration();
}
inline void SfbpDynamicObject::unsafe_arena_set_allocated_local_linear_acceleration(
    ::xpilot::sr2_0::proto::Point2f* local_linear_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_linear_acceleration_);
  }
  local_linear_acceleration_ = local_linear_acceleration;
  if (local_linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_acceleration)
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::release_local_linear_acceleration() {
  auto temp = unsafe_arena_release_local_linear_acceleration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::unsafe_arena_release_local_linear_acceleration() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_acceleration)
  
  ::xpilot::sr2_0::proto::Point2f* temp = local_linear_acceleration_;
  local_linear_acceleration_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::_internal_mutable_local_linear_acceleration() {
  
  if (local_linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point2f>(GetArena());
    local_linear_acceleration_ = p;
  }
  return local_linear_acceleration_;
}
inline ::xpilot::sr2_0::proto::Point2f* SfbpDynamicObject::mutable_local_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_acceleration)
  return _internal_mutable_local_linear_acceleration();
}
inline void SfbpDynamicObject::set_allocated_local_linear_acceleration(::xpilot::sr2_0::proto::Point2f* local_linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_linear_acceleration_;
  }
  if (local_linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_linear_acceleration);
    if (message_arena != submessage_arena) {
      local_linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  local_linear_acceleration_ = local_linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.local_linear_acceleration)
}

// float local_yaw = 9;
inline void SfbpDynamicObject::clear_local_yaw() {
  local_yaw_ = 0;
}
inline float SfbpDynamicObject::_internal_local_yaw() const {
  return local_yaw_;
}
inline float SfbpDynamicObject::local_yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.local_yaw)
  return _internal_local_yaw();
}
inline void SfbpDynamicObject::_internal_set_local_yaw(float value) {
  
  local_yaw_ = value;
}
inline void SfbpDynamicObject::set_local_yaw(float value) {
  _internal_set_local_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.local_yaw)
}

// float local_yaw_rate = 10;
inline void SfbpDynamicObject::clear_local_yaw_rate() {
  local_yaw_rate_ = 0;
}
inline float SfbpDynamicObject::_internal_local_yaw_rate() const {
  return local_yaw_rate_;
}
inline float SfbpDynamicObject::local_yaw_rate() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.local_yaw_rate)
  return _internal_local_yaw_rate();
}
inline void SfbpDynamicObject::_internal_set_local_yaw_rate(float value) {
  
  local_yaw_rate_ = value;
}
inline void SfbpDynamicObject::set_local_yaw_rate(float value) {
  _internal_set_local_yaw_rate(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.local_yaw_rate)
}

// uint32 vru_info = 11;
inline void SfbpDynamicObject::clear_vru_info() {
  vru_info_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_vru_info() const {
  return vru_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::vru_info() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.vru_info)
  return _internal_vru_info();
}
inline void SfbpDynamicObject::_internal_set_vru_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vru_info_ = value;
}
inline void SfbpDynamicObject::set_vru_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vru_info(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.vru_info)
}

// uint32 color_status = 12;
inline void SfbpDynamicObject::clear_color_status() {
  color_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_color_status() const {
  return color_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::color_status() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.color_status)
  return _internal_color_status();
}
inline void SfbpDynamicObject::_internal_set_color_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_status_ = value;
}
inline void SfbpDynamicObject::set_color_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color_status(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.color_status)
}

// .xpilot.sr2_0.proto.ObjectSize size = 13;
inline bool SfbpDynamicObject::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool SfbpDynamicObject::has_size() const {
  return _internal_has_size();
}
inline void SfbpDynamicObject::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::ObjectSize& SfbpDynamicObject::_internal_size() const {
  const ::xpilot::sr2_0::proto::ObjectSize* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::ObjectSize*>(
      &::xpilot::sr2_0::proto::_ObjectSize_default_instance_);
}
inline const ::xpilot::sr2_0::proto::ObjectSize& SfbpDynamicObject::size() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.size)
  return _internal_size();
}
inline void SfbpDynamicObject::unsafe_arena_set_allocated_size(
    ::xpilot::sr2_0::proto::ObjectSize* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.size)
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpDynamicObject::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpDynamicObject::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpDynamicObject.size)
  
  ::xpilot::sr2_0::proto::ObjectSize* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpDynamicObject::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::ObjectSize>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpDynamicObject::mutable_size() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpDynamicObject.size)
  return _internal_mutable_size();
}
inline void SfbpDynamicObject::set_allocated_size(::xpilot::sr2_0::proto::ObjectSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpDynamicObject.size)
}

// repeated uint32 deformation_indicator = 14;
inline int SfbpDynamicObject::_internal_deformation_indicator_size() const {
  return deformation_indicator_.size();
}
inline int SfbpDynamicObject::deformation_indicator_size() const {
  return _internal_deformation_indicator_size();
}
inline void SfbpDynamicObject::clear_deformation_indicator() {
  deformation_indicator_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::_internal_deformation_indicator(int index) const {
  return deformation_indicator_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpDynamicObject::deformation_indicator(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpDynamicObject.deformation_indicator)
  return _internal_deformation_indicator(index);
}
inline void SfbpDynamicObject::set_deformation_indicator(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  deformation_indicator_.Set(index, value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpDynamicObject.deformation_indicator)
}
inline void SfbpDynamicObject::_internal_add_deformation_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  deformation_indicator_.Add(value);
}
inline void SfbpDynamicObject::add_deformation_indicator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_deformation_indicator(value);
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.SfbpDynamicObject.deformation_indicator)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SfbpDynamicObject::_internal_deformation_indicator() const {
  return deformation_indicator_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SfbpDynamicObject::deformation_indicator() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.SfbpDynamicObject.deformation_indicator)
  return _internal_deformation_indicator();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SfbpDynamicObject::_internal_mutable_deformation_indicator() {
  return &deformation_indicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SfbpDynamicObject::mutable_deformation_indicator() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.SfbpDynamicObject.deformation_indicator)
  return _internal_mutable_deformation_indicator();
}

// -------------------------------------------------------------------

// ObjectSize

// float length = 1;
inline void ObjectSize::clear_length() {
  length_ = 0;
}
inline float ObjectSize::_internal_length() const {
  return length_;
}
inline float ObjectSize::length() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ObjectSize.length)
  return _internal_length();
}
inline void ObjectSize::_internal_set_length(float value) {
  
  length_ = value;
}
inline void ObjectSize::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ObjectSize.length)
}

// float width = 2;
inline void ObjectSize::clear_width() {
  width_ = 0;
}
inline float ObjectSize::_internal_width() const {
  return width_;
}
inline float ObjectSize::width() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ObjectSize.width)
  return _internal_width();
}
inline void ObjectSize::_internal_set_width(float value) {
  
  width_ = value;
}
inline void ObjectSize::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ObjectSize.width)
}

// float height = 3;
inline void ObjectSize::clear_height() {
  height_ = 0;
}
inline float ObjectSize::_internal_height() const {
  return height_;
}
inline float ObjectSize::height() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ObjectSize.height)
  return _internal_height();
}
inline void ObjectSize::_internal_set_height(float value) {
  
  height_ = value;
}
inline void ObjectSize::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ObjectSize.height)
}

// -------------------------------------------------------------------

// SfbpStaticObject

// uint32 id = 1;
inline void SfbpStaticObject::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpStaticObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpStaticObject::id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpStaticObject.id)
  return _internal_id();
}
inline void SfbpStaticObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void SfbpStaticObject::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpStaticObject.id)
}

// uint32 type = 2;
inline void SfbpStaticObject::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpStaticObject::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SfbpStaticObject::type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpStaticObject.type)
  return _internal_type();
}
inline void SfbpStaticObject::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void SfbpStaticObject::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpStaticObject.type)
}

// .xpilot.sr2_0.proto.ObjectSize size = 3;
inline bool SfbpStaticObject::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool SfbpStaticObject::has_size() const {
  return _internal_has_size();
}
inline void SfbpStaticObject::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::ObjectSize& SfbpStaticObject::_internal_size() const {
  const ::xpilot::sr2_0::proto::ObjectSize* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::ObjectSize*>(
      &::xpilot::sr2_0::proto::_ObjectSize_default_instance_);
}
inline const ::xpilot::sr2_0::proto::ObjectSize& SfbpStaticObject::size() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpStaticObject.size)
  return _internal_size();
}
inline void SfbpStaticObject::unsafe_arena_set_allocated_size(
    ::xpilot::sr2_0::proto::ObjectSize* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpStaticObject.size)
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpStaticObject::release_size() {
  auto temp = unsafe_arena_release_size();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpStaticObject::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpStaticObject.size)
  
  ::xpilot::sr2_0::proto::ObjectSize* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpStaticObject::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::ObjectSize>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::xpilot::sr2_0::proto::ObjectSize* SfbpStaticObject::mutable_size() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpStaticObject.size)
  return _internal_mutable_size();
}
inline void SfbpStaticObject::set_allocated_size(::xpilot::sr2_0::proto::ObjectSize* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpStaticObject.size)
}

// .xpilot.sr2_0.proto.Point3f local_pose = 4;
inline bool SfbpStaticObject::_internal_has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != nullptr;
}
inline bool SfbpStaticObject::has_local_pose() const {
  return _internal_has_local_pose();
}
inline void SfbpStaticObject::clear_local_pose() {
  if (GetArena() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::Point3f& SfbpStaticObject::_internal_local_pose() const {
  const ::xpilot::sr2_0::proto::Point3f* p = local_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Point3f*>(
      &::xpilot::sr2_0::proto::_Point3f_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Point3f& SfbpStaticObject::local_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpStaticObject.local_pose)
  return _internal_local_pose();
}
inline void SfbpStaticObject::unsafe_arena_set_allocated_local_pose(
    ::xpilot::sr2_0::proto::Point3f* local_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_pose_);
  }
  local_pose_ = local_pose;
  if (local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpStaticObject.local_pose)
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpStaticObject::release_local_pose() {
  auto temp = unsafe_arena_release_local_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpStaticObject::unsafe_arena_release_local_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpStaticObject.local_pose)
  
  ::xpilot::sr2_0::proto::Point3f* temp = local_pose_;
  local_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpStaticObject::_internal_mutable_local_pose() {
  
  if (local_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Point3f>(GetArena());
    local_pose_ = p;
  }
  return local_pose_;
}
inline ::xpilot::sr2_0::proto::Point3f* SfbpStaticObject::mutable_local_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpStaticObject.local_pose)
  return _internal_mutable_local_pose();
}
inline void SfbpStaticObject::set_allocated_local_pose(::xpilot::sr2_0::proto::Point3f* local_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_pose_;
  }
  if (local_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_pose);
    if (message_arena != submessage_arena) {
      local_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_pose, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_ = local_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpStaticObject.local_pose)
}

// float local_yaw = 5;
inline void SfbpStaticObject::clear_local_yaw() {
  local_yaw_ = 0;
}
inline float SfbpStaticObject::_internal_local_yaw() const {
  return local_yaw_;
}
inline float SfbpStaticObject::local_yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpStaticObject.local_yaw)
  return _internal_local_yaw();
}
inline void SfbpStaticObject::_internal_set_local_yaw(float value) {
  
  local_yaw_ = value;
}
inline void SfbpStaticObject::set_local_yaw(float value) {
  _internal_set_local_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpStaticObject.local_yaw)
}

// bool is_passable = 6;
inline void SfbpStaticObject::clear_is_passable() {
  is_passable_ = false;
}
inline bool SfbpStaticObject::_internal_is_passable() const {
  return is_passable_;
}
inline bool SfbpStaticObject::is_passable() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpStaticObject.is_passable)
  return _internal_is_passable();
}
inline void SfbpStaticObject::_internal_set_is_passable(bool value) {
  
  is_passable_ = value;
}
inline void SfbpStaticObject::set_is_passable(bool value) {
  _internal_set_is_passable(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpStaticObject.is_passable)
}

// -------------------------------------------------------------------

// SfbpRwmDdsMsg

// uint64 timestamp = 1;
inline void SfbpRwmDdsMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SfbpRwmDdsMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SfbpRwmDdsMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpRwmDdsMsg.timestamp)
  return _internal_timestamp();
}
inline void SfbpRwmDdsMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void SfbpRwmDdsMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.SfbpRwmDdsMsg.timestamp)
}

// .xpilot.sr2_0.proto.EgoMotion ego_motion = 2;
inline bool SfbpRwmDdsMsg::_internal_has_ego_motion() const {
  return this != internal_default_instance() && ego_motion_ != nullptr;
}
inline bool SfbpRwmDdsMsg::has_ego_motion() const {
  return _internal_has_ego_motion();
}
inline void SfbpRwmDdsMsg::clear_ego_motion() {
  if (GetArena() == nullptr && ego_motion_ != nullptr) {
    delete ego_motion_;
  }
  ego_motion_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::EgoMotion& SfbpRwmDdsMsg::_internal_ego_motion() const {
  const ::xpilot::sr2_0::proto::EgoMotion* p = ego_motion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::EgoMotion*>(
      &::xpilot::sr2_0::proto::_EgoMotion_default_instance_);
}
inline const ::xpilot::sr2_0::proto::EgoMotion& SfbpRwmDdsMsg::ego_motion() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpRwmDdsMsg.ego_motion)
  return _internal_ego_motion();
}
inline void SfbpRwmDdsMsg::unsafe_arena_set_allocated_ego_motion(
    ::xpilot::sr2_0::proto::EgoMotion* ego_motion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ego_motion_);
  }
  ego_motion_ = ego_motion;
  if (ego_motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.SfbpRwmDdsMsg.ego_motion)
}
inline ::xpilot::sr2_0::proto::EgoMotion* SfbpRwmDdsMsg::release_ego_motion() {
  auto temp = unsafe_arena_release_ego_motion();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::EgoMotion* SfbpRwmDdsMsg::unsafe_arena_release_ego_motion() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.SfbpRwmDdsMsg.ego_motion)
  
  ::xpilot::sr2_0::proto::EgoMotion* temp = ego_motion_;
  ego_motion_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::EgoMotion* SfbpRwmDdsMsg::_internal_mutable_ego_motion() {
  
  if (ego_motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::EgoMotion>(GetArena());
    ego_motion_ = p;
  }
  return ego_motion_;
}
inline ::xpilot::sr2_0::proto::EgoMotion* SfbpRwmDdsMsg::mutable_ego_motion() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpRwmDdsMsg.ego_motion)
  return _internal_mutable_ego_motion();
}
inline void SfbpRwmDdsMsg::set_allocated_ego_motion(::xpilot::sr2_0::proto::EgoMotion* ego_motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ego_motion_;
  }
  if (ego_motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ego_motion);
    if (message_arena != submessage_arena) {
      ego_motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ego_motion, submessage_arena);
    }
    
  } else {
    
  }
  ego_motion_ = ego_motion;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.SfbpRwmDdsMsg.ego_motion)
}

// repeated .xpilot.sr2_0.proto.SfbpDynamicObject sfbp_dynamic_object = 3;
inline int SfbpRwmDdsMsg::_internal_sfbp_dynamic_object_size() const {
  return sfbp_dynamic_object_.size();
}
inline int SfbpRwmDdsMsg::sfbp_dynamic_object_size() const {
  return _internal_sfbp_dynamic_object_size();
}
inline void SfbpRwmDdsMsg::clear_sfbp_dynamic_object() {
  sfbp_dynamic_object_.Clear();
}
inline ::xpilot::sr2_0::proto::SfbpDynamicObject* SfbpRwmDdsMsg::mutable_sfbp_dynamic_object(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_dynamic_object)
  return sfbp_dynamic_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpDynamicObject >*
SfbpRwmDdsMsg::mutable_sfbp_dynamic_object() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_dynamic_object)
  return &sfbp_dynamic_object_;
}
inline const ::xpilot::sr2_0::proto::SfbpDynamicObject& SfbpRwmDdsMsg::_internal_sfbp_dynamic_object(int index) const {
  return sfbp_dynamic_object_.Get(index);
}
inline const ::xpilot::sr2_0::proto::SfbpDynamicObject& SfbpRwmDdsMsg::sfbp_dynamic_object(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_dynamic_object)
  return _internal_sfbp_dynamic_object(index);
}
inline ::xpilot::sr2_0::proto::SfbpDynamicObject* SfbpRwmDdsMsg::_internal_add_sfbp_dynamic_object() {
  return sfbp_dynamic_object_.Add();
}
inline ::xpilot::sr2_0::proto::SfbpDynamicObject* SfbpRwmDdsMsg::add_sfbp_dynamic_object() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_dynamic_object)
  return _internal_add_sfbp_dynamic_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpDynamicObject >&
SfbpRwmDdsMsg::sfbp_dynamic_object() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_dynamic_object)
  return sfbp_dynamic_object_;
}

// repeated .xpilot.sr2_0.proto.SfbpStaticObject sfbp_static_object = 4;
inline int SfbpRwmDdsMsg::_internal_sfbp_static_object_size() const {
  return sfbp_static_object_.size();
}
inline int SfbpRwmDdsMsg::sfbp_static_object_size() const {
  return _internal_sfbp_static_object_size();
}
inline void SfbpRwmDdsMsg::clear_sfbp_static_object() {
  sfbp_static_object_.Clear();
}
inline ::xpilot::sr2_0::proto::SfbpStaticObject* SfbpRwmDdsMsg::mutable_sfbp_static_object(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_static_object)
  return sfbp_static_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpStaticObject >*
SfbpRwmDdsMsg::mutable_sfbp_static_object() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_static_object)
  return &sfbp_static_object_;
}
inline const ::xpilot::sr2_0::proto::SfbpStaticObject& SfbpRwmDdsMsg::_internal_sfbp_static_object(int index) const {
  return sfbp_static_object_.Get(index);
}
inline const ::xpilot::sr2_0::proto::SfbpStaticObject& SfbpRwmDdsMsg::sfbp_static_object(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_static_object)
  return _internal_sfbp_static_object(index);
}
inline ::xpilot::sr2_0::proto::SfbpStaticObject* SfbpRwmDdsMsg::_internal_add_sfbp_static_object() {
  return sfbp_static_object_.Add();
}
inline ::xpilot::sr2_0::proto::SfbpStaticObject* SfbpRwmDdsMsg::add_sfbp_static_object() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_static_object)
  return _internal_add_sfbp_static_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::SfbpStaticObject >&
SfbpRwmDdsMsg::sfbp_static_object() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.SfbpRwmDdsMsg.sfbp_static_object)
  return sfbp_static_object_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_5ffusion_2fsensor_5ffusion_2eproto
