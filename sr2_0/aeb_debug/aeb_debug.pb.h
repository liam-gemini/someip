// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aeb_debug/aeb_debug.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aeb_5fdebug_2faeb_5fdebug_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aeb_5fdebug_2faeb_5fdebug_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aeb_5fdebug_2faeb_5fdebug_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aeb_5fdebug_2faeb_5fdebug_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aeb_5fdebug_2faeb_5fdebug_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class ActiveSafetyDebugMsg;
class ActiveSafetyDebugMsgDefaultTypeInternal;
extern ActiveSafetyDebugMsgDefaultTypeInternal _ActiveSafetyDebugMsg_default_instance_;
class Objmonitor;
class ObjmonitorDefaultTypeInternal;
extern ObjmonitorDefaultTypeInternal _Objmonitor_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::ActiveSafetyDebugMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::ActiveSafetyDebugMsg>(Arena*);
template<> ::xpilot::sr2_0::proto::Objmonitor* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::Objmonitor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

enum Objmonitor_ObjectType : int {
  Objmonitor_ObjectType_UNKNOWN = 0,
  Objmonitor_ObjectType_PERSON = 1,
  Objmonitor_ObjectType_ANIMAL = 2,
  Objmonitor_ObjectType_SEDAN = 3,
  Objmonitor_ObjectType_SUV = 4,
  Objmonitor_ObjectType_VAN = 5,
  Objmonitor_ObjectType_BICYCLE = 6,
  Objmonitor_ObjectType_TRICYCLE = 7,
  Objmonitor_ObjectType_MOTORCYCLE = 8,
  Objmonitor_ObjectType_TRAILER_TRUCK = 9,
  Objmonitor_ObjectType_TRUCK = 10,
  Objmonitor_ObjectType_BUS = 11,
  Objmonitor_ObjectType_PICKUP = 12,
  Objmonitor_ObjectType_Objmonitor_ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Objmonitor_ObjectType_Objmonitor_ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Objmonitor_ObjectType_IsValid(int value);
constexpr Objmonitor_ObjectType Objmonitor_ObjectType_ObjectType_MIN = Objmonitor_ObjectType_UNKNOWN;
constexpr Objmonitor_ObjectType Objmonitor_ObjectType_ObjectType_MAX = Objmonitor_ObjectType_PICKUP;
constexpr int Objmonitor_ObjectType_ObjectType_ARRAYSIZE = Objmonitor_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Objmonitor_ObjectType_descriptor();
template<typename T>
inline const std::string& Objmonitor_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Objmonitor_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Objmonitor_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Objmonitor_ObjectType_descriptor(), enum_t_value);
}
inline bool Objmonitor_ObjectType_Parse(
    const std::string& name, Objmonitor_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Objmonitor_ObjectType>(
    Objmonitor_ObjectType_descriptor(), name, value);
}
enum ScenerioType : int {
  SCENE_NONE = 0,
  SCENE_CBNA = 1,
  SCENE_CBNAO = 2,
  SCENE_CBFA = 3,
  SCENE_CBLA = 4,
  SCENE_CPFA = 5,
  SCENE_CPNA = 6,
  SCENE_CPNC = 7,
  SCENE_CPLA = 8,
  SCENE_CPTA_F = 9,
  SCENE_CPTA_N = 10,
  SCENE_CCRs = 11,
  SCENE_CCRm = 12,
  SCENE_CCRb = 13,
  SCENE_CCFtap = 14,
  SCENE_CCCscp_F = 15,
  SCENE_CCCscp_N = 16,
  SCENE_CCFhos = 17,
  SCENE_CCFhol = 18,
  SCENE_CCRs_Lateral = 19,
  SCENE_CPRs = 20,
  SCENE_CPRm_F = 21,
  SCENE_CPRm_N = 22,
  SCENE_CBRs = 23,
  SCENE_CBRm_F = 24,
  SCENE_CBRm_N = 25,
  SCENE_CBTA_F = 26,
  SCENE_CBTA_N = 27,
  SCENE_CMRs = 28,
  SCENE_CMRb = 29,
  SCENE_CMFtap = 30,
  SCENE_OTHER = 31,
  SCENE_NUM = 32,
  ScenerioType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ScenerioType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ScenerioType_IsValid(int value);
constexpr ScenerioType ScenerioType_MIN = SCENE_NONE;
constexpr ScenerioType ScenerioType_MAX = SCENE_NUM;
constexpr int ScenerioType_ARRAYSIZE = ScenerioType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenerioType_descriptor();
template<typename T>
inline const std::string& ScenerioType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScenerioType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScenerioType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScenerioType_descriptor(), enum_t_value);
}
inline bool ScenerioType_Parse(
    const std::string& name, ScenerioType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScenerioType>(
    ScenerioType_descriptor(), name, value);
}
// ===================================================================

class Objmonitor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.Objmonitor) */ {
 public:
  inline Objmonitor() : Objmonitor(nullptr) {};
  virtual ~Objmonitor();

  Objmonitor(const Objmonitor& from);
  Objmonitor(Objmonitor&& from) noexcept
    : Objmonitor() {
    *this = ::std::move(from);
  }

  inline Objmonitor& operator=(const Objmonitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Objmonitor& operator=(Objmonitor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Objmonitor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Objmonitor* internal_default_instance() {
    return reinterpret_cast<const Objmonitor*>(
               &_Objmonitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Objmonitor& a, Objmonitor& b) {
    a.Swap(&b);
  }
  inline void Swap(Objmonitor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Objmonitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Objmonitor* New() const final {
    return CreateMaybeMessage<Objmonitor>(nullptr);
  }

  Objmonitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Objmonitor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Objmonitor& from);
  void MergeFrom(const Objmonitor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Objmonitor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.Objmonitor";
  }
  protected:
  explicit Objmonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aeb_5fdebug_2faeb_5fdebug_2eproto);
    return ::descriptor_table_aeb_5fdebug_2faeb_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Objmonitor_ObjectType ObjectType;
  static constexpr ObjectType UNKNOWN =
    Objmonitor_ObjectType_UNKNOWN;
  static constexpr ObjectType PERSON =
    Objmonitor_ObjectType_PERSON;
  static constexpr ObjectType ANIMAL =
    Objmonitor_ObjectType_ANIMAL;
  static constexpr ObjectType SEDAN =
    Objmonitor_ObjectType_SEDAN;
  static constexpr ObjectType SUV =
    Objmonitor_ObjectType_SUV;
  static constexpr ObjectType VAN =
    Objmonitor_ObjectType_VAN;
  static constexpr ObjectType BICYCLE =
    Objmonitor_ObjectType_BICYCLE;
  static constexpr ObjectType TRICYCLE =
    Objmonitor_ObjectType_TRICYCLE;
  static constexpr ObjectType MOTORCYCLE =
    Objmonitor_ObjectType_MOTORCYCLE;
  static constexpr ObjectType TRAILER_TRUCK =
    Objmonitor_ObjectType_TRAILER_TRUCK;
  static constexpr ObjectType TRUCK =
    Objmonitor_ObjectType_TRUCK;
  static constexpr ObjectType BUS =
    Objmonitor_ObjectType_BUS;
  static constexpr ObjectType PICKUP =
    Objmonitor_ObjectType_PICKUP;
  static inline bool ObjectType_IsValid(int value) {
    return Objmonitor_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    Objmonitor_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    Objmonitor_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    Objmonitor_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return Objmonitor_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return Objmonitor_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(const std::string& name,
      ObjectType* value) {
    return Objmonitor_ObjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
    kObjDistXFieldNumber = 3,
    kObjDistYFieldNumber = 4,
    kObjRelvelXFieldNumber = 5,
    kObjRelvelYFieldNumber = 6,
    kTypeProbFieldNumber = 7,
    kScenerioTypeFieldNumber = 8,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .xpilot.sr2_0.proto.Objmonitor.ObjectType object_type = 2;
  void clear_object_type();
  ::xpilot::sr2_0::proto::Objmonitor_ObjectType object_type() const;
  void set_object_type(::xpilot::sr2_0::proto::Objmonitor_ObjectType value);
  private:
  ::xpilot::sr2_0::proto::Objmonitor_ObjectType _internal_object_type() const;
  void _internal_set_object_type(::xpilot::sr2_0::proto::Objmonitor_ObjectType value);
  public:

  // float obj_dist_x = 3;
  void clear_obj_dist_x();
  float obj_dist_x() const;
  void set_obj_dist_x(float value);
  private:
  float _internal_obj_dist_x() const;
  void _internal_set_obj_dist_x(float value);
  public:

  // float obj_dist_y = 4;
  void clear_obj_dist_y();
  float obj_dist_y() const;
  void set_obj_dist_y(float value);
  private:
  float _internal_obj_dist_y() const;
  void _internal_set_obj_dist_y(float value);
  public:

  // float obj_relvel_x = 5;
  void clear_obj_relvel_x();
  float obj_relvel_x() const;
  void set_obj_relvel_x(float value);
  private:
  float _internal_obj_relvel_x() const;
  void _internal_set_obj_relvel_x(float value);
  public:

  // float obj_relvel_y = 6;
  void clear_obj_relvel_y();
  float obj_relvel_y() const;
  void set_obj_relvel_y(float value);
  private:
  float _internal_obj_relvel_y() const;
  void _internal_set_obj_relvel_y(float value);
  public:

  // float type_prob = 7;
  void clear_type_prob();
  float type_prob() const;
  void set_type_prob(float value);
  private:
  float _internal_type_prob() const;
  void _internal_set_type_prob(float value);
  public:

  // .xpilot.sr2_0.proto.ScenerioType scenerio_type = 8;
  void clear_scenerio_type();
  ::xpilot::sr2_0::proto::ScenerioType scenerio_type() const;
  void set_scenerio_type(::xpilot::sr2_0::proto::ScenerioType value);
  private:
  ::xpilot::sr2_0::proto::ScenerioType _internal_scenerio_type() const;
  void _internal_set_scenerio_type(::xpilot::sr2_0::proto::ScenerioType value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.Objmonitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int object_type_;
  float obj_dist_x_;
  float obj_dist_y_;
  float obj_relvel_x_;
  float obj_relvel_y_;
  float type_prob_;
  int scenerio_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aeb_5fdebug_2faeb_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class ActiveSafetyDebugMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.ActiveSafetyDebugMsg) */ {
 public:
  inline ActiveSafetyDebugMsg() : ActiveSafetyDebugMsg(nullptr) {};
  virtual ~ActiveSafetyDebugMsg();

  ActiveSafetyDebugMsg(const ActiveSafetyDebugMsg& from);
  ActiveSafetyDebugMsg(ActiveSafetyDebugMsg&& from) noexcept
    : ActiveSafetyDebugMsg() {
    *this = ::std::move(from);
  }

  inline ActiveSafetyDebugMsg& operator=(const ActiveSafetyDebugMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveSafetyDebugMsg& operator=(ActiveSafetyDebugMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveSafetyDebugMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveSafetyDebugMsg* internal_default_instance() {
    return reinterpret_cast<const ActiveSafetyDebugMsg*>(
               &_ActiveSafetyDebugMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActiveSafetyDebugMsg& a, ActiveSafetyDebugMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveSafetyDebugMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveSafetyDebugMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveSafetyDebugMsg* New() const final {
    return CreateMaybeMessage<ActiveSafetyDebugMsg>(nullptr);
  }

  ActiveSafetyDebugMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveSafetyDebugMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveSafetyDebugMsg& from);
  void MergeFrom(const ActiveSafetyDebugMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveSafetyDebugMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.ActiveSafetyDebugMsg";
  }
  protected:
  explicit ActiveSafetyDebugMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aeb_5fdebug_2faeb_5fdebug_2eproto);
    return ::descriptor_table_aeb_5fdebug_2faeb_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjMonitorFieldNumber = 2,
    kTtcFieldNumber = 1,
    kScenerioTypeFieldNumber = 3,
  };
  // repeated .xpilot.sr2_0.proto.Objmonitor obj_monitor = 2;
  int obj_monitor_size() const;
  private:
  int _internal_obj_monitor_size() const;
  public:
  void clear_obj_monitor();
  ::xpilot::sr2_0::proto::Objmonitor* mutable_obj_monitor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Objmonitor >*
      mutable_obj_monitor();
  private:
  const ::xpilot::sr2_0::proto::Objmonitor& _internal_obj_monitor(int index) const;
  ::xpilot::sr2_0::proto::Objmonitor* _internal_add_obj_monitor();
  public:
  const ::xpilot::sr2_0::proto::Objmonitor& obj_monitor(int index) const;
  ::xpilot::sr2_0::proto::Objmonitor* add_obj_monitor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Objmonitor >&
      obj_monitor() const;

  // float ttc = 1;
  void clear_ttc();
  float ttc() const;
  void set_ttc(float value);
  private:
  float _internal_ttc() const;
  void _internal_set_ttc(float value);
  public:

  // int32 scenerio_type = 3;
  void clear_scenerio_type();
  ::PROTOBUF_NAMESPACE_ID::int32 scenerio_type() const;
  void set_scenerio_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scenerio_type() const;
  void _internal_set_scenerio_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.ActiveSafetyDebugMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Objmonitor > obj_monitor_;
  float ttc_;
  ::PROTOBUF_NAMESPACE_ID::int32 scenerio_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aeb_5fdebug_2faeb_5fdebug_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Objmonitor

// uint32 id = 1;
inline void Objmonitor::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Objmonitor::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Objmonitor::id() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.id)
  return _internal_id();
}
inline void Objmonitor::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Objmonitor::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.id)
}

// .xpilot.sr2_0.proto.Objmonitor.ObjectType object_type = 2;
inline void Objmonitor::clear_object_type() {
  object_type_ = 0;
}
inline ::xpilot::sr2_0::proto::Objmonitor_ObjectType Objmonitor::_internal_object_type() const {
  return static_cast< ::xpilot::sr2_0::proto::Objmonitor_ObjectType >(object_type_);
}
inline ::xpilot::sr2_0::proto::Objmonitor_ObjectType Objmonitor::object_type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.object_type)
  return _internal_object_type();
}
inline void Objmonitor::_internal_set_object_type(::xpilot::sr2_0::proto::Objmonitor_ObjectType value) {
  
  object_type_ = value;
}
inline void Objmonitor::set_object_type(::xpilot::sr2_0::proto::Objmonitor_ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.object_type)
}

// float obj_dist_x = 3;
inline void Objmonitor::clear_obj_dist_x() {
  obj_dist_x_ = 0;
}
inline float Objmonitor::_internal_obj_dist_x() const {
  return obj_dist_x_;
}
inline float Objmonitor::obj_dist_x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.obj_dist_x)
  return _internal_obj_dist_x();
}
inline void Objmonitor::_internal_set_obj_dist_x(float value) {
  
  obj_dist_x_ = value;
}
inline void Objmonitor::set_obj_dist_x(float value) {
  _internal_set_obj_dist_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.obj_dist_x)
}

// float obj_dist_y = 4;
inline void Objmonitor::clear_obj_dist_y() {
  obj_dist_y_ = 0;
}
inline float Objmonitor::_internal_obj_dist_y() const {
  return obj_dist_y_;
}
inline float Objmonitor::obj_dist_y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.obj_dist_y)
  return _internal_obj_dist_y();
}
inline void Objmonitor::_internal_set_obj_dist_y(float value) {
  
  obj_dist_y_ = value;
}
inline void Objmonitor::set_obj_dist_y(float value) {
  _internal_set_obj_dist_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.obj_dist_y)
}

// float obj_relvel_x = 5;
inline void Objmonitor::clear_obj_relvel_x() {
  obj_relvel_x_ = 0;
}
inline float Objmonitor::_internal_obj_relvel_x() const {
  return obj_relvel_x_;
}
inline float Objmonitor::obj_relvel_x() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.obj_relvel_x)
  return _internal_obj_relvel_x();
}
inline void Objmonitor::_internal_set_obj_relvel_x(float value) {
  
  obj_relvel_x_ = value;
}
inline void Objmonitor::set_obj_relvel_x(float value) {
  _internal_set_obj_relvel_x(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.obj_relvel_x)
}

// float obj_relvel_y = 6;
inline void Objmonitor::clear_obj_relvel_y() {
  obj_relvel_y_ = 0;
}
inline float Objmonitor::_internal_obj_relvel_y() const {
  return obj_relvel_y_;
}
inline float Objmonitor::obj_relvel_y() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.obj_relvel_y)
  return _internal_obj_relvel_y();
}
inline void Objmonitor::_internal_set_obj_relvel_y(float value) {
  
  obj_relvel_y_ = value;
}
inline void Objmonitor::set_obj_relvel_y(float value) {
  _internal_set_obj_relvel_y(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.obj_relvel_y)
}

// float type_prob = 7;
inline void Objmonitor::clear_type_prob() {
  type_prob_ = 0;
}
inline float Objmonitor::_internal_type_prob() const {
  return type_prob_;
}
inline float Objmonitor::type_prob() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.type_prob)
  return _internal_type_prob();
}
inline void Objmonitor::_internal_set_type_prob(float value) {
  
  type_prob_ = value;
}
inline void Objmonitor::set_type_prob(float value) {
  _internal_set_type_prob(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.type_prob)
}

// .xpilot.sr2_0.proto.ScenerioType scenerio_type = 8;
inline void Objmonitor::clear_scenerio_type() {
  scenerio_type_ = 0;
}
inline ::xpilot::sr2_0::proto::ScenerioType Objmonitor::_internal_scenerio_type() const {
  return static_cast< ::xpilot::sr2_0::proto::ScenerioType >(scenerio_type_);
}
inline ::xpilot::sr2_0::proto::ScenerioType Objmonitor::scenerio_type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.Objmonitor.scenerio_type)
  return _internal_scenerio_type();
}
inline void Objmonitor::_internal_set_scenerio_type(::xpilot::sr2_0::proto::ScenerioType value) {
  
  scenerio_type_ = value;
}
inline void Objmonitor::set_scenerio_type(::xpilot::sr2_0::proto::ScenerioType value) {
  _internal_set_scenerio_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.Objmonitor.scenerio_type)
}

// -------------------------------------------------------------------

// ActiveSafetyDebugMsg

// float ttc = 1;
inline void ActiveSafetyDebugMsg::clear_ttc() {
  ttc_ = 0;
}
inline float ActiveSafetyDebugMsg::_internal_ttc() const {
  return ttc_;
}
inline float ActiveSafetyDebugMsg::ttc() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.ttc)
  return _internal_ttc();
}
inline void ActiveSafetyDebugMsg::_internal_set_ttc(float value) {
  
  ttc_ = value;
}
inline void ActiveSafetyDebugMsg::set_ttc(float value) {
  _internal_set_ttc(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.ttc)
}

// repeated .xpilot.sr2_0.proto.Objmonitor obj_monitor = 2;
inline int ActiveSafetyDebugMsg::_internal_obj_monitor_size() const {
  return obj_monitor_.size();
}
inline int ActiveSafetyDebugMsg::obj_monitor_size() const {
  return _internal_obj_monitor_size();
}
inline void ActiveSafetyDebugMsg::clear_obj_monitor() {
  obj_monitor_.Clear();
}
inline ::xpilot::sr2_0::proto::Objmonitor* ActiveSafetyDebugMsg::mutable_obj_monitor(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.obj_monitor)
  return obj_monitor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Objmonitor >*
ActiveSafetyDebugMsg::mutable_obj_monitor() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.obj_monitor)
  return &obj_monitor_;
}
inline const ::xpilot::sr2_0::proto::Objmonitor& ActiveSafetyDebugMsg::_internal_obj_monitor(int index) const {
  return obj_monitor_.Get(index);
}
inline const ::xpilot::sr2_0::proto::Objmonitor& ActiveSafetyDebugMsg::obj_monitor(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.obj_monitor)
  return _internal_obj_monitor(index);
}
inline ::xpilot::sr2_0::proto::Objmonitor* ActiveSafetyDebugMsg::_internal_add_obj_monitor() {
  return obj_monitor_.Add();
}
inline ::xpilot::sr2_0::proto::Objmonitor* ActiveSafetyDebugMsg::add_obj_monitor() {
  // @@protoc_insertion_point(field_add:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.obj_monitor)
  return _internal_add_obj_monitor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::sr2_0::proto::Objmonitor >&
ActiveSafetyDebugMsg::obj_monitor() const {
  // @@protoc_insertion_point(field_list:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.obj_monitor)
  return obj_monitor_;
}

// int32 scenerio_type = 3;
inline void ActiveSafetyDebugMsg::clear_scenerio_type() {
  scenerio_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveSafetyDebugMsg::_internal_scenerio_type() const {
  return scenerio_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveSafetyDebugMsg::scenerio_type() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.scenerio_type)
  return _internal_scenerio_type();
}
inline void ActiveSafetyDebugMsg::_internal_set_scenerio_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scenerio_type_ = value;
}
inline void ActiveSafetyDebugMsg::set_scenerio_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scenerio_type(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.ActiveSafetyDebugMsg.scenerio_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xpilot::sr2_0::proto::Objmonitor_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xpilot::sr2_0::proto::Objmonitor_ObjectType>() {
  return ::xpilot::sr2_0::proto::Objmonitor_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::xpilot::sr2_0::proto::ScenerioType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xpilot::sr2_0::proto::ScenerioType>() {
  return ::xpilot::sr2_0::proto::ScenerioType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aeb_5fdebug_2faeb_5fdebug_2eproto
