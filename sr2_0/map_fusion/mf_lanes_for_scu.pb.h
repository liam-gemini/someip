// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_fusion/mf_lanes_for_scu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class LaneInfo_List_XPU2SCU;
class LaneInfo_List_XPU2SCUDefaultTypeInternal;
extern LaneInfo_List_XPU2SCUDefaultTypeInternal _LaneInfo_List_XPU2SCU_default_instance_;
class LaneLineInfo_XPU2SCU;
class LaneLineInfo_XPU2SCUDefaultTypeInternal;
extern LaneLineInfo_XPU2SCUDefaultTypeInternal _LaneLineInfo_XPU2SCU_default_instance_;
class MapFusionLanesForScuMsg;
class MapFusionLanesForScuMsgDefaultTypeInternal;
extern MapFusionLanesForScuMsgDefaultTypeInternal _MapFusionLanesForScuMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU>(Arena*);
template<> ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(Arena*);
template<> ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::MapFusionLanesForScuMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

enum LaneLineColor : int {
  UNKNOWN = 0,
  WHITE = 1,
  YELLOW = 2,
  ORANGE = 3,
  BLUE = 4,
  GREEN = 5,
  GRAY = 6,
  LEFT_GRAY_RIGHT_YELLOW = 7,
  LEFT_YELLOW_RIGHT_WHITE = 8,
  BLACK = 9,
  OTHERS = 10,
  MAX_NUM = 11,
  LaneLineColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LaneLineColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LaneLineColor_IsValid(int value);
constexpr LaneLineColor LaneLineColor_MIN = UNKNOWN;
constexpr LaneLineColor LaneLineColor_MAX = MAX_NUM;
constexpr int LaneLineColor_ARRAYSIZE = LaneLineColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineColor_descriptor();
template<typename T>
inline const std::string& LaneLineColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LaneLineColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LaneLineColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LaneLineColor_descriptor(), enum_t_value);
}
inline bool LaneLineColor_Parse(
    const std::string& name, LaneLineColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LaneLineColor>(
    LaneLineColor_descriptor(), name, value);
}
// ===================================================================

class LaneLineInfo_XPU2SCU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU) */ {
 public:
  inline LaneLineInfo_XPU2SCU() : LaneLineInfo_XPU2SCU(nullptr) {};
  virtual ~LaneLineInfo_XPU2SCU();

  LaneLineInfo_XPU2SCU(const LaneLineInfo_XPU2SCU& from);
  LaneLineInfo_XPU2SCU(LaneLineInfo_XPU2SCU&& from) noexcept
    : LaneLineInfo_XPU2SCU() {
    *this = ::std::move(from);
  }

  inline LaneLineInfo_XPU2SCU& operator=(const LaneLineInfo_XPU2SCU& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneLineInfo_XPU2SCU& operator=(LaneLineInfo_XPU2SCU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneLineInfo_XPU2SCU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneLineInfo_XPU2SCU* internal_default_instance() {
    return reinterpret_cast<const LaneLineInfo_XPU2SCU*>(
               &_LaneLineInfo_XPU2SCU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneLineInfo_XPU2SCU& a, LaneLineInfo_XPU2SCU& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneLineInfo_XPU2SCU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneLineInfo_XPU2SCU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneLineInfo_XPU2SCU* New() const final {
    return CreateMaybeMessage<LaneLineInfo_XPU2SCU>(nullptr);
  }

  LaneLineInfo_XPU2SCU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneLineInfo_XPU2SCU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneLineInfo_XPU2SCU& from);
  void MergeFrom(const LaneLineInfo_XPU2SCU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneLineInfo_XPU2SCU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU";
  }
  protected:
  explicit LaneLineInfo_XPU2SCU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto);
    return ::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoudaryObjectFieldNumber = 15,
    kLaneIDFieldNumber = 1,
    kLaneStartDxFieldNumber = 2,
    kLaneStartDxStdFieldNumber = 3,
    kLaneEndDxFieldNumber = 4,
    kLaneEndDxStdFieldNumber = 5,
    kLaneExistProbFieldNumber = 6,
    kLaneTypeFieldNumber = 7,
    kLaneTypeProbFieldNumber = 8,
    kLaneColorFieldNumber = 9,
    kLaneDistYC0FieldNumber = 10,
    kLaneYawAngleC1FieldNumber = 11,
    kLaneCurveC2FieldNumber = 12,
    kLaneCurveChangeC3FieldNumber = 13,
    kLaneWidthFieldNumber = 14,
  };
  // .xpilot.sr2_0.proto.BoundaryObject boudary_object = 15;
  bool has_boudary_object() const;
  private:
  bool _internal_has_boudary_object() const;
  public:
  void clear_boudary_object();
  const ::xpilot::sr2_0::proto::BoundaryObject& boudary_object() const;
  ::xpilot::sr2_0::proto::BoundaryObject* release_boudary_object();
  ::xpilot::sr2_0::proto::BoundaryObject* mutable_boudary_object();
  void set_allocated_boudary_object(::xpilot::sr2_0::proto::BoundaryObject* boudary_object);
  private:
  const ::xpilot::sr2_0::proto::BoundaryObject& _internal_boudary_object() const;
  ::xpilot::sr2_0::proto::BoundaryObject* _internal_mutable_boudary_object();
  public:
  void unsafe_arena_set_allocated_boudary_object(
      ::xpilot::sr2_0::proto::BoundaryObject* boudary_object);
  ::xpilot::sr2_0::proto::BoundaryObject* unsafe_arena_release_boudary_object();

  // uint32 LaneID = 1;
  void clear_laneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 laneid() const;
  void set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_laneid() const;
  void _internal_set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float LaneStartDx = 2;
  void clear_lanestartdx();
  float lanestartdx() const;
  void set_lanestartdx(float value);
  private:
  float _internal_lanestartdx() const;
  void _internal_set_lanestartdx(float value);
  public:

  // float LaneStartDxStd = 3;
  void clear_lanestartdxstd();
  float lanestartdxstd() const;
  void set_lanestartdxstd(float value);
  private:
  float _internal_lanestartdxstd() const;
  void _internal_set_lanestartdxstd(float value);
  public:

  // float LaneEndDx = 4;
  void clear_laneenddx();
  float laneenddx() const;
  void set_laneenddx(float value);
  private:
  float _internal_laneenddx() const;
  void _internal_set_laneenddx(float value);
  public:

  // float LaneEndDxStd = 5;
  void clear_laneenddxstd();
  float laneenddxstd() const;
  void set_laneenddxstd(float value);
  private:
  float _internal_laneenddxstd() const;
  void _internal_set_laneenddxstd(float value);
  public:

  // uint32 LaneExistProb = 6;
  void clear_laneexistprob();
  ::PROTOBUF_NAMESPACE_ID::uint32 laneexistprob() const;
  void set_laneexistprob(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_laneexistprob() const;
  void _internal_set_laneexistprob(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LaneType = 7;
  void clear_lanetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 lanetype() const;
  void set_lanetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lanetype() const;
  void _internal_set_lanetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LaneTypeProb = 8;
  void clear_lanetypeprob();
  ::PROTOBUF_NAMESPACE_ID::uint32 lanetypeprob() const;
  void set_lanetypeprob(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lanetypeprob() const;
  void _internal_set_lanetypeprob(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .xpilot.sr2_0.proto.LaneLineColor LaneColor = 9;
  void clear_lanecolor();
  ::xpilot::sr2_0::proto::LaneLineColor lanecolor() const;
  void set_lanecolor(::xpilot::sr2_0::proto::LaneLineColor value);
  private:
  ::xpilot::sr2_0::proto::LaneLineColor _internal_lanecolor() const;
  void _internal_set_lanecolor(::xpilot::sr2_0::proto::LaneLineColor value);
  public:

  // float LaneDistY_C0 = 10;
  void clear_lanedisty_c0();
  float lanedisty_c0() const;
  void set_lanedisty_c0(float value);
  private:
  float _internal_lanedisty_c0() const;
  void _internal_set_lanedisty_c0(float value);
  public:

  // float LaneYawAngle_C1 = 11;
  void clear_laneyawangle_c1();
  float laneyawangle_c1() const;
  void set_laneyawangle_c1(float value);
  private:
  float _internal_laneyawangle_c1() const;
  void _internal_set_laneyawangle_c1(float value);
  public:

  // float LaneCurve_C2 = 12;
  void clear_lanecurve_c2();
  float lanecurve_c2() const;
  void set_lanecurve_c2(float value);
  private:
  float _internal_lanecurve_c2() const;
  void _internal_set_lanecurve_c2(float value);
  public:

  // float LaneCurveChange_C3 = 13;
  void clear_lanecurvechange_c3();
  float lanecurvechange_c3() const;
  void set_lanecurvechange_c3(float value);
  private:
  float _internal_lanecurvechange_c3() const;
  void _internal_set_lanecurvechange_c3(float value);
  public:

  // float LaneWidth = 14;
  void clear_lanewidth();
  float lanewidth() const;
  void set_lanewidth(float value);
  private:
  float _internal_lanewidth() const;
  void _internal_set_lanewidth(float value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::BoundaryObject* boudary_object_;
  ::PROTOBUF_NAMESPACE_ID::uint32 laneid_;
  float lanestartdx_;
  float lanestartdxstd_;
  float laneenddx_;
  float laneenddxstd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 laneexistprob_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lanetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lanetypeprob_;
  int lanecolor_;
  float lanedisty_c0_;
  float laneyawangle_c1_;
  float lanecurve_c2_;
  float lanecurvechange_c3_;
  float lanewidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
};
// -------------------------------------------------------------------

class LaneInfo_List_XPU2SCU PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU) */ {
 public:
  inline LaneInfo_List_XPU2SCU() : LaneInfo_List_XPU2SCU(nullptr) {};
  virtual ~LaneInfo_List_XPU2SCU();

  LaneInfo_List_XPU2SCU(const LaneInfo_List_XPU2SCU& from);
  LaneInfo_List_XPU2SCU(LaneInfo_List_XPU2SCU&& from) noexcept
    : LaneInfo_List_XPU2SCU() {
    *this = ::std::move(from);
  }

  inline LaneInfo_List_XPU2SCU& operator=(const LaneInfo_List_XPU2SCU& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneInfo_List_XPU2SCU& operator=(LaneInfo_List_XPU2SCU&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneInfo_List_XPU2SCU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneInfo_List_XPU2SCU* internal_default_instance() {
    return reinterpret_cast<const LaneInfo_List_XPU2SCU*>(
               &_LaneInfo_List_XPU2SCU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneInfo_List_XPU2SCU& a, LaneInfo_List_XPU2SCU& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneInfo_List_XPU2SCU* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneInfo_List_XPU2SCU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneInfo_List_XPU2SCU* New() const final {
    return CreateMaybeMessage<LaneInfo_List_XPU2SCU>(nullptr);
  }

  LaneInfo_List_XPU2SCU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneInfo_List_XPU2SCU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneInfo_List_XPU2SCU& from);
  void MergeFrom(const LaneInfo_List_XPU2SCU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneInfo_List_XPU2SCU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU";
  }
  protected:
  explicit LaneInfo_List_XPU2SCU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto);
    return ::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLe1FieldNumber = 1,
    kRi1FieldNumber = 2,
    kLe2FieldNumber = 3,
    kRi2FieldNumber = 4,
    kLe3FieldNumber = 5,
    kRi3FieldNumber = 6,
  };
  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le1 = 1;
  bool has_le1() const;
  private:
  bool _internal_has_le1() const;
  public:
  void clear_le1();
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& le1() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* release_le1();
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* mutable_le1();
  void set_allocated_le1(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le1);
  private:
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& _internal_le1() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* _internal_mutable_le1();
  public:
  void unsafe_arena_set_allocated_le1(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le1);
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* unsafe_arena_release_le1();

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri1 = 2;
  bool has_ri1() const;
  private:
  bool _internal_has_ri1() const;
  public:
  void clear_ri1();
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& ri1() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* release_ri1();
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* mutable_ri1();
  void set_allocated_ri1(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri1);
  private:
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& _internal_ri1() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* _internal_mutable_ri1();
  public:
  void unsafe_arena_set_allocated_ri1(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri1);
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* unsafe_arena_release_ri1();

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le2 = 3;
  bool has_le2() const;
  private:
  bool _internal_has_le2() const;
  public:
  void clear_le2();
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& le2() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* release_le2();
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* mutable_le2();
  void set_allocated_le2(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le2);
  private:
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& _internal_le2() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* _internal_mutable_le2();
  public:
  void unsafe_arena_set_allocated_le2(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le2);
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* unsafe_arena_release_le2();

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri2 = 4;
  bool has_ri2() const;
  private:
  bool _internal_has_ri2() const;
  public:
  void clear_ri2();
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& ri2() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* release_ri2();
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* mutable_ri2();
  void set_allocated_ri2(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri2);
  private:
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& _internal_ri2() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* _internal_mutable_ri2();
  public:
  void unsafe_arena_set_allocated_ri2(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri2);
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* unsafe_arena_release_ri2();

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le3 = 5;
  bool has_le3() const;
  private:
  bool _internal_has_le3() const;
  public:
  void clear_le3();
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& le3() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* release_le3();
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* mutable_le3();
  void set_allocated_le3(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le3);
  private:
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& _internal_le3() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* _internal_mutable_le3();
  public:
  void unsafe_arena_set_allocated_le3(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le3);
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* unsafe_arena_release_le3();

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri3 = 6;
  bool has_ri3() const;
  private:
  bool _internal_has_ri3() const;
  public:
  void clear_ri3();
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& ri3() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* release_ri3();
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* mutable_ri3();
  void set_allocated_ri3(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri3);
  private:
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& _internal_ri3() const;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* _internal_mutable_ri3();
  public:
  void unsafe_arena_set_allocated_ri3(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri3);
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* unsafe_arena_release_ri3();

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le1_;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri1_;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le2_;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri2_;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le3_;
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
};
// -------------------------------------------------------------------

class MapFusionLanesForScuMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.MapFusionLanesForScuMsg) */ {
 public:
  inline MapFusionLanesForScuMsg() : MapFusionLanesForScuMsg(nullptr) {};
  virtual ~MapFusionLanesForScuMsg();

  MapFusionLanesForScuMsg(const MapFusionLanesForScuMsg& from);
  MapFusionLanesForScuMsg(MapFusionLanesForScuMsg&& from) noexcept
    : MapFusionLanesForScuMsg() {
    *this = ::std::move(from);
  }

  inline MapFusionLanesForScuMsg& operator=(const MapFusionLanesForScuMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapFusionLanesForScuMsg& operator=(MapFusionLanesForScuMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapFusionLanesForScuMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapFusionLanesForScuMsg* internal_default_instance() {
    return reinterpret_cast<const MapFusionLanesForScuMsg*>(
               &_MapFusionLanesForScuMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapFusionLanesForScuMsg& a, MapFusionLanesForScuMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MapFusionLanesForScuMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapFusionLanesForScuMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapFusionLanesForScuMsg* New() const final {
    return CreateMaybeMessage<MapFusionLanesForScuMsg>(nullptr);
  }

  MapFusionLanesForScuMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapFusionLanesForScuMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapFusionLanesForScuMsg& from);
  void MergeFrom(const MapFusionLanesForScuMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapFusionLanesForScuMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.MapFusionLanesForScuMsg";
  }
  protected:
  explicit MapFusionLanesForScuMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto);
    return ::descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpuLaneinfoFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU xpu_laneinfo = 2;
  bool has_xpu_laneinfo() const;
  private:
  bool _internal_has_xpu_laneinfo() const;
  public:
  void clear_xpu_laneinfo();
  const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU& xpu_laneinfo() const;
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* release_xpu_laneinfo();
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* mutable_xpu_laneinfo();
  void set_allocated_xpu_laneinfo(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* xpu_laneinfo);
  private:
  const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU& _internal_xpu_laneinfo() const;
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* _internal_mutable_xpu_laneinfo();
  public:
  void unsafe_arena_set_allocated_xpu_laneinfo(
      ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* xpu_laneinfo);
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* unsafe_arena_release_xpu_laneinfo();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* xpu_laneinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneLineInfo_XPU2SCU

// uint32 LaneID = 1;
inline void LaneLineInfo_XPU2SCU::clear_laneid() {
  laneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::_internal_laneid() const {
  return laneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::laneid() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneID)
  return _internal_laneid();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  laneid_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_laneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_laneid(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneID)
}

// float LaneStartDx = 2;
inline void LaneLineInfo_XPU2SCU::clear_lanestartdx() {
  lanestartdx_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_lanestartdx() const {
  return lanestartdx_;
}
inline float LaneLineInfo_XPU2SCU::lanestartdx() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneStartDx)
  return _internal_lanestartdx();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanestartdx(float value) {
  
  lanestartdx_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanestartdx(float value) {
  _internal_set_lanestartdx(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneStartDx)
}

// float LaneStartDxStd = 3;
inline void LaneLineInfo_XPU2SCU::clear_lanestartdxstd() {
  lanestartdxstd_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_lanestartdxstd() const {
  return lanestartdxstd_;
}
inline float LaneLineInfo_XPU2SCU::lanestartdxstd() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneStartDxStd)
  return _internal_lanestartdxstd();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanestartdxstd(float value) {
  
  lanestartdxstd_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanestartdxstd(float value) {
  _internal_set_lanestartdxstd(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneStartDxStd)
}

// float LaneEndDx = 4;
inline void LaneLineInfo_XPU2SCU::clear_laneenddx() {
  laneenddx_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_laneenddx() const {
  return laneenddx_;
}
inline float LaneLineInfo_XPU2SCU::laneenddx() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneEndDx)
  return _internal_laneenddx();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_laneenddx(float value) {
  
  laneenddx_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_laneenddx(float value) {
  _internal_set_laneenddx(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneEndDx)
}

// float LaneEndDxStd = 5;
inline void LaneLineInfo_XPU2SCU::clear_laneenddxstd() {
  laneenddxstd_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_laneenddxstd() const {
  return laneenddxstd_;
}
inline float LaneLineInfo_XPU2SCU::laneenddxstd() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneEndDxStd)
  return _internal_laneenddxstd();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_laneenddxstd(float value) {
  
  laneenddxstd_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_laneenddxstd(float value) {
  _internal_set_laneenddxstd(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneEndDxStd)
}

// uint32 LaneExistProb = 6;
inline void LaneLineInfo_XPU2SCU::clear_laneexistprob() {
  laneexistprob_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::_internal_laneexistprob() const {
  return laneexistprob_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::laneexistprob() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneExistProb)
  return _internal_laneexistprob();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_laneexistprob(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  laneexistprob_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_laneexistprob(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_laneexistprob(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneExistProb)
}

// uint32 LaneType = 7;
inline void LaneLineInfo_XPU2SCU::clear_lanetype() {
  lanetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::_internal_lanetype() const {
  return lanetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::lanetype() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneType)
  return _internal_lanetype();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lanetype_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lanetype(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneType)
}

// uint32 LaneTypeProb = 8;
inline void LaneLineInfo_XPU2SCU::clear_lanetypeprob() {
  lanetypeprob_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::_internal_lanetypeprob() const {
  return lanetypeprob_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaneLineInfo_XPU2SCU::lanetypeprob() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneTypeProb)
  return _internal_lanetypeprob();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanetypeprob(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lanetypeprob_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanetypeprob(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lanetypeprob(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneTypeProb)
}

// .xpilot.sr2_0.proto.LaneLineColor LaneColor = 9;
inline void LaneLineInfo_XPU2SCU::clear_lanecolor() {
  lanecolor_ = 0;
}
inline ::xpilot::sr2_0::proto::LaneLineColor LaneLineInfo_XPU2SCU::_internal_lanecolor() const {
  return static_cast< ::xpilot::sr2_0::proto::LaneLineColor >(lanecolor_);
}
inline ::xpilot::sr2_0::proto::LaneLineColor LaneLineInfo_XPU2SCU::lanecolor() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneColor)
  return _internal_lanecolor();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanecolor(::xpilot::sr2_0::proto::LaneLineColor value) {
  
  lanecolor_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanecolor(::xpilot::sr2_0::proto::LaneLineColor value) {
  _internal_set_lanecolor(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneColor)
}

// float LaneDistY_C0 = 10;
inline void LaneLineInfo_XPU2SCU::clear_lanedisty_c0() {
  lanedisty_c0_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_lanedisty_c0() const {
  return lanedisty_c0_;
}
inline float LaneLineInfo_XPU2SCU::lanedisty_c0() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneDistY_C0)
  return _internal_lanedisty_c0();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanedisty_c0(float value) {
  
  lanedisty_c0_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanedisty_c0(float value) {
  _internal_set_lanedisty_c0(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneDistY_C0)
}

// float LaneYawAngle_C1 = 11;
inline void LaneLineInfo_XPU2SCU::clear_laneyawangle_c1() {
  laneyawangle_c1_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_laneyawangle_c1() const {
  return laneyawangle_c1_;
}
inline float LaneLineInfo_XPU2SCU::laneyawangle_c1() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneYawAngle_C1)
  return _internal_laneyawangle_c1();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_laneyawangle_c1(float value) {
  
  laneyawangle_c1_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_laneyawangle_c1(float value) {
  _internal_set_laneyawangle_c1(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneYawAngle_C1)
}

// float LaneCurve_C2 = 12;
inline void LaneLineInfo_XPU2SCU::clear_lanecurve_c2() {
  lanecurve_c2_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_lanecurve_c2() const {
  return lanecurve_c2_;
}
inline float LaneLineInfo_XPU2SCU::lanecurve_c2() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneCurve_C2)
  return _internal_lanecurve_c2();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanecurve_c2(float value) {
  
  lanecurve_c2_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanecurve_c2(float value) {
  _internal_set_lanecurve_c2(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneCurve_C2)
}

// float LaneCurveChange_C3 = 13;
inline void LaneLineInfo_XPU2SCU::clear_lanecurvechange_c3() {
  lanecurvechange_c3_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_lanecurvechange_c3() const {
  return lanecurvechange_c3_;
}
inline float LaneLineInfo_XPU2SCU::lanecurvechange_c3() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneCurveChange_C3)
  return _internal_lanecurvechange_c3();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanecurvechange_c3(float value) {
  
  lanecurvechange_c3_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanecurvechange_c3(float value) {
  _internal_set_lanecurvechange_c3(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneCurveChange_C3)
}

// float LaneWidth = 14;
inline void LaneLineInfo_XPU2SCU::clear_lanewidth() {
  lanewidth_ = 0;
}
inline float LaneLineInfo_XPU2SCU::_internal_lanewidth() const {
  return lanewidth_;
}
inline float LaneLineInfo_XPU2SCU::lanewidth() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneWidth)
  return _internal_lanewidth();
}
inline void LaneLineInfo_XPU2SCU::_internal_set_lanewidth(float value) {
  
  lanewidth_ = value;
}
inline void LaneLineInfo_XPU2SCU::set_lanewidth(float value) {
  _internal_set_lanewidth(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.LaneWidth)
}

// .xpilot.sr2_0.proto.BoundaryObject boudary_object = 15;
inline bool LaneLineInfo_XPU2SCU::_internal_has_boudary_object() const {
  return this != internal_default_instance() && boudary_object_ != nullptr;
}
inline bool LaneLineInfo_XPU2SCU::has_boudary_object() const {
  return _internal_has_boudary_object();
}
inline const ::xpilot::sr2_0::proto::BoundaryObject& LaneLineInfo_XPU2SCU::_internal_boudary_object() const {
  const ::xpilot::sr2_0::proto::BoundaryObject* p = boudary_object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::BoundaryObject*>(
      &::xpilot::sr2_0::proto::_BoundaryObject_default_instance_);
}
inline const ::xpilot::sr2_0::proto::BoundaryObject& LaneLineInfo_XPU2SCU::boudary_object() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.boudary_object)
  return _internal_boudary_object();
}
inline void LaneLineInfo_XPU2SCU::unsafe_arena_set_allocated_boudary_object(
    ::xpilot::sr2_0::proto::BoundaryObject* boudary_object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boudary_object_);
  }
  boudary_object_ = boudary_object;
  if (boudary_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.boudary_object)
}
inline ::xpilot::sr2_0::proto::BoundaryObject* LaneLineInfo_XPU2SCU::release_boudary_object() {
  auto temp = unsafe_arena_release_boudary_object();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::BoundaryObject* LaneLineInfo_XPU2SCU::unsafe_arena_release_boudary_object() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.boudary_object)
  
  ::xpilot::sr2_0::proto::BoundaryObject* temp = boudary_object_;
  boudary_object_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::BoundaryObject* LaneLineInfo_XPU2SCU::_internal_mutable_boudary_object() {
  
  if (boudary_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::BoundaryObject>(GetArena());
    boudary_object_ = p;
  }
  return boudary_object_;
}
inline ::xpilot::sr2_0::proto::BoundaryObject* LaneLineInfo_XPU2SCU::mutable_boudary_object() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.boudary_object)
  return _internal_mutable_boudary_object();
}
inline void LaneLineInfo_XPU2SCU::set_allocated_boudary_object(::xpilot::sr2_0::proto::BoundaryObject* boudary_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boudary_object_);
  }
  if (boudary_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boudary_object)->GetArena();
    if (message_arena != submessage_arena) {
      boudary_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boudary_object, submessage_arena);
    }
    
  } else {
    
  }
  boudary_object_ = boudary_object;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU.boudary_object)
}

// -------------------------------------------------------------------

// LaneInfo_List_XPU2SCU

// .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le1 = 1;
inline bool LaneInfo_List_XPU2SCU::_internal_has_le1() const {
  return this != internal_default_instance() && le1_ != nullptr;
}
inline bool LaneInfo_List_XPU2SCU::has_le1() const {
  return _internal_has_le1();
}
inline void LaneInfo_List_XPU2SCU::clear_le1() {
  if (GetArena() == nullptr && le1_ != nullptr) {
    delete le1_;
  }
  le1_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::_internal_le1() const {
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* p = le1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::le1() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le1)
  return _internal_le1();
}
inline void LaneInfo_List_XPU2SCU::unsafe_arena_set_allocated_le1(
    ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(le1_);
  }
  le1_ = le1;
  if (le1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le1)
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::release_le1() {
  auto temp = unsafe_arena_release_le1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::unsafe_arena_release_le1() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le1)
  
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* temp = le1_;
  le1_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::_internal_mutable_le1() {
  
  if (le1_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(GetArena());
    le1_ = p;
  }
  return le1_;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::mutable_le1() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le1)
  return _internal_mutable_le1();
}
inline void LaneInfo_List_XPU2SCU::set_allocated_le1(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete le1_;
  }
  if (le1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(le1);
    if (message_arena != submessage_arena) {
      le1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, le1, submessage_arena);
    }
    
  } else {
    
  }
  le1_ = le1;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le1)
}

// .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri1 = 2;
inline bool LaneInfo_List_XPU2SCU::_internal_has_ri1() const {
  return this != internal_default_instance() && ri1_ != nullptr;
}
inline bool LaneInfo_List_XPU2SCU::has_ri1() const {
  return _internal_has_ri1();
}
inline void LaneInfo_List_XPU2SCU::clear_ri1() {
  if (GetArena() == nullptr && ri1_ != nullptr) {
    delete ri1_;
  }
  ri1_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::_internal_ri1() const {
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* p = ri1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::ri1() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri1)
  return _internal_ri1();
}
inline void LaneInfo_List_XPU2SCU::unsafe_arena_set_allocated_ri1(
    ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ri1_);
  }
  ri1_ = ri1;
  if (ri1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri1)
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::release_ri1() {
  auto temp = unsafe_arena_release_ri1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::unsafe_arena_release_ri1() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri1)
  
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* temp = ri1_;
  ri1_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::_internal_mutable_ri1() {
  
  if (ri1_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(GetArena());
    ri1_ = p;
  }
  return ri1_;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::mutable_ri1() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri1)
  return _internal_mutable_ri1();
}
inline void LaneInfo_List_XPU2SCU::set_allocated_ri1(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ri1_;
  }
  if (ri1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ri1);
    if (message_arena != submessage_arena) {
      ri1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ri1, submessage_arena);
    }
    
  } else {
    
  }
  ri1_ = ri1;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri1)
}

// .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le2 = 3;
inline bool LaneInfo_List_XPU2SCU::_internal_has_le2() const {
  return this != internal_default_instance() && le2_ != nullptr;
}
inline bool LaneInfo_List_XPU2SCU::has_le2() const {
  return _internal_has_le2();
}
inline void LaneInfo_List_XPU2SCU::clear_le2() {
  if (GetArena() == nullptr && le2_ != nullptr) {
    delete le2_;
  }
  le2_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::_internal_le2() const {
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* p = le2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::le2() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le2)
  return _internal_le2();
}
inline void LaneInfo_List_XPU2SCU::unsafe_arena_set_allocated_le2(
    ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(le2_);
  }
  le2_ = le2;
  if (le2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le2)
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::release_le2() {
  auto temp = unsafe_arena_release_le2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::unsafe_arena_release_le2() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le2)
  
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* temp = le2_;
  le2_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::_internal_mutable_le2() {
  
  if (le2_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(GetArena());
    le2_ = p;
  }
  return le2_;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::mutable_le2() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le2)
  return _internal_mutable_le2();
}
inline void LaneInfo_List_XPU2SCU::set_allocated_le2(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete le2_;
  }
  if (le2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(le2);
    if (message_arena != submessage_arena) {
      le2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, le2, submessage_arena);
    }
    
  } else {
    
  }
  le2_ = le2;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le2)
}

// .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri2 = 4;
inline bool LaneInfo_List_XPU2SCU::_internal_has_ri2() const {
  return this != internal_default_instance() && ri2_ != nullptr;
}
inline bool LaneInfo_List_XPU2SCU::has_ri2() const {
  return _internal_has_ri2();
}
inline void LaneInfo_List_XPU2SCU::clear_ri2() {
  if (GetArena() == nullptr && ri2_ != nullptr) {
    delete ri2_;
  }
  ri2_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::_internal_ri2() const {
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* p = ri2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::ri2() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri2)
  return _internal_ri2();
}
inline void LaneInfo_List_XPU2SCU::unsafe_arena_set_allocated_ri2(
    ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ri2_);
  }
  ri2_ = ri2;
  if (ri2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri2)
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::release_ri2() {
  auto temp = unsafe_arena_release_ri2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::unsafe_arena_release_ri2() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri2)
  
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* temp = ri2_;
  ri2_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::_internal_mutable_ri2() {
  
  if (ri2_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(GetArena());
    ri2_ = p;
  }
  return ri2_;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::mutable_ri2() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri2)
  return _internal_mutable_ri2();
}
inline void LaneInfo_List_XPU2SCU::set_allocated_ri2(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ri2_;
  }
  if (ri2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ri2);
    if (message_arena != submessage_arena) {
      ri2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ri2, submessage_arena);
    }
    
  } else {
    
  }
  ri2_ = ri2;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri2)
}

// .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le3 = 5;
inline bool LaneInfo_List_XPU2SCU::_internal_has_le3() const {
  return this != internal_default_instance() && le3_ != nullptr;
}
inline bool LaneInfo_List_XPU2SCU::has_le3() const {
  return _internal_has_le3();
}
inline void LaneInfo_List_XPU2SCU::clear_le3() {
  if (GetArena() == nullptr && le3_ != nullptr) {
    delete le3_;
  }
  le3_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::_internal_le3() const {
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* p = le3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::le3() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le3)
  return _internal_le3();
}
inline void LaneInfo_List_XPU2SCU::unsafe_arena_set_allocated_le3(
    ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(le3_);
  }
  le3_ = le3;
  if (le3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le3)
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::release_le3() {
  auto temp = unsafe_arena_release_le3();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::unsafe_arena_release_le3() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le3)
  
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* temp = le3_;
  le3_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::_internal_mutable_le3() {
  
  if (le3_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(GetArena());
    le3_ = p;
  }
  return le3_;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::mutable_le3() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le3)
  return _internal_mutable_le3();
}
inline void LaneInfo_List_XPU2SCU::set_allocated_le3(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* le3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete le3_;
  }
  if (le3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(le3);
    if (message_arena != submessage_arena) {
      le3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, le3, submessage_arena);
    }
    
  } else {
    
  }
  le3_ = le3;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.le3)
}

// .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri3 = 6;
inline bool LaneInfo_List_XPU2SCU::_internal_has_ri3() const {
  return this != internal_default_instance() && ri3_ != nullptr;
}
inline bool LaneInfo_List_XPU2SCU::has_ri3() const {
  return _internal_has_ri3();
}
inline void LaneInfo_List_XPU2SCU::clear_ri3() {
  if (GetArena() == nullptr && ri3_ != nullptr) {
    delete ri3_;
  }
  ri3_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::_internal_ri3() const {
  const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* p = ri3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& LaneInfo_List_XPU2SCU::ri3() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri3)
  return _internal_ri3();
}
inline void LaneInfo_List_XPU2SCU::unsafe_arena_set_allocated_ri3(
    ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ri3_);
  }
  ri3_ = ri3;
  if (ri3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri3)
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::release_ri3() {
  auto temp = unsafe_arena_release_ri3();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::unsafe_arena_release_ri3() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri3)
  
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* temp = ri3_;
  ri3_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::_internal_mutable_ri3() {
  
  if (ri3_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU>(GetArena());
    ri3_ = p;
  }
  return ri3_;
}
inline ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* LaneInfo_List_XPU2SCU::mutable_ri3() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri3)
  return _internal_mutable_ri3();
}
inline void LaneInfo_List_XPU2SCU::set_allocated_ri3(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* ri3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ri3_;
  }
  if (ri3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ri3);
    if (message_arena != submessage_arena) {
      ri3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ri3, submessage_arena);
    }
    
  } else {
    
  }
  ri3_ = ri3;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU.ri3)
}

// -------------------------------------------------------------------

// MapFusionLanesForScuMsg

// uint64 timestamp = 1;
inline void MapFusionLanesForScuMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapFusionLanesForScuMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapFusionLanesForScuMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.timestamp)
  return _internal_timestamp();
}
inline void MapFusionLanesForScuMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void MapFusionLanesForScuMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.timestamp)
}

// .xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU xpu_laneinfo = 2;
inline bool MapFusionLanesForScuMsg::_internal_has_xpu_laneinfo() const {
  return this != internal_default_instance() && xpu_laneinfo_ != nullptr;
}
inline bool MapFusionLanesForScuMsg::has_xpu_laneinfo() const {
  return _internal_has_xpu_laneinfo();
}
inline void MapFusionLanesForScuMsg::clear_xpu_laneinfo() {
  if (GetArena() == nullptr && xpu_laneinfo_ != nullptr) {
    delete xpu_laneinfo_;
  }
  xpu_laneinfo_ = nullptr;
}
inline const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU& MapFusionLanesForScuMsg::_internal_xpu_laneinfo() const {
  const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* p = xpu_laneinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU*>(
      &::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU& MapFusionLanesForScuMsg::xpu_laneinfo() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.xpu_laneinfo)
  return _internal_xpu_laneinfo();
}
inline void MapFusionLanesForScuMsg::unsafe_arena_set_allocated_xpu_laneinfo(
    ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* xpu_laneinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xpu_laneinfo_);
  }
  xpu_laneinfo_ = xpu_laneinfo;
  if (xpu_laneinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.xpu_laneinfo)
}
inline ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* MapFusionLanesForScuMsg::release_xpu_laneinfo() {
  auto temp = unsafe_arena_release_xpu_laneinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* MapFusionLanesForScuMsg::unsafe_arena_release_xpu_laneinfo() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.xpu_laneinfo)
  
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* temp = xpu_laneinfo_;
  xpu_laneinfo_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* MapFusionLanesForScuMsg::_internal_mutable_xpu_laneinfo() {
  
  if (xpu_laneinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU>(GetArena());
    xpu_laneinfo_ = p;
  }
  return xpu_laneinfo_;
}
inline ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* MapFusionLanesForScuMsg::mutable_xpu_laneinfo() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.xpu_laneinfo)
  return _internal_mutable_xpu_laneinfo();
}
inline void MapFusionLanesForScuMsg::set_allocated_xpu_laneinfo(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* xpu_laneinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete xpu_laneinfo_;
  }
  if (xpu_laneinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(xpu_laneinfo);
    if (message_arena != submessage_arena) {
      xpu_laneinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xpu_laneinfo, submessage_arena);
    }
    
  } else {
    
  }
  xpu_laneinfo_ = xpu_laneinfo;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.MapFusionLanesForScuMsg.xpu_laneinfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xpilot::sr2_0::proto::LaneLineColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xpilot::sr2_0::proto::LaneLineColor>() {
  return ::xpilot::sr2_0::proto::LaneLineColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto
