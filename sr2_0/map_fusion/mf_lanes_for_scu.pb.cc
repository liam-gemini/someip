// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_fusion/mf_lanes_for_scu.proto

#include "map_fusion/mf_lanes_for_scu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_base_5fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryObject_base_5fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class LaneLineInfo_XPU2SCUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneLineInfo_XPU2SCU> _instance;
} _LaneLineInfo_XPU2SCU_default_instance_;
class LaneInfo_List_XPU2SCUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneInfo_List_XPU2SCU> _instance;
} _LaneInfo_List_XPU2SCU_default_instance_;
class MapFusionLanesForScuMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapFusionLanesForScuMsg> _instance;
} _MapFusionLanesForScuMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
static void InitDefaultsscc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto}, {
      &scc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base,}};

static void InitDefaultsscc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto}, {
      &scc_info_BoundaryObject_base_5fstruct_2eproto.base,}};

static void InitDefaultsscc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xpilot::sr2_0::proto::_MapFusionLanesForScuMsg_default_instance_;
    new (ptr) ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto}, {
      &scc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, laneid_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanestartdx_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanestartdxstd_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, laneenddx_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, laneenddxstd_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, laneexistprob_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanetype_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanetypeprob_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanecolor_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanedisty_c0_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, laneyawangle_c1_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanecurve_c2_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanecurvechange_c3_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, lanewidth_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU, boudary_object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, le1_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, ri1_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, le2_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, ri2_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, le3_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU, ri3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MapFusionLanesForScuMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MapFusionLanesForScuMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::xpilot::sr2_0::proto::MapFusionLanesForScuMsg, xpu_laneinfo_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU)},
  { 20, -1, sizeof(::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU)},
  { 31, -1, sizeof(::xpilot::sr2_0::proto::MapFusionLanesForScuMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::sr2_0::proto::_MapFusionLanesForScuMsg_default_instance_),
};

const char descriptor_table_protodef_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!map_fusion/mf_lanes_for_scu.proto\022\022xpi"
  "lot.sr2_0.proto\032\021base_struct.proto\"\241\003\n\024L"
  "aneLineInfo_XPU2SCU\022\016\n\006LaneID\030\001 \001(\r\022\023\n\013L"
  "aneStartDx\030\002 \001(\002\022\026\n\016LaneStartDxStd\030\003 \001(\002"
  "\022\021\n\tLaneEndDx\030\004 \001(\002\022\024\n\014LaneEndDxStd\030\005 \001("
  "\002\022\025\n\rLaneExistProb\030\006 \001(\r\022\020\n\010LaneType\030\007 \001"
  "(\r\022\024\n\014LaneTypeProb\030\010 \001(\r\0224\n\tLaneColor\030\t "
  "\001(\0162!.xpilot.sr2_0.proto.LaneLineColor\022\024"
  "\n\014LaneDistY_C0\030\n \001(\002\022\027\n\017LaneYawAngle_C1\030"
  "\013 \001(\002\022\024\n\014LaneCurve_C2\030\014 \001(\002\022\032\n\022LaneCurve"
  "Change_C3\030\r \001(\002\022\021\n\tLaneWidth\030\016 \001(\002\022:\n\016bo"
  "udary_object\030\017 \001(\0132\".xpilot.sr2_0.proto."
  "BoundaryObject\"\341\002\n\025LaneInfo_List_XPU2SCU"
  "\0225\n\003le1\030\001 \001(\0132(.xpilot.sr2_0.proto.LaneL"
  "ineInfo_XPU2SCU\0225\n\003ri1\030\002 \001(\0132(.xpilot.sr"
  "2_0.proto.LaneLineInfo_XPU2SCU\0225\n\003le2\030\003 "
  "\001(\0132(.xpilot.sr2_0.proto.LaneLineInfo_XP"
  "U2SCU\0225\n\003ri2\030\004 \001(\0132(.xpilot.sr2_0.proto."
  "LaneLineInfo_XPU2SCU\0225\n\003le3\030\005 \001(\0132(.xpil"
  "ot.sr2_0.proto.LaneLineInfo_XPU2SCU\0225\n\003r"
  "i3\030\006 \001(\0132(.xpilot.sr2_0.proto.LaneLineIn"
  "fo_XPU2SCU\"m\n\027MapFusionLanesForScuMsg\022\021\n"
  "\ttimestamp\030\001 \001(\004\022\?\n\014xpu_laneinfo\030\002 \001(\0132)"
  ".xpilot.sr2_0.proto.LaneInfo_List_XPU2SC"
  "U*\273\001\n\rLaneLineColor\022\013\n\007UNKNOWN\020\000\022\t\n\005WHIT"
  "E\020\001\022\n\n\006YELLOW\020\002\022\n\n\006ORANGE\020\003\022\010\n\004BLUE\020\004\022\t\n"
  "\005GREEN\020\005\022\010\n\004GRAY\020\006\022\032\n\026LEFT_GRAY_RIGHT_YE"
  "LLOW\020\007\022\033\n\027LEFT_YELLOW_RIGHT_WHITE\020\010\022\t\n\005B"
  "LACK\020\t\022\n\n\006OTHERS\020\n\022\013\n\007MAX_NUM\020\013b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto_deps[1] = {
  &::descriptor_table_base_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto_sccs[3] = {
  &scc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base,
  &scc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base,
  &scc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto = {
  false, false, descriptor_table_protodef_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto, "map_fusion/mf_lanes_for_scu.proto", 1159,
  &descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto_once, descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto_sccs, descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto::offsets,
  file_level_metadata_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto, 3, file_level_enum_descriptors_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto, file_level_service_descriptors_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto)), true);
namespace xpilot {
namespace sr2_0 {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto);
  return file_level_enum_descriptors_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto[0];
}
bool LaneLineColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaneLineInfo_XPU2SCU::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_LaneLineInfo_XPU2SCU_default_instance_._instance.get_mutable()->boudary_object_ = const_cast< ::xpilot::sr2_0::proto::BoundaryObject*>(
      ::xpilot::sr2_0::proto::BoundaryObject::internal_default_instance());
}
class LaneLineInfo_XPU2SCU::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::BoundaryObject& boudary_object(const LaneLineInfo_XPU2SCU* msg);
};

const ::xpilot::sr2_0::proto::BoundaryObject&
LaneLineInfo_XPU2SCU::_Internal::boudary_object(const LaneLineInfo_XPU2SCU* msg) {
  return *msg->boudary_object_;
}
void LaneLineInfo_XPU2SCU::clear_boudary_object() {
  if (GetArena() == nullptr && boudary_object_ != nullptr) {
    delete boudary_object_;
  }
  boudary_object_ = nullptr;
}
LaneLineInfo_XPU2SCU::LaneLineInfo_XPU2SCU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
}
LaneLineInfo_XPU2SCU::LaneLineInfo_XPU2SCU(const LaneLineInfo_XPU2SCU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boudary_object()) {
    boudary_object_ = new ::xpilot::sr2_0::proto::BoundaryObject(*from.boudary_object_);
  } else {
    boudary_object_ = nullptr;
  }
  ::memcpy(&laneid_, &from.laneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lanewidth_) -
    reinterpret_cast<char*>(&laneid_)) + sizeof(lanewidth_));
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
}

void LaneLineInfo_XPU2SCU::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base);
  ::memset(&boudary_object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lanewidth_) -
      reinterpret_cast<char*>(&boudary_object_)) + sizeof(lanewidth_));
}

LaneLineInfo_XPU2SCU::~LaneLineInfo_XPU2SCU() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneLineInfo_XPU2SCU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete boudary_object_;
}

void LaneLineInfo_XPU2SCU::ArenaDtor(void* object) {
  LaneLineInfo_XPU2SCU* _this = reinterpret_cast< LaneLineInfo_XPU2SCU* >(object);
  (void)_this;
}
void LaneLineInfo_XPU2SCU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneLineInfo_XPU2SCU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneLineInfo_XPU2SCU& LaneLineInfo_XPU2SCU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneLineInfo_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base);
  return *internal_default_instance();
}


void LaneLineInfo_XPU2SCU::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && boudary_object_ != nullptr) {
    delete boudary_object_;
  }
  boudary_object_ = nullptr;
  ::memset(&laneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lanewidth_) -
      reinterpret_cast<char*>(&laneid_)) + sizeof(lanewidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneLineInfo_XPU2SCU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 LaneID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float LaneStartDx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lanestartdx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneStartDxStd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          lanestartdxstd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneEndDx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          laneenddx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneEndDxStd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          laneenddxstd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 LaneExistProb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          laneexistprob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LaneType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lanetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LaneTypeProb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lanetypeprob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneLineColor LaneColor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lanecolor(static_cast<::xpilot::sr2_0::proto::LaneLineColor>(val));
        } else goto handle_unusual;
        continue;
      // float LaneDistY_C0 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          lanedisty_c0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneYawAngle_C1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          laneyawangle_c1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneCurve_C2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          lanecurve_c2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneCurveChange_C3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          lanecurvechange_c3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float LaneWidth = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          lanewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.BoundaryObject boudary_object = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_boudary_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneLineInfo_XPU2SCU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 LaneID = 1;
  if (this->laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_laneid(), target);
  }

  // float LaneStartDx = 2;
  if (!(this->lanestartdx() <= 0 && this->lanestartdx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lanestartdx(), target);
  }

  // float LaneStartDxStd = 3;
  if (!(this->lanestartdxstd() <= 0 && this->lanestartdxstd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_lanestartdxstd(), target);
  }

  // float LaneEndDx = 4;
  if (!(this->laneenddx() <= 0 && this->laneenddx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_laneenddx(), target);
  }

  // float LaneEndDxStd = 5;
  if (!(this->laneenddxstd() <= 0 && this->laneenddxstd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_laneenddxstd(), target);
  }

  // uint32 LaneExistProb = 6;
  if (this->laneexistprob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_laneexistprob(), target);
  }

  // uint32 LaneType = 7;
  if (this->lanetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lanetype(), target);
  }

  // uint32 LaneTypeProb = 8;
  if (this->lanetypeprob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lanetypeprob(), target);
  }

  // .xpilot.sr2_0.proto.LaneLineColor LaneColor = 9;
  if (this->lanecolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_lanecolor(), target);
  }

  // float LaneDistY_C0 = 10;
  if (!(this->lanedisty_c0() <= 0 && this->lanedisty_c0() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_lanedisty_c0(), target);
  }

  // float LaneYawAngle_C1 = 11;
  if (!(this->laneyawangle_c1() <= 0 && this->laneyawangle_c1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_laneyawangle_c1(), target);
  }

  // float LaneCurve_C2 = 12;
  if (!(this->lanecurve_c2() <= 0 && this->lanecurve_c2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_lanecurve_c2(), target);
  }

  // float LaneCurveChange_C3 = 13;
  if (!(this->lanecurvechange_c3() <= 0 && this->lanecurvechange_c3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_lanecurvechange_c3(), target);
  }

  // float LaneWidth = 14;
  if (!(this->lanewidth() <= 0 && this->lanewidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_lanewidth(), target);
  }

  // .xpilot.sr2_0.proto.BoundaryObject boudary_object = 15;
  if (this->has_boudary_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::boudary_object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  return target;
}

size_t LaneLineInfo_XPU2SCU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.BoundaryObject boudary_object = 15;
  if (this->has_boudary_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boudary_object_);
  }

  // uint32 LaneID = 1;
  if (this->laneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_laneid());
  }

  // float LaneStartDx = 2;
  if (!(this->lanestartdx() <= 0 && this->lanestartdx() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneStartDxStd = 3;
  if (!(this->lanestartdxstd() <= 0 && this->lanestartdxstd() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneEndDx = 4;
  if (!(this->laneenddx() <= 0 && this->laneenddx() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneEndDxStd = 5;
  if (!(this->laneenddxstd() <= 0 && this->laneenddxstd() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 LaneExistProb = 6;
  if (this->laneexistprob() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_laneexistprob());
  }

  // uint32 LaneType = 7;
  if (this->lanetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lanetype());
  }

  // uint32 LaneTypeProb = 8;
  if (this->lanetypeprob() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lanetypeprob());
  }

  // .xpilot.sr2_0.proto.LaneLineColor LaneColor = 9;
  if (this->lanecolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lanecolor());
  }

  // float LaneDistY_C0 = 10;
  if (!(this->lanedisty_c0() <= 0 && this->lanedisty_c0() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneYawAngle_C1 = 11;
  if (!(this->laneyawangle_c1() <= 0 && this->laneyawangle_c1() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneCurve_C2 = 12;
  if (!(this->lanecurve_c2() <= 0 && this->lanecurve_c2() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneCurveChange_C3 = 13;
  if (!(this->lanecurvechange_c3() <= 0 && this->lanecurvechange_c3() >= 0)) {
    total_size += 1 + 4;
  }

  // float LaneWidth = 14;
  if (!(this->lanewidth() <= 0 && this->lanewidth() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneLineInfo_XPU2SCU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLineInfo_XPU2SCU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneLineInfo_XPU2SCU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
    MergeFrom(*source);
  }
}

void LaneLineInfo_XPU2SCU::MergeFrom(const LaneLineInfo_XPU2SCU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_boudary_object()) {
    _internal_mutable_boudary_object()->::xpilot::sr2_0::proto::BoundaryObject::MergeFrom(from._internal_boudary_object());
  }
  if (from.laneid() != 0) {
    _internal_set_laneid(from._internal_laneid());
  }
  if (!(from.lanestartdx() <= 0 && from.lanestartdx() >= 0)) {
    _internal_set_lanestartdx(from._internal_lanestartdx());
  }
  if (!(from.lanestartdxstd() <= 0 && from.lanestartdxstd() >= 0)) {
    _internal_set_lanestartdxstd(from._internal_lanestartdxstd());
  }
  if (!(from.laneenddx() <= 0 && from.laneenddx() >= 0)) {
    _internal_set_laneenddx(from._internal_laneenddx());
  }
  if (!(from.laneenddxstd() <= 0 && from.laneenddxstd() >= 0)) {
    _internal_set_laneenddxstd(from._internal_laneenddxstd());
  }
  if (from.laneexistprob() != 0) {
    _internal_set_laneexistprob(from._internal_laneexistprob());
  }
  if (from.lanetype() != 0) {
    _internal_set_lanetype(from._internal_lanetype());
  }
  if (from.lanetypeprob() != 0) {
    _internal_set_lanetypeprob(from._internal_lanetypeprob());
  }
  if (from.lanecolor() != 0) {
    _internal_set_lanecolor(from._internal_lanecolor());
  }
  if (!(from.lanedisty_c0() <= 0 && from.lanedisty_c0() >= 0)) {
    _internal_set_lanedisty_c0(from._internal_lanedisty_c0());
  }
  if (!(from.laneyawangle_c1() <= 0 && from.laneyawangle_c1() >= 0)) {
    _internal_set_laneyawangle_c1(from._internal_laneyawangle_c1());
  }
  if (!(from.lanecurve_c2() <= 0 && from.lanecurve_c2() >= 0)) {
    _internal_set_lanecurve_c2(from._internal_lanecurve_c2());
  }
  if (!(from.lanecurvechange_c3() <= 0 && from.lanecurvechange_c3() >= 0)) {
    _internal_set_lanecurvechange_c3(from._internal_lanecurvechange_c3());
  }
  if (!(from.lanewidth() <= 0 && from.lanewidth() >= 0)) {
    _internal_set_lanewidth(from._internal_lanewidth());
  }
}

void LaneLineInfo_XPU2SCU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLineInfo_XPU2SCU::CopyFrom(const LaneLineInfo_XPU2SCU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLineInfo_XPU2SCU::IsInitialized() const {
  return true;
}

void LaneLineInfo_XPU2SCU::InternalSwap(LaneLineInfo_XPU2SCU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneLineInfo_XPU2SCU, lanewidth_)
      + sizeof(LaneLineInfo_XPU2SCU::lanewidth_)
      - PROTOBUF_FIELD_OFFSET(LaneLineInfo_XPU2SCU, boudary_object_)>(
          reinterpret_cast<char*>(&boudary_object_),
          reinterpret_cast<char*>(&other->boudary_object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneLineInfo_XPU2SCU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneInfo_List_XPU2SCU::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_._instance.get_mutable()->le1_ = const_cast< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::internal_default_instance());
  ::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_._instance.get_mutable()->ri1_ = const_cast< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::internal_default_instance());
  ::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_._instance.get_mutable()->le2_ = const_cast< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::internal_default_instance());
  ::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_._instance.get_mutable()->ri2_ = const_cast< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::internal_default_instance());
  ::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_._instance.get_mutable()->le3_ = const_cast< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::internal_default_instance());
  ::xpilot::sr2_0::proto::_LaneInfo_List_XPU2SCU_default_instance_._instance.get_mutable()->ri3_ = const_cast< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::internal_default_instance());
}
class LaneInfo_List_XPU2SCU::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& le1(const LaneInfo_List_XPU2SCU* msg);
  static const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& ri1(const LaneInfo_List_XPU2SCU* msg);
  static const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& le2(const LaneInfo_List_XPU2SCU* msg);
  static const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& ri2(const LaneInfo_List_XPU2SCU* msg);
  static const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& le3(const LaneInfo_List_XPU2SCU* msg);
  static const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU& ri3(const LaneInfo_List_XPU2SCU* msg);
};

const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU&
LaneInfo_List_XPU2SCU::_Internal::le1(const LaneInfo_List_XPU2SCU* msg) {
  return *msg->le1_;
}
const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU&
LaneInfo_List_XPU2SCU::_Internal::ri1(const LaneInfo_List_XPU2SCU* msg) {
  return *msg->ri1_;
}
const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU&
LaneInfo_List_XPU2SCU::_Internal::le2(const LaneInfo_List_XPU2SCU* msg) {
  return *msg->le2_;
}
const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU&
LaneInfo_List_XPU2SCU::_Internal::ri2(const LaneInfo_List_XPU2SCU* msg) {
  return *msg->ri2_;
}
const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU&
LaneInfo_List_XPU2SCU::_Internal::le3(const LaneInfo_List_XPU2SCU* msg) {
  return *msg->le3_;
}
const ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU&
LaneInfo_List_XPU2SCU::_Internal::ri3(const LaneInfo_List_XPU2SCU* msg) {
  return *msg->ri3_;
}
LaneInfo_List_XPU2SCU::LaneInfo_List_XPU2SCU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
}
LaneInfo_List_XPU2SCU::LaneInfo_List_XPU2SCU(const LaneInfo_List_XPU2SCU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_le1()) {
    le1_ = new ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU(*from.le1_);
  } else {
    le1_ = nullptr;
  }
  if (from._internal_has_ri1()) {
    ri1_ = new ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU(*from.ri1_);
  } else {
    ri1_ = nullptr;
  }
  if (from._internal_has_le2()) {
    le2_ = new ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU(*from.le2_);
  } else {
    le2_ = nullptr;
  }
  if (from._internal_has_ri2()) {
    ri2_ = new ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU(*from.ri2_);
  } else {
    ri2_ = nullptr;
  }
  if (from._internal_has_le3()) {
    le3_ = new ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU(*from.le3_);
  } else {
    le3_ = nullptr;
  }
  if (from._internal_has_ri3()) {
    ri3_ = new ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU(*from.ri3_);
  } else {
    ri3_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
}

void LaneInfo_List_XPU2SCU::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base);
  ::memset(&le1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ri3_) -
      reinterpret_cast<char*>(&le1_)) + sizeof(ri3_));
}

LaneInfo_List_XPU2SCU::~LaneInfo_List_XPU2SCU() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneInfo_List_XPU2SCU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete le1_;
  if (this != internal_default_instance()) delete ri1_;
  if (this != internal_default_instance()) delete le2_;
  if (this != internal_default_instance()) delete ri2_;
  if (this != internal_default_instance()) delete le3_;
  if (this != internal_default_instance()) delete ri3_;
}

void LaneInfo_List_XPU2SCU::ArenaDtor(void* object) {
  LaneInfo_List_XPU2SCU* _this = reinterpret_cast< LaneInfo_List_XPU2SCU* >(object);
  (void)_this;
}
void LaneInfo_List_XPU2SCU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneInfo_List_XPU2SCU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneInfo_List_XPU2SCU& LaneInfo_List_XPU2SCU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneInfo_List_XPU2SCU_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base);
  return *internal_default_instance();
}


void LaneInfo_List_XPU2SCU::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && le1_ != nullptr) {
    delete le1_;
  }
  le1_ = nullptr;
  if (GetArena() == nullptr && ri1_ != nullptr) {
    delete ri1_;
  }
  ri1_ = nullptr;
  if (GetArena() == nullptr && le2_ != nullptr) {
    delete le2_;
  }
  le2_ = nullptr;
  if (GetArena() == nullptr && ri2_ != nullptr) {
    delete ri2_;
  }
  ri2_ = nullptr;
  if (GetArena() == nullptr && le3_ != nullptr) {
    delete le3_;
  }
  le3_ = nullptr;
  if (GetArena() == nullptr && ri3_ != nullptr) {
    delete ri3_;
  }
  ri3_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneInfo_List_XPU2SCU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_le1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ri1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_le2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ri2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_le3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ri3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneInfo_List_XPU2SCU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le1 = 1;
  if (this->has_le1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::le1(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri1 = 2;
  if (this->has_ri1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ri1(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le2 = 3;
  if (this->has_le2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::le2(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri2 = 4;
  if (this->has_ri2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ri2(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le3 = 5;
  if (this->has_le3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::le3(this), target, stream);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri3 = 6;
  if (this->has_ri3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ri3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  return target;
}

size_t LaneInfo_List_XPU2SCU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le1 = 1;
  if (this->has_le1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *le1_);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri1 = 2;
  if (this->has_ri1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ri1_);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le2 = 3;
  if (this->has_le2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *le2_);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri2 = 4;
  if (this->has_ri2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ri2_);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU le3 = 5;
  if (this->has_le3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *le3_);
  }

  // .xpilot.sr2_0.proto.LaneLineInfo_XPU2SCU ri3 = 6;
  if (this->has_ri3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ri3_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneInfo_List_XPU2SCU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneInfo_List_XPU2SCU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneInfo_List_XPU2SCU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
    MergeFrom(*source);
  }
}

void LaneInfo_List_XPU2SCU::MergeFrom(const LaneInfo_List_XPU2SCU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_le1()) {
    _internal_mutable_le1()->::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::MergeFrom(from._internal_le1());
  }
  if (from.has_ri1()) {
    _internal_mutable_ri1()->::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::MergeFrom(from._internal_ri1());
  }
  if (from.has_le2()) {
    _internal_mutable_le2()->::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::MergeFrom(from._internal_le2());
  }
  if (from.has_ri2()) {
    _internal_mutable_ri2()->::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::MergeFrom(from._internal_ri2());
  }
  if (from.has_le3()) {
    _internal_mutable_le3()->::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::MergeFrom(from._internal_le3());
  }
  if (from.has_ri3()) {
    _internal_mutable_ri3()->::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU::MergeFrom(from._internal_ri3());
  }
}

void LaneInfo_List_XPU2SCU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneInfo_List_XPU2SCU::CopyFrom(const LaneInfo_List_XPU2SCU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneInfo_List_XPU2SCU::IsInitialized() const {
  return true;
}

void LaneInfo_List_XPU2SCU::InternalSwap(LaneInfo_List_XPU2SCU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneInfo_List_XPU2SCU, ri3_)
      + sizeof(LaneInfo_List_XPU2SCU::ri3_)
      - PROTOBUF_FIELD_OFFSET(LaneInfo_List_XPU2SCU, le1_)>(
          reinterpret_cast<char*>(&le1_),
          reinterpret_cast<char*>(&other->le1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneInfo_List_XPU2SCU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapFusionLanesForScuMsg::InitAsDefaultInstance() {
  ::xpilot::sr2_0::proto::_MapFusionLanesForScuMsg_default_instance_._instance.get_mutable()->xpu_laneinfo_ = const_cast< ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU*>(
      ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU::internal_default_instance());
}
class MapFusionLanesForScuMsg::_Internal {
 public:
  static const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU& xpu_laneinfo(const MapFusionLanesForScuMsg* msg);
};

const ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU&
MapFusionLanesForScuMsg::_Internal::xpu_laneinfo(const MapFusionLanesForScuMsg* msg) {
  return *msg->xpu_laneinfo_;
}
MapFusionLanesForScuMsg::MapFusionLanesForScuMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
}
MapFusionLanesForScuMsg::MapFusionLanesForScuMsg(const MapFusionLanesForScuMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_xpu_laneinfo()) {
    xpu_laneinfo_ = new ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU(*from.xpu_laneinfo_);
  } else {
    xpu_laneinfo_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
}

void MapFusionLanesForScuMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base);
  ::memset(&xpu_laneinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&xpu_laneinfo_)) + sizeof(timestamp_));
}

MapFusionLanesForScuMsg::~MapFusionLanesForScuMsg() {
  // @@protoc_insertion_point(destructor:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapFusionLanesForScuMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete xpu_laneinfo_;
}

void MapFusionLanesForScuMsg::ArenaDtor(void* object) {
  MapFusionLanesForScuMsg* _this = reinterpret_cast< MapFusionLanesForScuMsg* >(object);
  (void)_this;
}
void MapFusionLanesForScuMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapFusionLanesForScuMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapFusionLanesForScuMsg& MapFusionLanesForScuMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapFusionLanesForScuMsg_map_5ffusion_2fmf_5flanes_5ffor_5fscu_2eproto.base);
  return *internal_default_instance();
}


void MapFusionLanesForScuMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && xpu_laneinfo_ != nullptr) {
    delete xpu_laneinfo_;
  }
  xpu_laneinfo_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapFusionLanesForScuMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU xpu_laneinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_xpu_laneinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapFusionLanesForScuMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU xpu_laneinfo = 2;
  if (this->has_xpu_laneinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::xpu_laneinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  return target;
}

size_t MapFusionLanesForScuMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .xpilot.sr2_0.proto.LaneInfo_List_XPU2SCU xpu_laneinfo = 2;
  if (this->has_xpu_laneinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xpu_laneinfo_);
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapFusionLanesForScuMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MapFusionLanesForScuMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapFusionLanesForScuMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
    MergeFrom(*source);
  }
}

void MapFusionLanesForScuMsg::MergeFrom(const MapFusionLanesForScuMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_xpu_laneinfo()) {
    _internal_mutable_xpu_laneinfo()->::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU::MergeFrom(from._internal_xpu_laneinfo());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MapFusionLanesForScuMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapFusionLanesForScuMsg::CopyFrom(const MapFusionLanesForScuMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.sr2_0.proto.MapFusionLanesForScuMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFusionLanesForScuMsg::IsInitialized() const {
  return true;
}

void MapFusionLanesForScuMsg::InternalSwap(MapFusionLanesForScuMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapFusionLanesForScuMsg, timestamp_)
      + sizeof(MapFusionLanesForScuMsg::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MapFusionLanesForScuMsg, xpu_laneinfo_)>(
          reinterpret_cast<char*>(&xpu_laneinfo_),
          reinterpret_cast<char*>(&other->xpu_laneinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapFusionLanesForScuMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::LaneLineInfo_XPU2SCU >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::LaneInfo_List_XPU2SCU >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg* Arena::CreateMaybeMessage< ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::sr2_0::proto::MapFusionLanesForScuMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
