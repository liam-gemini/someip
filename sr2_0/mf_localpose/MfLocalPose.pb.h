// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mf_localpose/MfLocalPose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mf_5flocalpose_2fMfLocalPose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mf_5flocalpose_2fMfLocalPose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mf_5flocalpose_2fMfLocalPose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mf_5flocalpose_2fMfLocalPose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mf_5flocalpose_2fMfLocalPose_2eproto;
namespace xpilot {
namespace sr2_0 {
namespace proto {
class MfLocalPoseMsg;
class MfLocalPoseMsgDefaultTypeInternal;
extern MfLocalPoseMsgDefaultTypeInternal _MfLocalPoseMsg_default_instance_;
}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::sr2_0::proto::MfLocalPoseMsg* Arena::CreateMaybeMessage<::xpilot::sr2_0::proto::MfLocalPoseMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {
namespace sr2_0 {
namespace proto {

// ===================================================================

class MfLocalPoseMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.sr2_0.proto.MfLocalPoseMsg) */ {
 public:
  inline MfLocalPoseMsg() : MfLocalPoseMsg(nullptr) {};
  virtual ~MfLocalPoseMsg();

  MfLocalPoseMsg(const MfLocalPoseMsg& from);
  MfLocalPoseMsg(MfLocalPoseMsg&& from) noexcept
    : MfLocalPoseMsg() {
    *this = ::std::move(from);
  }

  inline MfLocalPoseMsg& operator=(const MfLocalPoseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MfLocalPoseMsg& operator=(MfLocalPoseMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MfLocalPoseMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MfLocalPoseMsg* internal_default_instance() {
    return reinterpret_cast<const MfLocalPoseMsg*>(
               &_MfLocalPoseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MfLocalPoseMsg& a, MfLocalPoseMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MfLocalPoseMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MfLocalPoseMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MfLocalPoseMsg* New() const final {
    return CreateMaybeMessage<MfLocalPoseMsg>(nullptr);
  }

  MfLocalPoseMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MfLocalPoseMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MfLocalPoseMsg& from);
  void MergeFrom(const MfLocalPoseMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MfLocalPoseMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.sr2_0.proto.MfLocalPoseMsg";
  }
  protected:
  explicit MfLocalPoseMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mf_5flocalpose_2fMfLocalPose_2eproto);
    return ::descriptor_table_mf_5flocalpose_2fMfLocalPose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfLocalPoseFieldNumber = 2,
    kLocalFrameRefInEcefFieldNumber = 3,
    kMfDopPoseFieldNumber = 6,
    kMfDomPoseFieldNumber = 7,
    kTimestampFieldNumber = 1,
    kLastMfTimeFieldNumber = 4,
    kFusionStatusFieldNumber = 5,
  };
  // .xpilot.sr2_0.proto.LocalPoseInfo mf_local_pose = 2;
  bool has_mf_local_pose() const;
  private:
  bool _internal_has_mf_local_pose() const;
  public:
  void clear_mf_local_pose();
  const ::xpilot::sr2_0::proto::LocalPoseInfo& mf_local_pose() const;
  ::xpilot::sr2_0::proto::LocalPoseInfo* release_mf_local_pose();
  ::xpilot::sr2_0::proto::LocalPoseInfo* mutable_mf_local_pose();
  void set_allocated_mf_local_pose(::xpilot::sr2_0::proto::LocalPoseInfo* mf_local_pose);
  private:
  const ::xpilot::sr2_0::proto::LocalPoseInfo& _internal_mf_local_pose() const;
  ::xpilot::sr2_0::proto::LocalPoseInfo* _internal_mutable_mf_local_pose();
  public:
  void unsafe_arena_set_allocated_mf_local_pose(
      ::xpilot::sr2_0::proto::LocalPoseInfo* mf_local_pose);
  ::xpilot::sr2_0::proto::LocalPoseInfo* unsafe_arena_release_mf_local_pose();

  // .xpilot.sr2_0.proto.Pose6DOF local_frame_ref_in_ecef = 3;
  bool has_local_frame_ref_in_ecef() const;
  private:
  bool _internal_has_local_frame_ref_in_ecef() const;
  public:
  void clear_local_frame_ref_in_ecef();
  const ::xpilot::sr2_0::proto::Pose6DOF& local_frame_ref_in_ecef() const;
  ::xpilot::sr2_0::proto::Pose6DOF* release_local_frame_ref_in_ecef();
  ::xpilot::sr2_0::proto::Pose6DOF* mutable_local_frame_ref_in_ecef();
  void set_allocated_local_frame_ref_in_ecef(::xpilot::sr2_0::proto::Pose6DOF* local_frame_ref_in_ecef);
  private:
  const ::xpilot::sr2_0::proto::Pose6DOF& _internal_local_frame_ref_in_ecef() const;
  ::xpilot::sr2_0::proto::Pose6DOF* _internal_mutable_local_frame_ref_in_ecef();
  public:
  void unsafe_arena_set_allocated_local_frame_ref_in_ecef(
      ::xpilot::sr2_0::proto::Pose6DOF* local_frame_ref_in_ecef);
  ::xpilot::sr2_0::proto::Pose6DOF* unsafe_arena_release_local_frame_ref_in_ecef();

  // .xpilot.sr2_0.proto.LocalPoseInfo mf_dop_pose = 6;
  bool has_mf_dop_pose() const;
  private:
  bool _internal_has_mf_dop_pose() const;
  public:
  void clear_mf_dop_pose();
  const ::xpilot::sr2_0::proto::LocalPoseInfo& mf_dop_pose() const;
  ::xpilot::sr2_0::proto::LocalPoseInfo* release_mf_dop_pose();
  ::xpilot::sr2_0::proto::LocalPoseInfo* mutable_mf_dop_pose();
  void set_allocated_mf_dop_pose(::xpilot::sr2_0::proto::LocalPoseInfo* mf_dop_pose);
  private:
  const ::xpilot::sr2_0::proto::LocalPoseInfo& _internal_mf_dop_pose() const;
  ::xpilot::sr2_0::proto::LocalPoseInfo* _internal_mutable_mf_dop_pose();
  public:
  void unsafe_arena_set_allocated_mf_dop_pose(
      ::xpilot::sr2_0::proto::LocalPoseInfo* mf_dop_pose);
  ::xpilot::sr2_0::proto::LocalPoseInfo* unsafe_arena_release_mf_dop_pose();

  // .xpilot.sr2_0.proto.LocalPoseInfo mf_dom_pose = 7;
  bool has_mf_dom_pose() const;
  private:
  bool _internal_has_mf_dom_pose() const;
  public:
  void clear_mf_dom_pose();
  const ::xpilot::sr2_0::proto::LocalPoseInfo& mf_dom_pose() const;
  ::xpilot::sr2_0::proto::LocalPoseInfo* release_mf_dom_pose();
  ::xpilot::sr2_0::proto::LocalPoseInfo* mutable_mf_dom_pose();
  void set_allocated_mf_dom_pose(::xpilot::sr2_0::proto::LocalPoseInfo* mf_dom_pose);
  private:
  const ::xpilot::sr2_0::proto::LocalPoseInfo& _internal_mf_dom_pose() const;
  ::xpilot::sr2_0::proto::LocalPoseInfo* _internal_mutable_mf_dom_pose();
  public:
  void unsafe_arena_set_allocated_mf_dom_pose(
      ::xpilot::sr2_0::proto::LocalPoseInfo* mf_dom_pose);
  ::xpilot::sr2_0::proto::LocalPoseInfo* unsafe_arena_release_mf_dom_pose();

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_mf_time = 4;
  void clear_last_mf_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_mf_time() const;
  void set_last_mf_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_mf_time() const;
  void _internal_set_last_mf_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 fusion_status = 5;
  void clear_fusion_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 fusion_status() const;
  void set_fusion_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fusion_status() const;
  void _internal_set_fusion_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.sr2_0.proto.MfLocalPoseMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::xpilot::sr2_0::proto::LocalPoseInfo* mf_local_pose_;
  ::xpilot::sr2_0::proto::Pose6DOF* local_frame_ref_in_ecef_;
  ::xpilot::sr2_0::proto::LocalPoseInfo* mf_dop_pose_;
  ::xpilot::sr2_0::proto::LocalPoseInfo* mf_dom_pose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_mf_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fusion_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mf_5flocalpose_2fMfLocalPose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MfLocalPoseMsg

// uint64 timestamp = 1;
inline void MfLocalPoseMsg::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MfLocalPoseMsg::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MfLocalPoseMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.timestamp)
  return _internal_timestamp();
}
inline void MfLocalPoseMsg::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void MfLocalPoseMsg::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.MfLocalPoseMsg.timestamp)
}

// .xpilot.sr2_0.proto.LocalPoseInfo mf_local_pose = 2;
inline bool MfLocalPoseMsg::_internal_has_mf_local_pose() const {
  return this != internal_default_instance() && mf_local_pose_ != nullptr;
}
inline bool MfLocalPoseMsg::has_mf_local_pose() const {
  return _internal_has_mf_local_pose();
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfo& MfLocalPoseMsg::_internal_mf_local_pose() const {
  const ::xpilot::sr2_0::proto::LocalPoseInfo* p = mf_local_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LocalPoseInfo*>(
      &::xpilot::sr2_0::proto::_LocalPoseInfo_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfo& MfLocalPoseMsg::mf_local_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_local_pose)
  return _internal_mf_local_pose();
}
inline void MfLocalPoseMsg::unsafe_arena_set_allocated_mf_local_pose(
    ::xpilot::sr2_0::proto::LocalPoseInfo* mf_local_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_local_pose_);
  }
  mf_local_pose_ = mf_local_pose;
  if (mf_local_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_local_pose)
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::release_mf_local_pose() {
  auto temp = unsafe_arena_release_mf_local_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::unsafe_arena_release_mf_local_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_local_pose)
  
  ::xpilot::sr2_0::proto::LocalPoseInfo* temp = mf_local_pose_;
  mf_local_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::_internal_mutable_mf_local_pose() {
  
  if (mf_local_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseInfo>(GetArena());
    mf_local_pose_ = p;
  }
  return mf_local_pose_;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::mutable_mf_local_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_local_pose)
  return _internal_mutable_mf_local_pose();
}
inline void MfLocalPoseMsg::set_allocated_mf_local_pose(::xpilot::sr2_0::proto::LocalPoseInfo* mf_local_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_local_pose_);
  }
  if (mf_local_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_local_pose)->GetArena();
    if (message_arena != submessage_arena) {
      mf_local_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mf_local_pose, submessage_arena);
    }
    
  } else {
    
  }
  mf_local_pose_ = mf_local_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_local_pose)
}

// .xpilot.sr2_0.proto.Pose6DOF local_frame_ref_in_ecef = 3;
inline bool MfLocalPoseMsg::_internal_has_local_frame_ref_in_ecef() const {
  return this != internal_default_instance() && local_frame_ref_in_ecef_ != nullptr;
}
inline bool MfLocalPoseMsg::has_local_frame_ref_in_ecef() const {
  return _internal_has_local_frame_ref_in_ecef();
}
inline const ::xpilot::sr2_0::proto::Pose6DOF& MfLocalPoseMsg::_internal_local_frame_ref_in_ecef() const {
  const ::xpilot::sr2_0::proto::Pose6DOF* p = local_frame_ref_in_ecef_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::Pose6DOF*>(
      &::xpilot::sr2_0::proto::_Pose6DOF_default_instance_);
}
inline const ::xpilot::sr2_0::proto::Pose6DOF& MfLocalPoseMsg::local_frame_ref_in_ecef() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.local_frame_ref_in_ecef)
  return _internal_local_frame_ref_in_ecef();
}
inline void MfLocalPoseMsg::unsafe_arena_set_allocated_local_frame_ref_in_ecef(
    ::xpilot::sr2_0::proto::Pose6DOF* local_frame_ref_in_ecef) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_frame_ref_in_ecef_);
  }
  local_frame_ref_in_ecef_ = local_frame_ref_in_ecef;
  if (local_frame_ref_in_ecef) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.local_frame_ref_in_ecef)
}
inline ::xpilot::sr2_0::proto::Pose6DOF* MfLocalPoseMsg::release_local_frame_ref_in_ecef() {
  auto temp = unsafe_arena_release_local_frame_ref_in_ecef();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::Pose6DOF* MfLocalPoseMsg::unsafe_arena_release_local_frame_ref_in_ecef() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.MfLocalPoseMsg.local_frame_ref_in_ecef)
  
  ::xpilot::sr2_0::proto::Pose6DOF* temp = local_frame_ref_in_ecef_;
  local_frame_ref_in_ecef_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::Pose6DOF* MfLocalPoseMsg::_internal_mutable_local_frame_ref_in_ecef() {
  
  if (local_frame_ref_in_ecef_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::Pose6DOF>(GetArena());
    local_frame_ref_in_ecef_ = p;
  }
  return local_frame_ref_in_ecef_;
}
inline ::xpilot::sr2_0::proto::Pose6DOF* MfLocalPoseMsg::mutable_local_frame_ref_in_ecef() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MfLocalPoseMsg.local_frame_ref_in_ecef)
  return _internal_mutable_local_frame_ref_in_ecef();
}
inline void MfLocalPoseMsg::set_allocated_local_frame_ref_in_ecef(::xpilot::sr2_0::proto::Pose6DOF* local_frame_ref_in_ecef) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_frame_ref_in_ecef_);
  }
  if (local_frame_ref_in_ecef) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_frame_ref_in_ecef)->GetArena();
    if (message_arena != submessage_arena) {
      local_frame_ref_in_ecef = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_frame_ref_in_ecef, submessage_arena);
    }
    
  } else {
    
  }
  local_frame_ref_in_ecef_ = local_frame_ref_in_ecef;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.local_frame_ref_in_ecef)
}

// uint64 last_mf_time = 4;
inline void MfLocalPoseMsg::clear_last_mf_time() {
  last_mf_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MfLocalPoseMsg::_internal_last_mf_time() const {
  return last_mf_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MfLocalPoseMsg::last_mf_time() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.last_mf_time)
  return _internal_last_mf_time();
}
inline void MfLocalPoseMsg::_internal_set_last_mf_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_mf_time_ = value;
}
inline void MfLocalPoseMsg::set_last_mf_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_mf_time(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.MfLocalPoseMsg.last_mf_time)
}

// uint32 fusion_status = 5;
inline void MfLocalPoseMsg::clear_fusion_status() {
  fusion_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MfLocalPoseMsg::_internal_fusion_status() const {
  return fusion_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MfLocalPoseMsg::fusion_status() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.fusion_status)
  return _internal_fusion_status();
}
inline void MfLocalPoseMsg::_internal_set_fusion_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fusion_status_ = value;
}
inline void MfLocalPoseMsg::set_fusion_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fusion_status(value);
  // @@protoc_insertion_point(field_set:xpilot.sr2_0.proto.MfLocalPoseMsg.fusion_status)
}

// .xpilot.sr2_0.proto.LocalPoseInfo mf_dop_pose = 6;
inline bool MfLocalPoseMsg::_internal_has_mf_dop_pose() const {
  return this != internal_default_instance() && mf_dop_pose_ != nullptr;
}
inline bool MfLocalPoseMsg::has_mf_dop_pose() const {
  return _internal_has_mf_dop_pose();
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfo& MfLocalPoseMsg::_internal_mf_dop_pose() const {
  const ::xpilot::sr2_0::proto::LocalPoseInfo* p = mf_dop_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LocalPoseInfo*>(
      &::xpilot::sr2_0::proto::_LocalPoseInfo_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfo& MfLocalPoseMsg::mf_dop_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dop_pose)
  return _internal_mf_dop_pose();
}
inline void MfLocalPoseMsg::unsafe_arena_set_allocated_mf_dop_pose(
    ::xpilot::sr2_0::proto::LocalPoseInfo* mf_dop_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_dop_pose_);
  }
  mf_dop_pose_ = mf_dop_pose;
  if (mf_dop_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dop_pose)
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::release_mf_dop_pose() {
  auto temp = unsafe_arena_release_mf_dop_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::unsafe_arena_release_mf_dop_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dop_pose)
  
  ::xpilot::sr2_0::proto::LocalPoseInfo* temp = mf_dop_pose_;
  mf_dop_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::_internal_mutable_mf_dop_pose() {
  
  if (mf_dop_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseInfo>(GetArena());
    mf_dop_pose_ = p;
  }
  return mf_dop_pose_;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::mutable_mf_dop_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dop_pose)
  return _internal_mutable_mf_dop_pose();
}
inline void MfLocalPoseMsg::set_allocated_mf_dop_pose(::xpilot::sr2_0::proto::LocalPoseInfo* mf_dop_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_dop_pose_);
  }
  if (mf_dop_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_dop_pose)->GetArena();
    if (message_arena != submessage_arena) {
      mf_dop_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mf_dop_pose, submessage_arena);
    }
    
  } else {
    
  }
  mf_dop_pose_ = mf_dop_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dop_pose)
}

// .xpilot.sr2_0.proto.LocalPoseInfo mf_dom_pose = 7;
inline bool MfLocalPoseMsg::_internal_has_mf_dom_pose() const {
  return this != internal_default_instance() && mf_dom_pose_ != nullptr;
}
inline bool MfLocalPoseMsg::has_mf_dom_pose() const {
  return _internal_has_mf_dom_pose();
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfo& MfLocalPoseMsg::_internal_mf_dom_pose() const {
  const ::xpilot::sr2_0::proto::LocalPoseInfo* p = mf_dom_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xpilot::sr2_0::proto::LocalPoseInfo*>(
      &::xpilot::sr2_0::proto::_LocalPoseInfo_default_instance_);
}
inline const ::xpilot::sr2_0::proto::LocalPoseInfo& MfLocalPoseMsg::mf_dom_pose() const {
  // @@protoc_insertion_point(field_get:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dom_pose)
  return _internal_mf_dom_pose();
}
inline void MfLocalPoseMsg::unsafe_arena_set_allocated_mf_dom_pose(
    ::xpilot::sr2_0::proto::LocalPoseInfo* mf_dom_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_dom_pose_);
  }
  mf_dom_pose_ = mf_dom_pose;
  if (mf_dom_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dom_pose)
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::release_mf_dom_pose() {
  auto temp = unsafe_arena_release_mf_dom_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::unsafe_arena_release_mf_dom_pose() {
  // @@protoc_insertion_point(field_release:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dom_pose)
  
  ::xpilot::sr2_0::proto::LocalPoseInfo* temp = mf_dom_pose_;
  mf_dom_pose_ = nullptr;
  return temp;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::_internal_mutable_mf_dom_pose() {
  
  if (mf_dom_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::sr2_0::proto::LocalPoseInfo>(GetArena());
    mf_dom_pose_ = p;
  }
  return mf_dom_pose_;
}
inline ::xpilot::sr2_0::proto::LocalPoseInfo* MfLocalPoseMsg::mutable_mf_dom_pose() {
  // @@protoc_insertion_point(field_mutable:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dom_pose)
  return _internal_mutable_mf_dom_pose();
}
inline void MfLocalPoseMsg::set_allocated_mf_dom_pose(::xpilot::sr2_0::proto::LocalPoseInfo* mf_dom_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_dom_pose_);
  }
  if (mf_dom_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mf_dom_pose)->GetArena();
    if (message_arena != submessage_arena) {
      mf_dom_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mf_dom_pose, submessage_arena);
    }
    
  } else {
    
  }
  mf_dom_pose_ = mf_dom_pose;
  // @@protoc_insertion_point(field_set_allocated:xpilot.sr2_0.proto.MfLocalPoseMsg.mf_dom_pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sr2_0
}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mf_5flocalpose_2fMfLocalPose_2eproto
